{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/ml/conditional_links/ml_host_conditional_container.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/ml/conditional_links/ml_host_conditional_container.js","mtime":1585205047484},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk1sSG9zdENvbmRpdGlvbmFsQ29udGFpbmVyID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3JlYWN0Um91dGVyRG9tID0gcmVxdWlyZSgicmVhY3Qtcm91dGVyLWRvbSIpOwoKdmFyIF9xdWVyeV9zdHJpbmcgPSByZXF1aXJlKCJ1aS91dGlscy9xdWVyeV9zdHJpbmciKTsKCnZhciBfYWRkX2VudGl0aWVzX3RvX2txbCA9IHJlcXVpcmUoIi4vYWRkX2VudGl0aWVzX3RvX2txbCIpOwoKdmFyIF9yZXBsYWNlX2txbF9wYXJ0cyA9IHJlcXVpcmUoIi4vcmVwbGFjZV9rcWxfcGFydHMiKTsKCnZhciBfZW50aXR5X2hlbHBlcnMgPSByZXF1aXJlKCIuL2VudGl0eV9oZWxwZXJzIik7Cgp2YXIgX3R5cGVzID0gcmVxdWlyZSgiLi4vLi4vLi4vcGFnZXMvaG9tZS90eXBlcyIpOwoKdmFyIF9tb2RlbCA9IHJlcXVpcmUoIi4uLy4uLy4uL3N0b3JlL2hvc3RzL21vZGVsIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9Ci8qCiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUKICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLgogKi8KCgp2YXIgTWxIb3N0Q29uZGl0aW9uYWxDb250YWluZXIgPSBfcmVhY3QuZGVmYXVsdC5tZW1vKGZ1bmN0aW9uIChfcmVmKSB7CiAgdmFyIHVybCA9IF9yZWYudXJsOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlckRvbS5Td2l0Y2gsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyRG9tLlJvdXRlLCB7CiAgICBzdHJpY3Q6IHRydWUsCiAgICBleGFjdDogdHJ1ZSwKICAgIHBhdGg6IHVybCwKICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKF9yZWYyKSB7CiAgICAgIHZhciBsb2NhdGlvbiA9IF9yZWYyLmxvY2F0aW9uOwoKICAgICAgdmFyIHF1ZXJ5U3RyaW5nRGVjb2RlZCA9IF9xdWVyeV9zdHJpbmcuUXVlcnlTdHJpbmcuZGVjb2RlKGxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSkpOwoKICAgICAgaWYgKHF1ZXJ5U3RyaW5nRGVjb2RlZC5xdWVyeSAhPSBudWxsKSB7CiAgICAgICAgcXVlcnlTdHJpbmdEZWNvZGVkLnF1ZXJ5ID0gKDAsIF9yZXBsYWNlX2txbF9wYXJ0cy5yZXBsYWNlS1FMUGFydHMpKHF1ZXJ5U3RyaW5nRGVjb2RlZC5xdWVyeSk7CiAgICAgIH0KCiAgICAgIHZhciByZUVuY29kZWQgPSBfcXVlcnlfc3RyaW5nLlF1ZXJ5U3RyaW5nLmVuY29kZShxdWVyeVN0cmluZ0RlY29kZWQpOwoKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyRG9tLlJlZGlyZWN0LCB7CiAgICAgICAgdG86ICIvIi5jb25jYXQoX3R5cGVzLlNpZW1QYWdlTmFtZS5ob3N0cywgIj8iKS5jb25jYXQocmVFbmNvZGVkKQogICAgICB9KTsKICAgIH0KICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSb3V0ZXJEb20uUm91dGUsIHsKICAgIHBhdGg6ICIiLmNvbmNhdCh1cmwsICIvOmhvc3ROYW1lIiksCiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihfcmVmMykgewogICAgICB2YXIgbG9jYXRpb24gPSBfcmVmMy5sb2NhdGlvbiwKICAgICAgICAgIGhvc3ROYW1lID0gX3JlZjMubWF0Y2gucGFyYW1zLmhvc3ROYW1lOwoKICAgICAgdmFyIHF1ZXJ5U3RyaW5nRGVjb2RlZCA9IF9xdWVyeV9zdHJpbmcuUXVlcnlTdHJpbmcuZGVjb2RlKGxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSkpOwoKICAgICAgaWYgKHF1ZXJ5U3RyaW5nRGVjb2RlZC5xdWVyeSAhPSBudWxsKSB7CiAgICAgICAgcXVlcnlTdHJpbmdEZWNvZGVkLnF1ZXJ5ID0gKDAsIF9yZXBsYWNlX2txbF9wYXJ0cy5yZXBsYWNlS1FMUGFydHMpKHF1ZXJ5U3RyaW5nRGVjb2RlZC5xdWVyeSk7CiAgICAgIH0KCiAgICAgIGlmICgoMCwgX2VudGl0eV9oZWxwZXJzLmVtcHR5RW50aXR5KShob3N0TmFtZSkpIHsKICAgICAgICB2YXIgcmVFbmNvZGVkID0gX3F1ZXJ5X3N0cmluZy5RdWVyeVN0cmluZy5lbmNvZGUocXVlcnlTdHJpbmdEZWNvZGVkKTsKCiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyRG9tLlJlZGlyZWN0LCB7CiAgICAgICAgICB0bzogIi8iLmNvbmNhdChfdHlwZXMuU2llbVBhZ2VOYW1lLmhvc3RzLCAiLyIpLmNvbmNhdChfbW9kZWwuSG9zdHNUYWJsZVR5cGUuYW5vbWFsaWVzLCAiPyIpLmNvbmNhdChyZUVuY29kZWQpCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAoKDAsIF9lbnRpdHlfaGVscGVycy5tdWx0aXBsZUVudGl0aWVzKShob3N0TmFtZSkpIHsKICAgICAgICB2YXIgaG9zdHMgPSAoMCwgX2VudGl0eV9oZWxwZXJzLmdldE11bHRpcGxlRW50aXRpZXMpKGhvc3ROYW1lKTsKICAgICAgICBxdWVyeVN0cmluZ0RlY29kZWQucXVlcnkgPSAoMCwgX2FkZF9lbnRpdGllc190b19rcWwuYWRkRW50aXRpZXNUb0txbCkoWydob3N0Lm5hbWUnXSwgaG9zdHMsIHF1ZXJ5U3RyaW5nRGVjb2RlZC5xdWVyeSB8fCAnJyk7CgogICAgICAgIHZhciBfcmVFbmNvZGVkID0gX3F1ZXJ5X3N0cmluZy5RdWVyeVN0cmluZy5lbmNvZGUocXVlcnlTdHJpbmdEZWNvZGVkKTsKCiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyRG9tLlJlZGlyZWN0LCB7CiAgICAgICAgICB0bzogIi8iLmNvbmNhdChfdHlwZXMuU2llbVBhZ2VOYW1lLmhvc3RzLCAiLyIpLmNvbmNhdChfbW9kZWwuSG9zdHNUYWJsZVR5cGUuYW5vbWFsaWVzLCAiPyIpLmNvbmNhdChfcmVFbmNvZGVkKQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBfcmVFbmNvZGVkMiA9IF9xdWVyeV9zdHJpbmcuUXVlcnlTdHJpbmcuZW5jb2RlKHF1ZXJ5U3RyaW5nRGVjb2RlZCk7CgogICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlckRvbS5SZWRpcmVjdCwgewogICAgICAgICAgdG86ICIvIi5jb25jYXQoX3R5cGVzLlNpZW1QYWdlTmFtZS5ob3N0cywgIi8iKS5jb25jYXQoaG9zdE5hbWUsICIvIikuY29uY2F0KF9tb2RlbC5Ib3N0c1RhYmxlVHlwZS5hbm9tYWxpZXMsICI/IikuY29uY2F0KF9yZUVuY29kZWQyKQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyRG9tLlJvdXRlLCB7CiAgICBwYXRoOiAiL21sLWhvc3RzLyIsCiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihfcmVmNCkgewogICAgICB2YXIgX3JlZjQkbG9jYXRpb24kc2VhcmNoID0gX3JlZjQubG9jYXRpb24uc2VhcmNoLAogICAgICAgICAgc2VhcmNoID0gX3JlZjQkbG9jYXRpb24kc2VhcmNoID09PSB2b2lkIDAgPyAnJyA6IF9yZWY0JGxvY2F0aW9uJHNlYXJjaDsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyRG9tLlJlZGlyZWN0LCB7CiAgICAgICAgZnJvbTogIi9tbC1ob3N0cy8iLAogICAgICAgIHRvOiAiL21sLWhvc3RzIi5jb25jYXQoc2VhcmNoKQogICAgICB9KTsKICAgIH0KICB9KSk7Cn0pOwoKZXhwb3J0cy5NbEhvc3RDb25kaXRpb25hbENvbnRhaW5lciA9IE1sSG9zdENvbmRpdGlvbmFsQ29udGFpbmVyOwpNbEhvc3RDb25kaXRpb25hbENvbnRhaW5lci5kaXNwbGF5TmFtZSA9ICdNbEhvc3RDb25kaXRpb25hbENvbnRhaW5lcic7"},null]}