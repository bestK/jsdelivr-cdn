{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/recent_timelines/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/recent_timelines/index.js","mtime":1585205047643},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlN0YXRlZnVsUmVjZW50VGltZWxpbmVzID0gdm9pZCAwOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcmVhY3RSZWR1eCA9IHJlcXVpcmUoInJlYWN0LXJlZHV4Iik7Cgp2YXIgX2FsbCA9IHJlcXVpcmUoIi4uLy4uL2NvbnRhaW5lcnMvdGltZWxpbmUvYWxsIik7Cgp2YXIgX3R5cGVzID0gcmVxdWlyZSgiLi4vLi4vZ3JhcGhxbC90eXBlcyIpOwoKdmFyIF9oZWxwZXJzID0gcmVxdWlyZSgiLi4vb3Blbl90aW1lbGluZS9oZWxwZXJzIik7Cgp2YXIgX2xvYWRpbmdfcGxhY2Vob2xkZXJzID0gcmVxdWlyZSgiLi4vcGFnZS9vdmVydmlldy9sb2FkaW5nX3BsYWNlaG9sZGVycyIpOwoKdmFyIF9hY3Rpb25zID0gcmVxdWlyZSgiLi4vLi4vc3RvcmUvdGltZWxpbmUvYWN0aW9ucyIpOwoKdmFyIF9yZWNlbnRfdGltZWxpbmVzID0gcmVxdWlyZSgiLi9yZWNlbnRfdGltZWxpbmVzIik7Cgp2YXIgaTE4biA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoIi4vdHJhbnNsYXRpb25zIikpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9Ci8qCiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUKICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLgogKi8KCgp2YXIgU3RhdGVmdWxSZWNlbnRUaW1lbGluZXNDb21wb25lbnQgPSBfcmVhY3QuZGVmYXVsdC5tZW1vKGZ1bmN0aW9uIChfcmVmKSB7CiAgdmFyIGFwb2xsb0NsaWVudCA9IF9yZWYuYXBvbGxvQ2xpZW50LAogICAgICBmaWx0ZXJCeSA9IF9yZWYuZmlsdGVyQnksCiAgICAgIHVwZGF0ZUlzTG9hZGluZyA9IF9yZWYudXBkYXRlSXNMb2FkaW5nLAogICAgICB1cGRhdGVUaW1lbGluZSA9IF9yZWYudXBkYXRlVGltZWxpbmU7CiAgdmFyIGFjdGlvbkRpc3BhdGNoZXIgPSB1cGRhdGVJc0xvYWRpbmc7CiAgdmFyIG9uT3BlblRpbWVsaW5lID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKF9yZWYyKSB7CiAgICB2YXIgZHVwbGljYXRlID0gX3JlZjIuZHVwbGljYXRlLAogICAgICAgIHRpbWVsaW5lSWQgPSBfcmVmMi50aW1lbGluZUlkOwogICAgKDAsIF9oZWxwZXJzLnF1ZXJ5VGltZWxpbmVCeUlkKSh7CiAgICAgIGFwb2xsb0NsaWVudDogYXBvbGxvQ2xpZW50LAogICAgICBkdXBsaWNhdGU6IGR1cGxpY2F0ZSwKICAgICAgdGltZWxpbmVJZDogdGltZWxpbmVJZCwKICAgICAgdXBkYXRlSXNMb2FkaW5nOiBhY3Rpb25EaXNwYXRjaGVyLAogICAgICB1cGRhdGVUaW1lbGluZTogdXBkYXRlVGltZWxpbmUKICAgIH0pOwogIH0sIFthcG9sbG9DbGllbnQsIHVwZGF0ZUlzTG9hZGluZywgdXBkYXRlVGltZWxpbmVdKTsKICB2YXIgbm9UaW1lbGluZXNNZXNzYWdlID0gZmlsdGVyQnkgPT09ICdmYXZvcml0ZXMnID8gaTE4bi5OT19GQVZPUklURV9USU1FTElORVMgOiBpMThuLk5PX1RJTUVMSU5FUzsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfYWxsLkFsbFRpbWVsaW5lc1F1ZXJ5LCB7CiAgICBwYWdlSW5mbzogewogICAgICBwYWdlSW5kZXg6IDEsCiAgICAgIHBhZ2VTaXplOiA1CiAgICB9LAogICAgc2VhcmNoOiAnJywKICAgIHNvcnQ6IHsKICAgICAgc29ydEZpZWxkOiBfdHlwZXMuU29ydEZpZWxkVGltZWxpbmUudXBkYXRlZCwKICAgICAgc29ydE9yZGVyOiBfdHlwZXMuRGlyZWN0aW9uLmRlc2MKICAgIH0sCiAgICBvbmx5VXNlckZhdm9yaXRlOiBmaWx0ZXJCeSA9PT0gJ2Zhdm9yaXRlcycKICB9LCBmdW5jdGlvbiAoX3JlZjMpIHsKICAgIHZhciB0aW1lbGluZXMgPSBfcmVmMy50aW1lbGluZXMsCiAgICAgICAgbG9hZGluZyA9IF9yZWYzLmxvYWRpbmc7CiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgbG9hZGluZyA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2xvYWRpbmdfcGxhY2Vob2xkZXJzLkxvYWRpbmdQbGFjZWhvbGRlcnMsIHsKICAgICAgbGluZXM6IDIsCiAgICAgIHBsYWNlaG9sZGVyczogZmlsdGVyQnkgPT09ICdmYXZvcml0ZXMnID8gMSA6IDUKICAgIH0pIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVjZW50X3RpbWVsaW5lcy5SZWNlbnRUaW1lbGluZXMsIHsKICAgICAgbm9UaW1lbGluZXNNZXNzYWdlOiBub1RpbWVsaW5lc01lc3NhZ2UsCiAgICAgIG9uT3BlblRpbWVsaW5lOiBvbk9wZW5UaW1lbGluZSwKICAgICAgdGltZWxpbmVzOiB0aW1lbGluZXMKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSG9yaXpvbnRhbFJ1bGUsIHsKICAgICAgbWFyZ2luOiAicyIKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgICBzaXplOiAieHMiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICBocmVmOiAiIy9saW5rLXRvL3RpbWVsaW5lcyIKICAgIH0sIGkxOG4uVklFV19BTExfVElNRUxJTkVTKSkpOwogIH0pOwp9KTsKClN0YXRlZnVsUmVjZW50VGltZWxpbmVzQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ1N0YXRlZnVsUmVjZW50VGltZWxpbmVzQ29tcG9uZW50JzsKCnZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBmdW5jdGlvbiBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gpIHsKICByZXR1cm4gewogICAgdXBkYXRlSXNMb2FkaW5nOiBmdW5jdGlvbiB1cGRhdGVJc0xvYWRpbmcoX3JlZjQpIHsKICAgICAgdmFyIGlkID0gX3JlZjQuaWQsCiAgICAgICAgICBpc0xvYWRpbmcgPSBfcmVmNC5pc0xvYWRpbmc7CiAgICAgIHJldHVybiBkaXNwYXRjaCgoMCwgX2FjdGlvbnMudXBkYXRlSXNMb2FkaW5nKSh7CiAgICAgICAgaWQ6IGlkLAogICAgICAgIGlzTG9hZGluZzogaXNMb2FkaW5nCiAgICAgIH0pKTsKICAgIH0sCiAgICB1cGRhdGVUaW1lbGluZTogKDAsIF9oZWxwZXJzLmRpc3BhdGNoVXBkYXRlVGltZWxpbmUpKGRpc3BhdGNoKQogIH07Cn07Cgp2YXIgU3RhdGVmdWxSZWNlbnRUaW1lbGluZXMgPSAoMCwgX3JlYWN0UmVkdXguY29ubmVjdCkobnVsbCwgbWFwRGlzcGF0Y2hUb1Byb3BzKShTdGF0ZWZ1bFJlY2VudFRpbWVsaW5lc0NvbXBvbmVudCk7CmV4cG9ydHMuU3RhdGVmdWxSZWNlbnRUaW1lbGluZXMgPSBTdGF0ZWZ1bFJlY2VudFRpbWVsaW5lczs="},null]}