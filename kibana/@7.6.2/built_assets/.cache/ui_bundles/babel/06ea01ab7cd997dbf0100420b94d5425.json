{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/watcher/public/np_ready/application/sections/watch_list/components/watch_list.js","dependencies":[{"path":"x-pack/legacy/plugins/watcher/public/np_ready/application/sections/watch_list/components/watch_list.js","mtime":1585205048907},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLldhdGNoTGlzdCA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uL2NvbW1vbi9jb25zdGFudHMiKTsKCnZhciBfYnJlYWRjcnVtYnMgPSByZXF1aXJlKCIuLi8uLi8uLi9saWIvYnJlYWRjcnVtYnMiKTsKCnZhciBfY29tcG9uZW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbXBvbmVudHMiKTsKCnZhciBfYXBpID0gcmVxdWlyZSgiLi4vLi4vLi4vbGliL2FwaSIpOwoKdmFyIF9uYXZpZ2F0aW9uID0gcmVxdWlyZSgiLi4vLi4vLi4vbGliL25hdmlnYXRpb24iKTsKCnZhciBfYXBwX2NvbnRleHQgPSByZXF1aXJlKCIuLi8uLi8uLi9hcHBfY29udGV4dCIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgYXJyMltpXSA9IGFycltpXTsKICAgIH0KCiAgICByZXR1cm4gYXJyMjsKICB9Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KCnZhciBXYXRjaExpc3QgPSBmdW5jdGlvbiBXYXRjaExpc3QoKSB7CiAgLy8gaG9va3MKICB2YXIgX3VzZUFwcENvbnRleHQgPSAoMCwgX2FwcF9jb250ZXh0LnVzZUFwcENvbnRleHQpKCksCiAgICAgIGNocm9tZSA9IF91c2VBcHBDb250ZXh0LmNocm9tZSwKICAgICAgTUFOQUdFTUVOVF9CUkVBRENSVU1CID0gX3VzZUFwcENvbnRleHQubGVnYWN5Lk1BTkFHRU1FTlRfQlJFQURDUlVNQiwKICAgICAgd2F0Y2hlckdldHRpbmdTdGFydGVkVXJsID0gX3VzZUFwcENvbnRleHQubGlua3Mud2F0Y2hlckdldHRpbmdTdGFydGVkVXJsOwoKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoW10pLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgc2VsZWN0aW9uID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0U2VsZWN0aW9uID0gX3VzZVN0YXRlMlsxXTsKCiAgdmFyIF91c2VTdGF0ZTMgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShbXSksCiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgd2F0Y2hlc1RvRGVsZXRlID0gX3VzZVN0YXRlNFswXSwKICAgICAgc2V0V2F0Y2hlc1RvRGVsZXRlID0gX3VzZVN0YXRlNFsxXTsgLy8gRmlsdGVyIG91dCBkZWxldGVkIHdhdGNoZXMgb24gdGhlIGNsaWVudCwgYmVjYXVzZSB0aGUgQVBJIHdpbGwgcmV0dXJuIDIwMCBldmVuIHRob3VnaCBzb21lIHdhdGNoZXMKICAvLyBtYXkgbm90IHJlYWxseSBiZSBkZWxldGVkIHVudGlsIGFmdGVyIHRoZXkncmUgZG9uZSBmaXJpbmcgYW5kIHRoaXMgY291bGQgdGFrZSBzb21lIHRpbWUuCgoKICB2YXIgX3VzZVN0YXRlNSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKFtdKSwKICAgICAgX3VzZVN0YXRlNiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTUsIDIpLAogICAgICBkZWxldGVkV2F0Y2hlcyA9IF91c2VTdGF0ZTZbMF0sCiAgICAgIHNldERlbGV0ZWRXYXRjaGVzID0gX3VzZVN0YXRlNlsxXTsKCiAgKDAsIF9yZWFjdC51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHsKICAgIGNocm9tZS5zZXRCcmVhZGNydW1icyhbTUFOQUdFTUVOVF9CUkVBRENSVU1CLCBfYnJlYWRjcnVtYnMubGlzdEJyZWFkY3J1bWJdKTsKICB9LCBbY2hyb21lLCBNQU5BR0VNRU5UX0JSRUFEQ1JVTUJdKTsKCiAgdmFyIF91c2VMb2FkV2F0Y2hlcyA9ICgwLCBfYXBpLnVzZUxvYWRXYXRjaGVzKShfY29uc3RhbnRzLlJFRlJFU0hfSU5URVJWQUxTLldBVENIX0xJU1QpLAogICAgICBpc1dhdGNoZXNMb2FkaW5nID0gX3VzZUxvYWRXYXRjaGVzLmlzTG9hZGluZywKICAgICAgd2F0Y2hlcyA9IF91c2VMb2FkV2F0Y2hlcy5kYXRhLAogICAgICBlcnJvciA9IF91c2VMb2FkV2F0Y2hlcy5lcnJvcjsKCiAgdmFyIF91c2VTdGF0ZTcgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShmYWxzZSksCiAgICAgIF91c2VTdGF0ZTggPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGU3LCAyKSwKICAgICAgaXNQb3BvdmVyT3BlbiA9IF91c2VTdGF0ZThbMF0sCiAgICAgIHNldElzUG9wT3Zlck9wZW4gPSBfdXNlU3RhdGU4WzFdOwoKICB2YXIgYXZhaWxhYmxlV2F0Y2hlcyA9ICgwLCBfcmVhY3QudXNlTWVtbykoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHdhdGNoZXMgPyB3YXRjaGVzLmZpbHRlcihmdW5jdGlvbiAod2F0Y2gpIHsKICAgICAgcmV0dXJuICFkZWxldGVkV2F0Y2hlcy5pbmNsdWRlcyh3YXRjaC5pZCk7CiAgICB9KSA6IHVuZGVmaW5lZDsKICB9LCBbd2F0Y2hlcywgZGVsZXRlZFdhdGNoZXNdKTsKCiAgdmFyIHdhdGNoZXJEZXNjcmlwdGlvblRleHQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgaWQ6ICJ4cGFjay53YXRjaGVyLnNlY3Rpb25zLndhdGNoTGlzdC5zdWJoZWFkIiwKICAgIGRlZmF1bHRNZXNzYWdlOiAiV2F0Y2ggZm9yIGNoYW5nZXMgb3IgYW5vbWFsaWVzIGluIHlvdXIgZGF0YSBhbmQgdGFrZSBhY3Rpb24gaWYgbmVlZGVkLiIKICB9KTsKCiAgdmFyIGNyZWF0ZVdhdGNoQ29udGV4dE1lbnUgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUG9wb3ZlciwgewogICAgaWQ6ICJjcmVhdGVXYXRjaFBhbmVsIiwKICAgIGJ1dHRvbjogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbiwgewogICAgICBmaWxsOiB0cnVlLAogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiY3JlYXRlV2F0Y2hCdXR0b24iLAogICAgICBpY29uVHlwZTogImFycm93RG93biIsCiAgICAgIGljb25TaWRlOiAicmlnaHQiLAogICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgIHJldHVybiBzZXRJc1BvcE92ZXJPcGVuKCFpc1BvcG92ZXJPcGVuKTsKICAgICAgfQogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay53YXRjaGVyLnNlY3Rpb25zLndhdGNoTGlzdC5jcmVhdGVXYXRjaEJ1dHRvbkxhYmVsIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJDcmVhdGUiCiAgICB9KSksCiAgICBpc09wZW46IGlzUG9wb3Zlck9wZW4sCiAgICBjbG9zZVBvcG92ZXI6IGZ1bmN0aW9uIGNsb3NlUG9wb3ZlcigpIHsKICAgICAgcmV0dXJuIHNldElzUG9wT3Zlck9wZW4oZmFsc2UpOwogICAgfSwKICAgIHBhbmVsUGFkZGluZ1NpemU6ICJub25lIiwKICAgIGFuY2hvclBvc2l0aW9uOiAiZG93bkNlbnRlciIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ29udGV4dE1lbnVQYW5lbCwgewogICAgaXRlbXM6IFtfY29uc3RhbnRzLldBVENIX1RZUEVTLlRIUkVTSE9MRCwgX2NvbnN0YW50cy5XQVRDSF9UWVBFUy5KU09OXS5tYXAoZnVuY3Rpb24gKHdhdGNoVHlwZSkgewogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbnRleHRNZW51SXRlbSwgewogICAgICAgIGtleTogd2F0Y2hUeXBlLAogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICIiLmNvbmNhdCh3YXRjaFR5cGUsICJXYXRjaENyZWF0ZUxpbmsiKSwKICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgc2V0SXNQb3BPdmVyT3BlbihmYWxzZSk7CiAgICAgICAgICB2YXIgbmF2aWdhdGUgPSB3YXRjaFR5cGUgPT09IF9jb25zdGFudHMuV0FUQ0hfVFlQRVMuVEhSRVNIT0xEID8gX25hdmlnYXRpb24uZ29Ub0NyZWF0ZVRocmVzaG9sZEFsZXJ0IDogX25hdmlnYXRpb24uZ29Ub0NyZWF0ZUFkdmFuY2VkV2F0Y2g7CiAgICAgICAgICBuYXZpZ2F0ZSgpOwogICAgICAgIH0KICAgICAgfSwgd2F0Y2hUeXBlID09PSBfY29uc3RhbnRzLldBVENIX1RZUEVTLlRIUkVTSE9MRCA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgICAgIHNpemU6ICJtIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLndhdGNoZXIuc2VjdGlvbnMud2F0Y2hMaXN0LmNyZWF0ZVRocmVzaG9sZEFsZXJ0QnV0dG9uTGFiZWwiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQ3JlYXRlIHRocmVzaG9sZCBhbGVydCIKICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIHsKICAgICAgICBzaXplOiAicyIsCiAgICAgICAgY29sb3I6ICJzdWJkdWVkIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLndhdGNoZXIuc2VjdGlvbnMud2F0Y2hMaXN0LmNyZWF0ZVRocmVzaG9sZEFsZXJ0QnV0dG9uVG9vbHRpcCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJTZW5kIGFuIGFsZXJ0IG9uIGEgc3BlY2lmaWVkIGNvbmRpdGlvbi4iCiAgICAgIH0pKSkpIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCB7CiAgICAgICAgc2l6ZTogIm0iCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2sud2F0Y2hlci5zZWN0aW9ucy53YXRjaExpc3QuY3JlYXRlQWR2YW5jZWRXYXRjaEJ1dHRvbkxhYmVsIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkNyZWF0ZSBhZHZhbmNlZCB3YXRjaCIKICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIHsKICAgICAgICBzaXplOiAicyIsCiAgICAgICAgY29sb3I6ICJzdWJkdWVkIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLndhdGNoZXIuc2VjdGlvbnMud2F0Y2hMaXN0LmNyZWF0ZUFkdmFuY2VkV2F0Y2hUb29sdGlwIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlNldCB1cCBhIGN1c3RvbSB3YXRjaCBpbiBKU09OLiIKICAgICAgfSkpKSkpOwogICAgfSkKICB9KSk7CgogIGlmIChpc1dhdGNoZXNMb2FkaW5nKSB7CiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tcG9uZW50cy5TZWN0aW9uTG9hZGluZywgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay53YXRjaGVyLnNlY3Rpb25zLndhdGNoTGlzdC5sb2FkaW5nV2F0Y2hlc0Rlc2NyaXB0aW9uIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJMb2FkaW5nIHdhdGNoZXNcdTIwMjYiCiAgICB9KSk7CiAgfQoKICBpZiAoKDAsIF9jb21wb25lbnRzLmdldFBhZ2VFcnJvckNvZGUpKGVycm9yKSkgewogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYWdlQ29udGVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tcG9uZW50cy5QYWdlRXJyb3IsIG51bGwpKTsKICB9CgogIGlmIChhdmFpbGFibGVXYXRjaGVzICYmIGF2YWlsYWJsZVdhdGNoZXMubGVuZ3RoID09PSAwKSB7CiAgICB2YXIgZW1wdHlQcm9tcHRCb2R5ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIHsKICAgICAgY29sb3I6ICJzdWJkdWVkIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIHdhdGNoZXJEZXNjcmlwdGlvblRleHQsICcgJywgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgaHJlZjogd2F0Y2hlckdldHRpbmdTdGFydGVkVXJsLAogICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLndhdGNoZXIuc2VjdGlvbnMud2F0Y2hMaXN0LndhdGNoZXJMZWFybk1vcmVMaW5rVGV4dCIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTGVhcm4gbW9yZS4iCiAgICB9KSkpKTsKCiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhZ2VDb250ZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRW1wdHlQcm9tcHQsIHsKICAgICAgaWNvblR5cGU6ICJtYW5hZ2VtZW50QXBwIiwKICAgICAgdGl0bGU6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgxIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLndhdGNoZXIuc2VjdGlvbnMud2F0Y2hMaXN0LmVtcHR5UHJvbXB0VGl0bGUiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiWW91IGRvblx1MjAxOXQgaGF2ZSBhbnkgd2F0Y2hlcyB5ZXQiCiAgICAgIH0pKSwKICAgICAgYm9keTogZW1wdHlQcm9tcHRCb2R5LAogICAgICBhY3Rpb25zOiBjcmVhdGVXYXRjaENvbnRleHRNZW51LAogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiZW1wdHlQcm9tcHQiCiAgICB9KSk7CiAgfQoKICB2YXIgY29udGVudDsKCiAgaWYgKGVycm9yKSB7CiAgICBjb250ZW50ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tcG9uZW50cy5TZWN0aW9uRXJyb3IsIHsKICAgICAgdGl0bGU6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay53YXRjaGVyLnNlY3Rpb25zLndhdGNoTGlzdC5lcnJvclRpdGxlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkVycm9yIGxvYWRpbmcgd2F0Y2hlcyIKICAgICAgfSksCiAgICAgIGVycm9yOiBlcnJvcgogICAgfSk7CiAgfSBlbHNlIGlmIChhdmFpbGFibGVXYXRjaGVzKSB7CiAgICB2YXIgY29sdW1ucyA9IFt7CiAgICAgIGZpZWxkOiAnaWQnLAogICAgICBuYW1lOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2sud2F0Y2hlci5zZWN0aW9ucy53YXRjaExpc3Qud2F0Y2hUYWJsZS5pZEhlYWRlcicsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0lEJwogICAgICB9KSwKICAgICAgc29ydGFibGU6IHRydWUsCiAgICAgIHRydW5jYXRlVGV4dDogdHJ1ZSwKICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaWQpIHsKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ3YXRjaElkQ29sdW1uLSIuY29uY2F0KGlkKSwKICAgICAgICAgIGhyZWY6ICIjL21hbmFnZW1lbnQvZWxhc3RpY3NlYXJjaC93YXRjaGVyL3dhdGNoZXMvd2F0Y2gvIi5jb25jYXQoaWQsICIvc3RhdHVzIikKICAgICAgICB9LCBpZCk7CiAgICAgIH0KICAgIH0sIHsKICAgICAgZmllbGQ6ICduYW1lJywKICAgICAgbmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLndhdGNoZXIuc2VjdGlvbnMud2F0Y2hMaXN0LndhdGNoVGFibGUubmFtZUhlYWRlcicsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ05hbWUnCiAgICAgIH0pLAogICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihuYW1lLCBpdGVtKSB7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCB7CiAgICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAid2F0Y2hOYW1lQ29sdW1uLSIuY29uY2F0KGl0ZW0uaWQpCiAgICAgICAgfSwgbmFtZSk7CiAgICAgIH0sCiAgICAgIHNvcnRhYmxlOiB0cnVlLAogICAgICB0cnVuY2F0ZVRleHQ6IHRydWUKICAgIH0sIHsKICAgICAgZmllbGQ6ICd3YXRjaFN0YXR1cy5zdGF0ZScsCiAgICAgIG5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay53YXRjaGVyLnNlY3Rpb25zLndhdGNoTGlzdC53YXRjaFRhYmxlLnN0YXRlSGVhZGVyJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU3RhdGUnCiAgICAgIH0pLAogICAgICBzb3J0YWJsZTogdHJ1ZSwKICAgICAgd2lkdGg6ICcxMzBweCcsCiAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHN0YXRlKSB7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudHMuV2F0Y2hTdGF0dXMsIHsKICAgICAgICAgIHN0YXR1czogc3RhdGUKICAgICAgICB9KTsKICAgICAgfQogICAgfSwgewogICAgICBmaWVsZDogJ3dhdGNoU3RhdHVzLmxhc3RNZXRDb25kaXRpb24nLAogICAgICBuYW1lOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2sud2F0Y2hlci5zZWN0aW9ucy53YXRjaExpc3Qud2F0Y2hUYWJsZS5sYXN0RmlyZWRIZWFkZXInLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdMYXN0IGZpcmVkJwogICAgICB9KSwKICAgICAgc29ydGFibGU6IHRydWUsCiAgICAgIHRydW5jYXRlVGV4dDogdHJ1ZSwKICAgICAgd2lkdGg6ICcxMzBweCcsCiAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGxhc3RNZXRDb25kaXRpb24pIHsKICAgICAgICByZXR1cm4gbGFzdE1ldENvbmRpdGlvbiA/IGxhc3RNZXRDb25kaXRpb24uZnJvbU5vdygpIDogbGFzdE1ldENvbmRpdGlvbjsKICAgICAgfQogICAgfSwgewogICAgICBmaWVsZDogJ3dhdGNoU3RhdHVzLmxhc3RDaGVja2VkJywKICAgICAgbmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLndhdGNoZXIuc2VjdGlvbnMud2F0Y2hMaXN0LndhdGNoVGFibGUubGFzdFRyaWdnZXJlZEhlYWRlcicsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0xhc3QgdHJpZ2dlcmVkJwogICAgICB9KSwKICAgICAgc29ydGFibGU6IHRydWUsCiAgICAgIHRydW5jYXRlVGV4dDogdHJ1ZSwKICAgICAgd2lkdGg6ICcxMzBweCcsCiAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGxhc3RDaGVja2VkKSB7CiAgICAgICAgcmV0dXJuIGxhc3RDaGVja2VkID8gbGFzdENoZWNrZWQuZnJvbU5vdygpIDogbGFzdENoZWNrZWQ7CiAgICAgIH0KICAgIH0sIHsKICAgICAgZmllbGQ6ICd3YXRjaFN0YXR1cy5jb21tZW50JywKICAgICAgbmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLndhdGNoZXIuc2VjdGlvbnMud2F0Y2hMaXN0LndhdGNoVGFibGUuY29tbWVudEhlYWRlcicsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0NvbW1lbnQnCiAgICAgIH0pLAogICAgICBzb3J0YWJsZTogdHJ1ZSwKICAgICAgdHJ1bmNhdGVUZXh0OiB0cnVlCiAgICB9LCB7CiAgICAgIG5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay53YXRjaGVyLnNlY3Rpb25zLndhdGNoTGlzdC53YXRjaFRhYmxlLmFjdGlvbkhlYWRlcicsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0FjdGlvbnMnCiAgICAgIH0pLAogICAgICB3aWR0aDogJzc1cHgnLAogICAgICBhY3Rpb25zOiBbewogICAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHdhdGNoKSB7CiAgICAgICAgICB2YXIgbGFiZWwgPSBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2sud2F0Y2hlci5zZWN0aW9ucy53YXRjaExpc3Qud2F0Y2hUYWJsZS5hY3Rpb25FZGl0VG9vbHRpcExhYmVsJywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0VkaXQnCiAgICAgICAgICB9KTsKCiAgICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRvb2xUaXAsIHsKICAgICAgICAgICAgY29udGVudDogbGFiZWwsCiAgICAgICAgICAgIGRlbGF5OiAibG9uZyIKICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25JY29uLCB7CiAgICAgICAgICAgIGlzRGlzYWJsZWQ6IHdhdGNoLmlzU3lzdGVtV2F0Y2gsCiAgICAgICAgICAgICJhcmlhLWxhYmVsIjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLndhdGNoZXIuc2VjdGlvbnMud2F0Y2hMaXN0LndhdGNoVGFibGUuYWN0aW9uRWRpdEFyaWFMYWJlbCcsIHsKICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkVkaXQgd2F0Y2ggJ3tuYW1lfSciLAogICAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgICAgbmFtZTogd2F0Y2gubmFtZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIGljb25UeXBlOiAicGVuY2lsIiwKICAgICAgICAgICAgY29sb3I6ICJwcmltYXJ5IiwKICAgICAgICAgICAgaHJlZjogIiMvbWFuYWdlbWVudC9lbGFzdGljc2VhcmNoL3dhdGNoZXIvd2F0Y2hlcy93YXRjaC8iLmNvbmNhdCh3YXRjaC5pZCwgIi9lZGl0IiksCiAgICAgICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJlZGl0V2F0Y2hCdXR0b24iCiAgICAgICAgICB9KSk7CiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIod2F0Y2gpIHsKICAgICAgICAgIHZhciBsYWJlbCA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay53YXRjaGVyLnNlY3Rpb25zLndhdGNoTGlzdC53YXRjaFRhYmxlLmFjdGlvbkRlbGV0ZVRvb2x0aXBMYWJlbCcsIHsKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdEZWxldGUnCiAgICAgICAgICB9KTsKCiAgICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRvb2xUaXAsIHsKICAgICAgICAgICAgY29udGVudDogbGFiZWwsCiAgICAgICAgICAgIGRlbGF5OiAibG9uZyIKICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25JY29uLCB7CiAgICAgICAgICAgIGlzRGlzYWJsZWQ6IHdhdGNoLmlzU3lzdGVtV2F0Y2gsCiAgICAgICAgICAgICJhcmlhLWxhYmVsIjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLndhdGNoZXIuc2VjdGlvbnMud2F0Y2hMaXN0LndhdGNoVGFibGUuYWN0aW9uRGVsZXRlQXJpYUxhYmVsJywgewogICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRGVsZXRlIHdhdGNoICd7bmFtZX0nIiwKICAgICAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgICAgIG5hbWU6IHdhdGNoLm5hbWUKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBpY29uVHlwZTogInRyYXNoIiwKICAgICAgICAgICAgY29sb3I6ICJkYW5nZXIiLAogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAgIHNldFdhdGNoZXNUb0RlbGV0ZShbd2F0Y2guaWRdKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogImRlbGV0ZVdhdGNoQnV0dG9uIgogICAgICAgICAgfSkpOwogICAgICAgIH0KICAgICAgfV0KICAgIH1dOwogICAgdmFyIHNlbGVjdGlvbkNvbmZpZyA9IHsKICAgICAgb25TZWxlY3Rpb25DaGFuZ2U6IHNldFNlbGVjdGlvbiwKICAgICAgc2VsZWN0YWJsZTogZnVuY3Rpb24gc2VsZWN0YWJsZSh3YXRjaCkgewogICAgICAgIHJldHVybiAhd2F0Y2guaXNTeXN0ZW1XYXRjaDsKICAgICAgfSwKICAgICAgc2VsZWN0YWJsZU1lc3NhZ2U6IGZ1bmN0aW9uIHNlbGVjdGFibGVNZXNzYWdlKHNlbGVjdGFibGUpIHsKICAgICAgICByZXR1cm4gIXNlbGVjdGFibGUgPyBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2sud2F0Y2hlci5zZWN0aW9ucy53YXRjaExpc3Qud2F0Y2hUYWJsZS5kaXNhYmxlZFdhdGNoVG9vbHRpcFRleHQnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1RoaXMgd2F0Y2ggaXMgcmVhZC1vbmx5JwogICAgICAgIH0pIDogJyc7CiAgICAgIH0KICAgIH07CiAgICB2YXIgc2VhcmNoQ29uZmlnID0gewogICAgICBib3g6IHsKICAgICAgICBpbmNyZW1lbnRhbDogdHJ1ZQogICAgICB9LAogICAgICB0b29sc0xlZnQ6IHNlbGVjdGlvbi5sZW5ndGggJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbiwgewogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJidG5EZWxldGVXYXRjaGVzIiwKICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgc2V0V2F0Y2hlc1RvRGVsZXRlKHNlbGVjdGlvbi5tYXAoZnVuY3Rpb24gKHNlbGVjdGVkKSB7CiAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZC5pZDsKICAgICAgICAgIH0pKTsKICAgICAgICB9LAogICAgICAgIGNvbG9yOiAiZGFuZ2VyIgogICAgICB9LCBzZWxlY3Rpb24ubGVuZ3RoID4gMSA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay53YXRjaGVyLnNlY3Rpb25zLndhdGNoTGlzdC5kZWxldGVNdWx0aXBsZVdhdGNoZXNCdXR0b25MYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJEZWxldGUgd2F0Y2hlcyIKICAgICAgfSkgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2sud2F0Y2hlci5zZWN0aW9ucy53YXRjaExpc3QuZGVsZXRlU2luZ2xlV2F0Y2hCdXR0b25MYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJEZWxldGUgd2F0Y2giCiAgICAgIH0pKSwKICAgICAgdG9vbHNSaWdodDogY3JlYXRlV2F0Y2hDb250ZXh0TWVudQogICAgfTsKICAgIGNvbnRlbnQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSW5NZW1vcnlUYWJsZSwgewogICAgICBpdGVtczogYXZhaWxhYmxlV2F0Y2hlcywKICAgICAgaXRlbUlkOiAiaWQiLAogICAgICBjb2x1bW5zOiBjb2x1bW5zLAogICAgICBzZWFyY2g6IHNlYXJjaENvbmZpZywKICAgICAgcGFnaW5hdGlvbjogX2NvbnN0YW50cy5QQUdJTkFUSU9OLAogICAgICBzb3J0aW5nOiB0cnVlLAogICAgICBzZWxlY3Rpb246IHNlbGVjdGlvbkNvbmZpZywKICAgICAgaXNTZWxlY3RhYmxlOiB0cnVlLAogICAgICBtZXNzYWdlOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2sud2F0Y2hlci5zZWN0aW9ucy53YXRjaExpc3Qud2F0Y2hUYWJsZS5ub1dhdGNoZXNNZXNzYWdlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIk5vIHdhdGNoZXMgdG8gc2hvdyIKICAgICAgfSksCiAgICAgIHJvd1Byb3BzOiBmdW5jdGlvbiByb3dQcm9wcygpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgJ2RhdGEtdGVzdC1zdWJqJzogJ3JvdycKICAgICAgICB9OwogICAgICB9LAogICAgICBjZWxsUHJvcHM6IGZ1bmN0aW9uIGNlbGxQcm9wcygpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgJ2RhdGEtdGVzdC1zdWJqJzogJ2NlbGwnCiAgICAgICAgfTsKICAgICAgfSwKICAgICAgImRhdGEtdGVzdC1zdWJqIjogIndhdGNoZXNUYWJsZSIKICAgIH0pOwogIH0KCiAgaWYgKGNvbnRlbnQpIHsKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUGFnZUNvbnRlbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudHMuRGVsZXRlV2F0Y2hlc01vZGFsLCB7CiAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiBjYWxsYmFjayhkZWxldGVkKSB7CiAgICAgICAgaWYgKGRlbGV0ZWQpIHsKICAgICAgICAgIHNldERlbGV0ZWRXYXRjaGVzKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoZGVsZXRlZFdhdGNoZXMpLCBfdG9Db25zdW1hYmxlQXJyYXkod2F0Y2hlc1RvRGVsZXRlKSkpOwogICAgICAgIH0KCiAgICAgICAgc2V0V2F0Y2hlc1RvRGVsZXRlKFtdKTsKICAgICAgfSwKICAgICAgd2F0Y2hlc1RvRGVsZXRlOiB3YXRjaGVzVG9EZWxldGUKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgc2l6ZTogImwiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgZ3JvdzogdHJ1ZQogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDEiLCB7CiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJhcHBUaXRsZSIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2sud2F0Y2hlci5zZWN0aW9ucy53YXRjaExpc3QuaGVhZGVyIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJXYXRjaGVyIgogICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIGdyb3c6IGZhbHNlCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uRW1wdHksIHsKICAgICAgaHJlZjogd2F0Y2hlckdldHRpbmdTdGFydGVkVXJsLAogICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICBpY29uVHlwZTogImhlbHAiLAogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiZG9jdW1lbnRhdGlvbkxpbmsiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLndhdGNoZXIuc2VjdGlvbnMud2F0Y2hMaXN0LndhdGNoZXJHZXR0aW5nU3RhcnRlZERvY3NMaW5rVGV4dCIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiV2F0Y2hlciBkb2NzIgogICAgfSkpKSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgIHNpemU6ICJzIgogICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCB7CiAgICAgIGNvbG9yOiAic3ViZHVlZCIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCB3YXRjaGVyRGVzY3JpcHRpb25UZXh0KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgc2l6ZTogInhsIgogICAgfSksIGNvbnRlbnQpOwogIH0KCiAgcmV0dXJuIG51bGw7Cn07CgpleHBvcnRzLldhdGNoTGlzdCA9IFdhdGNoTGlzdDs="},null]}