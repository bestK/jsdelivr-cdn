{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/pages/detection_engine/components/signals/helpers.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/pages/detection_engine/components/signals/helpers.js","mtime":1585205047851},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnJlcGxhY2VUZW1wbGF0ZUZpZWxkRnJvbURhdGFQcm92aWRlcnMgPSBleHBvcnRzLnJlZm9ybWF0RGF0YVByb3ZpZGVyV2l0aE5ld1ZhbHVlID0gZXhwb3J0cy5yZXBsYWNlVGVtcGxhdGVGaWVsZEZyb21NYXRjaEZpbHRlcnMgPSBleHBvcnRzLnJlcGxhY2VUZW1wbGF0ZUZpZWxkRnJvbVF1ZXJ5ID0gZXhwb3J0cy5maW5kVmFsdWVUb0NoYW5nZUluUXVlcnkgPSB2b2lkIDA7Cgp2YXIgX2ZwID0gcmVxdWlyZSgibG9kYXNoL2ZwIik7Cgp2YXIgX2NvbW1vbiA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9wbHVnaW5zL2RhdGEvY29tbW9uIik7CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9Cgp2YXIgdGVtcGxhdGVGaWVsZHMgPSBbJ2hvc3QubmFtZScsICdob3N0Lmhvc3RuYW1lJywgJ2hvc3QuZG9tYWluJywgJ2hvc3QuaWQnLCAnaG9zdC5pcCcsICdjbGllbnQuaXAnLCAnZGVzdGluYXRpb24uaXAnLCAnc2VydmVyLmlwJywgJ3NvdXJjZS5pcCcsICduZXR3b3JrLmNvbW11bml0eV9pZCcsICd1c2VyLm5hbWUnLCAncHJvY2Vzcy5uYW1lJ107Cgp2YXIgZmluZFZhbHVlVG9DaGFuZ2VJblF1ZXJ5ID0gZnVuY3Rpb24gZmluZFZhbHVlVG9DaGFuZ2VJblF1ZXJ5KGtldXJ5Tm9kZSkgewogIHZhciB2YWx1ZVRvQ2hhbmdlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTsKICB2YXIgbG9jYWxWYWx1ZVRvQ2hhbmdlID0gdmFsdWVUb0NoYW5nZTsKCiAgaWYgKGtldXJ5Tm9kZS5mdW5jdGlvbiA9PT0gJ2lzJyAmJiB0ZW1wbGF0ZUZpZWxkcy5pbmNsdWRlcyhrZXVyeU5vZGUuYXJndW1lbnRzWzBdLnZhbHVlKSkgewogICAgbG9jYWxWYWx1ZVRvQ2hhbmdlID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShsb2NhbFZhbHVlVG9DaGFuZ2UpLCBbewogICAgICBmaWVsZDoga2V1cnlOb2RlLmFyZ3VtZW50c1swXS52YWx1ZSwKICAgICAgdmFsdWVUb0NoYW5nZToga2V1cnlOb2RlLmFyZ3VtZW50c1sxXS52YWx1ZQogICAgfV0pOwogIH0KCiAgcmV0dXJuIGtldXJ5Tm9kZS5hcmd1bWVudHMucmVkdWNlKGZ1bmN0aW9uIChhZGRWYWx1ZVRvQ2hhbmdlLCBhc3QpIHsKICAgIGlmIChhc3QuZnVuY3Rpb24gPT09ICdpcycgJiYgdGVtcGxhdGVGaWVsZHMuaW5jbHVkZXMoYXN0LmFyZ3VtZW50c1swXS52YWx1ZSkpIHsKICAgICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYWRkVmFsdWVUb0NoYW5nZSksIFt7CiAgICAgICAgZmllbGQ6IGFzdC5hcmd1bWVudHNbMF0udmFsdWUsCiAgICAgICAgdmFsdWVUb0NoYW5nZTogYXN0LmFyZ3VtZW50c1sxXS52YWx1ZQogICAgICB9XSk7CiAgICB9CgogICAgaWYgKGFzdC5hcmd1bWVudHMpIHsKICAgICAgcmV0dXJuIGZpbmRWYWx1ZVRvQ2hhbmdlSW5RdWVyeShhc3QsIGFkZFZhbHVlVG9DaGFuZ2UpOwogICAgfQoKICAgIHJldHVybiBhZGRWYWx1ZVRvQ2hhbmdlOwogIH0sIGxvY2FsVmFsdWVUb0NoYW5nZSk7Cn07CgpleHBvcnRzLmZpbmRWYWx1ZVRvQ2hhbmdlSW5RdWVyeSA9IGZpbmRWYWx1ZVRvQ2hhbmdlSW5RdWVyeTsKCnZhciByZXBsYWNlVGVtcGxhdGVGaWVsZEZyb21RdWVyeSA9IGZ1bmN0aW9uIHJlcGxhY2VUZW1wbGF0ZUZpZWxkRnJvbVF1ZXJ5KHF1ZXJ5LCBlY3NEYXRhKSB7CiAgaWYgKHF1ZXJ5LnRyaW0oKSAhPT0gJycpIHsKICAgIHZhciB2YWx1ZVRvQ2hhbmdlID0gZmluZFZhbHVlVG9DaGFuZ2VJblF1ZXJ5KF9jb21tb24uZXNLdWVyeS5mcm9tS3VlcnlFeHByZXNzaW9uKHF1ZXJ5KSk7CiAgICByZXR1cm4gdmFsdWVUb0NoYW5nZS5yZWR1Y2UoZnVuY3Rpb24gKG5ld1F1ZXJ5LCB2dGMpIHsKICAgICAgdmFyIG5ld1ZhbHVlID0gKDAsIF9mcC5nZXQpKHZ0Yy5maWVsZCwgZWNzRGF0YSk7CgogICAgICBpZiAobmV3VmFsdWUgIT0gbnVsbCkgewogICAgICAgIHJldHVybiBuZXdRdWVyeS5yZXBsYWNlKHZ0Yy52YWx1ZVRvQ2hhbmdlLCBuZXdWYWx1ZSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBuZXdRdWVyeTsKICAgIH0sIHF1ZXJ5KTsKICB9CgogIHJldHVybiAnJzsKfTsKCmV4cG9ydHMucmVwbGFjZVRlbXBsYXRlRmllbGRGcm9tUXVlcnkgPSByZXBsYWNlVGVtcGxhdGVGaWVsZEZyb21RdWVyeTsKCnZhciByZXBsYWNlVGVtcGxhdGVGaWVsZEZyb21NYXRjaEZpbHRlcnMgPSBmdW5jdGlvbiByZXBsYWNlVGVtcGxhdGVGaWVsZEZyb21NYXRjaEZpbHRlcnMoZmlsdGVycywgZWNzRGF0YSkgewogIHJldHVybiBmaWx0ZXJzLm1hcChmdW5jdGlvbiAoZmlsdGVyKSB7CiAgICBpZiAoZmlsdGVyLm1ldGEudHlwZSA9PT0gJ3BocmFzZScgJiYgZmlsdGVyLm1ldGEua2V5ICE9IG51bGwgJiYgdGVtcGxhdGVGaWVsZHMuaW5jbHVkZXMoZmlsdGVyLm1ldGEua2V5KSkgewogICAgICB2YXIgbmV3VmFsdWUgPSAoMCwgX2ZwLmdldCkoZmlsdGVyLm1ldGEua2V5LCBlY3NEYXRhKTsKCiAgICAgIGlmIChuZXdWYWx1ZSAhPSBudWxsKSB7CiAgICAgICAgZmlsdGVyLm1ldGEucGFyYW1zID0gewogICAgICAgICAgcXVlcnk6IG5ld1ZhbHVlCiAgICAgICAgfTsKICAgICAgICBmaWx0ZXIucXVlcnkgPSB7CiAgICAgICAgICBtYXRjaF9waHJhc2U6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgZmlsdGVyLm1ldGEua2V5LCBuZXdWYWx1ZSkKICAgICAgICB9OwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGZpbHRlcjsKICB9KTsKfTsKCmV4cG9ydHMucmVwbGFjZVRlbXBsYXRlRmllbGRGcm9tTWF0Y2hGaWx0ZXJzID0gcmVwbGFjZVRlbXBsYXRlRmllbGRGcm9tTWF0Y2hGaWx0ZXJzOwoKdmFyIHJlZm9ybWF0RGF0YVByb3ZpZGVyV2l0aE5ld1ZhbHVlID0gZnVuY3Rpb24gcmVmb3JtYXREYXRhUHJvdmlkZXJXaXRoTmV3VmFsdWUoZGF0YVByb3ZpZGVyLCBlY3NEYXRhKSB7CiAgaWYgKHRlbXBsYXRlRmllbGRzLmluY2x1ZGVzKGRhdGFQcm92aWRlci5xdWVyeU1hdGNoLmZpZWxkKSkgewogICAgdmFyIG5ld1ZhbHVlID0gKDAsIF9mcC5nZXQpKGRhdGFQcm92aWRlci5xdWVyeU1hdGNoLmZpZWxkLCBlY3NEYXRhKTsKCiAgICBpZiAobmV3VmFsdWUgIT0gbnVsbCkgewogICAgICBkYXRhUHJvdmlkZXIuaWQgPSBkYXRhUHJvdmlkZXIuaWQucmVwbGFjZShkYXRhUHJvdmlkZXIubmFtZSwgbmV3VmFsdWUpOwogICAgICBkYXRhUHJvdmlkZXIubmFtZSA9IG5ld1ZhbHVlOwogICAgICBkYXRhUHJvdmlkZXIucXVlcnlNYXRjaC52YWx1ZSA9IG5ld1ZhbHVlOwogICAgICBkYXRhUHJvdmlkZXIucXVlcnlNYXRjaC5kaXNwbGF5RmllbGQgPSB1bmRlZmluZWQ7CiAgICAgIGRhdGFQcm92aWRlci5xdWVyeU1hdGNoLmRpc3BsYXlWYWx1ZSA9IHVuZGVmaW5lZDsKICAgIH0KICB9CgogIHJldHVybiBkYXRhUHJvdmlkZXI7Cn07CgpleHBvcnRzLnJlZm9ybWF0RGF0YVByb3ZpZGVyV2l0aE5ld1ZhbHVlID0gcmVmb3JtYXREYXRhUHJvdmlkZXJXaXRoTmV3VmFsdWU7Cgp2YXIgcmVwbGFjZVRlbXBsYXRlRmllbGRGcm9tRGF0YVByb3ZpZGVycyA9IGZ1bmN0aW9uIHJlcGxhY2VUZW1wbGF0ZUZpZWxkRnJvbURhdGFQcm92aWRlcnMoZGF0YVByb3ZpZGVycywgZWNzRGF0YSkgewogIHJldHVybiBkYXRhUHJvdmlkZXJzLm1hcChmdW5jdGlvbiAoZGF0YVByb3ZpZGVyKSB7CiAgICB2YXIgbmV3RGF0YVByb3ZpZGVyID0gcmVmb3JtYXREYXRhUHJvdmlkZXJXaXRoTmV3VmFsdWUoZGF0YVByb3ZpZGVyLCBlY3NEYXRhKTsKCiAgICBpZiAobmV3RGF0YVByb3ZpZGVyLmFuZCAhPSBudWxsICYmICEoMCwgX2ZwLmlzRW1wdHkpKG5ld0RhdGFQcm92aWRlci5hbmQpKSB7CiAgICAgIG5ld0RhdGFQcm92aWRlci5hbmQgPSBuZXdEYXRhUHJvdmlkZXIuYW5kLm1hcChmdW5jdGlvbiAoYW5kRGF0YVByb3ZpZGVyKSB7CiAgICAgICAgcmV0dXJuIHJlZm9ybWF0RGF0YVByb3ZpZGVyV2l0aE5ld1ZhbHVlKGFuZERhdGFQcm92aWRlciwgZWNzRGF0YSk7CiAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiBuZXdEYXRhUHJvdmlkZXI7CiAgfSk7Cn07CgpleHBvcnRzLnJlcGxhY2VUZW1wbGF0ZUZpZWxkRnJvbURhdGFQcm92aWRlcnMgPSByZXBsYWNlVGVtcGxhdGVGaWVsZEZyb21EYXRhUHJvdmlkZXJzOw=="},null]}