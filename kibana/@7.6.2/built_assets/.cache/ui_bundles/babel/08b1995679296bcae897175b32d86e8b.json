{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/console/public/np_ready/application/models/legacy_core_editor/legacy_core_editor.js","dependencies":[{"path":"src/legacy/core_plugins/console/public/np_ready/application/models/legacy_core_editor/legacy_core_editor.js","mtime":1585205039192},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}