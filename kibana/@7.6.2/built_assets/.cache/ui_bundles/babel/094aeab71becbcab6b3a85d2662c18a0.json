{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/snapshot_restore/public/app/components/repository_form/type_settings/azure_settings.js","dependencies":[{"path":"x-pack/legacy/plugins/snapshot_restore/public/app/components/repository_form/type_settings/azure_settings.js","mtime":1585205048211},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkF6dXJlU2V0dGluZ3MgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9pbmRleCA9IHJlcXVpcmUoIi4uLy4uLy4uL2luZGV4Iik7Cgp2YXIgX3RleHQgPSByZXF1aXJlKCIuLi8uLi8uLi9zZXJ2aWNlcy90ZXh0Iik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KLyoKICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZQogKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuCiAqLwoKCnZhciBBenVyZVNldHRpbmdzID0gZnVuY3Rpb24gQXp1cmVTZXR0aW5ncyhfcmVmKSB7CiAgdmFyIHJlcG9zaXRvcnkgPSBfcmVmLnJlcG9zaXRvcnksCiAgICAgIHVwZGF0ZVJlcG9zaXRvcnlTZXR0aW5ncyA9IF9yZWYudXBkYXRlUmVwb3NpdG9yeVNldHRpbmdzLAogICAgICBzZXR0aW5nRXJyb3JzID0gX3JlZi5zZXR0aW5nRXJyb3JzOwoKICB2YXIgX3VzZUFwcERlcGVuZGVuY2llcyA9ICgwLCBfaW5kZXgudXNlQXBwRGVwZW5kZW5jaWVzKSgpLAogICAgICBGb3JtYXR0ZWRNZXNzYWdlID0gX3VzZUFwcERlcGVuZGVuY2llcy5jb3JlLmkxOG4uRm9ybWF0dGVkTWVzc2FnZTsKCiAgdmFyIF9yZXBvc2l0b3J5JHNldHRpbmdzID0gcmVwb3NpdG9yeS5zZXR0aW5ncywKICAgICAgY2xpZW50ID0gX3JlcG9zaXRvcnkkc2V0dGluZ3MuY2xpZW50LAogICAgICBjb250YWluZXIgPSBfcmVwb3NpdG9yeSRzZXR0aW5ncy5jb250YWluZXIsCiAgICAgIGJhc2VQYXRoID0gX3JlcG9zaXRvcnkkc2V0dGluZ3MuYmFzZVBhdGgsCiAgICAgIGNvbXByZXNzID0gX3JlcG9zaXRvcnkkc2V0dGluZ3MuY29tcHJlc3MsCiAgICAgIGNodW5rU2l6ZSA9IF9yZXBvc2l0b3J5JHNldHRpbmdzLmNodW5rU2l6ZSwKICAgICAgcmVhZG9ubHkgPSBfcmVwb3NpdG9yeSRzZXR0aW5ncy5yZWFkb25seSwKICAgICAgbG9jYXRpb25Nb2RlID0gX3JlcG9zaXRvcnkkc2V0dGluZ3MubG9jYXRpb25Nb2RlLAogICAgICBtYXhSZXN0b3JlQnl0ZXNQZXJTZWMgPSBfcmVwb3NpdG9yeSRzZXR0aW5ncy5tYXhSZXN0b3JlQnl0ZXNQZXJTZWMsCiAgICAgIG1heFNuYXBzaG90Qnl0ZXNQZXJTZWMgPSBfcmVwb3NpdG9yeSRzZXR0aW5ncy5tYXhTbmFwc2hvdEJ5dGVzUGVyU2VjOwogIHZhciBoYXNFcnJvcnMgPSBCb29sZWFuKE9iamVjdC5rZXlzKHNldHRpbmdFcnJvcnMpLmxlbmd0aCk7CiAgdmFyIGxvY2F0aW9uTW9kZU9wdGlvbnMgPSBbJ3ByaW1hcnlfb25seScsICdzZWNvbmRhcnlfb25seSddLm1hcChmdW5jdGlvbiAob3B0aW9uKSB7CiAgICByZXR1cm4gewogICAgICB2YWx1ZTogb3B0aW9uLAogICAgICB0ZXh0OiBvcHRpb24KICAgIH07CiAgfSk7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRGVzY3JpYmVkRm9ybUdyb3VwLCB7CiAgICB0aXRsZTogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICAgIHNpemU6ICJzIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDMiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUZvcm0udHlwZUF6dXJlLmNsaWVudFRpdGxlIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJDbGllbnQiCiAgICB9KSkpLAogICAgZGVzY3JpcHRpb246IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5Rm9ybS50eXBlQXp1cmUuY2xpZW50RGVzY3JpcHRpb24iLAogICAgICBkZWZhdWx0TWVzc2FnZTogIlRoZSBuYW1lIG9mIHRoZSBBenVyZSBjbGllbnQuIgogICAgfSksCiAgICBpZEFyaWE6ICJhenVyZVJlcG9zaXRvcnlDbGllbnREZXNjcmlwdGlvbiIsCiAgICBmdWxsV2lkdGg6IHRydWUKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgbGFiZWw6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5Rm9ybS50eXBlQXp1cmUuY2xpZW50TGFiZWwiLAogICAgICBkZWZhdWx0TWVzc2FnZTogIkNsaWVudCIKICAgIH0pLAogICAgZnVsbFdpZHRoOiB0cnVlLAogICAgZGVzY3JpYmVkQnlJZHM6IFsnYXp1cmVSZXBvc2l0b3J5Q2xpZW50RGVzY3JpcHRpb24nXSwKICAgIGlzSW52YWxpZDogQm9vbGVhbihoYXNFcnJvcnMgJiYgc2V0dGluZ0Vycm9ycy5jbGllbnQpLAogICAgZXJyb3I6IHNldHRpbmdFcnJvcnMuY2xpZW50CiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZpZWxkVGV4dCwgewogICAgZGVmYXVsdFZhbHVlOiBjbGllbnQgfHwgJycsCiAgICBmdWxsV2lkdGg6IHRydWUsCiAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkgewogICAgICB1cGRhdGVSZXBvc2l0b3J5U2V0dGluZ3MoewogICAgICAgIGNsaWVudDogZS50YXJnZXQudmFsdWUKICAgICAgfSk7CiAgICB9LAogICAgImRhdGEtdGVzdC1zdWJqIjogImNsaWVudElucHV0IgogIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlEZXNjcmliZWRGb3JtR3JvdXAsIHsKICAgIHRpdGxlOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgc2l6ZTogInMiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMyIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5Rm9ybS50eXBlQXp1cmUuY29udGFpbmVyVGl0bGUiLAogICAgICBkZWZhdWx0TWVzc2FnZTogIkNvbnRhaW5lciIKICAgIH0pKSksCiAgICBkZXNjcmlwdGlvbjogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlGb3JtLnR5cGVBenVyZS5jb250YWluZXJEZXNjcmlwdGlvbiIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVGhlIG5hbWUgb2YgdGhlIEF6dXJlIGNvbnRhaW5lciB0byB1c2UgZm9yIHNuYXBzaG90cy4iCiAgICB9KSwKICAgIGlkQXJpYTogImF6dXJlUmVwb3NpdG9yeUNvbnRhaW5lckRlc2NyaXB0aW9uIiwKICAgIGZ1bGxXaWR0aDogdHJ1ZQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICBsYWJlbDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlGb3JtLnR5cGVBenVyZS5jb250YWluZXJMYWJlbCIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQ29udGFpbmVyIgogICAgfSksCiAgICBmdWxsV2lkdGg6IHRydWUsCiAgICBkZXNjcmliZWRCeUlkczogWydhenVyZVJlcG9zaXRvcnlDb250YWluZXJEZXNjcmlwdGlvbiddLAogICAgaXNJbnZhbGlkOiBCb29sZWFuKGhhc0Vycm9ycyAmJiBzZXR0aW5nRXJyb3JzLmNvbnRhaW5lciksCiAgICBlcnJvcjogc2V0dGluZ0Vycm9ycy5jb250YWluZXIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmllbGRUZXh0LCB7CiAgICBkZWZhdWx0VmFsdWU6IGNvbnRhaW5lciB8fCAnJywKICAgIGZ1bGxXaWR0aDogdHJ1ZSwKICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7CiAgICAgIHVwZGF0ZVJlcG9zaXRvcnlTZXR0aW5ncyh7CiAgICAgICAgY29udGFpbmVyOiBlLnRhcmdldC52YWx1ZQogICAgICB9KTsKICAgIH0sCiAgICAiZGF0YS10ZXN0LXN1YmoiOiAiY29udGFpbmVySW5wdXQiCiAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aURlc2NyaWJlZEZvcm1Hcm91cCwgewogICAgdGl0bGU6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICBzaXplOiAicyIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgzIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlGb3JtLnR5cGVBenVyZS5iYXNlUGF0aFRpdGxlIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJCYXNlIHBhdGgiCiAgICB9KSkpLAogICAgZGVzY3JpcHRpb246IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5Rm9ybS50eXBlQXp1cmUuYmFzZVBhdGhEZXNjcmlwdGlvbiIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVGhlIGNvbnRhaW5lciBwYXRoIHRvIHRoZSByZXBvc2l0b3J5IGRhdGEuIgogICAgfSksCiAgICBpZEFyaWE6ICJhenVyZVJlcG9zaXRvcnlCYXNlUGF0aERlc2NyaXB0aW9uIiwKICAgIGZ1bGxXaWR0aDogdHJ1ZQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICBsYWJlbDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlGb3JtLnR5cGVBenVyZS5iYXNlUGF0aExhYmVsIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJCYXNlIHBhdGgiCiAgICB9KSwKICAgIGZ1bGxXaWR0aDogdHJ1ZSwKICAgIGRlc2NyaWJlZEJ5SWRzOiBbJ2F6dXJlUmVwb3NpdG9yeUJhc2VQYXRoRGVzY3JpcHRpb24nXSwKICAgIGlzSW52YWxpZDogQm9vbGVhbihoYXNFcnJvcnMgJiYgc2V0dGluZ0Vycm9ycy5iYXNlUGF0aCksCiAgICBlcnJvcjogc2V0dGluZ0Vycm9ycy5iYXNlUGF0aAogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFRleHQsIHsKICAgIGRlZmF1bHRWYWx1ZTogYmFzZVBhdGggfHwgJycsCiAgICBmdWxsV2lkdGg6IHRydWUsCiAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkgewogICAgICB1cGRhdGVSZXBvc2l0b3J5U2V0dGluZ3MoewogICAgICAgIGJhc2VQYXRoOiBlLnRhcmdldC52YWx1ZQogICAgICB9KTsKICAgIH0sCiAgICAiZGF0YS10ZXN0LXN1YmoiOiAiYmFzZVBhdGhJbnB1dCIKICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRGVzY3JpYmVkRm9ybUdyb3VwLCB7CiAgICB0aXRsZTogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICAgIHNpemU6ICJzIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDMiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUZvcm0udHlwZUF6dXJlLmNvbXByZXNzVGl0bGUiLAogICAgICBkZWZhdWx0TWVzc2FnZTogIlNuYXBzaG90IGNvbXByZXNzaW9uIgogICAgfSkpKSwKICAgIGRlc2NyaXB0aW9uOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUZvcm0udHlwZUF6dXJlLmNvbXByZXNzRGVzY3JpcHRpb24iLAogICAgICBkZWZhdWx0TWVzc2FnZTogIkNvbXByZXNzZXMgdGhlIGluZGV4IG1hcHBpbmcgYW5kIHNldHRpbmcgZmlsZXMgZm9yIHNuYXBzaG90cy4gRGF0YSBmaWxlcyBhcmUgbm90IGNvbXByZXNzZWQuIgogICAgfSksCiAgICBpZEFyaWE6ICJhenVyZVJlcG9zaXRvcnlDb21wcmVzc0Rlc2NyaXB0aW9uIiwKICAgIGZ1bGxXaWR0aDogdHJ1ZQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICBoYXNFbXB0eUxhYmVsU3BhY2U6IHRydWUsCiAgICBmdWxsV2lkdGg6IHRydWUsCiAgICBkZXNjcmliZWRCeUlkczogWydhenVyZVJlcG9zaXRvcnlDb21wcmVzc0Rlc2NyaXB0aW9uJ10sCiAgICBpc0ludmFsaWQ6IEJvb2xlYW4oaGFzRXJyb3JzICYmIHNldHRpbmdFcnJvcnMuY29tcHJlc3MpLAogICAgZXJyb3I6IHNldHRpbmdFcnJvcnMuY29tcHJlc3MKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3dpdGNoLCB7CiAgICBsYWJlbDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlGb3JtLnR5cGVBenVyZS5jb21wcmVzc0xhYmVsIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJDb21wcmVzcyBzbmFwc2hvdHMiCiAgICB9KSwKICAgIGNoZWNrZWQ6ICEoY29tcHJlc3MgPT09IGZhbHNlKSwKICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7CiAgICAgIHVwZGF0ZVJlcG9zaXRvcnlTZXR0aW5ncyh7CiAgICAgICAgY29tcHJlc3M6IGUudGFyZ2V0LmNoZWNrZWQKICAgICAgfSk7CiAgICB9LAogICAgImRhdGEtdGVzdC1zdWJqIjogImNvbXByZXNzVG9nZ2xlIgogIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlEZXNjcmliZWRGb3JtR3JvdXAsIHsKICAgIHRpdGxlOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgc2l6ZTogInMiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMyIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5Rm9ybS50eXBlQXp1cmUuY2h1bmtTaXplVGl0bGUiLAogICAgICBkZWZhdWx0TWVzc2FnZTogIkNodW5rIHNpemUiCiAgICB9KSkpLAogICAgZGVzY3JpcHRpb246IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5Rm9ybS50eXBlQXp1cmUuY2h1bmtTaXplRGVzY3JpcHRpb24iLAogICAgICBkZWZhdWx0TWVzc2FnZTogIkJyZWFrcyBmaWxlcyBpbnRvIHNtYWxsZXIgdW5pdHMgd2hlbiB0YWtpbmcgc25hcHNob3RzLiIKICAgIH0pLAogICAgaWRBcmlhOiAiYXp1cmVSZXBvc2l0b3J5Q2h1bmtTaXplRGVzY3JpcHRpb24iLAogICAgZnVsbFdpZHRoOiB0cnVlCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgIGxhYmVsOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUZvcm0udHlwZUF6dXJlLmNodW5rU2l6ZUxhYmVsIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJDaHVuayBzaXplIgogICAgfSksCiAgICBmdWxsV2lkdGg6IHRydWUsCiAgICBkZXNjcmliZWRCeUlkczogWydhenVyZVJlcG9zaXRvcnlDaHVua1NpemVEZXNjcmlwdGlvbiddLAogICAgaXNJbnZhbGlkOiBCb29sZWFuKGhhc0Vycm9ycyAmJiBzZXR0aW5nRXJyb3JzLmNodW5rU2l6ZSksCiAgICBlcnJvcjogc2V0dGluZ0Vycm9ycy5jaHVua1NpemUsCiAgICBoZWxwVGV4dDogX3RleHQudGV4dFNlcnZpY2UuZ2V0U2l6ZU5vdGF0aW9uSGVscFRleHQoKQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFRleHQsIHsKICAgIGRlZmF1bHRWYWx1ZTogY2h1bmtTaXplIHx8ICcnLAogICAgZnVsbFdpZHRoOiB0cnVlLAogICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgdXBkYXRlUmVwb3NpdG9yeVNldHRpbmdzKHsKICAgICAgICBjaHVua1NpemU6IGUudGFyZ2V0LnZhbHVlCiAgICAgIH0pOwogICAgfSwKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJjaHVua1NpemVJbnB1dCIKICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRGVzY3JpYmVkRm9ybUdyb3VwLCB7CiAgICB0aXRsZTogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICAgIHNpemU6ICJzIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDMiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUZvcm0udHlwZUF6dXJlLm1heFNuYXBzaG90Qnl0ZXNUaXRsZSIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTWF4IHNuYXBzaG90IGJ5dGVzIHBlciBzZWNvbmQiCiAgICB9KSkpLAogICAgZGVzY3JpcHRpb246IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5Rm9ybS50eXBlQXp1cmUubWF4U25hcHNob3RCeXRlc0Rlc2NyaXB0aW9uIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJUaGUgcmF0ZSBmb3IgY3JlYXRpbmcgc25hcHNob3RzIGZvciBlYWNoIG5vZGUuIgogICAgfSksCiAgICBpZEFyaWE6ICJhenVyZVJlcG9zaXRvcnlNYXhTbmFwc2hvdEJ5dGVzRGVzY3JpcHRpb24iLAogICAgZnVsbFdpZHRoOiB0cnVlCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgIGxhYmVsOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUZvcm0udHlwZUF6dXJlLm1heFNuYXBzaG90Qnl0ZXNMYWJlbCIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTWF4IHNuYXBzaG90IGJ5dGVzIHBlciBzZWNvbmQiCiAgICB9KSwKICAgIGZ1bGxXaWR0aDogdHJ1ZSwKICAgIGRlc2NyaWJlZEJ5SWRzOiBbJ2F6dXJlUmVwb3NpdG9yeU1heFNuYXBzaG90Qnl0ZXNEZXNjcmlwdGlvbiddLAogICAgaXNJbnZhbGlkOiBCb29sZWFuKGhhc0Vycm9ycyAmJiBzZXR0aW5nRXJyb3JzLm1heFNuYXBzaG90Qnl0ZXNQZXJTZWMpLAogICAgZXJyb3I6IHNldHRpbmdFcnJvcnMubWF4U25hcHNob3RCeXRlc1BlclNlYywKICAgIGhlbHBUZXh0OiBfdGV4dC50ZXh0U2VydmljZS5nZXRTaXplTm90YXRpb25IZWxwVGV4dCgpCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZpZWxkVGV4dCwgewogICAgZGVmYXVsdFZhbHVlOiBtYXhTbmFwc2hvdEJ5dGVzUGVyU2VjIHx8ICcnLAogICAgZnVsbFdpZHRoOiB0cnVlLAogICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgdXBkYXRlUmVwb3NpdG9yeVNldHRpbmdzKHsKICAgICAgICBtYXhTbmFwc2hvdEJ5dGVzUGVyU2VjOiBlLnRhcmdldC52YWx1ZQogICAgICB9KTsKICAgIH0sCiAgICAiZGF0YS10ZXN0LXN1YmoiOiAibWF4U25hcHNob3RCeXRlc0lucHV0IgogIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlEZXNjcmliZWRGb3JtR3JvdXAsIHsKICAgIHRpdGxlOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgc2l6ZTogInMiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMyIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5Rm9ybS50eXBlQXp1cmUubWF4UmVzdG9yZUJ5dGVzVGl0bGUiLAogICAgICBkZWZhdWx0TWVzc2FnZTogIk1heCByZXN0b3JlIGJ5dGVzIHBlciBzZWNvbmQiCiAgICB9KSkpLAogICAgZGVzY3JpcHRpb246IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5Rm9ybS50eXBlQXp1cmUubWF4UmVzdG9yZUJ5dGVzRGVzY3JpcHRpb24iLAogICAgICBkZWZhdWx0TWVzc2FnZTogIlRoZSBzbmFwc2hvdCByZXN0b3JlIHJhdGUgZm9yIGVhY2ggbm9kZS4iCiAgICB9KSwKICAgIGlkQXJpYTogImF6dXJlUmVwb3NpdG9yeU1heFJlc3RvcmVCeXRlc0Rlc2NyaXB0aW9uIiwKICAgIGZ1bGxXaWR0aDogdHJ1ZQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICBsYWJlbDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlGb3JtLnR5cGVBenVyZS5tYXhSZXN0b3JlQnl0ZXNMYWJlbCIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTWF4IHJlc3RvcmUgYnl0ZXMgcGVyIHNlY29uZCIKICAgIH0pLAogICAgZnVsbFdpZHRoOiB0cnVlLAogICAgZGVzY3JpYmVkQnlJZHM6IFsnYXp1cmVSZXBvc2l0b3J5TWF4UmVzdG9yZUJ5dGVzRGVzY3JpcHRpb24nXSwKICAgIGlzSW52YWxpZDogQm9vbGVhbihoYXNFcnJvcnMgJiYgc2V0dGluZ0Vycm9ycy5tYXhSZXN0b3JlQnl0ZXNQZXJTZWMpLAogICAgZXJyb3I6IHNldHRpbmdFcnJvcnMubWF4UmVzdG9yZUJ5dGVzUGVyU2VjLAogICAgaGVscFRleHQ6IF90ZXh0LnRleHRTZXJ2aWNlLmdldFNpemVOb3RhdGlvbkhlbHBUZXh0KCkKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmllbGRUZXh0LCB7CiAgICBkZWZhdWx0VmFsdWU6IG1heFJlc3RvcmVCeXRlc1BlclNlYyB8fCAnJywKICAgIGZ1bGxXaWR0aDogdHJ1ZSwKICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7CiAgICAgIHVwZGF0ZVJlcG9zaXRvcnlTZXR0aW5ncyh7CiAgICAgICAgbWF4UmVzdG9yZUJ5dGVzUGVyU2VjOiBlLnRhcmdldC52YWx1ZQogICAgICB9KTsKICAgIH0sCiAgICAiZGF0YS10ZXN0LXN1YmoiOiAibWF4UmVzdG9yZUJ5dGVzSW5wdXQiCiAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aURlc2NyaWJlZEZvcm1Hcm91cCwgewogICAgdGl0bGU6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICBzaXplOiAicyIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgzIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlGb3JtLnR5cGVBenVyZS5sb2NhdGlvbk1vZGVUaXRsZSIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTG9jYXRpb24gbW9kZSIKICAgIH0pKSksCiAgICBkZXNjcmlwdGlvbjogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlGb3JtLnR5cGVBenVyZS5sb2NhdGlvbk1vZGVEZXNjcmlwdGlvbiIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVGhlIHByaW1hcnkgb3Igc2Vjb25kYXJ5IGxvY2F0aW9uLiBJZiBzZWNvbmRhcnksIHJlYWQtb25seSBpcyB0cnVlLiIKICAgIH0pLAogICAgaWRBcmlhOiAiYXp1cmVSZXBvc2l0b3J5TG9jYXRpb25Nb2RlRGVzY3JpcHRpb24iLAogICAgZnVsbFdpZHRoOiB0cnVlCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgIGxhYmVsOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUZvcm0udHlwZUF6dXJlLmxvY2F0aW9uTW9kZUxhYmVsIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJMb2NhdGlvbiBtb2RlIgogICAgfSksCiAgICBmdWxsV2lkdGg6IHRydWUsCiAgICBkZXNjcmliZWRCeUlkczogWydhenVyZVJlcG9zaXRvcnlMb2NhdGlvbk1vZGVEZXNjcmlwdGlvbiddLAogICAgaXNJbnZhbGlkOiBCb29sZWFuKGhhc0Vycm9ycyAmJiBzZXR0aW5nRXJyb3JzLmxvY2F0aW9uTW9kZSksCiAgICBlcnJvcjogc2V0dGluZ0Vycm9ycy5sb2NhdGlvbk1vZGUKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU2VsZWN0LCB7CiAgICBvcHRpb25zOiBsb2NhdGlvbk1vZGVPcHRpb25zLAogICAgdmFsdWU6IGxvY2F0aW9uTW9kZSB8fCBsb2NhdGlvbk1vZGVPcHRpb25zWzBdLnZhbHVlLAogICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgdXBkYXRlUmVwb3NpdG9yeVNldHRpbmdzKHsKICAgICAgICBsb2NhdGlvbk1vZGU6IGUudGFyZ2V0LnZhbHVlLAogICAgICAgIHJlYWRvbmx5OiBlLnRhcmdldC52YWx1ZSA9PT0gbG9jYXRpb25Nb2RlT3B0aW9uc1sxXS52YWx1ZSA/IHRydWUgOiByZWFkb25seQogICAgICB9KTsKICAgIH0sCiAgICBmdWxsV2lkdGg6IHRydWUsCiAgICAiZGF0YS10ZXN0LXN1YmoiOiAibG9jYXRpb25Nb2RlU2VsZWN0IgogIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlEZXNjcmliZWRGb3JtR3JvdXAsIHsKICAgIHRpdGxlOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgc2l6ZTogInMiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMyIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5Rm9ybS50eXBlQXp1cmUucmVhZG9ubHlUaXRsZSIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiUmVhZC1vbmx5IgogICAgfSkpKSwKICAgIGRlc2NyaXB0aW9uOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUZvcm0udHlwZUF6dXJlLnJlYWRvbmx5RGVzY3JpcHRpb24iLAogICAgICBkZWZhdWx0TWVzc2FnZTogIk9ubHkgb25lIGNsdXN0ZXIgc2hvdWxkIGhhdmUgd3JpdGUgYWNjZXNzIHRvIHRoaXMgcmVwb3NpdG9yeS4gQWxsIG90aGVyIGNsdXN0ZXJzIHNob3VsZCBiZSByZWFkLW9ubHkuIgogICAgfSksCiAgICBpZEFyaWE6ICJhenVyZVJlcG9zaXRvcnlSZWFkb25seURlc2NyaXB0aW9uIiwKICAgIGZ1bGxXaWR0aDogdHJ1ZQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICBoYXNFbXB0eUxhYmVsU3BhY2U6IHRydWUsCiAgICBmdWxsV2lkdGg6IHRydWUsCiAgICBkZXNjcmliZWRCeUlkczogWydhenVyZVJlcG9zaXRvcnlSZWFkb25seURlc2NyaXB0aW9uJ10sCiAgICBpc0ludmFsaWQ6IEJvb2xlYW4oaGFzRXJyb3JzICYmIHNldHRpbmdFcnJvcnMucmVhZG9ubHkpLAogICAgZXJyb3I6IHNldHRpbmdFcnJvcnMucmVhZG9ubHkKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3dpdGNoLCB7CiAgICBkaXNhYmxlZDogbG9jYXRpb25Nb2RlID09PSBsb2NhdGlvbk1vZGVPcHRpb25zWzFdLnZhbHVlLAogICAgbGFiZWw6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5Rm9ybS50eXBlQXp1cmUucmVhZG9ubHlMYWJlbCIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiUmVhZC1vbmx5IHJlcG9zaXRvcnkiCiAgICB9KSwKICAgIGNoZWNrZWQ6ICEhcmVhZG9ubHksCiAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkgewogICAgICB1cGRhdGVSZXBvc2l0b3J5U2V0dGluZ3MoewogICAgICAgIHJlYWRvbmx5OiBsb2NhdGlvbk1vZGUgPT09IGxvY2F0aW9uTW9kZU9wdGlvbnNbMV0udmFsdWUgPyB0cnVlIDogZS50YXJnZXQuY2hlY2tlZAogICAgICB9KTsKICAgIH0sCiAgICAiZGF0YS10ZXN0LXN1YmoiOiAicmVhZE9ubHlUb2dnbGUiCiAgfSkpKSk7Cn07CgpleHBvcnRzLkF6dXJlU2V0dGluZ3MgPSBBenVyZVNldHRpbmdzOw=="},null]}