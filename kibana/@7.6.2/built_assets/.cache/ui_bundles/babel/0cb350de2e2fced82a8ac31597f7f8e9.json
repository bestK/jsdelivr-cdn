{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/timeseriesexplorer/timeseriesexplorer_utils/validate_job_selection.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/timeseriesexplorer/timeseriesexplorer_utils/validate_job_selection.js","mtime":1585205046004},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnZhbGlkYXRlSm9iU2VsZWN0aW9uID0gdmFsaWRhdGVKb2JTZWxlY3Rpb247Cgp2YXIgX2xvZGFzaCA9IHJlcXVpcmUoImxvZGFzaCIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX25vdGlmeSA9IHJlcXVpcmUoInVpL25vdGlmeSIpOwoKdmFyIF9qb2Jfc2VsZWN0X3NlcnZpY2VfdXRpbHMgPSByZXF1aXJlKCIuLi8uLi9jb21wb25lbnRzL2pvYl9zZWxlY3Rvci9qb2Jfc2VsZWN0X3NlcnZpY2VfdXRpbHMiKTsKCnZhciBfam9iX3NlcnZpY2UgPSByZXF1aXJlKCIuLi8uLi9zZXJ2aWNlcy9qb2Jfc2VydmljZSIpOwoKdmFyIF90aW1lc2VyaWVzZXhwbG9yZXJfdXRpbHMgPSByZXF1aXJlKCIuL3RpbWVzZXJpZXNleHBsb3Jlcl91dGlscyIpOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsKICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7CiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSAiW29iamVjdCBBcmd1bWVudHNdIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7CiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgewogICAgICBhcnIyW2ldID0gYXJyW2ldOwogICAgfQoKICAgIHJldHVybiBhcnIyOwogIH0KfQovKioKICogcmV0dXJucyB0cnVlL2ZhbHNlIGlmIHNldEdsb2JhbFN0YXRlIGhhcyBiZWVuIHRyaWdnZXJlZAogKiBvciByZXR1cm5zIHRoZSBqb2IgaWQgd2hpY2ggc2hvdWxkIGJlIGxvYWRlZC4KICovCgoKZnVuY3Rpb24gdmFsaWRhdGVKb2JTZWxlY3Rpb24oam9ic1dpdGhUaW1lUmFuZ2UsIHNlbGVjdGVkSm9iSWRzLCBzZXRHbG9iYWxTdGF0ZSkgewogIHZhciBqb2JzID0gKDAsIF90aW1lc2VyaWVzZXhwbG9yZXJfdXRpbHMuY3JlYXRlVGltZVNlcmllc0pvYkRhdGEpKF9qb2Jfc2VydmljZS5tbEpvYlNlcnZpY2Uuam9icyk7CiAgdmFyIHRpbWVTZXJpZXNKb2JJZHMgPSBqb2JzLm1hcChmdW5jdGlvbiAoaikgewogICAgcmV0dXJuIGouaWQ7CiAgfSk7IC8vIENoZWNrIGlmIGFueSBvZiB0aGUgam9icyBzZXQgaW4gdGhlIFVSTCBhcmUgbm90IHRpbWUgc2VyaWVzIGpvYnMKICAvLyAoZS5nLiBpZiBzd2l0Y2hpbmcgdG8gdGhpcyB2aWV3IHN0cmFpZ2h0IGZyb20gdGhlIEFub21hbHkgRXhwbG9yZXIpLgoKICB2YXIgaW52YWxpZElkcyA9ICgwLCBfbG9kYXNoLmRpZmZlcmVuY2UpKHNlbGVjdGVkSm9iSWRzLCB0aW1lU2VyaWVzSm9iSWRzKTsKCiAgdmFyIHZhbGlkU2VsZWN0ZWRKb2JJZHMgPSBfbG9kYXNoLndpdGhvdXQuYXBwbHkodm9pZCAwLCBbc2VsZWN0ZWRKb2JJZHNdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoaW52YWxpZElkcykpKTsKCiAgaWYgKGludmFsaWRJZHMubGVuZ3RoID4gMCkgewogICAgdmFyIHdhcm5pbmdUZXh0ID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1sLnRpbWVTZXJpZXNFeHBsb3Jlci5jYW5Ob3RWaWV3UmVxdWVzdGVkSm9ic1dhcm5pbmdNZXNzYWdlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogIllvdSBjYW4ndCB2aWV3IHJlcXVlc3RlZCB7aW52YWxpZElkc0NvdW50LCBwbHVyYWwsIG9uZSB7am9ifSBvdGhlciB7am9ic319IHtpbnZhbGlkSWRzfSBpbiB0aGlzIGRhc2hib2FyZCIsCiAgICAgIHZhbHVlczogewogICAgICAgIGludmFsaWRJZHNDb3VudDogaW52YWxpZElkcy5sZW5ndGgsCiAgICAgICAgaW52YWxpZElkczogaW52YWxpZElkcy5qb2luKCcsICcpCiAgICAgIH0KICAgIH0pOwoKICAgIGlmICh2YWxpZFNlbGVjdGVkSm9iSWRzLmxlbmd0aCA9PT0gMCAmJiB0aW1lU2VyaWVzSm9iSWRzLmxlbmd0aCA+IDApIHsKICAgICAgd2FybmluZ1RleHQgKz0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1sLnRpbWVTZXJpZXNFeHBsb3Jlci5hdXRvU2VsZWN0aW5nRmlyc3RKb2JUZXh0JywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnLCBhdXRvIHNlbGVjdGluZyBmaXJzdCBqb2InCiAgICAgIH0pOwogICAgfQoKICAgIF9ub3RpZnkudG9hc3ROb3RpZmljYXRpb25zLmFkZFdhcm5pbmcod2FybmluZ1RleHQpOwogIH0KCiAgaWYgKHZhbGlkU2VsZWN0ZWRKb2JJZHMubGVuZ3RoID4gMSkgewogICAgLy8gaWYgbW9yZSB0aGFuIG9uZSBqb2IsIHNlbGVjdCB0aGUgZmlyc3Qgam9iIGZyb20gdGhlIHNlbGVjdGlvbi4KICAgIF9ub3RpZnkudG9hc3ROb3RpZmljYXRpb25zLmFkZFdhcm5pbmcoX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1sLnRpbWVTZXJpZXNFeHBsb3Jlci55b3VDYW5WaWV3T25lSm9iQXRUaW1lV2FybmluZ01lc3NhZ2UnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnWW91IGNhbiBvbmx5IHZpZXcgb25lIGpvYiBhdCBhIHRpbWUgaW4gdGhpcyBkYXNoYm9hcmQnCiAgICB9KSk7CgogICAgc2V0R2xvYmFsU3RhdGUoJ21sJywgewogICAgICBqb2JJZHM6IFt2YWxpZFNlbGVjdGVkSm9iSWRzWzBdXQogICAgfSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9IGVsc2UgaWYgKGludmFsaWRJZHMubGVuZ3RoID4gMCAmJiB2YWxpZFNlbGVjdGVkSm9iSWRzLmxlbmd0aCA+IDApIHsKICAgIC8vIGlmIHNvbWUgaWRzIGhhdmUgYmVlbiBmaWx0ZXJlZCBvdXQgYmVjYXVzZSB0aGV5IHdlcmUgaW52YWxpZC4KICAgIC8vIHJlZnJlc2ggdGhlIFVSTCB3aXRoIHRoZSBmaXJzdCB2YWxpZCBpZAogICAgc2V0R2xvYmFsU3RhdGUoJ21sJywgewogICAgICBqb2JJZHM6IFt2YWxpZFNlbGVjdGVkSm9iSWRzWzBdXQogICAgfSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9IGVsc2UgaWYgKHZhbGlkU2VsZWN0ZWRKb2JJZHMubGVuZ3RoID09PSAxKSB7CiAgICAvLyBub3JtYWwgYmVoYXZpb3IuIGEgam9iIElEIGhhcyBiZWVuIGxvYWRlZCBmcm9tIHRoZSBVUkwKICAgIC8vIENsZWFyIHRoZSBkZXRlY3RvckluZGV4LCBlbnRpdGllcyBhbmQgZm9yZWNhc3QgaW5mby4KICAgIHJldHVybiB2YWxpZFNlbGVjdGVkSm9iSWRzWzBdOwogIH0gZWxzZSBpZiAodmFsaWRTZWxlY3RlZEpvYklkcy5sZW5ndGggPT09IDAgJiYgam9icy5sZW5ndGggPiAwKSB7CiAgICAvLyBubyBqb2JzIHdlcmUgbG9hZGVkIGZyb20gdGhlIFVSTCwgc28gYWRkIHRoZSBmaXJzdCBqb2IKICAgIC8vIGZyb20gdGhlIGZ1bGwgam9icyBsaXN0LgogICAgdmFyIGpvYklkcyA9IFtqb2JzWzBdLmlkXTsKICAgIHZhciB0aW1lID0gKDAsIF9qb2Jfc2VsZWN0X3NlcnZpY2VfdXRpbHMuZ2V0VGltZVJhbmdlRnJvbVNlbGVjdGlvbikoam9ic1dpdGhUaW1lUmFuZ2UsIGpvYklkcyk7CiAgICBzZXRHbG9iYWxTdGF0ZShfb2JqZWN0U3ByZWFkKHt9LCB7CiAgICAgIG1sOiB7CiAgICAgICAgam9iSWRzOiBqb2JJZHMKICAgICAgfQogICAgfSwge30sIHRpbWUgIT09IHVuZGVmaW5lZCA/IHsKICAgICAgdGltZTogdGltZQogICAgfSA6IHt9KSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9IGVsc2UgewogICAgLy8gSm9icyBleGlzdCwgYnV0IG5vIHRpbWUgc2VyaWVzIGpvYnMuCiAgICByZXR1cm4gZmFsc2U7CiAgfQp9"},null]}