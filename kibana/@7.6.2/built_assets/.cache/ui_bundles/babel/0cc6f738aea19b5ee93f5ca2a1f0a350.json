{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/input_control_vis/public/control/list_control_factory.js","dependencies":[{"path":"src/legacy/core_plugins/input_control_vis/public/control/list_control_factory.js","mtime":1585205039356},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMubGlzdENvbnRyb2xGYWN0b3J5ID0gbGlzdENvbnRyb2xGYWN0b3J5OwpleHBvcnRzLkxpc3RDb250cm9sID0gdm9pZCAwOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9jb250cm9sID0gcmVxdWlyZSgiLi9jb250cm9sIik7Cgp2YXIgX3BocmFzZV9maWx0ZXJfbWFuYWdlciA9IHJlcXVpcmUoIi4vZmlsdGVyX21hbmFnZXIvcGhyYXNlX2ZpbHRlcl9tYW5hZ2VyIik7Cgp2YXIgX2NyZWF0ZV9zZWFyY2hfc291cmNlID0gcmVxdWlyZSgiLi9jcmVhdGVfc2VhcmNoX3NvdXJjZSIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSAic3ltYm9sIikgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9IGVsc2UgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0KCiAgcmV0dXJuIF90eXBlb2Yob2JqKTsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgewogIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsKICAgIHJldHVybiBjYWxsOwogIH0KCiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7Cn0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgfTsKICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOwp9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsKICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgewogIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOwogIH0KCiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7CiAgICBjb25zdHJ1Y3RvcjogewogICAgICB2YWx1ZTogc3ViQ2xhc3MsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0KICB9KTsKICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsKfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICAgIG8uX19wcm90b19fID0gcDsKICAgIHJldHVybiBvOwogIH07CgogIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBnZXRFc2NhcGVkUXVlcnkoKSB7CiAgdmFyIHF1ZXJ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJzsgLy8gaHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS9jdXJyZW50L3F1ZXJ5LWRzbC1yZWdleHAtcXVlcnkuaHRtbCNfc3RhbmRhcmRfb3BlcmF0b3JzCgogIHJldHVybiBxdWVyeS5yZXBsYWNlKC9bLj8rKnx7fVtcXSgpIlxcI0AmPD5+XS9nLCBmdW5jdGlvbiAobWF0Y2gpIHsKICAgIHJldHVybiAiXFwiLmNvbmNhdChtYXRjaCk7CiAgfSk7Cn0KCnZhciB0ZXJtc0FnZyA9IGZ1bmN0aW9uIHRlcm1zQWdnKF9yZWYpIHsKICB2YXIgZmllbGQgPSBfcmVmLmZpZWxkLAogICAgICBzaXplID0gX3JlZi5zaXplLAogICAgICBkaXJlY3Rpb24gPSBfcmVmLmRpcmVjdGlvbiwKICAgICAgcXVlcnkgPSBfcmVmLnF1ZXJ5OwogIHZhciB0ZXJtcyA9IHsKICAgIG9yZGVyOiB7CiAgICAgIF9jb3VudDogZGlyZWN0aW9uCiAgICB9CiAgfTsKCiAgaWYgKHNpemUpIHsKICAgIHRlcm1zLnNpemUgPSBzaXplIDwgMSA/IDEgOiBzaXplOwogIH0KCiAgaWYgKGZpZWxkID09PSBudWxsIHx8IGZpZWxkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaWVsZC5zY3JpcHRlZCkgewogICAgdGVybXMuc2NyaXB0ID0gewogICAgICBzb3VyY2U6IGZpZWxkLnNjcmlwdCwKICAgICAgbGFuZzogZmllbGQubGFuZwogICAgfTsKICAgIHRlcm1zLnZhbHVlX3R5cGUgPSBmaWVsZC50eXBlID09PSAnbnVtYmVyJyA/ICdmbG9hdCcgOiBmaWVsZC50eXBlOwogIH0gZWxzZSB7CiAgICB0ZXJtcy5maWVsZCA9IGZpZWxkID09PSBudWxsIHx8IGZpZWxkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaWVsZC5uYW1lOwogIH0KCiAgaWYgKHF1ZXJ5KSB7CiAgICB0ZXJtcy5pbmNsdWRlID0gIi4qIi5jb25jYXQoZ2V0RXNjYXBlZFF1ZXJ5KHF1ZXJ5KSwgIi4qIik7CiAgfQoKICByZXR1cm4gewogICAgdGVybXNBZ2c6IHsKICAgICAgdGVybXM6IHRlcm1zCiAgICB9CiAgfTsKfTsKCnZhciBMaXN0Q29udHJvbCA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9Db250cm9sKSB7CiAgX2luaGVyaXRzKExpc3RDb250cm9sLCBfQ29udHJvbCk7CgogIGZ1bmN0aW9uIExpc3RDb250cm9sKGNvbnRyb2xQYXJhbXMsIGZpbHRlck1hbmFnZXIsIHVzZVRpbWVGaWx0ZXIsIFNlYXJjaFNvdXJjZSwgZGVwcykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaXN0Q29udHJvbCk7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTGlzdENvbnRyb2wpLmNhbGwodGhpcywgY29udHJvbFBhcmFtcywgZmlsdGVyTWFuYWdlciwgdXNlVGltZUZpbHRlciwgU2VhcmNoU291cmNlKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiZ2V0SW5qZWN0ZWRWYXIiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInRpbWVmaWx0ZXIiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImFib3J0Q29udHJvbGxlciIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAibGFzdEFuY2VzdG9yVmFsdWVzIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJsYXN0UXVlcnkiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInBhcnRpYWxSZXN1bHRzIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzZWxlY3RPcHRpb25zIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJmZXRjaCIsIGZ1bmN0aW9uIF9jYWxsZWUocXVlcnkpIHsKICAgICAgdmFyIGluZGV4UGF0dGVybiwgYW5jZXN0b3JGaWx0ZXJzLCBhbmNlc3RvclZhbHVlcywgZmllbGROYW1lLCBpbml0aWFsU2VhcmNoU291cmNlU3RhdGUsIGFnZ3MsIHNlYXJjaFNvdXJjZSwgYWJvcnRTaWduYWwsIHJlc3AsIHNlbGVjdE9wdGlvbnM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgLy8gQWJvcnQgYW55IGluLXByb2dyZXNzIGZldGNoCiAgICAgICAgICAgICAgaWYgKF90aGlzLmFib3J0Q29udHJvbGxlcikgewogICAgICAgICAgICAgICAgX3RoaXMuYWJvcnRDb250cm9sbGVyLmFib3J0KCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfdGhpcy5hYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7CiAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJuID0gX3RoaXMuZmlsdGVyTWFuYWdlci5nZXRJbmRleFBhdHRlcm4oKTsKCiAgICAgICAgICAgICAgaWYgKGluZGV4UGF0dGVybikgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF90aGlzLmRpc2FibGUoKDAsIF9jb250cm9sLm5vSW5kZXhQYXR0ZXJuTXNnKShfdGhpcy5jb250cm9sUGFyYW1zLmluZGV4UGF0dGVybikpOwoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBpZiAoIV90aGlzLmhhc0FuY2VzdG9ycygpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmICghX3RoaXMuaGFzVW5zZXRBbmNlc3RvcigpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF90aGlzLmRpc2FibGUoX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2lucHV0Q29udHJvbC5saXN0Q29udHJvbC5kaXNhYmxlVG9vbHRpcCcsIHsKICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRGlzYWJsZWQgdW50aWwgJ3tsYWJlbH0nIGlzIHNldC4iLAogICAgICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgICAgIGxhYmVsOiBfdGhpcy5hbmNlc3RvcnNbMF0ubGFiZWwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIF90aGlzLmxhc3RBbmNlc3RvclZhbHVlcyA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgYW5jZXN0b3JWYWx1ZXMgPSBfdGhpcy5nZXRBbmNlc3RvclZhbHVlcygpOwoKICAgICAgICAgICAgICBpZiAoIShfbG9kYXNoLmRlZmF1bHQuaXNFcXVhbChhbmNlc3RvclZhbHVlcywgX3RoaXMubGFzdEFuY2VzdG9yVmFsdWVzKSAmJiBfbG9kYXNoLmRlZmF1bHQuaXNFcXVhbChxdWVyeSwgX3RoaXMubGFzdFF1ZXJ5KSkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgIF90aGlzLmxhc3RBbmNlc3RvclZhbHVlcyA9IGFuY2VzdG9yVmFsdWVzOwogICAgICAgICAgICAgIF90aGlzLmxhc3RRdWVyeSA9IHF1ZXJ5OwogICAgICAgICAgICAgIGFuY2VzdG9yRmlsdGVycyA9IF90aGlzLmdldEFuY2VzdG9yRmlsdGVycygpOwoKICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICBmaWVsZE5hbWUgPSBfdGhpcy5maWx0ZXJNYW5hZ2VyLmZpZWxkTmFtZTsKICAgICAgICAgICAgICBpbml0aWFsU2VhcmNoU291cmNlU3RhdGUgPSB7CiAgICAgICAgICAgICAgICB0aW1lb3V0OiAiIi5jb25jYXQoX3RoaXMuZ2V0SW5qZWN0ZWRWYXIoJ2F1dG9jb21wbGV0ZVRpbWVvdXQnKSwgIm1zIiksCiAgICAgICAgICAgICAgICB0ZXJtaW5hdGVfYWZ0ZXI6IE51bWJlcihfdGhpcy5nZXRJbmplY3RlZFZhcignYXV0b2NvbXBsZXRlVGVybWluYXRlQWZ0ZXInKSkKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGFnZ3MgPSB0ZXJtc0FnZyh7CiAgICAgICAgICAgICAgICBmaWVsZDogaW5kZXhQYXR0ZXJuLmZpZWxkcy5nZXRCeU5hbWUoZmllbGROYW1lKSwKICAgICAgICAgICAgICAgIHNpemU6IF90aGlzLm9wdGlvbnMuZHluYW1pY09wdGlvbnMgPyBudWxsIDogX2xvZGFzaC5kZWZhdWx0LmdldChfdGhpcy5vcHRpb25zLCAnc2l6ZScsIDUpLAogICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnZGVzYycsCiAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBzZWFyY2hTb3VyY2UgPSAoMCwgX2NyZWF0ZV9zZWFyY2hfc291cmNlLmNyZWF0ZVNlYXJjaFNvdXJjZSkoX3RoaXMuU2VhcmNoU291cmNlLCBpbml0aWFsU2VhcmNoU291cmNlU3RhdGUsIGluZGV4UGF0dGVybiwgYWdncywgX3RoaXMudXNlVGltZUZpbHRlciwgYW5jZXN0b3JGaWx0ZXJzLCBfdGhpcy50aW1lZmlsdGVyKTsKICAgICAgICAgICAgICBhYm9ydFNpZ25hbCA9IF90aGlzLmFib3J0Q29udHJvbGxlci5zaWduYWw7CiAgICAgICAgICAgICAgX3RoaXMubGFzdFF1ZXJ5ID0gcXVlcnk7CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDIzOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNjsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHNlYXJjaFNvdXJjZS5mZXRjaCh7CiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogYWJvcnRTaWduYWwKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDI2OgogICAgICAgICAgICAgIHJlc3AgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI5OwogICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMjMpOwoKICAgICAgICAgICAgICBpZiAoIShfY29udGV4dC50MC5uYW1lID09PSAnQWJvcnRFcnJvcicpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzM7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgY2FzZSAzMzoKICAgICAgICAgICAgICBfdGhpcy5kaXNhYmxlKF9pMThuLmkxOG4udHJhbnNsYXRlKCdpbnB1dENvbnRyb2wubGlzdENvbnRyb2wudW5hYmxlVG9GZXRjaFRvb2x0aXAnLCB7CiAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1VuYWJsZSB0byBmZXRjaCB0ZXJtcywgZXJyb3I6IHtlcnJvck1lc3NhZ2V9JywKICAgICAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IF9jb250ZXh0LnQwLm1lc3NhZ2UKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgY2FzZSAzNToKICAgICAgICAgICAgICBpZiAoIShxdWVyeSAmJiBfdGhpcy5sYXN0UXVlcnkgIT09IHF1ZXJ5KSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM3OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgIGNhc2UgMzc6CiAgICAgICAgICAgICAgc2VsZWN0T3B0aW9ucyA9IF9sb2Rhc2guZGVmYXVsdC5nZXQocmVzcCwgJ2FnZ3JlZ2F0aW9ucy50ZXJtc0FnZy5idWNrZXRzJywgW10pLm1hcChmdW5jdGlvbiAoYnVja2V0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYnVja2V0ID09PSBudWxsIHx8IGJ1Y2tldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYnVja2V0LmtleTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgaWYgKCEoc2VsZWN0T3B0aW9ucy5sZW5ndGggPT09IDAgJiYgIXF1ZXJ5KSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQxOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfdGhpcy5kaXNhYmxlKCgwLCBfY29udHJvbC5ub1ZhbHVlc0Rpc2FibGVNc2cpKGZpZWxkTmFtZSwgaW5kZXhQYXR0ZXJuLnRpdGxlKSk7CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgY2FzZSA0MToKICAgICAgICAgICAgICBfdGhpcy5wYXJ0aWFsUmVzdWx0cyA9IHJlc3AudGVybWluYXRlZF9lYXJseSB8fCByZXNwLnRpbWVkX291dDsKICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RPcHRpb25zID0gc2VsZWN0T3B0aW9uczsKICAgICAgICAgICAgICBfdGhpcy5lbmFibGUgPSB0cnVlOwogICAgICAgICAgICAgIF90aGlzLmRpc2FibGVkUmVhc29uID0gJyc7CgogICAgICAgICAgICBjYXNlIDQ1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBudWxsLCBudWxsLCBbWzIzLCAyOV1dKTsKICAgIH0pOwoKICAgIF90aGlzLmdldEluamVjdGVkVmFyID0gZGVwcy5jb3JlLmluamVjdGVkTWV0YWRhdGEuZ2V0SW5qZWN0ZWRWYXI7CiAgICBfdGhpcy50aW1lZmlsdGVyID0gZGVwcy5kYXRhLnF1ZXJ5LnRpbWVmaWx0ZXIudGltZWZpbHRlcjsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhMaXN0Q29udHJvbCwgW3sKICAgIGtleTogImRlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgIGlmICh0aGlzLmFib3J0Q29udHJvbGxlcikgdGhpcy5hYm9ydENvbnRyb2xsZXIuYWJvcnQoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJoYXNWYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzVmFsdWUoKSB7CiAgICAgIHJldHVybiB0eXBlb2YgdGhpcy52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy52YWx1ZS5sZW5ndGggPiAwOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIExpc3RDb250cm9sOwp9KF9jb250cm9sLkNvbnRyb2wpOwoKZXhwb3J0cy5MaXN0Q29udHJvbCA9IExpc3RDb250cm9sOwoKZnVuY3Rpb24gbGlzdENvbnRyb2xGYWN0b3J5KGNvbnRyb2xQYXJhbXMsIHVzZVRpbWVGaWx0ZXIsIFNlYXJjaFNvdXJjZSwgZGVwcykgewogIHZhciBfcmVmMiwgX3JlZjMsIGRhdGFQbHVnaW5TdGFydCwgaW5kZXhQYXR0ZXJuLCBmaWVsZCwgbGlzdENvbnRyb2w7CgogIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gbGlzdENvbnRyb2xGYWN0b3J5JChfY29udGV4dDIpIHsKICAgIHdoaWxlICgxKSB7CiAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoZGVwcy5jb3JlLmdldFN0YXJ0U2VydmljZXMoKSk7CgogICAgICAgIGNhc2UgMjoKICAgICAgICAgIF9yZWYyID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICBfcmVmMyA9IF9zbGljZWRUb0FycmF5KF9yZWYyLCAyKTsKICAgICAgICAgIGRhdGFQbHVnaW5TdGFydCA9IF9yZWYzWzFdLmRhdGE7CiAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDc7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKGRhdGFQbHVnaW5TdGFydC5pbmRleFBhdHRlcm5zLmdldChjb250cm9sUGFyYW1zLmluZGV4UGF0dGVybikpOwoKICAgICAgICBjYXNlIDc6CiAgICAgICAgICBpbmRleFBhdHRlcm4gPSBfY29udGV4dDIuc2VudDsgLy8gZHluYW1pYyBvcHRpb25zIGFyZSBvbmx5IGFsbG93ZWQgb24gU3RyaW5nIGZpZWxkcyBidXQgdGhlIHNldHRpbmcgZGVmYXVsdHMgdG8gdHJ1ZSBzbyBpdCBjb3VsZAogICAgICAgICAgLy8gYmUgZW5hYmxlZCBmb3Igbm9uLXN0cmluZyBmaWVsZHMgKHNpbmNlIFVJIGlucHV0IGlzIGhpZGRlbiBmb3Igbm9uLXN0cmluZyBmaWVsZHMpLgogICAgICAgICAgLy8gSWYgZmllbGQgaXMgbm90IHN0cmluZywgdGhlbiBkaXNhYmxlIGR5bmFtaWMgb3B0aW9ucy4KCiAgICAgICAgICBmaWVsZCA9IGluZGV4UGF0dGVybi5maWVsZHMuZmluZChmdW5jdGlvbiAoX3JlZjQpIHsKICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmNC5uYW1lOwogICAgICAgICAgICByZXR1cm4gbmFtZSA9PT0gY29udHJvbFBhcmFtcy5maWVsZE5hbWU7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpZiAoZmllbGQgJiYgZmllbGQudHlwZSAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgY29udHJvbFBhcmFtcy5vcHRpb25zLmR5bmFtaWNPcHRpb25zID0gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgICAgbGlzdENvbnRyb2wgPSBuZXcgTGlzdENvbnRyb2woY29udHJvbFBhcmFtcywgbmV3IF9waHJhc2VfZmlsdGVyX21hbmFnZXIuUGhyYXNlRmlsdGVyTWFuYWdlcihjb250cm9sUGFyYW1zLmlkLCBjb250cm9sUGFyYW1zLmZpZWxkTmFtZSwgaW5kZXhQYXR0ZXJuLCBkZXBzLmRhdGEucXVlcnkuZmlsdGVyTWFuYWdlciksIHVzZVRpbWVGaWx0ZXIsIFNlYXJjaFNvdXJjZSwgZGVwcyk7CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgbGlzdENvbnRyb2wpOwoKICAgICAgICBjYXNlIDEyOgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgfQogICAgfQogIH0pOwp9"},null]}