{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/newsfeed/public/components/newsfeed_header_nav_button.js","dependencies":[{"path":"src/plugins/newsfeed/public/components/newsfeed_header_nav_button.js","mtime":1585205041894},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk5ld3NmZWVkTmF2QnV0dG9uID0gZXhwb3J0cy5OZXdzZmVlZENvbnRleHQgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9mbHlvdXRfbGlzdCA9IHJlcXVpcmUoIi4vZmx5b3V0X2xpc3QiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKdmFyIE5ld3NmZWVkQ29udGV4dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQoe30pOwoKZXhwb3J0cy5OZXdzZmVlZENvbnRleHQgPSBOZXdzZmVlZENvbnRleHQ7Cgp2YXIgTmV3c2ZlZWROYXZCdXR0b24gPSBmdW5jdGlvbiBOZXdzZmVlZE5hdkJ1dHRvbihfcmVmKSB7CiAgdmFyIGFwaUZldGNoUmVzdWx0ID0gX3JlZi5hcGlGZXRjaFJlc3VsdDsKCiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKGZhbHNlKSwKICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksCiAgICAgIHNob3dCYWRnZSA9IF91c2VTdGF0ZTJbMF0sCiAgICAgIHNldFNob3dCYWRnZSA9IF91c2VTdGF0ZTJbMV07CgogIHZhciBfdXNlU3RhdGUzID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZmFsc2UpLAogICAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksCiAgICAgIGZseW91dFZpc2libGUgPSBfdXNlU3RhdGU0WzBdLAogICAgICBzZXRGbHlvdXRWaXNpYmxlID0gX3VzZVN0YXRlNFsxXTsKCiAgdmFyIF91c2VTdGF0ZTUgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShudWxsKSwKICAgICAgX3VzZVN0YXRlNiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTUsIDIpLAogICAgICBuZXdzRmV0Y2hSZXN1bHQgPSBfdXNlU3RhdGU2WzBdLAogICAgICBzZXROZXdzRmV0Y2hSZXN1bHQgPSBfdXNlU3RhdGU2WzFdOwoKICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gaGFuZGxlU3RhdHVzQ2hhbmdlKGZldGNoUmVzdWx0KSB7CiAgICAgIGlmIChmZXRjaFJlc3VsdCkgewogICAgICAgIHNldFNob3dCYWRnZShmZXRjaFJlc3VsdC5oYXNOZXcpOwogICAgICB9CgogICAgICBzZXROZXdzRmV0Y2hSZXN1bHQoZmV0Y2hSZXN1bHQpOwogICAgfQoKICAgIHZhciBzdWJzY3JpcHRpb24gPSBhcGlGZXRjaFJlc3VsdC5zdWJzY3JpYmUoZnVuY3Rpb24gKHJlcykgewogICAgICByZXR1cm4gaGFuZGxlU3RhdHVzQ2hhbmdlKHJlcyk7CiAgICB9KTsKICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsKICAgIH07CiAgfSwgW2FwaUZldGNoUmVzdWx0XSk7CgogIGZ1bmN0aW9uIHNob3dGbHlvdXQoKSB7CiAgICBzZXRTaG93QmFkZ2UoZmFsc2UpOwogICAgc2V0Rmx5b3V0VmlzaWJsZSghZmx5b3V0VmlzaWJsZSk7CiAgfQoKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChOZXdzZmVlZENvbnRleHQuUHJvdmlkZXIsIHsKICAgIHZhbHVlOiB7CiAgICAgIHNldEZseW91dFZpc2libGU6IHNldEZseW91dFZpc2libGUsCiAgICAgIG5ld3NGZXRjaFJlc3VsdDogbmV3c0ZldGNoUmVzdWx0CiAgICB9CiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlIZWFkZXJTZWN0aW9uSXRlbUJ1dHRvbiwgewogICAgImRhdGEtdGVzdC1zdWJqIjogIm5ld3NmZWVkIiwKICAgICJhcmlhLWNvbnRyb2xzIjogImtleVBhZE1lbnUiLAogICAgImFyaWEtZXhwYW5kZWQiOiBmbHlvdXRWaXNpYmxlLAogICAgImFyaWEtaGFzcG9wdXAiOiAidHJ1ZSIsCiAgICAiYXJpYS1sYWJlbCI6ICJOZXdzZmVlZFx4QTBtZW51IiwKICAgIG9uQ2xpY2s6IHNob3dGbHlvdXQKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSWNvbiwgewogICAgdHlwZTogImVtYWlsIiwKICAgIHNpemU6ICJtIgogIH0pLCBzaG93QmFkZ2UgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTm90aWZpY2F0aW9uQmFkZ2UsIHsKICAgIGNsYXNzTmFtZTogImV1aUhlYWRlck5vdGlmaWNhdGlvbiIsCiAgICAiZGF0YS10ZXN0LXN1YmoiOiAic2hvd0JhZGdlTmV3cyIKICB9LCAiXHUyNUFBIikgOiBudWxsKSwgZmx5b3V0VmlzaWJsZSA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2ZseW91dF9saXN0Lk5ld3NmZWVkRmx5b3V0LCBudWxsKSA6IG51bGwpKTsKfTsKCmV4cG9ydHMuTmV3c2ZlZWROYXZCdXR0b24gPSBOZXdzZmVlZE5hdkJ1dHRvbjs="},null]}