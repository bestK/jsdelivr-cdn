{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/util/chart_utils.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/util/chart_utils.js","mtime":1585205046004},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNoYXJ0TGltaXRzID0gY2hhcnRMaW1pdHM7CmV4cG9ydHMuZHJhd0xpbmVDaGFydERvdHMgPSBkcmF3TGluZUNoYXJ0RG90czsKZXhwb3J0cy5maWx0ZXJBeGlzTGFiZWxzID0gZmlsdGVyQXhpc0xhYmVsczsKZXhwb3J0cy5nZXRDaGFydFR5cGUgPSBnZXRDaGFydFR5cGU7CmV4cG9ydHMuZ2V0RXhwbG9yZVNlcmllc0xpbmsgPSBnZXRFeHBsb3JlU2VyaWVzTGluazsKZXhwb3J0cy5zaG93TXVsdGlCdWNrZXRBbm9tYWx5TWFya2VyID0gc2hvd011bHRpQnVja2V0QW5vbWFseU1hcmtlcjsKZXhwb3J0cy5zaG93TXVsdGlCdWNrZXRBbm9tYWx5VG9vbHRpcCA9IHNob3dNdWx0aUJ1Y2tldEFub21hbHlUb29sdGlwOwpleHBvcnRzLm51bVRpY2tzID0gbnVtVGlja3M7CmV4cG9ydHMubnVtVGlja3NGb3JEYXRlRm9ybWF0ID0gbnVtVGlja3NGb3JEYXRlRm9ybWF0OwpleHBvcnRzLmdldFRpY2tWYWx1ZXMgPSBnZXRUaWNrVmFsdWVzOwpleHBvcnRzLmlzTGFiZWxMZW5ndGhBYm92ZVRocmVzaG9sZCA9IGlzTGFiZWxMZW5ndGhBYm92ZVRocmVzaG9sZDsKZXhwb3J0cy5nZXRYVHJhbnNmb3JtID0gZ2V0WFRyYW5zZm9ybTsKZXhwb3J0cy5yZW1vdmVMYWJlbE92ZXJsYXAgPSByZW1vdmVMYWJlbE92ZXJsYXA7CmV4cG9ydHMuU0NIRURVTEVEX0VWRU5UX1NZTUJPTF9IRUlHSFQgPSBleHBvcnRzLk1VTFRJX0JVQ0tFVF9TWU1CT0xfU0laRSA9IGV4cG9ydHMuTElORV9DSEFSVF9BTk9NQUxZX1JBRElVUyA9IHZvaWQgMDsKCnZhciBfZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiZDMiKSk7Cgp2YXIgX3N0cmluZ191dGlscyA9IHJlcXVpcmUoIi4vc3RyaW5nX3V0aWxzIik7Cgp2YXIgX211bHRpX2J1Y2tldF9pbXBhY3QgPSByZXF1aXJlKCIuLi8uLi8uLi9jb21tb24vY29uc3RhbnRzL211bHRpX2J1Y2tldF9pbXBhY3QiKTsKCnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJtb21lbnQiKSk7Cgp2YXIgX3Jpc29uTm9kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmlzb24tbm9kZSIpKTsKCnZhciBfdGltZWZpbHRlciA9IHJlcXVpcmUoInVpL3RpbWVmaWx0ZXIiKTsKCnZhciBfZXhwbG9yZXJfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vZXhwbG9yZXIvZXhwbG9yZXJfY29uc3RhbnRzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoKICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZQogKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuCiAqLwp2YXIgTElORV9DSEFSVF9BTk9NQUxZX1JBRElVUyA9IDc7CmV4cG9ydHMuTElORV9DSEFSVF9BTk9NQUxZX1JBRElVUyA9IExJTkVfQ0hBUlRfQU5PTUFMWV9SQURJVVM7CnZhciBNVUxUSV9CVUNLRVRfU1lNQk9MX1NJWkUgPSAxMDA7IC8vIEluIHNxdWFyZSBwaXhlbHMgZm9yIHVzZSB3aXRoIGQzIHN5bWJvbC5zaXplCgpleHBvcnRzLk1VTFRJX0JVQ0tFVF9TWU1CT0xfU0laRSA9IE1VTFRJX0JVQ0tFVF9TWU1CT0xfU0laRTsKdmFyIFNDSEVEVUxFRF9FVkVOVF9TWU1CT0xfSEVJR0hUID0gNTsKZXhwb3J0cy5TQ0hFRFVMRURfRVZFTlRfU1lNQk9MX0hFSUdIVCA9IFNDSEVEVUxFRF9FVkVOVF9TWU1CT0xfSEVJR0hUOwp2YXIgTUFYX0xBQkVMX1dJRFRIID0gMTAwOwoKZnVuY3Rpb24gY2hhcnRMaW1pdHMoKSB7CiAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdOwoKICB2YXIgZG9tYWluID0gX2QuZGVmYXVsdC5leHRlbnQoZGF0YSwgZnVuY3Rpb24gKGQpIHsKICAgIHZhciBtZXRyaWNWYWx1ZSA9IGQudmFsdWU7CgogICAgaWYgKG1ldHJpY1ZhbHVlID09PSBudWxsICYmIGQuYW5vbWFseVNjb3JlICE9PSB1bmRlZmluZWQgJiYgZC5hY3R1YWwgIT09IHVuZGVmaW5lZCkgewogICAgICAvLyBJZiBhbiBhbm9tYWx5IGNvaW5jaWRlcyB3aXRoIGEgZ2FwIGluIHRoZSBkYXRhLCB1c2UgdGhlIGFub21hbHkgYWN0dWFsIHZhbHVlLgogICAgICBtZXRyaWNWYWx1ZSA9IEFycmF5LmlzQXJyYXkoZC5hY3R1YWwpID8gZC5hY3R1YWxbMF0gOiBkLmFjdHVhbDsKICAgIH0KCiAgICByZXR1cm4gbWV0cmljVmFsdWU7CiAgfSk7CgogIHZhciBsaW1pdHMgPSB7CiAgICBtYXg6IGRvbWFpblsxXSwKICAgIG1pbjogZG9tYWluWzBdCiAgfTsKCiAgaWYgKGxpbWl0cy5tYXggPT09IGxpbWl0cy5taW4pIHsKICAgIGxpbWl0cy5tYXggPSBfZC5kZWZhdWx0Lm1heChkYXRhLCBmdW5jdGlvbiAoZCkgewogICAgICBpZiAoZC50eXBpY2FsKSB7CiAgICAgICAgcmV0dXJuIE1hdGgubWF4KGQudmFsdWUsIGQudHlwaWNhbCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gSWYgYW5hbHlzaXMgd2l0aCBieSBhbmQgb3ZlciBmaWVsZCwgYW5kIG1vcmUgdGhhbiBvbmUgY2F1c2UsCiAgICAgICAgLy8gdGhlcmUgd2lsbCBiZSBubyBhY3R1YWwgYW5kIHR5cGljYWwgdmFsdWUuCiAgICAgICAgLy8gVE9ETyAtIHByb2R1Y2UgYSBiZXR0ZXIgdmlzdWFsIGZvciBwb3B1bGF0aW9uIGFuYWx5c2VzLgogICAgICAgIHJldHVybiBkLnZhbHVlOwogICAgICB9CiAgICB9KTsKICAgIGxpbWl0cy5taW4gPSBfZC5kZWZhdWx0Lm1pbihkYXRhLCBmdW5jdGlvbiAoZCkgewogICAgICBpZiAoZC50eXBpY2FsKSB7CiAgICAgICAgcmV0dXJuIE1hdGgubWluKGQudmFsdWUsIGQudHlwaWNhbCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gSWYgYW5hbHlzaXMgd2l0aCBieSBhbmQgb3ZlciBmaWVsZCwgYW5kIG1vcmUgdGhhbiBvbmUgY2F1c2UsCiAgICAgICAgLy8gdGhlcmUgd2lsbCBiZSBubyBhY3R1YWwgYW5kIHR5cGljYWwgdmFsdWUuCiAgICAgICAgLy8gVE9ETyAtIHByb2R1Y2UgYSBiZXR0ZXIgdmlzdWFsIGZvciBwb3B1bGF0aW9uIGFuYWx5c2VzLgogICAgICAgIHJldHVybiBkLnZhbHVlOwogICAgICB9CiAgICB9KTsKICB9IC8vIGFkZCBwYWRkaW5nIG9mIDUlIG9mIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gbWF4IGFuZCBtaW4KICAvLyBpZiB3ZSBlbmRlZCB1cCB3aXRoIHRoZSBzYW1lIHZhbHVlIGZvciBib3RoIG9mIHRoZW0KCgogIGlmIChsaW1pdHMubWF4ID09PSBsaW1pdHMubWluKSB7CiAgICB2YXIgcGFkZGluZyA9IGxpbWl0cy5tYXggKiAwLjA1OwogICAgbGltaXRzLm1heCArPSBwYWRkaW5nOwogICAgbGltaXRzLm1pbiAtPSBwYWRkaW5nOwogIH0KCiAgcmV0dXJuIGxpbWl0czsKfQoKZnVuY3Rpb24gZHJhd0xpbmVDaGFydERvdHMoZGF0YSwgbGluZUNoYXJ0R3JvdXAsIGxpbmVDaGFydFZhbHVlc0xpbmUpIHsKICB2YXIgcmFkaXVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAxLjU7CiAgLy8gV2UgbmVlZCB0byBkbyB0aGlzIGJlY2F1c2Ugd2hlbiBjcmVhdGluZyBhIGxpbmUgZm9yIGEgY2hhcnQgd2hpY2ggaGFzIGRhdGEgZ2FwcywKICAvLyBpZiB0aGVyZSBhcmUgc2luZ2xlIGRhdGFwb2ludHMgd2l0aG91dCBhbnkgdmFsaWQgZGF0YSBiZWZvcmUgYW5kIGFmdGVyIHRoZW0sCiAgLy8gdGhlIGxpbmVzIGNyZWF0ZWQgYnkgdXNpbmcgZDMuLi5kZWZpbmVkKCkgZG8gbm90IGNvbnRhaW4gdGhlc2UgZGF0YSBwb2ludHMuCiAgLy8gU28gdGhpcyBmdW5jdGlvbiBhZGRzIGFkZGl0aW9uYWwgY2lyY2xlIGVsZW1lbnRzIHRvIGRpc3BsYXkgdGhlIHNpbmdsZQogIC8vIGRhdGFwb2ludHMgaW4gYWRkaXRpb25hbCB0byB0aGUgbGluZSBjcmVhdGVkIGZvciB0aGUgY2hhcnQuCiAgLy8gZmlyc3QgcmVkdWNlIHRoZSBkYXRhc2V0IHRvIGRhdGEgcG9pbnRzCiAgLy8gd2hlcmUgdGhlIHByZXZpb3VzIGFuZCBuZXh0IG9uZSBkb24ndCBjb250YWluIGFueSBkYXRhCiAgdmFyIGRvdHNEYXRhID0gZGF0YS5yZWR1Y2UoZnVuY3Rpb24gKHAsIGMsIGkpIHsKICAgIHZhciBwcmV2aW91cyA9IGRhdGFbaSAtIDFdOwogICAgdmFyIG5leHQgPSBkYXRhW2kgKyAxXTsKCiAgICBpZiAoKHR5cGVvZiBwcmV2aW91cyA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJldmlvdXMgJiYgcHJldmlvdXMudmFsdWUgPT09IG51bGwpICYmIGMudmFsdWUgIT09IG51bGwgJiYgKHR5cGVvZiBuZXh0ID09PSAndW5kZWZpbmVkJyB8fCBuZXh0ICYmIG5leHQudmFsdWUgPT09IG51bGwpKSB7CiAgICAgIHAucHVzaChjKTsKICAgIH0KCiAgICByZXR1cm4gcDsKICB9LCBbXSk7IC8vIGNoZWNrIGlmIGBnLnZhbHVlcy1kb3RzYCBhbHJlYWR5IGV4aXN0cywgaWYgbm90IGNyZWF0ZSBpdAogIC8vIGluIGJvdGggY2FzZXMgYXNzaWduIHRoZSBlbGVtZW50IHRvIGBkb3RHcm91cGAKCiAgdmFyIGRvdEdyb3VwID0gbGluZUNoYXJ0R3JvdXAuc2VsZWN0KCcudmFsdWVzLWRvdHMnKS5lbXB0eSgpID8gbGluZUNoYXJ0R3JvdXAuYXBwZW5kKCdnJykuY2xhc3NlZCgndmFsdWVzLWRvdHMnLCB0cnVlKSA6IGxpbmVDaGFydEdyb3VwLnNlbGVjdCgnLnZhbHVlcy1kb3RzJyk7IC8vIHVzZSBkMydzIGVudGVyL3VwZGF0ZS9leGl0IHBhdHRlcm4gdG8gcmVuZGVyIHRoZSBkb3RzCgogIHZhciBkb3RzID0gZG90R3JvdXAuc2VsZWN0QWxsKCdjaXJjbGUnKS5kYXRhKGRvdHNEYXRhKTsKICBkb3RzLmVudGVyKCkuYXBwZW5kKCdjaXJjbGUnKS5hdHRyKCdyJywgcmFkaXVzKTsKICBkb3RzLmF0dHIoJ2N4JywgbGluZUNoYXJ0VmFsdWVzTGluZS54KCkpLmF0dHIoJ2N5JywgbGluZUNoYXJ0VmFsdWVzTGluZS55KCkpOwogIGRvdHMuZXhpdCgpLnJlbW92ZSgpOwp9IC8vIHRoaXMgcmVwbGljYXRlcyBLaWJhbmEncyBmaWx0ZXJBeGlzTGFiZWxzKCkgYmVoYXZpb3IKLy8gd2hpY2ggY2FuIGJlIGZvdW5kIGluIHVpL3Zpc2xpYi9saWIvYXhpcy9heGlzX2xhYmVscy5qcwovLyBheGlzIGxhYmVscyB3aGljaCBvdmVyZmxvdyB0aGUgY2hhcnQncyBib3VuZGFyaWVzIHdpbGwgYmUgcmVtb3ZlZAoKCmZ1bmN0aW9uIGZpbHRlckF4aXNMYWJlbHMoc2VsZWN0aW9uLCBjaGFydFdpZHRoKSB7CiAgaWYgKHNlbGVjdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHNlbGVjdGlvbi5zZWxlY3RBbGwgPT09IHVuZGVmaW5lZCkgewogICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHNlbGVjdGlvbiBwYXJhbWV0ZXInKTsKICB9CgogIHNlbGVjdGlvbi5zZWxlY3RBbGwoJy50aWNrIHRleHQnKSAvLyBkb24ndCByZWZhY3RvciB0aGlzIHRvIGFuIGFycm93IGZ1bmN0aW9uIGJlY2F1c2UKICAvLyB3ZSBkZXBlbmQgb24gdXNpbmcgYHRoaXNgIGhlcmUuCiAgLnRleHQoZnVuY3Rpb24gKCkgewogICAgdmFyIHBhcmVudCA9IF9kLmRlZmF1bHQuc2VsZWN0KHRoaXMucGFyZW50Tm9kZSk7CgogICAgdmFyIGxhYmVsV2lkdGggPSBwYXJlbnQubm9kZSgpLmdldEJCb3goKS53aWR0aDsKCiAgICB2YXIgbGFiZWxYUG9zID0gX2QuZGVmYXVsdC50cmFuc2Zvcm0ocGFyZW50LmF0dHIoJ3RyYW5zZm9ybScpKS50cmFuc2xhdGVbMF07CgogICAgdmFyIG1pblRocmVzaG9sZCA9IGxhYmVsWFBvcyAtIGxhYmVsV2lkdGggLyAyOwogICAgdmFyIG1heFRocmVzaG9sZCA9IGxhYmVsWFBvcyArIGxhYmVsV2lkdGggLyAyOwoKICAgIGlmIChtaW5UaHJlc2hvbGQgPj0gMCAmJiBtYXhUaHJlc2hvbGQgPD0gY2hhcnRXaWR0aCkgewogICAgICByZXR1cm4gdGhpcy50ZXh0Q29udGVudDsKICAgIH0gZWxzZSB7CiAgICAgIHBhcmVudC5yZW1vdmUoKTsKICAgIH0KICB9KTsKfSAvLyBmZWF0dXJlIGZsYWdzIGZvciBjaGFydCB0eXBlcwoKCnZhciBFVkVOVF9ESVNUUklCVVRJT05fRU5BQkxFRCA9IHRydWU7CnZhciBQT1BVTEFUSU9OX0RJU1RSSUJVVElPTl9FTkFCTEVEID0gdHJ1ZTsgLy8gZ2V0IHRoZSBjaGFydCB0eXBlIGJhc2VkIG9uIGl0cyBjb25maWd1cmF0aW9uCgpmdW5jdGlvbiBnZXRDaGFydFR5cGUoY29uZmlnKSB7CiAgdmFyIGNoYXJ0VHlwZSA9IF9leHBsb3Jlcl9jb25zdGFudHMuQ0hBUlRfVFlQRS5TSU5HTEVfTUVUUklDOwoKICBpZiAoRVZFTlRfRElTVFJJQlVUSU9OX0VOQUJMRUQgJiYgY29uZmlnLmZ1bmN0aW9uRGVzY3JpcHRpb24gPT09ICdyYXJlJyAmJiBjb25maWcuZW50aXR5RmllbGRzLnNvbWUoZnVuY3Rpb24gKGYpIHsKICAgIHJldHVybiBmLmZpZWxkVHlwZSA9PT0gJ292ZXInOwogIH0pID09PSBmYWxzZSkgewogICAgY2hhcnRUeXBlID0gX2V4cGxvcmVyX2NvbnN0YW50cy5DSEFSVF9UWVBFLkVWRU5UX0RJU1RSSUJVVElPTjsKICB9IGVsc2UgaWYgKFBPUFVMQVRJT05fRElTVFJJQlVUSU9OX0VOQUJMRUQgJiYgY29uZmlnLmZ1bmN0aW9uRGVzY3JpcHRpb24gIT09ICdyYXJlJyAmJiBjb25maWcuZW50aXR5RmllbGRzLnNvbWUoZnVuY3Rpb24gKGYpIHsKICAgIHJldHVybiBmLmZpZWxkVHlwZSA9PT0gJ292ZXInOwogIH0pICYmIGNvbmZpZy5tZXRyaWNGdW5jdGlvbiAhPT0gbnVsbCAvLyBFdmVudCBkaXN0cmlidXRpb24gY2hhcnQgcmVsaWVzIG9uIHRoZSBNTCBmdW5jdGlvbiBtYXBwaW5nIHRvIGFuIEVTIGFnZ3JlZ2F0aW9uCiAgKSB7CiAgICAgIGNoYXJ0VHlwZSA9IF9leHBsb3Jlcl9jb25zdGFudHMuQ0hBUlRfVFlQRS5QT1BVTEFUSU9OX0RJU1RSSUJVVElPTjsKICAgIH0KCiAgaWYgKGNoYXJ0VHlwZSA9PT0gX2V4cGxvcmVyX2NvbnN0YW50cy5DSEFSVF9UWVBFLkVWRU5UX0RJU1RSSUJVVElPTiB8fCBjaGFydFR5cGUgPT09IF9leHBsb3Jlcl9jb25zdGFudHMuQ0hBUlRfVFlQRS5QT1BVTEFUSU9OX0RJU1RSSUJVVElPTikgewogICAgLy8gQ2hlY2sgdGhhdCB0aGUgY29uZmlnIGRvZXMgbm90IHVzZSBzY3JpcHQgZmllbGRzIGRlZmluZWQgaW4gdGhlIGRhdGFmZWVkIGNvbmZpZy4KICAgIGlmIChjb25maWcuZGF0YWZlZWRDb25maWcgIT09IHVuZGVmaW5lZCAmJiBjb25maWcuZGF0YWZlZWRDb25maWcuc2NyaXB0X2ZpZWxkcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHZhciBzY3JpcHRGaWVsZHMgPSBPYmplY3Qua2V5cyhjb25maWcuZGF0YWZlZWRDb25maWcuc2NyaXB0X2ZpZWxkcyk7CiAgICAgIHZhciBjaGVja0ZpZWxkcyA9IGNvbmZpZy5lbnRpdHlGaWVsZHMubWFwKGZ1bmN0aW9uIChlbnRpdHkpIHsKICAgICAgICByZXR1cm4gZW50aXR5LmZpZWxkTmFtZTsKICAgICAgfSk7CgogICAgICBpZiAoY29uZmlnLm1ldHJpY0ZpZWxkTmFtZSkgewogICAgICAgIGNoZWNrRmllbGRzLnB1c2goY29uZmlnLm1ldHJpY0ZpZWxkTmFtZSk7CiAgICAgIH0KCiAgICAgIHZhciB1c2VzU2NyaXB0RmllbGRzID0gY2hlY2tGaWVsZHMuZmluZChmdW5jdGlvbiAoZmllbGROYW1lKSB7CiAgICAgICAgcmV0dXJuIHNjcmlwdEZpZWxkcy5pbmNsdWRlcyhmaWVsZE5hbWUpOwogICAgICB9KSAhPT0gdW5kZWZpbmVkOwoKICAgICAgaWYgKHVzZXNTY3JpcHRGaWVsZHMgPT09IHRydWUpIHsKICAgICAgICAvLyBPbmx5IHNpbmdsZSBtZXRyaWMgY2hhcnQgdHlwZSBzdXBwb3J0cyBxdWVyeSBvZiBtb2RlbCBwbG90IGRhdGEuCiAgICAgICAgY2hhcnRUeXBlID0gX2V4cGxvcmVyX2NvbnN0YW50cy5DSEFSVF9UWVBFLlNJTkdMRV9NRVRSSUM7CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBjaGFydFR5cGU7Cn0KCmZ1bmN0aW9uIGdldEV4cGxvcmVTZXJpZXNMaW5rKHNlcmllcykgewogIC8vIE9wZW4gdGhlIFNpbmdsZSBNZXRyaWMgZGFzaGJvYXJkIG92ZXIgdGhlIHNhbWUgb3ZlcmFsbCBib3VuZHMgYW5kCiAgLy8gem9vbWVkIGluIHRvIHRoZSBzYW1lIHRpbWUgYXMgdGhlIGN1cnJlbnQgY2hhcnQuCiAgdmFyIGJvdW5kcyA9IF90aW1lZmlsdGVyLnRpbWVmaWx0ZXIuZ2V0QWN0aXZlQm91bmRzKCk7CgogIHZhciBmcm9tID0gYm91bmRzLm1pbi50b0lTT1N0cmluZygpOyAvLyBlLmcuIDIwMTYtMDItMDhUMTY6MDA6MDAuMDAwWgoKICB2YXIgdG8gPSBib3VuZHMubWF4LnRvSVNPU3RyaW5nKCk7CiAgdmFyIHpvb21Gcm9tID0gKDAsIF9tb21lbnQuZGVmYXVsdCkoc2VyaWVzLnBsb3RFYXJsaWVzdCkudG9JU09TdHJpbmcoKTsKICB2YXIgem9vbVRvID0gKDAsIF9tb21lbnQuZGVmYXVsdCkoc2VyaWVzLnBsb3RMYXRlc3QpLnRvSVNPU3RyaW5nKCk7IC8vIFBhc3MgdGhlIGRldGVjdG9yIGluZGV4IGFuZCBlbnRpdHkgZmllbGRzIChpLmUuIGJ5LCBvdmVyLCBwYXJ0aXRpb24gZmllbGRzKQogIC8vIHRvIGlkZW50aWZ5IHRoZSBwYXJ0aWN1bGFyIHNlcmllcyB0byB2aWV3LgogIC8vIEluaXRpYWxseSBwYXNzIHRoZW0gaW4gdGhlIG1sVGltZVNlcmllc0V4cGxvcmVyIHBhcnQgb2YgdGhlIEFwcFN0YXRlLgogIC8vIFRPRE8gLSBkbyB3ZSB3YW50IHRvIHBhc3MgdGhlIGVudGl0aWVzIHZpYSB0aGUgZmlsdGVyPwoKICB2YXIgZW50aXR5Q29uZGl0aW9uID0ge307CiAgc2VyaWVzLmVudGl0eUZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRpdHkpIHsKICAgIGVudGl0eUNvbmRpdGlvbltlbnRpdHkuZmllbGROYW1lXSA9IGVudGl0eS5maWVsZFZhbHVlOwogIH0pOyAvLyBVc2Ugcmlzb24gdG8gYnVpbGQgdGhlIFVSTCAuCgogIHZhciBfZyA9IF9yaXNvbk5vZGUuZGVmYXVsdC5lbmNvZGUoewogICAgbWw6IHsKICAgICAgam9iSWRzOiBbc2VyaWVzLmpvYklkXQogICAgfSwKICAgIHJlZnJlc2hJbnRlcnZhbDogewogICAgICBkaXNwbGF5OiAnT2ZmJywKICAgICAgcGF1c2U6IGZhbHNlLAogICAgICB2YWx1ZTogMAogICAgfSwKICAgIHRpbWU6IHsKICAgICAgZnJvbTogZnJvbSwKICAgICAgdG86IHRvLAogICAgICBtb2RlOiAnYWJzb2x1dGUnCiAgICB9CiAgfSk7CgogIHZhciBfYSA9IF9yaXNvbk5vZGUuZGVmYXVsdC5lbmNvZGUoewogICAgbWxUaW1lU2VyaWVzRXhwbG9yZXI6IHsKICAgICAgem9vbTogewogICAgICAgIGZyb206IHpvb21Gcm9tLAogICAgICAgIHRvOiB6b29tVG8KICAgICAgfSwKICAgICAgZGV0ZWN0b3JJbmRleDogc2VyaWVzLmRldGVjdG9ySW5kZXgsCiAgICAgIGVudGl0aWVzOiBlbnRpdHlDb25kaXRpb24KICAgIH0sCiAgICBxdWVyeTogewogICAgICBxdWVyeV9zdHJpbmc6IHsKICAgICAgICBhbmFseXplX3dpbGRjYXJkOiB0cnVlLAogICAgICAgIHF1ZXJ5OiAnKicKICAgICAgfQogICAgfQogIH0pOwoKICByZXR1cm4gIiMvdGltZXNlcmllc2V4cGxvcmVyP19nPSIuY29uY2F0KF9nLCAiJl9hPSIpLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoX2EpKTsKfQoKZnVuY3Rpb24gc2hvd011bHRpQnVja2V0QW5vbWFseU1hcmtlcihwb2ludCkgewogIC8vIFRPRE8gLSB0ZXN0IHRocmVzaG9sZCB3aXRoIHJlYWwgdXNlIGNhc2VzCiAgcmV0dXJuIHBvaW50Lm11bHRpQnVja2V0SW1wYWN0ICE9PSB1bmRlZmluZWQgJiYgcG9pbnQubXVsdGlCdWNrZXRJbXBhY3QgPj0gX211bHRpX2J1Y2tldF9pbXBhY3QuTVVMVElfQlVDS0VUX0lNUEFDVC5NRURJVU07Cn0KCmZ1bmN0aW9uIHNob3dNdWx0aUJ1Y2tldEFub21hbHlUb29sdGlwKHBvaW50KSB7CiAgLy8gVE9ETyAtIHRlc3QgdGhyZXNob2xkIHdpdGggcmVhbCB1c2UgY2FzZXMKICByZXR1cm4gcG9pbnQubXVsdGlCdWNrZXRJbXBhY3QgIT09IHVuZGVmaW5lZCAmJiBwb2ludC5tdWx0aUJ1Y2tldEltcGFjdCA+PSBfbXVsdGlfYnVja2V0X2ltcGFjdC5NVUxUSV9CVUNLRVRfSU1QQUNULkxPVzsKfQoKZnVuY3Rpb24gbnVtVGlja3MoYXhpc1dpZHRoKSB7CiAgcmV0dXJuIGF4aXNXaWR0aCAvIE1BWF9MQUJFTF9XSURUSDsKfQoKZnVuY3Rpb24gbnVtVGlja3NGb3JEYXRlRm9ybWF0KGF4aXNXaWR0aCwgZGF0ZUZvcm1hdCkgewogIC8vIEFsbG93IDEuNzUgdGltZXMgdGhlIHdpZHRoIG9mIGEgZm9ybWF0dGVkIGRhdGUgcGVyIHRpY2sgZm9yIHBhZGRpbmcuCiAgdmFyIHRpY2tXaWR0aCA9ICgwLCBfc3RyaW5nX3V0aWxzLmNhbGN1bGF0ZVRleHRXaWR0aCkoKDAsIF9tb21lbnQuZGVmYXVsdCkoKS5mb3JtYXQoZGF0ZUZvcm1hdCksIGZhbHNlKTsKICByZXR1cm4gYXhpc1dpZHRoIC8gKDEuNzUgKiB0aWNrV2lkdGgpOwp9Cgp2YXIgVElDS19ESVJFQ1RJT04gPSB7CiAgTkVYVDogJ25leHQnLAogIFBSRVZJT1VTOiAncHJldmlvdXMnCn07IC8vIEJhc2VkIG9uIGEgZml4ZWQgc3RhcnRpbmcgdGltZXN0YW1wIGFuZCBhbiBpbnRlcnZhbCwgZ2V0IHRpY2sgdmFsdWVzIHdpdGhpbgovLyB0aGUgYm91bmRzIG9mIGVhcmxpZXN0IGFuZCBsYXRlc3QuIFRoaXMgaXMgdXNlZnVsIGZvciB0aGUgQW5vbWFseSBFeHBsb3JlciBDaGFydHMKLy8gdG8gYWxpZ24gYXhpcyB0aWNrcyB3aXRoIHRoZSBncmF5IGFyZWEgcmVzZW1ibGluZyB0aGUgc3dpbWxhbmUgY2VsbCBzZWxlY3Rpb24uCgpmdW5jdGlvbiBnZXRUaWNrVmFsdWVzKHN0YXJ0VGltZU1zLCB0aWNrSW50ZXJ2YWwsIGVhcmxpZXN0LCBsYXRlc3QpIHsKICAvLyBBIHRpY2tJbnRlcnZhbCBlcXVhbCBvciBzbWFsbGVyIHRoYW4gMCB3b3VsZCB0cmlnZ2VyIGEgY2FsbCBzdGFjayBleGNlcHRpb24sCiAgLy8gc28gd2UncmUgdHJ5aW5nIHRvIGNhdGNoIHRoYXQgYmVmb3JlIGl0IGhhcHBlbnMuCiAgaWYgKHRpY2tJbnRlcnZhbCA8PSAwKSB7CiAgICB0aHJvdyBFcnJvcigndGlja0ludGVydmFsIG11c3QgYmUgbGFyZ2VyIHRoYW4gMC4nKTsKICB9CgogIHZhciB0aWNrVmFsdWVzID0gW3N0YXJ0VGltZU1zXTsKCiAgZnVuY3Rpb24gYWRkVGlja3ModHMsIG9wZXJhdG9yKSB7CiAgICB2YXIgbmV3VGljazsKICAgIHZhciBhZGRBbm90aGVyVGljazsKCiAgICBzd2l0Y2ggKG9wZXJhdG9yKSB7CiAgICAgIGNhc2UgVElDS19ESVJFQ1RJT04uUFJFVklPVVM6CiAgICAgICAgbmV3VGljayA9IHRzIC0gdGlja0ludGVydmFsOwogICAgICAgIGFkZEFub3RoZXJUaWNrID0gbmV3VGljayA+PSBlYXJsaWVzdDsKICAgICAgICBicmVhazsKCiAgICAgIGNhc2UgVElDS19ESVJFQ1RJT04uTkVYVDoKICAgICAgICBuZXdUaWNrID0gdHMgKyB0aWNrSW50ZXJ2YWw7CiAgICAgICAgYWRkQW5vdGhlclRpY2sgPSBuZXdUaWNrIDw9IGxhdGVzdDsKICAgICAgICBicmVhazsKICAgIH0KCiAgICBpZiAoYWRkQW5vdGhlclRpY2spIHsKICAgICAgdGlja1ZhbHVlcy5wdXNoKG5ld1RpY2spOwogICAgICBhZGRUaWNrcyhuZXdUaWNrLCBvcGVyYXRvcik7CiAgICB9CiAgfQoKICBhZGRUaWNrcyhzdGFydFRpbWVNcywgVElDS19ESVJFQ1RJT04uUFJFVklPVVMpOwogIGFkZFRpY2tzKHN0YXJ0VGltZU1zLCBUSUNLX0RJUkVDVElPTi5ORVhUKTsKICB0aWNrVmFsdWVzLnNvcnQoKTsKICByZXR1cm4gdGlja1ZhbHVlczsKfQoKdmFyIExBQkVMX1dSQVBfVEhSRVNIT0xEID0gNjA7IC8vIENoZWNrcyBpZiB0aGUgc3RyaW5nIGxlbmd0aCBvZiBhIGNoYXJ0IGxhYmVsIChkZXRlY3RvciBkZXNjcmlwdGlvbgovLyBhbmQgZW50aXR5IGZpZWxkcykgaXMgYWJvdmUgTEFCRUxfV1JBUF9USFJFU0hPTEQuCgpmdW5jdGlvbiBpc0xhYmVsTGVuZ3RoQWJvdmVUaHJlc2hvbGQoX3JlZikgewogIHZhciBkZXRlY3RvckxhYmVsID0gX3JlZi5kZXRlY3RvckxhYmVsLAogICAgICBlbnRpdHlGaWVsZHMgPSBfcmVmLmVudGl0eUZpZWxkczsKICB2YXIgbGFiZWxMZW5ndGggPSBkZXRlY3RvckxhYmVsLmxlbmd0aCArIGVudGl0eUZpZWxkcy5tYXAoZnVuY3Rpb24gKGQpIHsKICAgIHJldHVybiAiIi5jb25jYXQoZC5maWVsZE5hbWUsICIgIikuY29uY2F0KGQuZmllbGRWYWx1ZSk7CiAgfSkuam9pbignICcpLmxlbmd0aDsKICByZXR1cm4gbGFiZWxMZW5ndGggPiBMQUJFTF9XUkFQX1RIUkVTSE9MRDsKfSAvLyBUbyBnZXQgeFRyYW5zZm9ybSBpdCB3b3VsZCBiZSBuaWNlciB0byB1c2UgZDMudHJhbnNmb3JtLCBidXQgdGhhdCBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIEpTRE9NLgovLyBTbyB0aGlzIHVzZXMgYSByZWdleCB2YXJpYW50IGJlY2F1c2Ugd2UgZGVmaW5pdGVseSB3YW50IHRlc3QgY292ZXJhZ2UgZm9yIHRoZSBsYWJlbCByZW1vdmFsLgovLyBPbmNlIEpTRE9NIHN1cHBvcnRzIFNWR0FuaW1hdGVkVHJhbnNmb3JtTGlzdCB3ZSBjYW4gdXNlIHRoaXMgc2ltcGxlciBpbmxpbmUgdmVyc2lvbjoKLy8gY29uc3QgeFRyYW5zZm9ybSA9IGQzLnRyYW5zZm9ybSh0aWNrLmF0dHIoJ3RyYW5zZm9ybScpKS50cmFuc2xhdGVbMF07CgoKZnVuY3Rpb24gZ2V0WFRyYW5zZm9ybSh0KSB7CiAgdmFyIHJlZ2V4UmVzdWx0ID0gL3RyYW5zbGF0ZVwoXHMqKFteXHMsKV0rKShbICxdKFteXHMsKV0rKSk/XCkvLmV4ZWModCk7CgogIGlmIChBcnJheS5pc0FycmF5KHJlZ2V4UmVzdWx0KSAmJiByZWdleFJlc3VsdC5sZW5ndGggPj0gMikgewogICAgcmV0dXJuIE51bWJlcihyZWdleFJlc3VsdFsxXSk7CiAgfSAvLyBmYWxsIGJhY2sgdG8gTmFOIGlmIHJlZ2V4IGRpZG4ndCByZXR1cm4gYW55IHJlc3VsdHMuCgoKICByZXR1cm4gTmFOOwp9IC8vIFRoaXMgcmVtb3ZlcyBvdmVybGFwcGluZyB4LWF4aXMgbGFiZWxzIGJ5IHN0YXJ0aW5nIG9mZiBmcm9tIGEgc3BlY2lmaWMgbGFiZWwKLy8gdGhhdCBpcyByZXF1aXJlZC93YW50ZWQgdG8gc2hvdyB1cC4gVGhlIGNvZGUgdGhlbiB0cmF2ZXJzZXMgdG8gYm90aCBzaWRlcyBhbG9uZyB0aGUgYXhpcwovLyBhbmQgZGVjaWRlcyB3aGljaCBsYWJlbHMgdG8ga2VlcCBvciByZW1vdmUuIEFsbCB2ZXJ0aWNhbCB0aWNrIGxpbmVzIHdpbGwgYmUga2VwdCB2aXNpYmxlLAovLyBidXQgdGhvc2Ugd2hpY2ggc3RpbGwgaGF2ZSB0aGVpciB0ZXh0IGxhYmVsIHdpbGwgYmUgZW1waGFzaXplZCB1c2luZyB0aGUgbWwtdGljay1lbXBoYXNpcyBjbGFzcy4KCgpmdW5jdGlvbiByZW1vdmVMYWJlbE92ZXJsYXAoYXhpcywgc3RhcnRUaW1lTXMsIHRpY2tJbnRlcnZhbCwgd2lkdGgpIHsKICAvLyBQdXQgZW1waGFzaXMgb24gYWxsIHRpY2sgbGluZXMsIHdpbGwgYWdhaW4gZGUtZW1waGFzaXplIHRoZQogIC8vIG9uZXMgd2hlcmUgd2UgcmVtb3ZlIHRoZSBsYWJlbCBpbiB0aGUgbmV4dCBzdGVwcy4KICBheGlzLnNlbGVjdEFsbCgnZy50aWNrJykuc2VsZWN0KCdsaW5lJykuY2xhc3NlZCgnbWwtdGljay1lbXBoYXNpcycsIHRydWUpOwoKICBmdW5jdGlvbiBnZXROZWlnaGJvclRpY2tGYWN0b3J5KG9wZXJhdG9yKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHRzKSB7CiAgICAgIHN3aXRjaCAob3BlcmF0b3IpIHsKICAgICAgICBjYXNlIFRJQ0tfRElSRUNUSU9OLlBSRVZJT1VTOgogICAgICAgICAgcmV0dXJuIHRzIC0gdGlja0ludGVydmFsOwoKICAgICAgICBjYXNlIFRJQ0tfRElSRUNUSU9OLk5FWFQ6CiAgICAgICAgICByZXR1cm4gdHMgKyB0aWNrSW50ZXJ2YWw7CiAgICAgIH0KICAgIH07CiAgfQoKICBmdW5jdGlvbiBnZXRUaWNrRGF0YUZhY3Rvcnkob3BlcmF0b3IpIHsKICAgIHZhciBnZXROZWlnaGJvclRpY2sgPSBnZXROZWlnaGJvclRpY2tGYWN0b3J5KG9wZXJhdG9yKTsKCiAgICB2YXIgZm4gPSBmdW5jdGlvbiBmbih0cykgewogICAgICB2YXIgZmlsdGVyZWRUaWNrcyA9IGF4aXMuc2VsZWN0QWxsKCcudGljaycpLmZpbHRlcihmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBkID09PSB0czsKICAgICAgfSk7CgogICAgICBpZiAoZmlsdGVyZWRUaWNrcy5sZW5ndGggPT09IDAgfHwgZmlsdGVyZWRUaWNrc1swXS5sZW5ndGggPT09IDApIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIHZhciB0aWNrID0gX2QuZGVmYXVsdC5zZWxlY3RBbGwoZmlsdGVyZWRUaWNrc1swXSk7CgogICAgICB2YXIgdGV4dE5vZGUgPSB0aWNrLnNlbGVjdCgndGV4dCcpLm5vZGUoKTsKCiAgICAgIGlmICh0ZXh0Tm9kZSA9PT0gbnVsbCkgewogICAgICAgIHJldHVybiBmbihnZXROZWlnaGJvclRpY2sodHMpKTsKICAgICAgfQoKICAgICAgdmFyIHRpY2tXaWR0aCA9IHRleHROb2RlLmdldEJCb3goKS53aWR0aDsKICAgICAgdmFyIHBhZGRpbmcgPSAxNTsKICAgICAgdmFyIHhUcmFuc2Zvcm0gPSBnZXRYVHJhbnNmb3JtKHRpY2suYXR0cigndHJhbnNmb3JtJykpOwogICAgICB2YXIgeE1pbk9mZnNldCA9IHhUcmFuc2Zvcm0gLSAodGlja1dpZHRoIC8gMiArIHBhZGRpbmcpOwogICAgICB2YXIgeE1heE9mZnNldCA9IHhUcmFuc2Zvcm0gKyAodGlja1dpZHRoIC8gMiArIHBhZGRpbmcpOwogICAgICByZXR1cm4gewogICAgICAgIHRpY2s6IHRpY2ssCiAgICAgICAgdHM6IHRzLAogICAgICAgIHhNaW5PZmZzZXQ6IHhNaW5PZmZzZXQsCiAgICAgICAgeE1heE9mZnNldDogeE1heE9mZnNldAogICAgICB9OwogICAgfTsKCiAgICByZXR1cm4gZm47CiAgfQoKICBmdW5jdGlvbiBjaGVja1RpY2tzKHRzLCBvcGVyYXRvcikgewogICAgdmFyIGdldFRpY2tEYXRhID0gZ2V0VGlja0RhdGFGYWN0b3J5KG9wZXJhdG9yKTsKICAgIHZhciBjdXJyZW50VGlja0RhdGEgPSBnZXRUaWNrRGF0YSh0cyk7CgogICAgaWYgKGN1cnJlbnRUaWNrRGF0YSA9PT0gZmFsc2UpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciBnZXROZWlnaGJvclRpY2sgPSBnZXROZWlnaGJvclRpY2tGYWN0b3J5KG9wZXJhdG9yKTsKICAgIHZhciBuZXdUaWNrRGF0YSA9IGdldFRpY2tEYXRhKGdldE5laWdoYm9yVGljayh0cykpOwoKICAgIGlmIChuZXdUaWNrRGF0YSAhPT0gZmFsc2UpIHsKICAgICAgaWYgKG5ld1RpY2tEYXRhLnhNaW5PZmZzZXQgPCAwIHx8IG5ld1RpY2tEYXRhLnhNYXhPZmZzZXQgPiB3aWR0aCB8fCBuZXdUaWNrRGF0YS54TWF4T2Zmc2V0ID4gY3VycmVudFRpY2tEYXRhLnhNaW5PZmZzZXQgJiYgb3BlcmF0b3IgPT09IFRJQ0tfRElSRUNUSU9OLlBSRVZJT1VTIHx8IG5ld1RpY2tEYXRhLnhNaW5PZmZzZXQgPCBjdXJyZW50VGlja0RhdGEueE1heE9mZnNldCAmJiBvcGVyYXRvciA9PT0gVElDS19ESVJFQ1RJT04uTkVYVCkgewogICAgICAgIG5ld1RpY2tEYXRhLnRpY2suc2VsZWN0KCd0ZXh0JykucmVtb3ZlKCk7CiAgICAgICAgbmV3VGlja0RhdGEudGljay5zZWxlY3QoJ2xpbmUnKS5jbGFzc2VkKCdtbC10aWNrLWVtcGhhc2lzJywgZmFsc2UpOwogICAgICAgIGNoZWNrVGlja3MoY3VycmVudFRpY2tEYXRhLnRzLCBvcGVyYXRvcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2hlY2tUaWNrcyhuZXdUaWNrRGF0YS50cywgb3BlcmF0b3IpOwogICAgICB9CiAgICB9CiAgfQoKICBjaGVja1RpY2tzKHN0YXJ0VGltZU1zLCBUSUNLX0RJUkVDVElPTi5QUkVWSU9VUyk7CiAgY2hlY2tUaWNrcyhzdGFydFRpbWVNcywgVElDS19ESVJFQ1RJT04uTkVYVCk7Cn0="},null]}