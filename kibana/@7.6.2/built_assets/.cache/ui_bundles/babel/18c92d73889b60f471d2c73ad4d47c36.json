{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/graph/public/app.js","dependencies":[{"path":"x-pack/legacy/plugins/graph/public/app.js","mtime":1585205044197},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmluaXRHcmFwaEFwcCA9IGluaXRHcmFwaEFwcDsKCnZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJsb2Rhc2giKSk7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnJlcXVpcmUoImFjZSIpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3JlYWN0UmVkdXggPSByZXF1aXJlKCJyZWFjdC1yZWR1eCIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfcHVibGljID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vc3JjL3BsdWdpbnMva2liYW5hX3JlYWN0L3B1YmxpYyIpOwoKdmFyIF9sZWdhY3lfaW1wb3J0cyA9IHJlcXVpcmUoIi4vbGVnYWN5X2ltcG9ydHMiKTsKCnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vYW5ndWxhci90ZW1wbGF0ZXMvaW5kZXguaHRtbCIpKTsKCnZhciBfbGlzdGluZ19uZ193cmFwcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL2FuZ3VsYXIvdGVtcGxhdGVzL2xpc3Rpbmdfbmdfd3JhcHBlci5odG1sIikpOwoKdmFyIF9iYWRnZSA9IHJlcXVpcmUoIi4vYmFkZ2UiKTsKCnZhciBfYXBwID0gcmVxdWlyZSgiLi9jb21wb25lbnRzL2FwcCIpOwoKdmFyIF92ZW5uX2RpYWdyYW0gPSByZXF1aXJlKCIuL2NvbXBvbmVudHMvdmVubl9kaWFncmFtIik7Cgp2YXIgX2xpc3RpbmcgPSByZXF1aXJlKCIuL2NvbXBvbmVudHMvbGlzdGluZyIpOwoKdmFyIF9zZXR0aW5ncyA9IHJlcXVpcmUoIi4vY29tcG9uZW50cy9zZXR0aW5ncyIpOwoKdmFyIF9ncmFwaF92aXN1YWxpemF0aW9uID0gcmVxdWlyZSgiLi9jb21wb25lbnRzL2dyYXBoX3Zpc3VhbGl6YXRpb24iKTsKCnZhciBfZ3JhcGhfY2xpZW50X3dvcmtzcGFjZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi9hbmd1bGFyL2dyYXBoX2NsaWVudF93b3Jrc3BhY2UuanMiKSk7Cgp2YXIgX3VybCA9IHJlcXVpcmUoIi4vc2VydmljZXMvdXJsIik7Cgp2YXIgX2luZGV4X3BhdHRlcm5fY2FjaGUgPSByZXF1aXJlKCIuL3NlcnZpY2VzL2luZGV4X3BhdHRlcm5fY2FjaGUiKTsKCnZhciBfdXJsX3RlbXBsYXRlID0gcmVxdWlyZSgiLi9oZWxwZXJzL3VybF90ZW1wbGF0ZSIpOwoKdmFyIF9hc19vYnNlcnZhYmxlID0gcmVxdWlyZSgiLi9oZWxwZXJzL2FzX29ic2VydmFibGUiKTsKCnZhciBfc3R5bGVfY2hvaWNlcyA9IHJlcXVpcmUoIi4vaGVscGVycy9zdHlsZV9jaG9pY2VzIik7Cgp2YXIgX3N0YXRlX21hbmFnZW1lbnQgPSByZXF1aXJlKCIuL3N0YXRlX21hbmFnZW1lbnQiKTsKCnZhciBfZm9ybWF0X2h0dHBfZXJyb3IgPSByZXF1aXJlKCIuL2hlbHBlcnMvZm9ybWF0X2h0dHBfZXJyb3IiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9CgpmdW5jdGlvbiBpbml0R3JhcGhBcHAoYW5ndWxhck1vZHVsZSwgZGVwcykgewogIHZhciBjaHJvbWUgPSBkZXBzLmNocm9tZSwKICAgICAgdG9hc3ROb3RpZmljYXRpb25zID0gZGVwcy50b2FzdE5vdGlmaWNhdGlvbnMsCiAgICAgIHNhdmVkT2JqZWN0c0NsaWVudCA9IGRlcHMuc2F2ZWRPYmplY3RzQ2xpZW50LAogICAgICBpbmRleFBhdHRlcm5zID0gZGVwcy5pbmRleFBhdHRlcm5zLAogICAgICBhZGRCYXNlUGF0aCA9IGRlcHMuYWRkQmFzZVBhdGgsCiAgICAgIGdldEJhc2VQYXRoID0gZGVwcy5nZXRCYXNlUGF0aCwKICAgICAgbnBEYXRhID0gZGVwcy5ucERhdGEsCiAgICAgIGNvbmZpZyA9IGRlcHMuY29uZmlnLAogICAgICBzYXZlZFdvcmtzcGFjZUxvYWRlciA9IGRlcHMuc2F2ZWRXb3Jrc3BhY2VMb2FkZXIsCiAgICAgIGNhcGFiaWxpdGllcyA9IGRlcHMuY2FwYWJpbGl0aWVzLAogICAgICBjb3JlU3RhcnQgPSBkZXBzLmNvcmVTdGFydCwKICAgICAgc3RvcmFnZSA9IGRlcHMuc3RvcmFnZSwKICAgICAgY2FuRWRpdERyaWxsRG93blVybHMgPSBkZXBzLmNhbkVkaXREcmlsbERvd25VcmxzLAogICAgICBncmFwaFNhdmVQb2xpY3kgPSBkZXBzLmdyYXBoU2F2ZVBvbGljeTsKICB2YXIgYXBwID0gYW5ndWxhck1vZHVsZTsKICBhcHAuZGlyZWN0aXZlKCd2ZW5uRGlhZ3JhbScsIGZ1bmN0aW9uIChyZWFjdERpcmVjdGl2ZSkgewogICAgcmV0dXJuIHJlYWN0RGlyZWN0aXZlKF92ZW5uX2RpYWdyYW0uVmVubkRpYWdyYW0pOwogIH0pOwogIGFwcC5kaXJlY3RpdmUoJ2dyYXBoVmlzdWFsaXphdGlvbicsIGZ1bmN0aW9uIChyZWFjdERpcmVjdGl2ZSkgewogICAgcmV0dXJuIHJlYWN0RGlyZWN0aXZlKF9ncmFwaF92aXN1YWxpemF0aW9uLkdyYXBoVmlzdWFsaXphdGlvbik7CiAgfSk7CiAgYXBwLmRpcmVjdGl2ZSgnZ3JhcGhMaXN0aW5nJywgZnVuY3Rpb24gKHJlYWN0RGlyZWN0aXZlKSB7CiAgICByZXR1cm4gcmVhY3REaXJlY3RpdmUoX2xpc3RpbmcuTGlzdGluZywgW1snY29yZVN0YXJ0JywgewogICAgICB3YXRjaERlcHRoOiAncmVmZXJlbmNlJwogICAgfV0sIFsnY3JlYXRlSXRlbScsIHsKICAgICAgd2F0Y2hEZXB0aDogJ3JlZmVyZW5jZScKICAgIH1dLCBbJ2ZpbmRJdGVtcycsIHsKICAgICAgd2F0Y2hEZXB0aDogJ3JlZmVyZW5jZScKICAgIH1dLCBbJ2RlbGV0ZUl0ZW1zJywgewogICAgICB3YXRjaERlcHRoOiAncmVmZXJlbmNlJwogICAgfV0sIFsnZWRpdEl0ZW0nLCB7CiAgICAgIHdhdGNoRGVwdGg6ICdyZWZlcmVuY2UnCiAgICB9XSwgWydnZXRWaWV3VXJsJywgewogICAgICB3YXRjaERlcHRoOiAncmVmZXJlbmNlJwogICAgfV0sIFsnbGlzdGluZ0xpbWl0JywgewogICAgICB3YXRjaERlcHRoOiAncmVmZXJlbmNlJwogICAgfV0sIFsnaGlkZVdyaXRlQ29udHJvbHMnLCB7CiAgICAgIHdhdGNoRGVwdGg6ICdyZWZlcmVuY2UnCiAgICB9XSwgWydjYXBhYmlsaXRpZXMnLCB7CiAgICAgIHdhdGNoRGVwdGg6ICdyZWZlcmVuY2UnCiAgICB9XSwgWydpbml0aWFsRmlsdGVyJywgewogICAgICB3YXRjaERlcHRoOiAncmVmZXJlbmNlJwogICAgfV1dKTsKICB9KTsKICBhcHAuZGlyZWN0aXZlKCdncmFwaEFwcCcsIGZ1bmN0aW9uIChyZWFjdERpcmVjdGl2ZSkgewogICAgcmV0dXJuIHJlYWN0RGlyZWN0aXZlKF9hcHAuR3JhcGhBcHAsIFtbJ3N0b3JhZ2UnLCB7CiAgICAgIHdhdGNoRGVwdGg6ICdyZWZlcmVuY2UnCiAgICB9XSwgWydpc0luaXRpYWxpemVkJywgewogICAgICB3YXRjaERlcHRoOiAncmVmZXJlbmNlJwogICAgfV0sIFsnY3VycmVudEluZGV4UGF0dGVybicsIHsKICAgICAgd2F0Y2hEZXB0aDogJ3JlZmVyZW5jZScKICAgIH1dLCBbJ2luZGV4UGF0dGVyblByb3ZpZGVyJywgewogICAgICB3YXRjaERlcHRoOiAncmVmZXJlbmNlJwogICAgfV0sIFsnaXNMb2FkaW5nJywgewogICAgICB3YXRjaERlcHRoOiAncmVmZXJlbmNlJwogICAgfV0sIFsnb25RdWVyeVN1Ym1pdCcsIHsKICAgICAgd2F0Y2hEZXB0aDogJ3JlZmVyZW5jZScKICAgIH1dLCBbJ2luaXRpYWxRdWVyeScsIHsKICAgICAgd2F0Y2hEZXB0aDogJ3JlZmVyZW5jZScKICAgIH1dLCBbJ2NvbmZpcm1XaXBlV29ya3NwYWNlJywgewogICAgICB3YXRjaERlcHRoOiAncmVmZXJlbmNlJwogICAgfV0sIFsnY29yZVN0YXJ0JywgewogICAgICB3YXRjaERlcHRoOiAncmVmZXJlbmNlJwogICAgfV0sIFsnbm9JbmRleFBhdHRlcm5zJywgewogICAgICB3YXRjaERlcHRoOiAncmVmZXJlbmNlJwogICAgfV0sIFsncmVkdXhTdG9yZScsIHsKICAgICAgd2F0Y2hEZXB0aDogJ3JlZmVyZW5jZScKICAgIH1dLCBbJ3BsdWdpbkRhdGFTdGFydCcsIHsKICAgICAgd2F0Y2hEZXB0aDogJ3JlZmVyZW5jZScKICAgIH1dXSwgewogICAgICByZXN0cmljdDogJ0EnCiAgICB9KTsKICB9KTsKICBhcHAuZGlyZWN0aXZlKCdncmFwaFZpc3VhbGl6YXRpb24nLCBmdW5jdGlvbiAocmVhY3REaXJlY3RpdmUpIHsKICAgIHJldHVybiByZWFjdERpcmVjdGl2ZShfZ3JhcGhfdmlzdWFsaXphdGlvbi5HcmFwaFZpc3VhbGl6YXRpb24sIHVuZGVmaW5lZCwgewogICAgICByZXN0cmljdDogJ0EnCiAgICB9KTsKICB9KTsKICBhcHAuY29uZmlnKGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikgewogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL2hvbWUnLCB7CiAgICAgIHRlbXBsYXRlOiBfbGlzdGluZ19uZ193cmFwcGVyLmRlZmF1bHQsCiAgICAgIGJhZGdlOiBfYmFkZ2UuZ2V0UmVhZG9ubHlCYWRnZSwKICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24gY29udHJvbGxlcigkbG9jYXRpb24sICRzY29wZSkgewogICAgICAgICRzY29wZS5saXN0aW5nTGltaXQgPSBjb25maWcuZ2V0KCdzYXZlZE9iamVjdHM6bGlzdGluZ0xpbWl0Jyk7CgogICAgICAgICRzY29wZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAkbG9jYXRpb24udXJsKCgwLCBfdXJsLmdldE5ld1BhdGgpKCkpOwogICAgICAgIH07CgogICAgICAgICRzY29wZS5maW5kID0gZnVuY3Rpb24gKHNlYXJjaCkgewogICAgICAgICAgcmV0dXJuIHNhdmVkV29ya3NwYWNlTG9hZGVyLmZpbmQoc2VhcmNoLCAkc2NvcGUubGlzdGluZ0xpbWl0KTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuZWRpdEl0ZW0gPSBmdW5jdGlvbiAod29ya3NwYWNlKSB7CiAgICAgICAgICAkbG9jYXRpb24udXJsKCgwLCBfdXJsLmdldEVkaXRQYXRoKSh3b3Jrc3BhY2UpKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuZ2V0Vmlld1VybCA9IGZ1bmN0aW9uICh3b3Jrc3BhY2UpIHsKICAgICAgICAgIHJldHVybiAoMCwgX3VybC5nZXRFZGl0VXJsKShhZGRCYXNlUGF0aCwgd29ya3NwYWNlKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuZGVsZXRlID0gZnVuY3Rpb24gKHdvcmtzcGFjZXMpIHsKICAgICAgICAgIHJldHVybiBzYXZlZFdvcmtzcGFjZUxvYWRlci5kZWxldGUod29ya3NwYWNlcy5tYXAoZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgICAgICAgdmFyIGlkID0gX3JlZi5pZDsKICAgICAgICAgICAgcmV0dXJuIGlkOwogICAgICAgICAgfSkpOwogICAgICAgIH07CgogICAgICAgICRzY29wZS5jYXBhYmlsaXRpZXMgPSBjYXBhYmlsaXRpZXM7CiAgICAgICAgJHNjb3BlLmluaXRpYWxGaWx0ZXIgPSAkbG9jYXRpb24uc2VhcmNoKCkuZmlsdGVyIHx8ICcnOwogICAgICAgICRzY29wZS5jb3JlU3RhcnQgPSBjb3JlU3RhcnQ7CiAgICAgICAgKDAsIF91cmwuc2V0QnJlYWRjcnVtYnMpKHsKICAgICAgICAgIGNocm9tZTogY2hyb21lCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pLndoZW4oJy93b3Jrc3BhY2UvOmlkPycsIHsKICAgICAgdGVtcGxhdGU6IF9pbmRleC5kZWZhdWx0LAogICAgICBiYWRnZTogX2JhZGdlLmdldFJlYWRvbmx5QmFkZ2UsCiAgICAgIHJlc29sdmU6IHsKICAgICAgICBzYXZlZFdvcmtzcGFjZTogZnVuY3Rpb24gc2F2ZWRXb3Jrc3BhY2UoJHJvdXRlKSB7CiAgICAgICAgICByZXR1cm4gJHJvdXRlLmN1cnJlbnQucGFyYW1zLmlkID8gc2F2ZWRXb3Jrc3BhY2VMb2FkZXIuZ2V0KCRyb3V0ZS5jdXJyZW50LnBhcmFtcy5pZCkuY2F0Y2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0b2FzdE5vdGlmaWNhdGlvbnMuYWRkRGFuZ2VyKF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5ncmFwaC5taXNzaW5nV29ya3NwYWNlRXJyb3JNZXNzYWdlJywgewogICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTWlzc2luZyB3b3Jrc3BhY2UnCiAgICAgICAgICAgIH0pKTsKICAgICAgICAgIH0pIDogc2F2ZWRXb3Jrc3BhY2VMb2FkZXIuZ2V0KCk7CiAgICAgICAgfSwKICAgICAgICBpbmRleFBhdHRlcm5zOiBmdW5jdGlvbiBpbmRleFBhdHRlcm5zKCkgewogICAgICAgICAgcmV0dXJuIHNhdmVkT2JqZWN0c0NsaWVudC5maW5kKHsKICAgICAgICAgICAgdHlwZTogJ2luZGV4LXBhdHRlcm4nLAogICAgICAgICAgICBmaWVsZHM6IFsndGl0bGUnLCAndHlwZSddLAogICAgICAgICAgICBwZXJQYWdlOiAxMDAwMAogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnNhdmVkT2JqZWN0czsKICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgR2V0SW5kZXhQYXR0ZXJuUHJvdmlkZXI6IGZ1bmN0aW9uIEdldEluZGV4UGF0dGVyblByb3ZpZGVyKCkgewogICAgICAgICAgcmV0dXJuIGluZGV4UGF0dGVybnM7CiAgICAgICAgfQogICAgICB9CiAgICB9KS5vdGhlcndpc2UoewogICAgICByZWRpcmVjdFRvOiAnL2hvbWUnCiAgICB9KTsKICB9KTsgLy89PT09PT09PSAgQ29udHJvbGxlciBmb3IgYmFzaWMgVUkgPT09PT09PT09PT09PT09PT09CgogIGFwcC5jb250cm9sbGVyKCdncmFwaHVpUGx1Z2luJywgZnVuY3Rpb24gKCRzY29wZSwgJHJvdXRlLCAkbG9jYXRpb24sIGNvbmZpcm1Nb2RhbCkgewogICAgZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyKSB7CiAgICAgIHZhciB0b2FzdFRpdGxlID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmdyYXBoLmVycm9yVG9hc3RUaXRsZScsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0dyYXBoIEVycm9yJywKICAgICAgICBkZXNjcmlwdGlvbjogJyJHcmFwaCIgaXMgYSBwcm9kdWN0IG5hbWUgYW5kIHNob3VsZCBub3QgYmUgdHJhbnNsYXRlZC4nCiAgICAgIH0pOwoKICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7CiAgICAgICAgdG9hc3ROb3RpZmljYXRpb25zLmFkZEVycm9yKGVyciwgewogICAgICAgICAgdGl0bGU6IHRvYXN0VGl0bGUKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0b2FzdE5vdGlmaWNhdGlvbnMuYWRkRGFuZ2VyKHsKICAgICAgICAgIHRpdGxlOiB0b2FzdFRpdGxlLAogICAgICAgICAgdGV4dDogU3RyaW5nKGVycikKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGhhbmRsZUh0dHBFcnJvcihlcnJvcikgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGhhbmRsZUh0dHBFcnJvciQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgdG9hc3ROb3RpZmljYXRpb25zLmFkZERhbmdlcigoMCwgX2Zvcm1hdF9odHRwX2Vycm9yLmZvcm1hdEh0dHBFcnJvcikoZXJyb3IpKTsKCiAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9IC8vIFJlcGxhY2VtZW50IGZ1bmN0aW9uIGZvciBncmFwaENsaWVudFdvcmtzcGFjZSdzIGNvbW1zIHNvCiAgICAvLyB0aGF0IGl0IHdvcmtzIHdpdGggS2liYW5hLgoKCiAgICBmdW5jdGlvbiBjYWxsTm9kZVByb3h5KGluZGV4TmFtZSwgcXVlcnksIHJlc3BvbnNlSGFuZGxlcikgewogICAgICB2YXIgcmVxdWVzdCA9IHsKICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICBpbmRleDogaW5kZXhOYW1lLAogICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgfSkKICAgICAgfTsKICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlOwogICAgICByZXR1cm4gY29yZVN0YXJ0Lmh0dHAucG9zdCgnLi4vYXBpL2dyYXBoL2dyYXBoRXhwbG9yZScsIHJlcXVlc3QpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICB2YXIgcmVzcG9uc2UgPSBkYXRhLnJlc3A7CgogICAgICAgIGlmIChyZXNwb25zZS50aW1lZF9vdXQpIHsKICAgICAgICAgIHRvYXN0Tm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5ncmFwaC5leHBsb3JlR3JhcGgudGltZWRPdXRXYXJuaW5nVGV4dCcsIHsKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdFeHBsb3JhdGlvbiB0aW1lZCBvdXQnCiAgICAgICAgICB9KSk7CiAgICAgICAgfQoKICAgICAgICByZXNwb25zZUhhbmRsZXIocmVzcG9uc2UpOwogICAgICB9KS5jYXRjaChoYW5kbGVIdHRwRXJyb3IpLmZpbmFsbHkoZnVuY3Rpb24gKCkgewogICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTsKICAgICAgfSk7CiAgICB9IC8vSGVscGVyIGZ1bmN0aW9uIGZvciB0aGUgZ3JhcGhDbGllbnRXb3Jrc3BhY2UgdG8gcGVyZm9ybSBhIHF1ZXJ5CgoKICAgIHZhciBjYWxsU2VhcmNoTm9kZVByb3h5ID0gZnVuY3Rpb24gY2FsbFNlYXJjaE5vZGVQcm94eShpbmRleE5hbWUsIHF1ZXJ5LCByZXNwb25zZUhhbmRsZXIpIHsKICAgICAgdmFyIHJlcXVlc3QgPSB7CiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgaW5kZXg6IGluZGV4TmFtZSwKICAgICAgICAgIGJvZHk6IHF1ZXJ5CiAgICAgICAgfSkKICAgICAgfTsKICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlOwogICAgICBjb3JlU3RhcnQuaHR0cC5wb3N0KCcuLi9hcGkvZ3JhcGgvc2VhcmNoUHJveHknLCByZXF1ZXN0KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlID0gZGF0YS5yZXNwOwogICAgICAgIHJlc3BvbnNlSGFuZGxlcihyZXNwb25zZSk7CiAgICAgIH0pLmNhdGNoKGhhbmRsZUh0dHBFcnJvcikuZmluYWxseShmdW5jdGlvbiAoKSB7CiAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAkc2NvcGUuJGRpZ2VzdCgpOwogICAgICB9KTsKICAgIH07CgogICAgJHNjb3BlLmluZGV4UGF0dGVyblByb3ZpZGVyID0gKDAsIF9pbmRleF9wYXR0ZXJuX2NhY2hlLmNyZWF0ZUNhY2hlZEluZGV4UGF0dGVyblByb3ZpZGVyKSgkcm91dGUuY3VycmVudC5sb2NhbHMuR2V0SW5kZXhQYXR0ZXJuUHJvdmlkZXIuZ2V0KTsKICAgIHZhciBzdG9yZSA9ICgwLCBfc3RhdGVfbWFuYWdlbWVudC5jcmVhdGVHcmFwaFN0b3JlKSh7CiAgICAgIGJhc2VQYXRoOiBnZXRCYXNlUGF0aCgpLAogICAgICBpbmRleFBhdHRlcm5Qcm92aWRlcjogJHNjb3BlLmluZGV4UGF0dGVyblByb3ZpZGVyLAogICAgICBpbmRleFBhdHRlcm5zOiAkcm91dGUuY3VycmVudC5sb2NhbHMuaW5kZXhQYXR0ZXJucywKICAgICAgY3JlYXRlV29ya3NwYWNlOiBmdW5jdGlvbiBjcmVhdGVXb3Jrc3BhY2UoaW5kZXhQYXR0ZXJuLCBleHBsb3JlQ29udHJvbHMpIHsKICAgICAgICB2YXIgb3B0aW9ucyA9IHsKICAgICAgICAgIGluZGV4TmFtZTogaW5kZXhQYXR0ZXJuLAogICAgICAgICAgdmVydGV4X2ZpZWxkczogW10sCiAgICAgICAgICAvLyBIZXJlIHdlIGhhdmUgdGhlIG9wcG9ydHVuaXR5IHRvIGxvb2sgdXAgbGFiZWxzIGZvciBub2Rlcy4uLgogICAgICAgICAgbm9kZUxhYmVsbGVyOiBmdW5jdGlvbiBub2RlTGFiZWxsZXIoKSB7Ly8gICBjb25zb2xlLmxvZyhuZXdOb2Rlcyk7CiAgICAgICAgICB9LAogICAgICAgICAgY2hhbmdlSGFuZGxlcjogZnVuY3Rpb24gY2hhbmdlSGFuZGxlcigpIHsKICAgICAgICAgICAgLy9BbGxvd3MgRE9NIHRvIHVwZGF0ZSB3aXRoIGdyYXBoIGxheW91dCBjaGFuZ2VzLgogICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7CiAgICAgICAgICB9LAogICAgICAgICAgZ3JhcGhFeHBsb3JlUHJveHk6IGNhbGxOb2RlUHJveHksCiAgICAgICAgICBzZWFyY2hQcm94eTogY2FsbFNlYXJjaE5vZGVQcm94eSwKICAgICAgICAgIGV4cGxvcmVDb250cm9sczogZXhwbG9yZUNvbnRyb2xzCiAgICAgICAgfTsKICAgICAgICAkc2NvcGUud29ya3NwYWNlID0gX2dyYXBoX2NsaWVudF93b3Jrc3BhY2UuZGVmYXVsdC5jcmVhdGVXb3Jrc3BhY2Uob3B0aW9ucyk7CiAgICAgIH0sCiAgICAgIHNldExpdmVSZXNwb25zZUZpZWxkczogZnVuY3Rpb24gc2V0TGl2ZVJlc3BvbnNlRmllbGRzKGZpZWxkcykgewogICAgICAgICRzY29wZS5saXZlUmVzcG9uc2VGaWVsZHMgPSBmaWVsZHM7CiAgICAgIH0sCiAgICAgIHNldFVybFRlbXBsYXRlczogZnVuY3Rpb24gc2V0VXJsVGVtcGxhdGVzKHVybFRlbXBsYXRlcykgewogICAgICAgICRzY29wZS51cmxUZW1wbGF0ZXMgPSB1cmxUZW1wbGF0ZXM7CiAgICAgIH0sCiAgICAgIGdldFdvcmtzcGFjZTogZnVuY3Rpb24gZ2V0V29ya3NwYWNlKCkgewogICAgICAgIHJldHVybiAkc2NvcGUud29ya3NwYWNlOwogICAgICB9LAogICAgICBnZXRTYXZlZFdvcmtzcGFjZTogZnVuY3Rpb24gZ2V0U2F2ZWRXb3Jrc3BhY2UoKSB7CiAgICAgICAgcmV0dXJuICRyb3V0ZS5jdXJyZW50LmxvY2Fscy5zYXZlZFdvcmtzcGFjZTsKICAgICAgfSwKICAgICAgbm90aWZpY2F0aW9uczogY29yZVN0YXJ0Lm5vdGlmaWNhdGlvbnMsCiAgICAgIGh0dHA6IGNvcmVTdGFydC5odHRwLAogICAgICBzaG93U2F2ZU1vZGFsOiBfbGVnYWN5X2ltcG9ydHMuc2hvd1NhdmVNb2RhbCwKICAgICAgc2V0V29ya3NwYWNlSW5pdGlhbGl6ZWQ6IGZ1bmN0aW9uIHNldFdvcmtzcGFjZUluaXRpYWxpemVkKCkgewogICAgICAgICRzY29wZS53b3Jrc3BhY2VJbml0aWFsaXplZCA9IHRydWU7CiAgICAgIH0sCiAgICAgIHNhdmVQb2xpY3k6IGdyYXBoU2F2ZVBvbGljeSwKICAgICAgY2hhbmdlVXJsOiBmdW5jdGlvbiBjaGFuZ2VVcmwobmV3VXJsKSB7CiAgICAgICAgJHNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24gKCkgewogICAgICAgICAgJGxvY2F0aW9uLnVybChuZXdVcmwpOwogICAgICAgIH0pOwogICAgICB9LAogICAgICBub3RpZnlBbmd1bGFyOiBmdW5jdGlvbiBub3RpZnlBbmd1bGFyKCkgewogICAgICAgICRzY29wZS4kZGlnZXN0KCk7CiAgICAgIH0sCiAgICAgIGNocm9tZTogY2hyb21lCiAgICB9KTsgLy8gcmVnaXN0ZXIgdGhpbmdzIG9uIHNjb3BlIHBhc3NlZCBkb3duIHRvIHJlYWN0IGNvbXBvbmVudHMKCiAgICAkc2NvcGUucGx1Z2luRGF0YVN0YXJ0ID0gbnBEYXRhOwogICAgJHNjb3BlLnN0b3JhZ2UgPSBzdG9yYWdlOwogICAgJHNjb3BlLmNvcmVTdGFydCA9IGNvcmVTdGFydDsKICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7CiAgICAkc2NvcGUucmVkdXhTdG9yZSA9IHN0b3JlOwogICAgJHNjb3BlLnNhdmVkV29ya3NwYWNlID0gJHJvdXRlLmN1cnJlbnQubG9jYWxzLnNhdmVkV29ya3NwYWNlOyAvLyByZWdpc3RlciB0aGluZ3MgZm9yIGxlZ2FjeSBhbmd1bGFyIFVJCgogICAgdmFyIGFsbFNhdmluZ0Rpc2FibGVkID0gZ3JhcGhTYXZlUG9saWN5ID09PSAnbm9uZSc7CiAgICAkc2NvcGUuc3B5bW9kZSA9ICdyZXF1ZXN0JzsKICAgICRzY29wZS5jb2xvcnMgPSBfc3R5bGVfY2hvaWNlcy5jb2xvckNob2ljZXM7CgogICAgJHNjb3BlLmlzQ29sb3JEYXJrID0gZnVuY3Rpb24gKGNvbG9yKSB7CiAgICAgIHJldHVybiBfZXVpLmlzQ29sb3JEYXJrLmFwcGx5KHZvaWQgMCwgX3RvQ29uc3VtYWJsZUFycmF5KCgwLCBfZXVpLmhleFRvUmdiKShjb2xvcikpKTsKICAgIH07CgogICAgJHNjb3BlLm5vZGVDbGljayA9IGZ1bmN0aW9uIChuLCAkZXZlbnQpIHsKICAgICAgLy9TZWxlY3Rpb24gbG9naWMgLSBzaGlmdCBrZXkrY2xpY2sgaGVscHMgc2VsZWN0cyBtdWx0aXBsZSBub2RlcwogICAgICAvLyBXaXRob3V0IHRoZSBzaGlmdCBrZXkgd2UgZGVzZWxlY3QgYWxsIHByaW9yIHNlbGVjdGlvbnMgKHBlcmhhcHMgbm90CiAgICAgIC8vIGEgZ3JlYXQgaWRlYSBmb3IgdG91Y2ggZGV2aWNlcyB3aXRoIG5vIGNvbmNlcHQgb2Ygc2hpZnQga2V5KQogICAgICBpZiAoISRldmVudC5zaGlmdEtleSkgewogICAgICAgIHZhciBwcmV2U2VsZWN0aW9uID0gbi5pc1NlbGVjdGVkOwogICAgICAgICRzY29wZS53b3Jrc3BhY2Uuc2VsZWN0Tm9uZSgpOwogICAgICAgIG4uaXNTZWxlY3RlZCA9IHByZXZTZWxlY3Rpb247CiAgICAgIH0KCiAgICAgIGlmICgkc2NvcGUud29ya3NwYWNlLnRvZ2dsZU5vZGVTZWxlY3Rpb24obikpIHsKICAgICAgICAkc2NvcGUuc2VsZWN0U2VsZWN0ZWQobik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgJHNjb3BlLmRldGFpbCA9IG51bGw7CiAgICAgIH0KICAgIH07CgogICAgJHNjb3BlLmNsaWNrRWRnZSA9IGZ1bmN0aW9uIChlZGdlKSB7CiAgICAgICRzY29wZS53b3Jrc3BhY2UuZ2V0QWxsSW50ZXJzZWN0aW9ucygkc2NvcGUuaGFuZGxlTWVyZ2VDYW5kaWRhdGVzQ2FsbGJhY2ssIFtlZGdlLnRvcFNyYywgZWRnZS50b3BUYXJnZXRdKTsKICAgIH07CgogICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uIChzZWFyY2hUZXJtKSB7CiAgICAgICRzY29wZS53b3Jrc3BhY2VJbml0aWFsaXplZCA9IHRydWU7CiAgICAgIHZhciBudW1Ib3BzID0gMjsKCiAgICAgIGlmIChzZWFyY2hUZXJtLnN0YXJ0c1dpdGgoJ3snKSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICB2YXIgcXVlcnkgPSBKU09OLnBhcnNlKHNlYXJjaFRlcm0pOwoKICAgICAgICAgIGlmIChxdWVyeS52ZXJ0aWNlcykgewogICAgICAgICAgICAvLyBJcyBhIGdyYXBoIGV4cGxvcmUgcmVxdWVzdAogICAgICAgICAgICAkc2NvcGUud29ya3NwYWNlLmNhbGxFbGFzdGljc2VhcmNoKHF1ZXJ5KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIElzIGEgcmVndWxhciBxdWVyeSBEU0wgcXVlcnkKICAgICAgICAgICAgJHNjb3BlLndvcmtzcGFjZS5zZWFyY2gocXVlcnksICRzY29wZS5saXZlUmVzcG9uc2VGaWVsZHMsIG51bUhvcHMpOwogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgaGFuZGxlRXJyb3IoZXJyKTsKICAgICAgICB9CgogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgJHNjb3BlLndvcmtzcGFjZS5zaW1wbGVTZWFyY2goc2VhcmNoVGVybSwgJHNjb3BlLmxpdmVSZXNwb25zZUZpZWxkcywgbnVtSG9wcyk7CiAgICB9OwoKICAgICRzY29wZS5zZWxlY3RTZWxlY3RlZCA9IGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICRzY29wZS5kZXRhaWwgPSB7CiAgICAgICAgbGF0ZXN0Tm9kZVNlbGVjdGlvbjogbm9kZQogICAgICB9OwogICAgICByZXR1cm4gJHNjb3BlLnNlbGVjdGVkU2VsZWN0ZWRWZXJ0ZXggPSBub2RlOwogICAgfTsKCiAgICAkc2NvcGUuaXNTZWxlY3RlZFNlbGVjdGVkID0gZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgcmV0dXJuICRzY29wZS5zZWxlY3RlZFNlbGVjdGVkVmVydGV4ID09PSBub2RlOwogICAgfTsKCiAgICAkc2NvcGUub3BlblVybFRlbXBsYXRlID0gZnVuY3Rpb24gKHRlbXBsYXRlKSB7CiAgICAgIHZhciB1cmwgPSB0ZW1wbGF0ZS51cmw7CiAgICAgIHZhciBuZXdVcmwgPSB1cmwucmVwbGFjZShfdXJsX3RlbXBsYXRlLnVybFRlbXBsYXRlUmVnZXgsIHRlbXBsYXRlLmVuY29kZXIuZW5jb2RlKCRzY29wZS53b3Jrc3BhY2UpKTsKICAgICAgd2luZG93Lm9wZW4obmV3VXJsLCAnX2JsYW5rJyk7CiAgICB9OwoKICAgICRzY29wZS5hY2VMb2FkZWQgPSBmdW5jdGlvbiAoZWRpdG9yKSB7CiAgICAgIGVkaXRvci4kYmxvY2tTY3JvbGxpbmcgPSBJbmZpbml0eTsKICAgIH07CgogICAgJHNjb3BlLnNldERldGFpbCA9IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICRzY29wZS5kZXRhaWwgPSBkYXRhOwogICAgfTsKCiAgICBmdW5jdGlvbiBjYW5XaXBlV29ya3NwYWNlKGNhbGxiYWNrLCB0ZXh0LCBvcHRpb25zKSB7CiAgICAgIGlmICghKDAsIF9zdGF0ZV9tYW5hZ2VtZW50Lmhhc0ZpZWxkc1NlbGVjdG9yKShzdG9yZS5nZXRTdGF0ZSgpKSkgewogICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgY29uZmlybU1vZGFsT3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoewogICAgICAgIG9uQ29uZmlybTogY2FsbGJhY2ssCiAgICAgICAgb25DYW5jZWw6IGZ1bmN0aW9uIG9uQ2FuY2VsKCkge30sCiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5ncmFwaC5sZWF2ZVdvcmtzcGFjZS5jb25maXJtQnV0dG9uTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0xlYXZlIGFueXdheScKICAgICAgICB9KSwKICAgICAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmdyYXBoLmxlYXZlV29ya3NwYWNlLm1vZGFsVGl0bGUnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1Vuc2F2ZWQgY2hhbmdlcycKICAgICAgICB9KQogICAgICB9LCBvcHRpb25zKTsKCiAgICAgIGNvbmZpcm1Nb2RhbCh0ZXh0IHx8IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5ncmFwaC5sZWF2ZVdvcmtzcGFjZS5jb25maXJtVGV4dCcsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0lmIHlvdSBsZWF2ZSBub3csIHlvdSB3aWxsIGxvc2UgdW5zYXZlZCBjaGFuZ2VzLicKICAgICAgfSksIGNvbmZpcm1Nb2RhbE9wdGlvbnMpOwogICAgfQoKICAgICRzY29wZS5jb25maXJtV2lwZVdvcmtzcGFjZSA9IGNhbldpcGVXb3Jrc3BhY2U7CgogICAgJHNjb3BlLnBlcmZvcm1NZXJnZSA9IGZ1bmN0aW9uIChwYXJlbnRJZCwgY2hpbGRJZCkgewogICAgICB2YXIgZm91bmQgPSB0cnVlOwoKICAgICAgd2hpbGUgKGZvdW5kKSB7CiAgICAgICAgZm91bmQgPSBmYWxzZTsKCiAgICAgICAgZm9yICh2YXIgaSBpbiAkc2NvcGUuZGV0YWlsLm1lcmdlQ2FuZGlkYXRlcykgewogICAgICAgICAgdmFyIG1jID0gJHNjb3BlLmRldGFpbC5tZXJnZUNhbmRpZGF0ZXNbaV07CgogICAgICAgICAgaWYgKG1jLmlkMSA9PT0gY2hpbGRJZCB8fCBtYy5pZDIgPT09IGNoaWxkSWQpIHsKICAgICAgICAgICAgJHNjb3BlLmRldGFpbC5tZXJnZUNhbmRpZGF0ZXMuc3BsaWNlKGksIDEpOwogICAgICAgICAgICBmb3VuZCA9IHRydWU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgJHNjb3BlLndvcmtzcGFjZS5tZXJnZUlkcyhwYXJlbnRJZCwgY2hpbGRJZCk7CiAgICAgICRzY29wZS5kZXRhaWwgPSBudWxsOwogICAgfTsKCiAgICAkc2NvcGUuaGFuZGxlTWVyZ2VDYW5kaWRhdGVzQ2FsbGJhY2sgPSBmdW5jdGlvbiAodGVybUludGVyc2VjdHMpIHsKICAgICAgdmFyIG1lcmdlQ2FuZGlkYXRlcyA9IFtdOwoKICAgICAgZm9yICh2YXIgaSBpbiB0ZXJtSW50ZXJzZWN0cykgewogICAgICAgIHZhciB0aSA9IHRlcm1JbnRlcnNlY3RzW2ldOwogICAgICAgIG1lcmdlQ2FuZGlkYXRlcy5wdXNoKHsKICAgICAgICAgIGlkMTogdGkuaWQxLAogICAgICAgICAgaWQyOiB0aS5pZDIsCiAgICAgICAgICB0ZXJtMTogdGkudGVybTEsCiAgICAgICAgICB0ZXJtMjogdGkudGVybTIsCiAgICAgICAgICB2MTogdGkudjEsCiAgICAgICAgICB2MjogdGkudjIsCiAgICAgICAgICBvdmVybGFwOiB0aS5vdmVybGFwCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgICRzY29wZS5kZXRhaWwgPSB7CiAgICAgICAgbWVyZ2VDYW5kaWRhdGVzOiBtZXJnZUNhbmRpZGF0ZXMKICAgICAgfTsKICAgIH07IC8vID09PT09IE1lbnViYXIgY29uZmlndXJhdGlvbiA9PT09PT09PT0KCgogICAgJHNjb3BlLnRvcE5hdk1lbnUgPSBbXTsKICAgICRzY29wZS50b3BOYXZNZW51LnB1c2goewogICAgICBrZXk6ICduZXcnLAogICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmdyYXBoLnRvcE5hdk1lbnUubmV3V29ya3NwYWNlTGFiZWwnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdOZXcnCiAgICAgIH0pLAogICAgICBkZXNjcmlwdGlvbjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmdyYXBoLnRvcE5hdk1lbnUubmV3V29ya3NwYWNlQXJpYUxhYmVsJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTmV3IFdvcmtzcGFjZScKICAgICAgfSksCiAgICAgIHRvb2x0aXA6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5ncmFwaC50b3BOYXZNZW51Lm5ld1dvcmtzcGFjZVRvb2x0aXAnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDcmVhdGUgYSBuZXcgd29ya3NwYWNlJwogICAgICB9KSwKICAgICAgcnVuOiBmdW5jdGlvbiBydW4oKSB7CiAgICAgICAgY2FuV2lwZVdvcmtzcGFjZShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAkc2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICgkbG9jYXRpb24udXJsKCkgPT09ICcvd29ya3NwYWNlLycpIHsKICAgICAgICAgICAgICAkcm91dGUucmVsb2FkKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgJGxvY2F0aW9uLnVybCgnL3dvcmtzcGFjZS8nKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIHRlc3RJZDogJ2dyYXBoTmV3QnV0dG9uJwogICAgfSk7IC8vIGlmIHNhdmluZyBpcyBkaXNhYmxlZCB1c2luZyB1aUNhcGFiaWxpdGllcywgd2UgZG9uJ3Qgd2FudCB0byByZW5kZXIgdGhlIHNhdmUKICAgIC8vIGJ1dHRvbiBzbyBpdCdzIGNvbnNpc3RlbnQgd2l0aCBhbGwgb2YgdGhlIG90aGVyIGFwcGxpY2F0aW9ucwoKICAgIGlmIChjYXBhYmlsaXRpZXMuc2F2ZSkgewogICAgICAvLyBhbGxTYXZpbmdEaXNhYmxlZCBpcyBiYXNlZCBvbiB0aGUgeHBhY2suZ3JhcGguc2F2ZVBvbGljeSwgd2UnbGwgbWFpbnRhaW4gdGhpcyBmdW5jdGlvbmFsaXR5CiAgICAgICRzY29wZS50b3BOYXZNZW51LnB1c2goewogICAgICAgIGtleTogJ3NhdmUnLAogICAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suZ3JhcGgudG9wTmF2TWVudS5zYXZlV29ya3NwYWNlLmVuYWJsZWRMYWJlbCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2F2ZScKICAgICAgICB9KSwKICAgICAgICBkZXNjcmlwdGlvbjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmdyYXBoLnRvcE5hdk1lbnUuc2F2ZVdvcmtzcGFjZS5lbmFibGVkQXJpYUxhYmVsJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdTYXZlIHdvcmtzcGFjZScKICAgICAgICB9KSwKICAgICAgICB0b29sdGlwOiBmdW5jdGlvbiB0b29sdGlwKCkgewogICAgICAgICAgaWYgKGFsbFNhdmluZ0Rpc2FibGVkKSB7CiAgICAgICAgICAgIHJldHVybiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suZ3JhcGgudG9wTmF2TWVudS5zYXZlV29ya3NwYWNlLmRpc2FibGVkVG9vbHRpcCcsIHsKICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ05vIGNoYW5nZXMgdG8gc2F2ZWQgd29ya3NwYWNlcyBhcmUgcGVybWl0dGVkIGJ5IHRoZSBjdXJyZW50IHNhdmUgcG9saWN5JwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suZ3JhcGgudG9wTmF2TWVudS5zYXZlV29ya3NwYWNlLmVuYWJsZWRUb29sdGlwJywgewogICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2F2ZSB0aGlzIHdvcmtzcGFjZScKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBkaXNhYmxlQnV0dG9uOiBmdW5jdGlvbiBkaXNhYmxlQnV0dG9uKCkgewogICAgICAgICAgcmV0dXJuIGFsbFNhdmluZ0Rpc2FibGVkIHx8ICEoMCwgX3N0YXRlX21hbmFnZW1lbnQuaGFzRmllbGRzU2VsZWN0b3IpKHN0b3JlLmdldFN0YXRlKCkpOwogICAgICAgIH0sCiAgICAgICAgcnVuOiBmdW5jdGlvbiBydW4oKSB7CiAgICAgICAgICBzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgICAgIHR5cGU6ICd4LXBhY2svZ3JhcGgvU0FWRV9XT1JLU1BBQ0UnLAogICAgICAgICAgICBwYXlsb2FkOiAkcm91dGUuY3VycmVudC5sb2NhbHMuc2F2ZWRXb3Jrc3BhY2UKICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgdGVzdElkOiAnZ3JhcGhTYXZlQnV0dG9uJwogICAgICB9KTsKICAgIH0KCiAgICAkc2NvcGUudG9wTmF2TWVudS5wdXNoKHsKICAgICAga2V5OiAnaW5zcGVjdCcsCiAgICAgIGRpc2FibGVCdXR0b246IGZ1bmN0aW9uIGRpc2FibGVCdXR0b24oKSB7CiAgICAgICAgcmV0dXJuICRzY29wZS53b3Jrc3BhY2UgPT09IG51bGw7CiAgICAgIH0sCiAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suZ3JhcGgudG9wTmF2TWVudS5pbnNwZWN0TGFiZWwnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdJbnNwZWN0JwogICAgICB9KSwKICAgICAgZGVzY3JpcHRpb246IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5ncmFwaC50b3BOYXZNZW51Lmluc3BlY3RBcmlhTGFiZWwnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdJbnNwZWN0JwogICAgICB9KSwKICAgICAgcnVuOiBmdW5jdGlvbiBydW4oKSB7CiAgICAgICAgJHNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIGN1clN0YXRlID0gJHNjb3BlLm1lbnVzLnNob3dJbnNwZWN0OwogICAgICAgICAgJHNjb3BlLmNsb3NlTWVudXMoKTsKICAgICAgICAgICRzY29wZS5tZW51cy5zaG93SW5zcGVjdCA9ICFjdXJTdGF0ZTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgICAkc2NvcGUudG9wTmF2TWVudS5wdXNoKHsKICAgICAga2V5OiAnc2V0dGluZ3MnLAogICAgICBkaXNhYmxlQnV0dG9uOiBmdW5jdGlvbiBkaXNhYmxlQnV0dG9uKCkgewogICAgICAgIHJldHVybiAoMCwgX3N0YXRlX21hbmFnZW1lbnQuZGF0YXNvdXJjZVNlbGVjdG9yKShzdG9yZS5nZXRTdGF0ZSgpKS50eXBlID09PSAnbm9uZSc7CiAgICAgIH0sCiAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suZ3JhcGgudG9wTmF2TWVudS5zZXR0aW5nc0xhYmVsJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2V0dGluZ3MnCiAgICAgIH0pLAogICAgICBkZXNjcmlwdGlvbjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmdyYXBoLnRvcE5hdk1lbnUuc2V0dGluZ3NBcmlhTGFiZWwnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdTZXR0aW5ncycKICAgICAgfSksCiAgICAgIHJ1bjogZnVuY3Rpb24gcnVuKCkgewogICAgICAgIHZhciBzZXR0aW5nc09ic2VydmFibGUgPSAoMCwgX2FzX29ic2VydmFibGUuYXNBbmd1bGFyU3luY2VkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgYmxhY2tsaXN0ZWROb2RlczogJHNjb3BlLndvcmtzcGFjZSA/IF90b0NvbnN1bWFibGVBcnJheSgkc2NvcGUud29ya3NwYWNlLmJsYWNrbGlzdGVkTm9kZXMpIDogdW5kZWZpbmVkLAogICAgICAgICAgICB1bmJsYWNrbGlzdE5vZGU6ICRzY29wZS53b3Jrc3BhY2UgPyAkc2NvcGUud29ya3NwYWNlLnVuYmxhY2tsaXN0IDogdW5kZWZpbmVkLAogICAgICAgICAgICBjYW5FZGl0RHJpbGxEb3duVXJsczogY2FuRWRpdERyaWxsRG93blVybHMKICAgICAgICAgIH07CiAgICAgICAgfSwgJHNjb3BlLiRkaWdlc3QuYmluZCgkc2NvcGUpKTsKICAgICAgICBjb3JlU3RhcnQub3ZlcmxheXMub3BlbkZseW91dCgoMCwgX3B1YmxpYy50b01vdW50UG9pbnQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0UmVkdXguUHJvdmlkZXIsIHsKICAgICAgICAgIHN0b3JlOiBzdG9yZQogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3NldHRpbmdzLlNldHRpbmdzLCB7CiAgICAgICAgICBvYnNlcnZhYmxlOiBzZXR0aW5nc09ic2VydmFibGUKICAgICAgICB9KSkpLCB7CiAgICAgICAgICBzaXplOiAnbScsCiAgICAgICAgICBjbG9zZUJ1dHRvbkFyaWFMYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmdyYXBoLnNldHRpbmdzLmNsb3NlTGFiZWwnLCB7CiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ2xvc2UnCiAgICAgICAgICB9KSwKICAgICAgICAgICdkYXRhLXRlc3Qtc3Viaic6ICdncmFwaFNldHRpbmdzRmx5b3V0JywKICAgICAgICAgIG93bkZvY3VzOiB0cnVlLAogICAgICAgICAgY2xhc3NOYW1lOiAnZ3BoU2V0dGluZ3NGbHlvdXQnLAogICAgICAgICAgbWF4V2lkdGg6IDUyMAogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsgLy8gQWxsb3cgVVJMcyB0byBpbmNsdWRlIGEgdXNlci1kZWZpbmVkIHRleHQgcXVlcnkKCiAgICBpZiAoJHJvdXRlLmN1cnJlbnQucGFyYW1zLnF1ZXJ5KSB7CiAgICAgICRzY29wZS5pbml0aWFsUXVlcnkgPSAkcm91dGUuY3VycmVudC5wYXJhbXMucXVlcnk7CiAgICAgIHZhciB1bmJpbmQgPSAkc2NvcGUuJHdhdGNoKCd3b3Jrc3BhY2UnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKCEkc2NvcGUud29ya3NwYWNlKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB1bmJpbmQoKTsKICAgICAgICAkc2NvcGUuc3VibWl0KCRyb3V0ZS5jdXJyZW50LnBhcmFtcy5xdWVyeSk7CiAgICAgIH0pOwogICAgfQoKICAgICRzY29wZS5tZW51cyA9IHsKICAgICAgc2hvd1NldHRpbmdzOiBmYWxzZQogICAgfTsKCiAgICAkc2NvcGUuY2xvc2VNZW51cyA9IGZ1bmN0aW9uICgpIHsKICAgICAgX2xvZGFzaC5kZWZhdWx0LmZvck93bigkc2NvcGUubWVudXMsIGZ1bmN0aW9uIChfLCBrZXkpIHsKICAgICAgICAkc2NvcGUubWVudXNba2V5XSA9IGZhbHNlOwogICAgICB9KTsKICAgIH07IC8vIERlYWwgd2l0aCBzaXR1YXRpb24gb2YgcmVxdWVzdCB0byBvcGVuIHNhdmVkIHdvcmtzcGFjZQoKCiAgICBpZiAoJHJvdXRlLmN1cnJlbnQubG9jYWxzLnNhdmVkV29ya3NwYWNlLmlkKSB7CiAgICAgIHN0b3JlLmRpc3BhdGNoKHsKICAgICAgICB0eXBlOiAneC1wYWNrL2dyYXBoL0xPQURfV09SS1NQQUNFJywKICAgICAgICBwYXlsb2FkOiAkcm91dGUuY3VycmVudC5sb2NhbHMuc2F2ZWRXb3Jrc3BhY2UKICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICAkc2NvcGUubm9JbmRleFBhdHRlcm5zID0gJHJvdXRlLmN1cnJlbnQubG9jYWxzLmluZGV4UGF0dGVybnMubGVuZ3RoID09PSAwOwogICAgfQogIH0pOyAvL0VuZCBjb250cm9sbGVyCn0="},null]}