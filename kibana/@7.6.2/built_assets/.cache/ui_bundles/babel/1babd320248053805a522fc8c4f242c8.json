{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/data/public/search/search_service.js","dependencies":[{"path":"src/plugins/data/public/search/search_service.js","mtime":1585205041591},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlNlYXJjaFNlcnZpY2UgPSB2b2lkIDA7Cgp2YXIgX2NyZWF0ZV9hcHBfbW91bnRfY29udGV4dF9zZWFyY2ggPSByZXF1aXJlKCIuL2NyZWF0ZV9hcHBfbW91bnRfY29udGV4dF9zZWFyY2giKTsKCnZhciBfc3luY19zZWFyY2hfc3RyYXRlZ3kgPSByZXF1aXJlKCIuL3N5bmNfc2VhcmNoX3N0cmF0ZWd5Iik7Cgp2YXIgX2VzX3NlYXJjaCA9IHJlcXVpcmUoIi4vZXNfc2VhcmNoIik7CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogIH0KfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICB9Cn0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgcmV0dXJuIENvbnN0cnVjdG9yOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQovKioKICogVGhlIHNlYXJjaCBwbHVnaW4gZXhwb3NlcyB0d28gcmVnaXN0cmF0aW9uIG1ldGhvZHMgZm9yIG90aGVyIHBsdWdpbnM6CiAqICAtICByZWdpc3RlclNlYXJjaFN0cmF0ZWd5UHJvdmlkZXIgZm9yIHBsdWdpbnMgdG8gYWRkIHRoZWlyIG93biBjdXN0b20KICogc2VhcmNoIHN0cmF0ZWdpZXMKICogIC0gIHJlZ2lzdGVyU2VhcmNoU3RyYXRlZ3lDb250ZXh0IGZvciBwbHVnaW5zIHRvIGV4cG9zZSBpbmZvcm1hdGlvbgogKiBhbmQvb3IgZnVuY3Rpb25hbGl0eSBmb3Igb3RoZXIgc2VhcmNoIHN0cmF0ZWdpZXMgdG8gdXNlCiAqCiAqIEl0IGFsc28gY29tZXMgd2l0aCB0d28gc2VhcmNoIHN0cmF0ZWd5IGltcGxlbWVudGF0aW9ucyAtIFNZTkNfU0VBUkNIX1NUUkFURUdZIGFuZCBFU19TRUFSQ0hfU1RSQVRFR1kuCiAqLwoKCnZhciBTZWFyY2hTZXJ2aWNlID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgLyoqCiAgICogQSBtYXBwaW5nIG9mIHNlYXJjaCBzdHJhdGVnaWVzIGtleWVkIGJ5IGEgdW5pcXVlIGlkZW50aWZpZXIuICBQbHVnaW5zIGNhbiB1c2UgdGhpcyB1bmlxdWUgaWRlbnRpZmllcgogICAqIHRvIG92ZXJyaWRlIGNlcnRhaW4gc3RyYXRlZ3kgaW1wbGVtZW50YXRpb25zLgogICAqLwoKICAvKioKICAgKiBFeHBvc2VzIGNvbnRleHQgdG8gdGhlIHNlYXJjaCBzdHJhdGVnaWVzLgogICAqLwogIGZ1bmN0aW9uIFNlYXJjaFNlcnZpY2UoaW5pdGlhbGl6ZXJDb250ZXh0KSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VhcmNoU2VydmljZSk7CgogICAgdGhpcy5pbml0aWFsaXplckNvbnRleHQgPSBpbml0aWFsaXplckNvbnRleHQ7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJzZWFyY2hTdHJhdGVnaWVzIiwge30pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiY29udGV4dENvbnRhaW5lciIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJzZWFyY2giLCB2b2lkIDApOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFNlYXJjaFNlcnZpY2UsIFt7CiAgICBrZXk6ICJzZXR1cCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXAoY29yZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHNlYXJjaCA9IHRoaXMuc2VhcmNoID0gKDAsIF9jcmVhdGVfYXBwX21vdW50X2NvbnRleHRfc2VhcmNoLmNyZWF0ZUFwcE1vdW50U2VhcmNoQ29udGV4dCkodGhpcy5zZWFyY2hTdHJhdGVnaWVzKS5zZWFyY2g7CiAgICAgIGNvcmUuYXBwbGljYXRpb24ucmVnaXN0ZXJNb3VudENvbnRleHQoJ3NlYXJjaCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgc2VhcmNoOiBzZWFyY2gKICAgICAgICB9OwogICAgICB9KTsKICAgICAgdGhpcy5jb250ZXh0Q29udGFpbmVyID0gY29yZS5jb250ZXh0LmNyZWF0ZUNvbnRleHRDb250YWluZXIoKTsKCiAgICAgIHZhciByZWdpc3RlclNlYXJjaFN0cmF0ZWd5UHJvdmlkZXIgPSBmdW5jdGlvbiByZWdpc3RlclNlYXJjaFN0cmF0ZWd5UHJvdmlkZXIocGx1Z2luLCBuYW1lLCBzdHJhdGVneVByb3ZpZGVyKSB7CiAgICAgICAgX3RoaXMuc2VhcmNoU3RyYXRlZ2llc1tuYW1lXSA9IF90aGlzLmNvbnRleHRDb250YWluZXIuY3JlYXRlSGFuZGxlcihwbHVnaW4sIHN0cmF0ZWd5UHJvdmlkZXIpOwogICAgICB9OwoKICAgICAgdmFyIGFwaSA9IHsKICAgICAgICByZWdpc3RlclNlYXJjaFN0cmF0ZWd5Q29udGV4dDogdGhpcy5jb250ZXh0Q29udGFpbmVyLnJlZ2lzdGVyQ29udGV4dCwKICAgICAgICByZWdpc3RlclNlYXJjaFN0cmF0ZWd5UHJvdmlkZXI6IHJlZ2lzdGVyU2VhcmNoU3RyYXRlZ3lQcm92aWRlcgogICAgICB9OwogICAgICBhcGkucmVnaXN0ZXJTZWFyY2hTdHJhdGVneUNvbnRleHQodGhpcy5pbml0aWFsaXplckNvbnRleHQub3BhcXVlSWQsICdjb3JlJywgZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBjb3JlOwogICAgICB9KTsKICAgICAgYXBpLnJlZ2lzdGVyU2VhcmNoU3RyYXRlZ3lQcm92aWRlcih0aGlzLmluaXRpYWxpemVyQ29udGV4dC5vcGFxdWVJZCwgX3N5bmNfc2VhcmNoX3N0cmF0ZWd5LlNZTkNfU0VBUkNIX1NUUkFURUdZLCBfc3luY19zZWFyY2hfc3RyYXRlZ3kuc3luY1NlYXJjaFN0cmF0ZWd5UHJvdmlkZXIpOyAvLyBFUyBzZWFyY2ggY2FwYWJpbGl0aWVzIGFyZSB3cml0dGVuIGluIGEgd2F5IHRoYXQgaXQgY291bGQgZWFzaWx5IGJlIGEgc2VwYXJhdGUgcGx1Z2luLAogICAgICAvLyBob3dldmVyIHRoZXNlIHR3byBwbHVnaW5zIGFyZSB0aWdodGx5IGNvdXBsZWQgZHVlIHRvIHRoZSBkZWZhdWx0IHNlYXJjaCBzdHJhdGVneSB1c2luZwogICAgICAvLyBlcyBzZWFyY2ggdHlwZXMuCgogICAgICAoMCwgX2VzX3NlYXJjaC5lc1NlYXJjaFNlcnZpY2UpKHRoaXMuaW5pdGlhbGl6ZXJDb250ZXh0KS5zZXR1cChjb3JlLCB7CiAgICAgICAgc2VhcmNoOiBhcGkKICAgICAgfSk7CiAgICAgIHJldHVybiBhcGk7CiAgICB9CiAgfSwgewogICAga2V5OiAic3RhcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0KGNvcmUpIHsKICAgICAgaWYgKCF0aGlzLnNlYXJjaCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignU2VhcmNoIHNob3VsZCBhbHdheXMgYmUgZGVmaW5lZCcpOwogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIHNlYXJjaDogdGhpcy5zZWFyY2gKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdG9wIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkge30KICB9XSk7CgogIHJldHVybiBTZWFyY2hTZXJ2aWNlOwp9KCk7CgpleHBvcnRzLlNlYXJjaFNlcnZpY2UgPSBTZWFyY2hTZXJ2aWNlOw=="},null]}