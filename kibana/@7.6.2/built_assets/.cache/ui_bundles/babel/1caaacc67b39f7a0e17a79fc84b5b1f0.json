{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/lens/public/indexpattern_plugin/dimension_panel/popover_editor.js","dependencies":[{"path":"x-pack/legacy/plugins/lens/public/indexpattern_plugin/dimension_panel/popover_editor.js","mtime":1585205045033},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlBvcG92ZXJFZGl0b3IgPSBQb3BvdmVyRWRpdG9yOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImNsYXNzbmFtZXMiKSk7Cgp2YXIgX29wZXJhdGlvbnMgPSByZXF1aXJlKCIuLi9vcGVyYXRpb25zIik7Cgp2YXIgX3N0YXRlX2hlbHBlcnMgPSByZXF1aXJlKCIuLi9zdGF0ZV9oZWxwZXJzIik7Cgp2YXIgX2ZpZWxkX3NlbGVjdCA9IHJlcXVpcmUoIi4vZmllbGRfc2VsZWN0Iik7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgiLi4vdXRpbHMiKTsKCnZhciBfYnVja2V0X25lc3RpbmdfZWRpdG9yID0gcmVxdWlyZSgiLi9idWNrZXRfbmVzdGluZ19lZGl0b3IiKTsKCnZhciBfbGVuc191aV90ZWxlbWV0cnkgPSByZXF1aXJlKCIuLi8uLi9sZW5zX3VpX3RlbGVtZXRyeSIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9Cgp2YXIgb3BlcmF0aW9uUGFuZWxzID0gKDAsIF9vcGVyYXRpb25zLmdldE9wZXJhdGlvbkRpc3BsYXkpKCk7CgpmdW5jdGlvbiBhc09wZXJhdGlvbk9wdGlvbnMob3BlcmF0aW9uVHlwZXMsIGNvbXBhdGlibGVXaXRoQ3VycmVudEZpZWxkKSB7CiAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheShvcGVyYXRpb25UeXBlcykuc29ydChmdW5jdGlvbiAob3BUeXBlMSwgb3BUeXBlMikgewogICAgcmV0dXJuIG9wZXJhdGlvblBhbmVsc1tvcFR5cGUxXS5kaXNwbGF5TmFtZS5sb2NhbGVDb21wYXJlKG9wZXJhdGlvblBhbmVsc1tvcFR5cGUyXS5kaXNwbGF5TmFtZSk7CiAgfSkubWFwKGZ1bmN0aW9uIChvcGVyYXRpb25UeXBlKSB7CiAgICByZXR1cm4gewogICAgICBvcGVyYXRpb25UeXBlOiBvcGVyYXRpb25UeXBlLAogICAgICBjb21wYXRpYmxlV2l0aEN1cnJlbnRGaWVsZDogY29tcGF0aWJsZVdpdGhDdXJyZW50RmllbGQKICAgIH07CiAgfSk7Cn0KCmZ1bmN0aW9uIFBvcG92ZXJFZGl0b3IocHJvcHMpIHsKICB2YXIgc2VsZWN0ZWRDb2x1bW4gPSBwcm9wcy5zZWxlY3RlZENvbHVtbiwKICAgICAgb3BlcmF0aW9uRmllbGRTdXBwb3J0TWF0cml4ID0gcHJvcHMub3BlcmF0aW9uRmllbGRTdXBwb3J0TWF0cml4LAogICAgICBzdGF0ZSA9IHByb3BzLnN0YXRlLAogICAgICBjb2x1bW5JZCA9IHByb3BzLmNvbHVtbklkLAogICAgICBzZXRTdGF0ZSA9IHByb3BzLnNldFN0YXRlLAogICAgICBsYXllcklkID0gcHJvcHMubGF5ZXJJZCwKICAgICAgY3VycmVudEluZGV4UGF0dGVybiA9IHByb3BzLmN1cnJlbnRJbmRleFBhdHRlcm4sCiAgICAgIHVuaXF1ZUxhYmVsID0gcHJvcHMudW5pcXVlTGFiZWwsCiAgICAgIGhpZGVHcm91cGluZyA9IHByb3BzLmhpZGVHcm91cGluZzsKICB2YXIgb3BlcmF0aW9uQnlGaWVsZCA9IG9wZXJhdGlvbkZpZWxkU3VwcG9ydE1hdHJpeC5vcGVyYXRpb25CeUZpZWxkLAogICAgICBmaWVsZEJ5T3BlcmF0aW9uID0gb3BlcmF0aW9uRmllbGRTdXBwb3J0TWF0cml4LmZpZWxkQnlPcGVyYXRpb247CgogIHZhciBfdXNlU3RhdGUgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShmYWxzZSksCiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLAogICAgICBpc1BvcG92ZXJPcGVuID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0UG9wb3Zlck9wZW4gPSBfdXNlU3RhdGUyWzFdOwoKICB2YXIgX3VzZVN0YXRlMyA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKG51bGwpLAogICAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksCiAgICAgIGluY29tcGF0aWJsZVNlbGVjdGVkT3BlcmF0aW9uVHlwZSA9IF91c2VTdGF0ZTRbMF0sCiAgICAgIHNldEludmFsaWRPcGVyYXRpb25UeXBlID0gX3VzZVN0YXRlNFsxXTsKCiAgdmFyIFBhcmFtRWRpdG9yID0gc2VsZWN0ZWRDb2x1bW4gJiYgX29wZXJhdGlvbnMub3BlcmF0aW9uRGVmaW5pdGlvbk1hcFtzZWxlY3RlZENvbHVtbi5vcGVyYXRpb25UeXBlXS5wYXJhbUVkaXRvcjsKICB2YXIgZmllbGRNYXAgPSAoMCwgX3JlYWN0LnVzZU1lbW8pKGZ1bmN0aW9uICgpIHsKICAgIHZhciBmaWVsZHMgPSB7fTsKICAgIGN1cnJlbnRJbmRleFBhdHRlcm4uZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgIGZpZWxkc1tmaWVsZC5uYW1lXSA9IGZpZWxkOwogICAgfSk7CiAgICByZXR1cm4gZmllbGRzOwogIH0sIFtjdXJyZW50SW5kZXhQYXR0ZXJuXSk7CgogIGZ1bmN0aW9uIGdldE9wZXJhdGlvblR5cGVzKCkgewogICAgdmFyIHBvc3NpYmxlT3BlcmF0aW9uVHlwZXMgPSBPYmplY3Qua2V5cyhmaWVsZEJ5T3BlcmF0aW9uKTsKICAgIHZhciB2YWxpZE9wZXJhdGlvblR5cGVzID0gW107CgogICAgaWYgKCFzZWxlY3RlZENvbHVtbikgewogICAgICB2YWxpZE9wZXJhdGlvblR5cGVzLnB1c2guYXBwbHkodmFsaWRPcGVyYXRpb25UeXBlcywgX3RvQ29uc3VtYWJsZUFycmF5KE9iamVjdC5rZXlzKGZpZWxkQnlPcGVyYXRpb24pKSk7CiAgICB9IGVsc2UgaWYgKCgwLCBfdXRpbHMuaGFzRmllbGQpKHNlbGVjdGVkQ29sdW1uKSAmJiBvcGVyYXRpb25CeUZpZWxkW3NlbGVjdGVkQ29sdW1uLnNvdXJjZUZpZWxkXSkgewogICAgICB2YWxpZE9wZXJhdGlvblR5cGVzLnB1c2guYXBwbHkodmFsaWRPcGVyYXRpb25UeXBlcywgX3RvQ29uc3VtYWJsZUFycmF5KG9wZXJhdGlvbkJ5RmllbGRbc2VsZWN0ZWRDb2x1bW4uc291cmNlRmllbGRdKSk7CiAgICB9CgogICAgcmV0dXJuIF9sb2Rhc2guZGVmYXVsdC51bmlxKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXNPcGVyYXRpb25PcHRpb25zKHZhbGlkT3BlcmF0aW9uVHlwZXMsIHRydWUpKSwgX3RvQ29uc3VtYWJsZUFycmF5KGFzT3BlcmF0aW9uT3B0aW9ucyhwb3NzaWJsZU9wZXJhdGlvblR5cGVzLCBmYWxzZSkpKSwgJ29wZXJhdGlvblR5cGUnKTsKICB9CgogIGZ1bmN0aW9uIGdldFNpZGVOYXZJdGVtcygpIHsKICAgIHJldHVybiBbewogICAgICBuYW1lOiAnJywKICAgICAgaWQ6ICcwJywKICAgICAgaXRlbXM6IGdldE9wZXJhdGlvblR5cGVzKCkubWFwKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgICAgdmFyIG9wZXJhdGlvblR5cGUgPSBfcmVmLm9wZXJhdGlvblR5cGUsCiAgICAgICAgICAgIGNvbXBhdGlibGVXaXRoQ3VycmVudEZpZWxkID0gX3JlZi5jb21wYXRpYmxlV2l0aEN1cnJlbnRGaWVsZDsKICAgICAgICByZXR1cm4gewogICAgICAgICAgbmFtZTogb3BlcmF0aW9uUGFuZWxzW29wZXJhdGlvblR5cGVdLmRpc3BsYXlOYW1lLAogICAgICAgICAgaWQ6IG9wZXJhdGlvblR5cGUsCiAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KSgnbG5zUG9wb3ZlckVkaXRvcl9fb3BlcmF0aW9uJywgewogICAgICAgICAgICAnbG5zUG9wb3ZlckVkaXRvcl9fb3BlcmF0aW9uLS1zZWxlY3RlZCc6IEJvb2xlYW4oaW5jb21wYXRpYmxlU2VsZWN0ZWRPcGVyYXRpb25UeXBlID09PSBvcGVyYXRpb25UeXBlIHx8ICFpbmNvbXBhdGlibGVTZWxlY3RlZE9wZXJhdGlvblR5cGUgJiYgc2VsZWN0ZWRDb2x1bW4gJiYgc2VsZWN0ZWRDb2x1bW4ub3BlcmF0aW9uVHlwZSA9PT0gb3BlcmF0aW9uVHlwZSksCiAgICAgICAgICAgICdsbnNQb3BvdmVyRWRpdG9yX19vcGVyYXRpb24tLWluY29tcGF0aWJsZSc6ICFjb21wYXRpYmxlV2l0aEN1cnJlbnRGaWVsZAogICAgICAgICAgfSksCiAgICAgICAgICAnZGF0YS10ZXN0LXN1YmonOiAibG5zLWluZGV4UGF0dGVybkRpbWVuc2lvbiIuY29uY2F0KGNvbXBhdGlibGVXaXRoQ3VycmVudEZpZWxkID8gJycgOiAnSW5jb21wYXRpYmxlJywgIi0iKS5jb25jYXQob3BlcmF0aW9uVHlwZSksCiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICBpZiAoIXNlbGVjdGVkQ29sdW1uIHx8ICFjb21wYXRpYmxlV2l0aEN1cnJlbnRGaWVsZCkgewogICAgICAgICAgICAgIHZhciBwb3NzaWJsZUZpZWxkcyA9IGZpZWxkQnlPcGVyYXRpb25bb3BlcmF0aW9uVHlwZV0gfHwgW107CgogICAgICAgICAgICAgIGlmIChwb3NzaWJsZUZpZWxkcy5sZW5ndGggPT09IDEpIHsKICAgICAgICAgICAgICAgIHNldFN0YXRlKCgwLCBfc3RhdGVfaGVscGVycy5jaGFuZ2VDb2x1bW4pKHsKICAgICAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlLAogICAgICAgICAgICAgICAgICBsYXllcklkOiBsYXllcklkLAogICAgICAgICAgICAgICAgICBjb2x1bW5JZDogY29sdW1uSWQsCiAgICAgICAgICAgICAgICAgIG5ld0NvbHVtbjogKDAsIF9vcGVyYXRpb25zLmJ1aWxkQ29sdW1uKSh7CiAgICAgICAgICAgICAgICAgICAgY29sdW1uczogcHJvcHMuc3RhdGUubGF5ZXJzW3Byb3BzLmxheWVySWRdLmNvbHVtbnMsCiAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGVkUHJpb3JpdHk6IHByb3BzLnN1Z2dlc3RlZFByaW9yaXR5LAogICAgICAgICAgICAgICAgICAgIGxheWVySWQ6IHByb3BzLmxheWVySWQsCiAgICAgICAgICAgICAgICAgICAgb3A6IG9wZXJhdGlvblR5cGUsCiAgICAgICAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJuOiBjdXJyZW50SW5kZXhQYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIGZpZWxkOiBmaWVsZE1hcFtwb3NzaWJsZUZpZWxkc1swXV0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc2V0SW52YWxpZE9wZXJhdGlvblR5cGUob3BlcmF0aW9uVHlwZSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAoMCwgX2xlbnNfdWlfdGVsZW1ldHJ5LnRyYWNrVWlFdmVudCkoImluZGV4cGF0dGVybl9kaW1lbnNpb25fb3BlcmF0aW9uXyIuY29uY2F0KG9wZXJhdGlvblR5cGUpKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChpbmNvbXBhdGlibGVTZWxlY3RlZE9wZXJhdGlvblR5cGUpIHsKICAgICAgICAgICAgICBzZXRJbnZhbGlkT3BlcmF0aW9uVHlwZShudWxsKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHNlbGVjdGVkQ29sdW1uLm9wZXJhdGlvblR5cGUgPT09IG9wZXJhdGlvblR5cGUpIHsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBuZXdDb2x1bW4gPSAoMCwgX29wZXJhdGlvbnMuYnVpbGRDb2x1bW4pKHsKICAgICAgICAgICAgICBjb2x1bW5zOiBwcm9wcy5zdGF0ZS5sYXllcnNbcHJvcHMubGF5ZXJJZF0uY29sdW1ucywKICAgICAgICAgICAgICBzdWdnZXN0ZWRQcmlvcml0eTogcHJvcHMuc3VnZ2VzdGVkUHJpb3JpdHksCiAgICAgICAgICAgICAgbGF5ZXJJZDogcHJvcHMubGF5ZXJJZCwKICAgICAgICAgICAgICBvcDogb3BlcmF0aW9uVHlwZSwKICAgICAgICAgICAgICBpbmRleFBhdHRlcm46IGN1cnJlbnRJbmRleFBhdHRlcm4sCiAgICAgICAgICAgICAgZmllbGQ6IGZpZWxkTWFwW3NlbGVjdGVkQ29sdW1uLnNvdXJjZUZpZWxkXQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgKDAsIF9sZW5zX3VpX3RlbGVtZXRyeS50cmFja1VpRXZlbnQpKCJpbmRleHBhdHRlcm5fZGltZW5zaW9uX29wZXJhdGlvbl9mcm9tXyIuY29uY2F0KHNlbGVjdGVkQ29sdW1uLm9wZXJhdGlvblR5cGUsICJfdG9fIikuY29uY2F0KG9wZXJhdGlvblR5cGUpKTsKICAgICAgICAgICAgc2V0U3RhdGUoKDAsIF9zdGF0ZV9oZWxwZXJzLmNoYW5nZUNvbHVtbikoewogICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSwKICAgICAgICAgICAgICBsYXllcklkOiBsYXllcklkLAogICAgICAgICAgICAgIGNvbHVtbklkOiBjb2x1bW5JZCwKICAgICAgICAgICAgICBuZXdDb2x1bW46IG5ld0NvbHVtbgogICAgICAgICAgICB9KSk7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfSkKICAgIH1dOwogIH0KCiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQb3BvdmVyLCB7CiAgICBpZDogY29sdW1uSWQsCiAgICBjbGFzc05hbWU6ICJsbnNQb3BvdmVyRWRpdG9yIiwKICAgIGFuY2hvckNsYXNzTmFtZTogc2VsZWN0ZWRDb2x1bW4gPyAnbG5zUG9wb3ZlckVkaXRvcl9fYW5jaG9yJyA6ICdsbnNQb3BvdmVyRWRpdG9yX19saW5rJywKICAgIGJ1dHRvbjogc2VsZWN0ZWRDb2x1bW4gPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICBjbGFzc05hbWU6ICJsbnNQb3BvdmVyRWRpdG9yX19saW5rIiwKICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICBzZXRQb3BvdmVyT3BlbighaXNQb3BvdmVyT3Blbik7CiAgICAgIH0sCiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJpbmRleFBhdHRlcm4tY29uZmlndXJlLWRpbWVuc2lvbiIsCiAgICAgICJhcmlhLWxhYmVsIjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuY29uZmlndXJlLmVkaXRDb25maWcnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdFZGl0IGNvbmZpZ3VyYXRpb24nCiAgICAgIH0pLAogICAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuY29uZmlndXJlLmVkaXRDb25maWcnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdFZGl0IGNvbmZpZ3VyYXRpb24nCiAgICAgIH0pCiAgICB9LCB1bmlxdWVMYWJlbCkgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uRW1wdHksIHsKICAgICAgaWNvblR5cGU6ICJwbHVzSW5DaXJjbGVGaWxsZWQiLAogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiaW5kZXhQYXR0ZXJuLWNvbmZpZ3VyZS1kaW1lbnNpb24iLAogICAgICAiYXJpYS1sYWJlbCI6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmNvbmZpZ3VyZS5hZGRDb25maWcnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdBZGQgYSBjb25maWd1cmF0aW9uJwogICAgICB9KSwKICAgICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmNvbmZpZ3VyZS5hZGRDb25maWcnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdBZGQgYSBjb25maWd1cmF0aW9uJwogICAgICB9KSwKICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICByZXR1cm4gc2V0UG9wb3Zlck9wZW4oIWlzUG9wb3Zlck9wZW4pOwogICAgICB9LAogICAgICBzaXplOiAieHMiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLmxlbnMuY29uZmlndXJlLmVtcHR5Q29uZmlnIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJEcm9wIGEgZmllbGQgaGVyZSIKICAgIH0pKSksCiAgICBpc09wZW46IGlzUG9wb3Zlck9wZW4sCiAgICBjbG9zZVBvcG92ZXI6IGZ1bmN0aW9uIGNsb3NlUG9wb3ZlcigpIHsKICAgICAgc2V0UG9wb3Zlck9wZW4oZmFsc2UpOwogICAgICBzZXRJbnZhbGlkT3BlcmF0aW9uVHlwZShudWxsKTsKICAgIH0sCiAgICBhbmNob3JQb3NpdGlvbjogImxlZnRVcCIsCiAgICB3aXRoVGl0bGU6IHRydWUsCiAgICBwYW5lbFBhZGRpbmdTaXplOiAicyIKICB9LCBpc1BvcG92ZXJPcGVuICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgIGd1dHRlclNpemU6ICJzIiwKICAgIGRpcmVjdGlvbjogImNvbHVtbiIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2ZpZWxkX3NlbGVjdC5GaWVsZFNlbGVjdCwgewogICAgY3VycmVudEluZGV4UGF0dGVybjogY3VycmVudEluZGV4UGF0dGVybiwKICAgIGV4aXN0aW5nRmllbGRzOiBzdGF0ZS5leGlzdGluZ0ZpZWxkcywKICAgIHNob3dFbXB0eUZpZWxkczogc3RhdGUuc2hvd0VtcHR5RmllbGRzLAogICAgZmllbGRNYXA6IGZpZWxkTWFwLAogICAgb3BlcmF0aW9uRmllbGRTdXBwb3J0TWF0cml4OiBvcGVyYXRpb25GaWVsZFN1cHBvcnRNYXRyaXgsCiAgICBzZWxlY3RlZENvbHVtbk9wZXJhdGlvblR5cGU6IHNlbGVjdGVkQ29sdW1uICYmIHNlbGVjdGVkQ29sdW1uLm9wZXJhdGlvblR5cGUsCiAgICBzZWxlY3RlZENvbHVtblNvdXJjZUZpZWxkOiBzZWxlY3RlZENvbHVtbiAmJiAoMCwgX3V0aWxzLmhhc0ZpZWxkKShzZWxlY3RlZENvbHVtbikgPyBzZWxlY3RlZENvbHVtbi5zb3VyY2VGaWVsZCA6IHVuZGVmaW5lZCwKICAgIGluY29tcGF0aWJsZVNlbGVjdGVkT3BlcmF0aW9uVHlwZTogaW5jb21wYXRpYmxlU2VsZWN0ZWRPcGVyYXRpb25UeXBlLAogICAgb25EZWxldGVDb2x1bW46IGZ1bmN0aW9uIG9uRGVsZXRlQ29sdW1uKCkgewogICAgICBzZXRTdGF0ZSgoMCwgX3N0YXRlX2hlbHBlcnMuZGVsZXRlQ29sdW1uKSh7CiAgICAgICAgc3RhdGU6IHN0YXRlLAogICAgICAgIGxheWVySWQ6IGxheWVySWQsCiAgICAgICAgY29sdW1uSWQ6IGNvbHVtbklkCiAgICAgIH0pKTsKICAgIH0sCiAgICBvbkNob29zZTogZnVuY3Rpb24gb25DaG9vc2UoY2hvaWNlKSB7CiAgICAgIHZhciBjb2x1bW47CgogICAgICBpZiAoIWluY29tcGF0aWJsZVNlbGVjdGVkT3BlcmF0aW9uVHlwZSAmJiBzZWxlY3RlZENvbHVtbiAmJiAnZmllbGQnIGluIGNob2ljZSAmJiBjaG9pY2Uub3BlcmF0aW9uVHlwZSA9PT0gc2VsZWN0ZWRDb2x1bW4ub3BlcmF0aW9uVHlwZSkgewogICAgICAgIC8vIElmIHdlIGp1c3QgY2hhbmdlZCB0aGUgZmllbGQgYXJlIG5vdCBpbiBhbiBlcnJvciBzdGF0ZSBhbmQgdGhlIG9wZXJhdGlvbiBkaWRuJ3QgY2hhbmdlLAogICAgICAgIC8vIHdlIHVzZSB0aGUgb3BlcmF0aW9ucyBvbkZpZWxkQ2hhbmdlIG1ldGhvZCB0byBjYWxjdWxhdGUgdGhlIG5ldyBjb2x1bW4uCiAgICAgICAgY29sdW1uID0gKDAsIF9vcGVyYXRpb25zLmNoYW5nZUZpZWxkKShzZWxlY3RlZENvbHVtbiwgY3VycmVudEluZGV4UGF0dGVybiwgZmllbGRNYXBbY2hvaWNlLmZpZWxkXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gT3RoZXJ3aXNlIHdlJ2xsIHVzZSB0aGUgYnVpbGRDb2x1bW4gbWV0aG9kIHRvIGNhbGN1bGF0ZSBhIG5ldyBjb2x1bW4KICAgICAgICB2YXIgY29tcGF0aWJsZU9wZXJhdGlvbnMgPSAnZmllbGQnIGluIGNob2ljZSAmJiBvcGVyYXRpb25GaWVsZFN1cHBvcnRNYXRyaXgub3BlcmF0aW9uQnlGaWVsZFtjaG9pY2UuZmllbGRdIHx8IFtdOwogICAgICAgIHZhciBvcGVyYXRpb247CgogICAgICAgIGlmIChjb21wYXRpYmxlT3BlcmF0aW9ucy5sZW5ndGggPiAwKSB7CiAgICAgICAgICBvcGVyYXRpb24gPSBpbmNvbXBhdGlibGVTZWxlY3RlZE9wZXJhdGlvblR5cGUgJiYgY29tcGF0aWJsZU9wZXJhdGlvbnMuaW5jbHVkZXMoaW5jb21wYXRpYmxlU2VsZWN0ZWRPcGVyYXRpb25UeXBlKSA/IGluY29tcGF0aWJsZVNlbGVjdGVkT3BlcmF0aW9uVHlwZSA6IGNvbXBhdGlibGVPcGVyYXRpb25zWzBdOwogICAgICAgIH0gZWxzZSBpZiAoJ2ZpZWxkJyBpbiBjaG9pY2UpIHsKICAgICAgICAgIG9wZXJhdGlvbiA9IGNob2ljZS5vcGVyYXRpb25UeXBlOwogICAgICAgIH0KCiAgICAgICAgY29sdW1uID0gKDAsIF9vcGVyYXRpb25zLmJ1aWxkQ29sdW1uKSh7CiAgICAgICAgICBjb2x1bW5zOiBwcm9wcy5zdGF0ZS5sYXllcnNbcHJvcHMubGF5ZXJJZF0uY29sdW1ucywKICAgICAgICAgIGZpZWxkOiBmaWVsZE1hcFtjaG9pY2UuZmllbGRdLAogICAgICAgICAgaW5kZXhQYXR0ZXJuOiBjdXJyZW50SW5kZXhQYXR0ZXJuLAogICAgICAgICAgbGF5ZXJJZDogcHJvcHMubGF5ZXJJZCwKICAgICAgICAgIHN1Z2dlc3RlZFByaW9yaXR5OiBwcm9wcy5zdWdnZXN0ZWRQcmlvcml0eSwKICAgICAgICAgIG9wOiBvcGVyYXRpb24KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgc2V0U3RhdGUoKDAsIF9zdGF0ZV9oZWxwZXJzLmNoYW5nZUNvbHVtbikoewogICAgICAgIHN0YXRlOiBzdGF0ZSwKICAgICAgICBsYXllcklkOiBsYXllcklkLAogICAgICAgIGNvbHVtbklkOiBjb2x1bW5JZCwKICAgICAgICBuZXdDb2x1bW46IGNvbHVtbiwKICAgICAgICBrZWVwUGFyYW1zOiBmYWxzZQogICAgICB9KSk7CiAgICAgIHNldEludmFsaWRPcGVyYXRpb25UeXBlKG51bGwpOwogICAgfQogIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICBndXR0ZXJTaXplOiAicyIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgIGdyb3c6IG51bGwsCiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KSgnbG5zUG9wb3ZlckVkaXRvcl9fbGVmdCcpCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNpZGVOYXYsIHsKICAgIGl0ZW1zOiBnZXRTaWRlTmF2SXRlbXMoKQogIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICBncm93OiB0cnVlLAogICAgY2xhc3NOYW1lOiAibG5zUG9wb3ZlckVkaXRvcl9fcmlnaHQiCiAgfSwgaW5jb21wYXRpYmxlU2VsZWN0ZWRPcGVyYXRpb25UeXBlICYmIHNlbGVjdGVkQ29sdW1uICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDYWxsT3V0LCB7CiAgICAiZGF0YS10ZXN0LXN1YmoiOiAiaW5kZXhQYXR0ZXJuLWludmFsaWQtb3BlcmF0aW9uIiwKICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subGVucy5pbmRleFBhdHRlcm4uaW52YWxpZE9wZXJhdGlvbkxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1RvIHVzZSB0aGlzIGZ1bmN0aW9uLCBzZWxlY3QgYSBkaWZmZXJlbnQgZmllbGQuJwogICAgfSksCiAgICBjb2xvcjogIndhcm5pbmciLAogICAgc2l6ZTogInMiLAogICAgaWNvblR5cGU6ICJzb3J0VXAiCiAgfSksIGluY29tcGF0aWJsZVNlbGVjdGVkT3BlcmF0aW9uVHlwZSAmJiAhc2VsZWN0ZWRDb2x1bW4gJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNhbGxPdXQsIHsKICAgIHNpemU6ICJzIiwKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJpbmRleFBhdHRlcm4tZmllbGRsZXNzLW9wZXJhdGlvbiIsCiAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLmZpZWxkbGVzc09wZXJhdGlvbkxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1RvIHVzZSB0aGlzIGZ1bmN0aW9uLCBzZWxlY3QgYSBmaWVsZC4nCiAgICB9KSwKICAgIGljb25UeXBlOiAic29ydFVwIgogIH0pLCAhaW5jb21wYXRpYmxlU2VsZWN0ZWRPcGVyYXRpb25UeXBlICYmIFBhcmFtRWRpdG9yICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUGFyYW1FZGl0b3IsIHsKICAgIHN0YXRlOiBzdGF0ZSwKICAgIHNldFN0YXRlOiBzZXRTdGF0ZSwKICAgIGNvbHVtbklkOiBjb2x1bW5JZCwKICAgIGN1cnJlbnRDb2x1bW46IHN0YXRlLmxheWVyc1tsYXllcklkXS5jb2x1bW5zW2NvbHVtbklkXSwKICAgIHN0b3JhZ2U6IHByb3BzLnN0b3JhZ2UsCiAgICB1aVNldHRpbmdzOiBwcm9wcy51aVNldHRpbmdzLAogICAgc2F2ZWRPYmplY3RzQ2xpZW50OiBwcm9wcy5zYXZlZE9iamVjdHNDbGllbnQsCiAgICBsYXllcklkOiBsYXllcklkLAogICAgaHR0cDogcHJvcHMuaHR0cCwKICAgIGRhdGVSYW5nZTogcHJvcHMuZGF0ZVJhbmdlCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgIHNpemU6ICJtIgogIH0pKSwgIWluY29tcGF0aWJsZVNlbGVjdGVkT3BlcmF0aW9uVHlwZSAmJiBzZWxlY3RlZENvbHVtbiAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5jb2x1bW5MYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdMYWJlbCcsCiAgICAgIGRlc2NyaXB0aW9uOiAnTGFiZWwgb2YgYSBjb2x1bW4gb2YgZGF0YScKICAgIH0pLAogICAgZGlzcGxheTogInJvd0NvbXByZXNzZWQiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZpZWxkVGV4dCwgewogICAgY29tcHJlc3NlZDogdHJ1ZSwKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJpbmRleFBhdHRlcm4tbGFiZWwtZWRpdCIsCiAgICB2YWx1ZTogc2VsZWN0ZWRDb2x1bW4ubGFiZWwsCiAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkgewogICAgICBzZXRTdGF0ZSgoMCwgX3N0YXRlX2hlbHBlcnMuY2hhbmdlQ29sdW1uKSh7CiAgICAgICAgc3RhdGU6IHN0YXRlLAogICAgICAgIGxheWVySWQ6IGxheWVySWQsCiAgICAgICAgY29sdW1uSWQ6IGNvbHVtbklkLAogICAgICAgIG5ld0NvbHVtbjogX29iamVjdFNwcmVhZCh7fSwgc2VsZWN0ZWRDb2x1bW4sIHsKICAgICAgICAgIGxhYmVsOiBlLnRhcmdldC52YWx1ZQogICAgICAgIH0pCiAgICAgIH0pKTsKICAgIH0KICB9KSksICFoaWRlR3JvdXBpbmcgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfYnVja2V0X25lc3RpbmdfZWRpdG9yLkJ1Y2tldE5lc3RpbmdFZGl0b3IsIHsKICAgIGxheWVyOiBzdGF0ZS5sYXllcnNbcHJvcHMubGF5ZXJJZF0sCiAgICBjb2x1bW5JZDogcHJvcHMuY29sdW1uSWQsCiAgICBzZXRDb2x1bW5zOiBmdW5jdGlvbiBzZXRDb2x1bW5zKGNvbHVtbk9yZGVyKSB7CiAgICAgIHNldFN0YXRlKF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICAgICAgbGF5ZXJzOiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZS5sYXllcnMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgcHJvcHMubGF5ZXJJZCwgX29iamVjdFNwcmVhZCh7fSwgc3RhdGUubGF5ZXJzW3Byb3BzLmxheWVySWRdLCB7CiAgICAgICAgICBjb2x1bW5PcmRlcjogY29sdW1uT3JkZXIKICAgICAgICB9KSkpCiAgICAgIH0pKTsKICAgIH0KICB9KSkpKSkpOwp9"},null]}