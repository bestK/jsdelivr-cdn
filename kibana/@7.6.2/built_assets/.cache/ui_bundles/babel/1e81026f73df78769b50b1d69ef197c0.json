{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/data_frame_analytics/pages/analytics_management/components/analytics_list/expanded_row.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/data_frame_analytics/pages/analytics_management/components/analytics_list/expanded_row.js","mtime":1585205045577},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuRXhwYW5kZWRSb3cgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX21vbWVudFRpbWV6b25lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJtb21lbnQtdGltZXpvbmUiKSk7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX2RhdGVfdXRpbHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi91dGlsL2RhdGVfdXRpbHMiKTsKCnZhciBfZXhwYW5kZWRfcm93X2RldGFpbHNfcGFuZSA9IHJlcXVpcmUoIi4vZXhwYW5kZWRfcm93X2RldGFpbHNfcGFuZSIpOwoKdmFyIF9leHBhbmRlZF9yb3dfanNvbl9wYW5lID0gcmVxdWlyZSgiLi9leHBhbmRlZF9yb3dfanNvbl9wYW5lIik7Cgp2YXIgX3Byb2dyZXNzX2JhciA9IHJlcXVpcmUoIi4vcHJvZ3Jlc3NfYmFyIik7Cgp2YXIgX2NvbW1vbiA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2NvbW1vbiIpOwoKdmFyIF9jb21tb24yID0gcmVxdWlyZSgiLi9jb21tb24iKTsKCnZhciBfYW5hbHl0aWNzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vY29tbW9uL2FuYWx5dGljcyIpOwoKdmFyIF9leHBhbmRlZF9yb3dfbWVzc2FnZXNfcGFuZSA9IHJlcXVpcmUoIi4vZXhwYW5kZWRfcm93X21lc3NhZ2VzX3BhbmUiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIGdldEl0ZW1EZXNjcmlwdGlvbih2YWx1ZSkgewogIGlmIChfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcpIHsKICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7CiAgfQoKICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTsKfQoKdmFyIExvYWRlZFN0YXQgPSBmdW5jdGlvbiBMb2FkZWRTdGF0KF9yZWYpIHsKICB2YXIgaXNMb2FkaW5nID0gX3JlZi5pc0xvYWRpbmcsCiAgICAgIGV2YWxEYXRhID0gX3JlZi5ldmFsRGF0YSwKICAgICAgcmVzdWx0UHJvcGVydHkgPSBfcmVmLnJlc3VsdFByb3BlcnR5OwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgaXNMb2FkaW5nID09PSBmYWxzZSAmJiBldmFsRGF0YS5lcnJvciAhPT0gbnVsbCAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSWNvbiwgewogICAgdHlwZTogImFsZXJ0IiwKICAgIHNpemU6ICJzIgogIH0pLCBpc0xvYWRpbmcgPT09IHRydWUgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxvYWRpbmdTcGlubmVyLCB7CiAgICBzaXplOiAicyIKICB9KSwgaXNMb2FkaW5nID09PSBmYWxzZSAmJiBldmFsRGF0YS5lcnJvciA9PT0gbnVsbCAmJiBldmFsRGF0YVtyZXN1bHRQcm9wZXJ0eV0pOwp9OwoKdmFyIGRlZmF1bHRFdmFsID0gewogIG1lYW5TcXVhcmVkRXJyb3I6ICcnLAogIHJTcXVhcmVkOiAnJywKICBlcnJvcjogbnVsbAp9OwoKdmFyIEV4cGFuZGVkUm93ID0gZnVuY3Rpb24gRXhwYW5kZWRSb3coX3JlZjIpIHsKICB2YXIgX2l0ZW0kY29uZmlnLCBfaXRlbSRjb25maWckZGVzdCwgX2l0ZW0kY29uZmlnMjsKCiAgdmFyIGl0ZW0gPSBfcmVmMi5pdGVtOwoKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZGVmYXVsdEV2YWwpLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgdHJhaW5pbmdFdmFsID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0VHJhaW5pbmdFdmFsID0gX3VzZVN0YXRlMlsxXTsKCiAgdmFyIF91c2VTdGF0ZTMgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShkZWZhdWx0RXZhbCksCiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgZ2VuZXJhbGl6YXRpb25FdmFsID0gX3VzZVN0YXRlNFswXSwKICAgICAgc2V0R2VuZXJhbGl6YXRpb25FdmFsID0gX3VzZVN0YXRlNFsxXTsKCiAgdmFyIF91c2VTdGF0ZTUgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShmYWxzZSksCiAgICAgIF91c2VTdGF0ZTYgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGU1LCAyKSwKICAgICAgaXNMb2FkaW5nVHJhaW5pbmcgPSBfdXNlU3RhdGU2WzBdLAogICAgICBzZXRJc0xvYWRpbmdUcmFpbmluZyA9IF91c2VTdGF0ZTZbMV07CgogIHZhciBfdXNlU3RhdGU3ID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZmFsc2UpLAogICAgICBfdXNlU3RhdGU4ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlNywgMiksCiAgICAgIGlzTG9hZGluZ0dlbmVyYWxpemF0aW9uID0gX3VzZVN0YXRlOFswXSwKICAgICAgc2V0SXNMb2FkaW5nR2VuZXJhbGl6YXRpb24gPSBfdXNlU3RhdGU4WzFdOwoKICB2YXIgaW5kZXggPSBpdGVtID09PSBudWxsIHx8IGl0ZW0gPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfaXRlbSRjb25maWcgPSBpdGVtLmNvbmZpZykgPT09IG51bGwgfHwgX2l0ZW0kY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2l0ZW0kY29uZmlnJGRlc3QgPSBfaXRlbSRjb25maWcuZGVzdCkgPT09IG51bGwgfHwgX2l0ZW0kY29uZmlnJGRlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9pdGVtJGNvbmZpZyRkZXN0LmluZGV4OwogIHZhciBkZXBlbmRlbnRWYXJpYWJsZSA9ICgwLCBfY29tbW9uLmdldERlcGVuZGVudFZhcikoaXRlbS5jb25maWcuYW5hbHlzaXMpOwogIHZhciBwcmVkaWN0aW9uRmllbGROYW1lID0gKDAsIF9jb21tb24uZ2V0UHJlZGljdGlvbkZpZWxkTmFtZSkoaXRlbS5jb25maWcuYW5hbHlzaXMpOyAvLyBkZWZhdWx0IGlzICdtbCcKCiAgdmFyIHJlc3VsdHNGaWVsZCA9IGl0ZW0uY29uZmlnLmRlc3QucmVzdWx0c19maWVsZDsKICB2YXIgam9iSXNDb21wbGV0ZWQgPSAoMCwgX2NvbW1vbjIuaXNDb21wbGV0ZWRBbmFseXRpY3NKb2IpKGl0ZW0uc3RhdHMpOwogIHZhciBpc1JlZ3Jlc3Npb25Kb2IgPSAoMCwgX2FuYWx5dGljcy5pc1JlZ3Jlc3Npb25BbmFseXNpcykoaXRlbS5jb25maWcuYW5hbHlzaXMpOwoKICB2YXIgbG9hZERhdGEgPSBmdW5jdGlvbiBsb2FkRGF0YSgpIHsKICAgIHZhciBnZW5FcnJvckV2YWwsIF9nZXRWYWx1ZXNGcm9tUmVzcG9ucywgbWVhblNxdWFyZWRFcnJvciwgclNxdWFyZWQsIHRyYWluaW5nRXJyb3JFdmFsLCBfZ2V0VmFsdWVzRnJvbVJlc3BvbnMyLCBfbWVhblNxdWFyZWRFcnJvciwgX3JTcXVhcmVkOwoKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gbG9hZERhdGEkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBzZXRJc0xvYWRpbmdHZW5lcmFsaXphdGlvbih0cnVlKTsKICAgICAgICAgICAgc2V0SXNMb2FkaW5nVHJhaW5pbmcodHJ1ZSk7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKCgwLCBfY29tbW9uLmxvYWRFdmFsRGF0YSkoewogICAgICAgICAgICAgIGlzVHJhaW5pbmc6IGZhbHNlLAogICAgICAgICAgICAgIGluZGV4OiBpbmRleCwKICAgICAgICAgICAgICBkZXBlbmRlbnRWYXJpYWJsZTogZGVwZW5kZW50VmFyaWFibGUsCiAgICAgICAgICAgICAgcmVzdWx0c0ZpZWxkOiByZXN1bHRzRmllbGQsCiAgICAgICAgICAgICAgcHJlZGljdGlvbkZpZWxkTmFtZTogcHJlZGljdGlvbkZpZWxkTmFtZSwKICAgICAgICAgICAgICBqb2JUeXBlOiBfYW5hbHl0aWNzLkFOQUxZU0lTX0NPTkZJR19UWVBFLlJFR1JFU1NJT04KICAgICAgICAgICAgfSkpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgZ2VuRXJyb3JFdmFsID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgIGlmIChnZW5FcnJvckV2YWwuc3VjY2VzcyA9PT0gdHJ1ZSAmJiBnZW5FcnJvckV2YWwuZXZhbCAmJiAoMCwgX2FuYWx5dGljcy5pc1JlZ3Jlc3Npb25FdmFsdWF0ZVJlc3BvbnNlKShnZW5FcnJvckV2YWwuZXZhbCkpIHsKICAgICAgICAgICAgICBfZ2V0VmFsdWVzRnJvbVJlc3BvbnMgPSAoMCwgX2NvbW1vbi5nZXRWYWx1ZXNGcm9tUmVzcG9uc2UpKGdlbkVycm9yRXZhbC5ldmFsKSwgbWVhblNxdWFyZWRFcnJvciA9IF9nZXRWYWx1ZXNGcm9tUmVzcG9ucy5tZWFuU3F1YXJlZEVycm9yLCByU3F1YXJlZCA9IF9nZXRWYWx1ZXNGcm9tUmVzcG9ucy5yU3F1YXJlZDsKICAgICAgICAgICAgICBzZXRHZW5lcmFsaXphdGlvbkV2YWwoewogICAgICAgICAgICAgICAgbWVhblNxdWFyZWRFcnJvcjogbWVhblNxdWFyZWRFcnJvciwKICAgICAgICAgICAgICAgIHJTcXVhcmVkOiByU3F1YXJlZCwKICAgICAgICAgICAgICAgIGVycm9yOiBudWxsCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgc2V0SXNMb2FkaW5nR2VuZXJhbGl6YXRpb24oZmFsc2UpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHNldElzTG9hZGluZ0dlbmVyYWxpemF0aW9uKGZhbHNlKTsKICAgICAgICAgICAgICBzZXRHZW5lcmFsaXphdGlvbkV2YWwoewogICAgICAgICAgICAgICAgbWVhblNxdWFyZWRFcnJvcjogJycsCiAgICAgICAgICAgICAgICByU3F1YXJlZDogJycsCiAgICAgICAgICAgICAgICBlcnJvcjogZ2VuRXJyb3JFdmFsLmVycm9yCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKCgwLCBfY29tbW9uLmxvYWRFdmFsRGF0YSkoewogICAgICAgICAgICAgIGlzVHJhaW5pbmc6IHRydWUsCiAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LAogICAgICAgICAgICAgIGRlcGVuZGVudFZhcmlhYmxlOiBkZXBlbmRlbnRWYXJpYWJsZSwKICAgICAgICAgICAgICByZXN1bHRzRmllbGQ6IHJlc3VsdHNGaWVsZCwKICAgICAgICAgICAgICBwcmVkaWN0aW9uRmllbGROYW1lOiBwcmVkaWN0aW9uRmllbGROYW1lLAogICAgICAgICAgICAgIGpvYlR5cGU6IF9hbmFseXRpY3MuQU5BTFlTSVNfQ09ORklHX1RZUEUuUkVHUkVTU0lPTgogICAgICAgICAgICB9KSk7CgogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICB0cmFpbmluZ0Vycm9yRXZhbCA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICBpZiAodHJhaW5pbmdFcnJvckV2YWwuc3VjY2VzcyA9PT0gdHJ1ZSAmJiB0cmFpbmluZ0Vycm9yRXZhbC5ldmFsICYmICgwLCBfYW5hbHl0aWNzLmlzUmVncmVzc2lvbkV2YWx1YXRlUmVzcG9uc2UpKHRyYWluaW5nRXJyb3JFdmFsLmV2YWwpKSB7CiAgICAgICAgICAgICAgX2dldFZhbHVlc0Zyb21SZXNwb25zMiA9ICgwLCBfY29tbW9uLmdldFZhbHVlc0Zyb21SZXNwb25zZSkodHJhaW5pbmdFcnJvckV2YWwuZXZhbCksIF9tZWFuU3F1YXJlZEVycm9yID0gX2dldFZhbHVlc0Zyb21SZXNwb25zMi5tZWFuU3F1YXJlZEVycm9yLCBfclNxdWFyZWQgPSBfZ2V0VmFsdWVzRnJvbVJlc3BvbnMyLnJTcXVhcmVkOwogICAgICAgICAgICAgIHNldFRyYWluaW5nRXZhbCh7CiAgICAgICAgICAgICAgICBtZWFuU3F1YXJlZEVycm9yOiBfbWVhblNxdWFyZWRFcnJvciwKICAgICAgICAgICAgICAgIHJTcXVhcmVkOiBfclNxdWFyZWQsCiAgICAgICAgICAgICAgICBlcnJvcjogbnVsbAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHNldElzTG9hZGluZ1RyYWluaW5nKGZhbHNlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzZXRJc0xvYWRpbmdUcmFpbmluZyhmYWxzZSk7CiAgICAgICAgICAgICAgc2V0VHJhaW5pbmdFdmFsKHsKICAgICAgICAgICAgICAgIG1lYW5TcXVhcmVkRXJyb3I6ICcnLAogICAgICAgICAgICAgICAgclNxdWFyZWQ6ICcnLAogICAgICAgICAgICAgICAgZXJyb3I6IGdlbkVycm9yRXZhbC5lcnJvcgogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9OwoKICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgaWYgKGpvYklzQ29tcGxldGVkICYmIGlzUmVncmVzc2lvbkpvYikgewogICAgICBsb2FkRGF0YSgpOwogICAgfQogIH0sIFtqb2JJc0NvbXBsZXRlZF0pOwoKICB2YXIgc3RhdGVWYWx1ZXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBpdGVtLnN0YXRzKTsKCiAgaWYgKChfaXRlbSRjb25maWcyID0gaXRlbS5jb25maWcpID09PSBudWxsIHx8IF9pdGVtJGNvbmZpZzIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9pdGVtJGNvbmZpZzIuZGVzY3JpcHRpb24pIHsKICAgIHN0YXRlVmFsdWVzLmRlc2NyaXB0aW9uID0gaXRlbS5jb25maWcuZGVzY3JpcHRpb247CiAgfQoKICBkZWxldGUgc3RhdGVWYWx1ZXMucHJvZ3Jlc3M7CiAgdmFyIHN0YXRlID0gewogICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tbC5kYXRhZnJhbWUuYW5hbHl0aWNzTGlzdC5leHBhbmRlZFJvdy50YWJzLmpvYlNldHRpbmdzLnN0YXRlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1N0YXRlJwogICAgfSksCiAgICBpdGVtczogT2JqZWN0LmVudHJpZXMoc3RhdGVWYWx1ZXMpLm1hcChmdW5jdGlvbiAocykgewogICAgICByZXR1cm4gewogICAgICAgIHRpdGxlOiBzWzBdLnRvU3RyaW5nKCksCiAgICAgICAgZGVzY3JpcHRpb246IGdldEl0ZW1EZXNjcmlwdGlvbihzWzFdKQogICAgICB9OwogICAgfSksCiAgICBwb3NpdGlvbjogJ2xlZnQnCiAgfTsKICB2YXIgcHJvZ3Jlc3MgPSB7CiAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1sLmRhdGFmcmFtZS5hbmFseXRpY3NMaXN0LmV4cGFuZGVkUm93LnRhYnMuam9iU2V0dGluZ3MucHJvZ3Jlc3MnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUHJvZ3Jlc3MnCiAgICB9KSwKICAgIGl0ZW1zOiBpdGVtLnN0YXRzLnByb2dyZXNzLm1hcChmdW5jdGlvbiAocykgewogICAgICByZXR1cm4gewogICAgICAgIHRpdGxlOiBzLnBoYXNlLAogICAgICAgIGRlc2NyaXB0aW9uOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9wcm9ncmVzc19iYXIuUHJvZ3Jlc3NCYXIsIHsKICAgICAgICAgIHByb2dyZXNzOiBzLnByb2dyZXNzX3BlcmNlbnQKICAgICAgICB9KQogICAgICB9OwogICAgfSksCiAgICBwb3NpdGlvbjogJ2xlZnQnCiAgfTsKICB2YXIgc3RhdHMgPSB7CiAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1sLmRhdGFmcmFtZS5hbmFseXRpY3NMaXN0LmV4cGFuZGVkUm93LnRhYnMuam9iU2V0dGluZ3Muc3RhdHMnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU3RhdHMnCiAgICB9KSwKICAgIGl0ZW1zOiBbewogICAgICB0aXRsZTogJ2NyZWF0ZV90aW1lJywKICAgICAgZGVzY3JpcHRpb246ICgwLCBfZGF0ZV91dGlscy5mb3JtYXRIdW1hblJlYWRhYmxlRGF0ZVRpbWVTZWNvbmRzKSgoMCwgX21vbWVudFRpbWV6b25lLmRlZmF1bHQpKGl0ZW0uY29uZmlnLmNyZWF0ZV90aW1lKS51bml4KCkgKiAxMDAwKQogICAgfSwgewogICAgICB0aXRsZTogJ21vZGVsX21lbW9yeV9saW1pdCcsCiAgICAgIGRlc2NyaXB0aW9uOiBpdGVtLmNvbmZpZy5tb2RlbF9tZW1vcnlfbGltaXQKICAgIH0sIHsKICAgICAgdGl0bGU6ICd2ZXJzaW9uJywKICAgICAgZGVzY3JpcHRpb246IGl0ZW0uY29uZmlnLnZlcnNpb24KICAgIH1dLAogICAgcG9zaXRpb246ICdyaWdodCcKICB9OwoKICBpZiAoam9iSXNDb21wbGV0ZWQgJiYgaXNSZWdyZXNzaW9uSm9iKSB7CiAgICBzdGF0cy5pdGVtcy5wdXNoKHsKICAgICAgdGl0bGU6ICdnZW5lcmFsaXphdGlvbiBtZWFuIHNxdWFyZWQgZXJyb3InLAogICAgICBkZXNjcmlwdGlvbjogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChMb2FkZWRTdGF0LCB7CiAgICAgICAgaXNMb2FkaW5nOiBpc0xvYWRpbmdHZW5lcmFsaXphdGlvbiwKICAgICAgICBldmFsRGF0YTogZ2VuZXJhbGl6YXRpb25FdmFsLAogICAgICAgIHJlc3VsdFByb3BlcnR5OiAnbWVhblNxdWFyZWRFcnJvcicKICAgICAgfSkKICAgIH0sIHsKICAgICAgdGl0bGU6ICdnZW5lcmFsaXphdGlvbiByIHNxdWFyZWQnLAogICAgICBkZXNjcmlwdGlvbjogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChMb2FkZWRTdGF0LCB7CiAgICAgICAgaXNMb2FkaW5nOiBpc0xvYWRpbmdHZW5lcmFsaXphdGlvbiwKICAgICAgICBldmFsRGF0YTogZ2VuZXJhbGl6YXRpb25FdmFsLAogICAgICAgIHJlc3VsdFByb3BlcnR5OiAnclNxdWFyZWQnCiAgICAgIH0pCiAgICB9LCB7CiAgICAgIHRpdGxlOiAndHJhaW5pbmcgbWVhbiBzcXVhcmVkIGVycm9yJywKICAgICAgZGVzY3JpcHRpb246IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTG9hZGVkU3RhdCwgewogICAgICAgIGlzTG9hZGluZzogaXNMb2FkaW5nVHJhaW5pbmcsCiAgICAgICAgZXZhbERhdGE6IHRyYWluaW5nRXZhbCwKICAgICAgICByZXN1bHRQcm9wZXJ0eTogJ21lYW5TcXVhcmVkRXJyb3InCiAgICAgIH0pCiAgICB9LCB7CiAgICAgIHRpdGxlOiAndHJhaW5pbmcgciBzcXVhcmVkJywKICAgICAgZGVzY3JpcHRpb246IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTG9hZGVkU3RhdCwgewogICAgICAgIGlzTG9hZGluZzogaXNMb2FkaW5nVHJhaW5pbmcsCiAgICAgICAgZXZhbERhdGE6IHRyYWluaW5nRXZhbCwKICAgICAgICByZXN1bHRQcm9wZXJ0eTogJ3JTcXVhcmVkJwogICAgICB9KQogICAgfSk7CiAgfQoKICB2YXIgdGFicyA9IFt7CiAgICBpZDogJ21sLWFuYWx5dGljcy1qb2ItZGV0YWlscycsCiAgICBuYW1lOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWwuZGF0YWZyYW1lLmFuYWx5dGljc0xpc3QuZXhwYW5kZWRSb3cudGFicy5qb2JTZXR0aW5nc0xhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0pvYiBkZXRhaWxzJwogICAgfSksCiAgICBjb250ZW50OiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9leHBhbmRlZF9yb3dfZGV0YWlsc19wYW5lLkV4cGFuZGVkUm93RGV0YWlsc1BhbmUsIHsKICAgICAgc2VjdGlvbnM6IFtzdGF0ZSwgcHJvZ3Jlc3MsIHN0YXRzXQogICAgfSkKICB9LCB7CiAgICBpZDogJ21sLWFuYWx5dGljcy1qb2ItanNvbicsCiAgICBuYW1lOiAnSlNPTicsCiAgICBjb250ZW50OiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9leHBhbmRlZF9yb3dfanNvbl9wYW5lLkV4cGFuZGVkUm93SnNvblBhbmUsIHsKICAgICAganNvbjogaXRlbS5jb25maWcKICAgIH0pCiAgfSwgewogICAgaWQ6ICdtbC1hbmFseXRpY3Mtam9iLW1lc3NhZ2VzJywKICAgIG5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tbC5kYXRhZnJhbWUuYW5hbHl0aWNzTGlzdC5hbmFseXRpY3NEZXRhaWxzLnRhYnMuYW5hbHl0aWNzTWVzc2FnZXNMYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdKb2IgbWVzc2FnZXMnCiAgICB9KSwKICAgIGNvbnRlbnQ6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V4cGFuZGVkX3Jvd19tZXNzYWdlc19wYW5lLkV4cGFuZGVkUm93TWVzc2FnZXNQYW5lLCB7CiAgICAgIGFuYWx5dGljc0lkOiBpdGVtLmlkCiAgICB9KQogIH1dOyAvLyBVc2luZyBgZXhwYW5kPWZhbHNlYCBoZXJlIHNvIHRoZSB0YWJzIHRoZW1zZWx2ZXMgZG9uJ3Qgc3ByZWFkCiAgLy8gYWNyb3NzIHRoZSBmdWxsIHdpZHRoLiBUaGUgMTAwJSB3aWR0aCBpcyB1c2VkIHNvIHRoZSBib3R0b20gbGluZQogIC8vIGFzIHdlbGwgYXMgdGhlIHRhYiBjb250ZW50IHNwYW5zIGFjcm9zcyB0aGUgZnVsbCB3aWR0aC4KICAvLyBFdWlUYWJiZWRDb250ZW50IHdvdWxkIGRvIHRoYXQgdXN1YWxseSBhbnl3YXksCiAgLy8gaXQganVzdCBkb2Vzbid0IHNlZW0gdG8gd29yayB3aXRoaW4gY2VydGFpbiBsYXlvdXRzLgoKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRhYmJlZENvbnRlbnQsIHsKICAgIHNpemU6ICJzIiwKICAgIHRhYnM6IHRhYnMsCiAgICBpbml0aWFsU2VsZWN0ZWRUYWI6IHRhYnNbMF0sCiAgICBvblRhYkNsaWNrOiBmdW5jdGlvbiBvblRhYkNsaWNrKCkge30sCiAgICBleHBhbmQ6IGZhbHNlLAogICAgc3R5bGU6IHsKICAgICAgd2lkdGg6ICcxMDAlJwogICAgfQogIH0pOwp9OwoKZXhwb3J0cy5FeHBhbmRlZFJvdyA9IEV4cGFuZGVkUm93Ow=="},null]}