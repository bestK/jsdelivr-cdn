{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/overview/components/anomaly_detection_panel/anomaly_detection_panel.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/overview/components/anomaly_detection_panel/anomaly_detection_panel.js","mtime":1585205045928},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFub21hbHlEZXRlY3Rpb25QYW5lbCA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJtb21lbnQiKSk7Cgp2YXIgX25vdGlmeSA9IHJlcXVpcmUoInVpL25vdGlmeSIpOwoKdmFyIF90YWJsZSA9IHJlcXVpcmUoIi4vdGFibGUiKTsKCnZhciBfbWxfYXBpX3NlcnZpY2UgPSByZXF1aXJlKCIuLi8uLi8uLi9zZXJ2aWNlcy9tbF9hcGlfc2VydmljZSIpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoIi4vdXRpbHMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KCnZhciBjcmVhdGVKb2JMaW5rID0gJyMvam9icy9uZXdfam9iL3N0ZXAvaW5kZXhfb3Jfc2VhcmNoJzsKCmZ1bmN0aW9uIGdldERlZmF1bHRBbm9tYWx5U2NvcmVzKGdyb3VwcykgewogIHZhciBhbm9tYWx5U2NvcmVzID0ge307CiAgZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwKSB7CiAgICBhbm9tYWx5U2NvcmVzW2dyb3VwLmlkXSA9IHsKICAgICAgbWF4U2NvcmU6IDAKICAgIH07CiAgfSk7CiAgcmV0dXJuIGFub21hbHlTY29yZXM7Cn0KCnZhciBBbm9tYWx5RGV0ZWN0aW9uUGFuZWwgPSBmdW5jdGlvbiBBbm9tYWx5RGV0ZWN0aW9uUGFuZWwoX3JlZikgewogIHZhciBqb2JDcmVhdGlvbkRpc2FibGVkID0gX3JlZi5qb2JDcmVhdGlvbkRpc2FibGVkOwoKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZmFsc2UpLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgaXNMb2FkaW5nID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0SXNMb2FkaW5nID0gX3VzZVN0YXRlMlsxXTsKCiAgdmFyIF91c2VTdGF0ZTMgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKSh7fSksCiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgZ3JvdXBzID0gX3VzZVN0YXRlNFswXSwKICAgICAgc2V0R3JvdXBzID0gX3VzZVN0YXRlNFsxXTsKCiAgdmFyIF91c2VTdGF0ZTUgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKSgwKSwKICAgICAgX3VzZVN0YXRlNiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTUsIDIpLAogICAgICBncm91cHNDb3VudCA9IF91c2VTdGF0ZTZbMF0sCiAgICAgIHNldEdyb3Vwc0NvdW50ID0gX3VzZVN0YXRlNlsxXTsKCiAgdmFyIF91c2VTdGF0ZTcgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShbXSksCiAgICAgIF91c2VTdGF0ZTggPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGU3LCAyKSwKICAgICAgam9ic0xpc3QgPSBfdXNlU3RhdGU4WzBdLAogICAgICBzZXRKb2JzTGlzdCA9IF91c2VTdGF0ZThbMV07CgogIHZhciBfdXNlU3RhdGU5ID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkodW5kZWZpbmVkKSwKICAgICAgX3VzZVN0YXRlMTAgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGU5LCAyKSwKICAgICAgc3RhdHNCYXJEYXRhID0gX3VzZVN0YXRlMTBbMF0sCiAgICAgIHNldFN0YXRzQmFyRGF0YSA9IF91c2VTdGF0ZTEwWzFdOwoKICB2YXIgX3VzZVN0YXRlMTEgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKSh1bmRlZmluZWQpLAogICAgICBfdXNlU3RhdGUxMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTExLCAyKSwKICAgICAgZXJyb3JNZXNzYWdlID0gX3VzZVN0YXRlMTJbMF0sCiAgICAgIHNldEVycm9yTWVzc2FnZSA9IF91c2VTdGF0ZTEyWzFdOwoKICB2YXIgbG9hZEpvYnMgPSBmdW5jdGlvbiBsb2FkSm9icygpIHsKICAgIHZhciBqb2JzUmVzdWx0LCBqb2JzU3VtbWFyeUxpc3QsIF9nZXRHcm91cHNGcm9tSm9icywgam9ic0dyb3VwcywgY291bnQsIGpvYnNXaXRoVGltZXJhbmdlLCBzdGF0czsKCiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGxvYWRKb2JzJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgc2V0SXNMb2FkaW5nKHRydWUpOwogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoX21sX2FwaV9zZXJ2aWNlLm1sLmpvYnMuam9ic1N1bW1hcnkoW10pKTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGpvYnNSZXN1bHQgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBqb2JzU3VtbWFyeUxpc3QgPSBqb2JzUmVzdWx0Lm1hcChmdW5jdGlvbiAoam9iKSB7CiAgICAgICAgICAgICAgam9iLmxhdGVzdFRpbWVzdGFtcFNvcnRWYWx1ZSA9IGpvYi5sYXRlc3RUaW1lc3RhbXBNcyB8fCAwOwogICAgICAgICAgICAgIHJldHVybiBqb2I7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBfZ2V0R3JvdXBzRnJvbUpvYnMgPSAoMCwgX3V0aWxzLmdldEdyb3Vwc0Zyb21Kb2JzKShqb2JzU3VtbWFyeUxpc3QpLCBqb2JzR3JvdXBzID0gX2dldEdyb3Vwc0Zyb21Kb2JzLmdyb3VwcywgY291bnQgPSBfZ2V0R3JvdXBzRnJvbUpvYnMuY291bnQ7CiAgICAgICAgICAgIGpvYnNXaXRoVGltZXJhbmdlID0gKDAsIF91dGlscy5nZXRKb2JzV2l0aFRpbWVyYW5nZSkoam9ic1N1bW1hcnlMaXN0KTsKICAgICAgICAgICAgc3RhdHMgPSAoMCwgX3V0aWxzLmdldFN0YXRzQmFyRGF0YSkoam9ic1N1bW1hcnlMaXN0KTsKICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTsKICAgICAgICAgICAgc2V0RXJyb3JNZXNzYWdlKHVuZGVmaW5lZCk7CiAgICAgICAgICAgIHNldFN0YXRzQmFyRGF0YShzdGF0cyk7CiAgICAgICAgICAgIHNldEdyb3Vwc0NvdW50KGNvdW50KTsKICAgICAgICAgICAgc2V0R3JvdXBzKGpvYnNHcm91cHMpOwogICAgICAgICAgICBzZXRKb2JzTGlzdChqb2JzV2l0aFRpbWVyYW5nZSk7CiAgICAgICAgICAgIGxvYWRNYXhBbm9tYWx5U2NvcmVzKGpvYnNHcm91cHMpOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjI7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxODsKICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgxKTsKICAgICAgICAgICAgc2V0RXJyb3JNZXNzYWdlKF9jb250ZXh0LnQwLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCA/IF9jb250ZXh0LnQwLm1lc3NhZ2UgOiBKU09OLnN0cmluZ2lmeShfY29udGV4dC50MCkpOwogICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpOwoKICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgbnVsbCwgbnVsbCwgW1sxLCAxOF1dKTsKICB9OwoKICB2YXIgbG9hZE1heEFub21hbHlTY29yZXMgPSBmdW5jdGlvbiBsb2FkTWF4QW5vbWFseVNjb3Jlcyhncm91cHNPYmplY3QpIHsKICAgIHZhciBncm91cHNMaXN0LCBzY29yZXMsIHByb21pc2VzLCByZXN1bHRzLCB0ZW1wR3JvdXBzOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBsb2FkTWF4QW5vbWFseVNjb3JlcyQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGdyb3Vwc0xpc3QgPSBPYmplY3QudmFsdWVzKGdyb3Vwc09iamVjdCk7CiAgICAgICAgICAgIHNjb3JlcyA9IGdldERlZmF1bHRBbm9tYWx5U2NvcmVzKGdyb3Vwc0xpc3QpOwogICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDI7CiAgICAgICAgICAgIHByb21pc2VzID0gZ3JvdXBzTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGdyb3VwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGdyb3VwLmpvYklkcy5sZW5ndGggPiAwOwogICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGdyb3VwLCBpKSB7CiAgICAgICAgICAgICAgc2NvcmVzW2dyb3VwLmlkXS5pbmRleCA9IGk7CiAgICAgICAgICAgICAgdmFyIGxhdGVzdFRpbWVzdGFtcCA9IGdyb3VwLmxhdGVzdF90aW1lc3RhbXA7CiAgICAgICAgICAgICAgdmFyIHN0YXJ0TW9tZW50ID0gKDAsIF9tb21lbnQuZGVmYXVsdCkobGF0ZXN0VGltZXN0YW1wKTsKICAgICAgICAgICAgICB2YXIgdHdlbnR5Rm91ckhvdXJzQWdvID0gc3RhcnRNb21lbnQuc3VidHJhY3QoMjQsICdob3VycycpLnZhbHVlT2YoKTsKICAgICAgICAgICAgICByZXR1cm4gX21sX2FwaV9zZXJ2aWNlLm1sLnJlc3VsdHMuZ2V0TWF4QW5vbWFseVNjb3JlKGdyb3VwLmpvYklkcywgdHdlbnR5Rm91ckhvdXJzQWdvLCBsYXRlc3RUaW1lc3RhbXApOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2OwogICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKFByb21pc2UuYWxsKHByb21pc2VzKSk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICByZXN1bHRzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgIHRlbXBHcm91cHMgPSBfb2JqZWN0U3ByZWFkKHt9LCBncm91cHNPYmplY3QpOyAvLyBDaGVjayByZXN1bHRzIGZvciBlYWNoIGdyb3VwJ3MgcHJvbWlzZSBpbmRleCBhbmQgdXBkYXRlIHN0YXRlCgogICAgICAgICAgICBPYmplY3Qua2V5cyhzY29yZXMpLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwSWQpIHsKICAgICAgICAgICAgICB2YXIgcmVzdWx0c0luZGV4ID0gc2NvcmVzW2dyb3VwSWRdICYmIHNjb3Jlc1tncm91cElkXS5pbmRleDsgLy8gbWF4U2NvcmUgd2lsbCBiZSBudWxsIGlmIGl0IHdhcyBub3QgbG9hZGVkIGNvcnJlY3RseQoKICAgICAgICAgICAgICB2YXIgX3JlZjIgPSByZXN1bHRzSW5kZXggIT09IHVuZGVmaW5lZCAmJiByZXN1bHRzW3Jlc3VsdHNJbmRleF0sCiAgICAgICAgICAgICAgICAgIG1heFNjb3JlID0gX3JlZjIubWF4U2NvcmU7CgogICAgICAgICAgICAgIHRlbXBHcm91cHNbZ3JvdXBJZF0ubWF4X2Fub21hbHlfc2NvcmUgPSBtYXhTY29yZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHNldEdyb3Vwcyh0ZW1wR3JvdXBzKTsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxMjsKICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgX25vdGlmeS50b2FzdE5vdGlmaWNhdGlvbnMuYWRkRGFuZ2VyKF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tbC5vdmVydmlldy5hbm9tYWx5RGV0ZWN0aW9uLmVycm9yV2l0aEZldGNoaW5nQW5vbWFseVNjb3JlTm90aWZpY2F0aW9uRXJyb3JNZXNzYWdlJywgewogICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQW4gZXJyb3Igb2NjdXJyZWQgZmV0Y2hpbmcgYW5vbWFseSBzY29yZXM6IHtlcnJvcn0nLAogICAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgICAgZXJyb3I6IF9jb250ZXh0Mi50MC5tZXNzYWdlICE9PSB1bmRlZmluZWQgPyBfY29udGV4dDIudDAubWVzc2FnZSA6IEpTT04uc3RyaW5naWZ5KF9jb250ZXh0Mi50MCkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBudWxsLCBudWxsLCBbWzIsIDEyXV0pOwogIH07CgogICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7CiAgICBsb2FkSm9icygpOwogIH0sIFtdKTsKCiAgdmFyIG9uUmVmcmVzaCA9IGZ1bmN0aW9uIG9uUmVmcmVzaCgpIHsKICAgIGxvYWRKb2JzKCk7CiAgfTsKCiAgdmFyIGVycm9yRGlzcGxheSA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ2FsbE91dCwgewogICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tbC5vdmVydmlldy5hbm9tYWx5RGV0ZWN0aW9uLmVycm9yUHJvbXB0VGl0bGUnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQW4gZXJyb3Igb2NjdXJyZWQgZ2V0dGluZyB0aGUgYW5vbWFseSBkZXRlY3Rpb24gam9icyBsaXN0LicKICAgIH0pLAogICAgY29sb3I6ICJkYW5nZXIiLAogICAgaWNvblR5cGU6ICJhbGVydCIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwcmUiLCBudWxsLCBlcnJvck1lc3NhZ2UpKSk7CgogIHZhciBwYW5lbENsYXNzID0gaXNMb2FkaW5nID8gJ21sT3ZlcnZpZXdQYW5lbF9faXNMb2FkaW5nJyA6ICdtbE92ZXJ2aWV3UGFuZWwnOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUGFuZWwsIHsKICAgIGNsYXNzTmFtZTogcGFuZWxDbGFzcwogIH0sIHR5cGVvZiBlcnJvck1lc3NhZ2UgIT09ICd1bmRlZmluZWQnICYmIGVycm9yRGlzcGxheSwgaXNMb2FkaW5nICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlMb2FkaW5nU3Bpbm5lciwgewogICAgY2xhc3NOYW1lOiAibWxPdmVydmlld1BhbmVsX19zcGlubmVyIiwKICAgIHNpemU6ICJ4bCIKICB9KSwgIlx4QTBceEEwXHhBMCIsIGlzTG9hZGluZyA9PT0gZmFsc2UgJiYgdHlwZW9mIGVycm9yTWVzc2FnZSA9PT0gJ3VuZGVmaW5lZCcgJiYgZ3JvdXBzQ291bnQgPT09IDAgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUVtcHR5UHJvbXB0LCB7CiAgICBpY29uVHlwZTogImNyZWF0ZVNpbmdsZU1ldHJpY0pvYiIsCiAgICB0aXRsZTogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDIiLCBudWxsLCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWwub3ZlcnZpZXcuYW5vbWFseURldGVjdGlvbi5jcmVhdGVGaXJzdEpvYk1lc3NhZ2UnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ3JlYXRlIHlvdXIgZmlyc3QgYW5vbWFseSBkZXRlY3Rpb24gam9iJwogICAgfSkpLAogICAgYm9keTogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWwub3ZlcnZpZXcuYW5vbWFseURldGVjdGlvbi5lbXB0eVByb21wdFRleHQnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTWFjaGluZSBsZWFybmluZyBtYWtlcyBpdCBlYXN5IHRvIGRldGVjdCBhbm9tYWxpZXMgaW4gdGltZSBzZXJpZXMgZGF0YSBzdG9yZWQgaW4gRWxhc3RpY3NlYXJjaC4gVHJhY2sgb25lIG1ldHJpYyBmcm9tIGEgc2luZ2xlIG1hY2hpbmUgb3IgaHVuZHJlZHMgb2YgbWV0cmljcyBhY3Jvc3MgdGhvdXNhbmRzIG9mIG1hY2hpbmVzLiBTdGFydCBhdXRvbWF0aWNhbGx5IHNwb3R0aW5nIHRoZSBhbm9tYWxpZXMgaGlkaW5nIGluIHlvdXIgZGF0YSBhbmQgcmVzb2x2ZSBpc3N1ZXMgZmFzdGVyLiIKICAgIH0pKSksCiAgICBhY3Rpb25zOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uLCB7CiAgICAgIGNvbG9yOiAicHJpbWFyeSIsCiAgICAgIGhyZWY6IGNyZWF0ZUpvYkxpbmssCiAgICAgIGZpbGw6IHRydWUsCiAgICAgIGljb25UeXBlOiAicGx1c0luQ2lyY2xlIiwKICAgICAgaXNEaXNhYmxlZDogam9iQ3JlYXRpb25EaXNhYmxlZAogICAgfSwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1sLm92ZXJ2aWV3LmFub21hbHlEZXRlY3Rpb24uY3JlYXRlSm9iQnV0dG9uVGV4dCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDcmVhdGUgam9iJwogICAgfSkpCiAgfSksIGlzTG9hZGluZyA9PT0gZmFsc2UgJiYgdHlwZW9mIGVycm9yTWVzc2FnZSA9PT0gJ3VuZGVmaW5lZCcgJiYgZ3JvdXBzQ291bnQgPiAwICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF90YWJsZS5Bbm9tYWx5RGV0ZWN0aW9uVGFibGUsIHsKICAgIGl0ZW1zOiBncm91cHMsCiAgICBqb2JzTGlzdDogam9ic0xpc3QsCiAgICBzdGF0c0JhckRhdGE6IHN0YXRzQmFyRGF0YQogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAibSIKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgY2xhc3NOYW1lOiAibWxPdmVydmlld1BhbmVsX19idXR0b25zIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25FbXB0eSwgewogICAgc2l6ZTogInMiLAogICAgb25DbGljazogb25SZWZyZXNoLAogICAgY2xhc3NOYW1lOiAibWxPdmVydmlld1BhbmVsX19yZWZyZXNoQnV0dG9uIgogIH0sIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tbC5vdmVydmlldy5hbm9tYWx5RGV0ZWN0aW9uLnJlZnJlc2hKb2JzQnV0dG9uVGV4dCcsIHsKICAgIGRlZmF1bHRNZXNzYWdlOiAnUmVmcmVzaCcKICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgIHNpemU6ICJzIiwKICAgIGZpbGw6IHRydWUsCiAgICBocmVmOiAiIy9qb2JzPyIKICB9LCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWwub3ZlcnZpZXcuYW5vbWFseURldGVjdGlvbi5tYW5hZ2VKb2JzQnV0dG9uVGV4dCcsIHsKICAgIGRlZmF1bHRNZXNzYWdlOiAnTWFuYWdlIGpvYnMnCiAgfSkpKSkpOwp9OwoKZXhwb3J0cy5Bbm9tYWx5RGV0ZWN0aW9uUGFuZWwgPSBBbm9tYWx5RGV0ZWN0aW9uUGFuZWw7"},null]}