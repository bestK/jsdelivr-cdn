{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/jobs/jobs_list/components/job_details/forecasts_table/forecasts_table.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/jobs/jobs_list/components/job_details/forecasts_table/forecasts_table.js","mtime":1585205045812},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkZvcmVjYXN0c1RhYmxlID0gdm9pZCAwOwoKdmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInByb3AtdHlwZXMiKSk7Cgp2YXIgX3Jpc29uTm9kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmlzb24tbm9kZSIpKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2Zvcm1hdCA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aS9saWIvc2VydmljZXMvZm9ybWF0Iik7Cgp2YXIgX3N0YXRlcyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2NvbW1vbi9jb25zdGFudHMvc3RhdGVzIik7Cgp2YXIgX3JlY2VudGx5X2FjY2Vzc2VkID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vdXRpbC9yZWNlbnRseV9hY2Nlc3NlZCIpOwoKdmFyIF9mb3JlY2FzdF9zZXJ2aWNlID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vc2VydmljZXMvZm9yZWNhc3Rfc2VydmljZSIpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfam9iX3V0aWxzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vLi4vY29tbW9uL3V0aWwvam9iX3V0aWxzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKdmFyIE1BWF9GT1JFQ0FTVFMgPSA1MDA7CnZhciBUSU1FX0ZPUk1BVCA9ICdZWVlZLU1NLUREIEhIOm1tOnNzJzsKLyoqCiAqIFRhYmxlIGNvbXBvbmVudCBmb3IgcmVuZGVyaW5nIHRoZSBsaXN0cyBvZiBmb3JlY2FzdHMgcnVuIG9uIGFuIE1MIGpvYi4KICovCgp2YXIgRm9yZWNhc3RzVGFibGVVSSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9Db21wb25lbnQpIHsKICBfaW5oZXJpdHMoRm9yZWNhc3RzVGFibGVVSSwgX0NvbXBvbmVudCk7CgogIGZ1bmN0aW9uIEZvcmVjYXN0c1RhYmxlVUkocHJvcHMpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9yZWNhc3RzVGFibGVVSSk7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRm9yZWNhc3RzVGFibGVVSSkuY2FsbCh0aGlzLCBwcm9wcykpOwogICAgX3RoaXMuc3RhdGUgPSB7CiAgICAgIGlzTG9hZGluZzogcHJvcHMuam9iLmRhdGFfY291bnRzLnByb2Nlc3NlZF9yZWNvcmRfY291bnQgIT09IDAsCiAgICAgIGZvcmVjYXN0czogW10KICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRm9yZWNhc3RzVGFibGVVSSwgW3sKICAgIGtleTogImNvbXBvbmVudERpZE1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgZGF0YUNvdW50cyA9IHRoaXMucHJvcHMuam9iLmRhdGFfY291bnRzOwoKICAgICAgaWYgKGRhdGFDb3VudHMucHJvY2Vzc2VkX3JlY29yZF9jb3VudCA+IDApIHsKICAgICAgICAvLyBHZXQgdGhlIGxpc3Qgb2YgYWxsIHRoZSBmb3JlY2FzdHMgd2l0aCByZXN1bHRzIGF0IG9yIGxhdGVyIHRoYW4gdGhlIHNwZWNpZmllZCAnZnJvbScgdGltZS4KICAgICAgICBfZm9yZWNhc3Rfc2VydmljZS5tbEZvcmVjYXN0U2VydmljZS5nZXRGb3JlY2FzdHNTdW1tYXJ5KHRoaXMucHJvcHMuam9iLCBudWxsLCBkYXRhQ291bnRzLmVhcmxpZXN0X3JlY29yZF90aW1lc3RhbXAsIE1BWF9GT1JFQ0FTVFMpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7CiAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsCiAgICAgICAgICAgIGZvcmVjYXN0czogcmVzcC5mb3JlY2FzdHMKICAgICAgICAgIH0pOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZXNwKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgbG9hZGluZyBsaXN0IG9mIGZvcmVjYXN0cyBmb3Igam9icyBsaXN0OicsIHJlc3ApOwoKICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7CiAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsCiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogX3RoaXMyLnByb3BzLmludGwuZm9ybWF0TWVzc2FnZSh7CiAgICAgICAgICAgICAgaWQ6ICd4cGFjay5tbC5qb2JzTGlzdC5qb2JEZXRhaWxzLmZvcmVjYXN0c1RhYmxlLmxvYWRpbmdFcnJvck1lc3NhZ2UnLAogICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRXJyb3IgbG9hZGluZyB0aGUgbGlzdCBvZiBmb3JlY2FzdHMgcnVuIG9uIHRoaXMgam9iJwogICAgICAgICAgICB9KSwKICAgICAgICAgICAgZm9yZWNhc3RzOiBbXQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJvcGVuU2luZ2xlTWV0cmljVmlldyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlblNpbmdsZU1ldHJpY1ZpZXcoZm9yZWNhc3QpIHsKICAgICAgLy8gQ3JlYXRlcyB0aGUgbGluayB0byB0aGUgU2luZ2xlIE1ldHJpYyBWaWV3ZXIuCiAgICAgIC8vIFNldCB0aGUgdG90YWwgdGltZSByYW5nZSBmcm9tIHRoZSBzdGFydCBvZiB0aGUgam9iIGRhdGEgdG8gdGhlIGVuZCBvZiB0aGUgZm9yZWNhc3QsCiAgICAgIHZhciBkYXRhQ291bnRzID0gdGhpcy5wcm9wcy5qb2IuZGF0YV9jb3VudHM7CiAgICAgIHZhciBqb2JFYXJsaWVzdCA9IGRhdGFDb3VudHMuZWFybGllc3RfcmVjb3JkX3RpbWVzdGFtcDsKICAgICAgdmFyIHJlc3VsdExhdGVzdCA9ICgwLCBfam9iX3V0aWxzLmdldExhdGVzdERhdGFPckJ1Y2tldFRpbWVzdGFtcCkoZGF0YUNvdW50cy5sYXRlc3RfcmVjb3JkX3RpbWVzdGFtcCwgZGF0YUNvdW50cy5sYXRlc3RfYnVja2V0X3RpbWVzdGFtcCk7CiAgICAgIHZhciBmcm9tID0gbmV3IERhdGUoZGF0YUNvdW50cy5lYXJsaWVzdF9yZWNvcmRfdGltZXN0YW1wKS50b0lTT1N0cmluZygpOwogICAgICB2YXIgdG8gPSBmb3JlY2FzdCAhPT0gdW5kZWZpbmVkID8gbmV3IERhdGUoZm9yZWNhc3QuZm9yZWNhc3RfZW5kX3RpbWVzdGFtcCkudG9JU09TdHJpbmcoKSA6IG5ldyBEYXRlKHJlc3VsdExhdGVzdCkudG9JU09TdHJpbmcoKTsKCiAgICAgIHZhciBfZyA9IF9yaXNvbk5vZGUuZGVmYXVsdC5lbmNvZGUoewogICAgICAgIG1sOiB7CiAgICAgICAgICBqb2JJZHM6IFt0aGlzLnByb3BzLmpvYi5qb2JfaWRdCiAgICAgICAgfSwKICAgICAgICByZWZyZXNoSW50ZXJ2YWw6IHsKICAgICAgICAgIGRpc3BsYXk6ICdPZmYnLAogICAgICAgICAgcGF1c2U6IGZhbHNlLAogICAgICAgICAgdmFsdWU6IDAKICAgICAgICB9LAogICAgICAgIHRpbWU6IHsKICAgICAgICAgIGZyb206IGZyb20sCiAgICAgICAgICB0bzogdG8sCiAgICAgICAgICBtb2RlOiAnYWJzb2x1dGUnCiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHZhciBhcHBTdGF0ZSA9IHsKICAgICAgICBxdWVyeTogewogICAgICAgICAgcXVlcnlfc3RyaW5nOiB7CiAgICAgICAgICAgIGFuYWx5emVfd2lsZGNhcmQ6IHRydWUsCiAgICAgICAgICAgIHF1ZXJ5OiAnKicKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH07CgogICAgICBpZiAoZm9yZWNhc3QgIT09IHVuZGVmaW5lZCkgewogICAgICAgIC8vIFNldCB0aGUgem9vbSB0byBzaG93IGR1cmF0aW9uIGJlZm9yZSB0aGUgZm9yZWNhc3QgZXF1YWwgdG8gdGhlIGxlbmd0aCBvZiB0aGUgZm9yZWNhc3QuCiAgICAgICAgdmFyIGZvcmVjYXN0RHVyYXRpb25NcyA9IGZvcmVjYXN0LmZvcmVjYXN0X2VuZF90aW1lc3RhbXAgLSBmb3JlY2FzdC5mb3JlY2FzdF9zdGFydF90aW1lc3RhbXA7CiAgICAgICAgdmFyIHpvb21Gcm9tID0gTWF0aC5tYXgoZm9yZWNhc3QuZm9yZWNhc3Rfc3RhcnRfdGltZXN0YW1wIC0gZm9yZWNhc3REdXJhdGlvbk1zLCBqb2JFYXJsaWVzdCk7CiAgICAgICAgYXBwU3RhdGUubWxUaW1lU2VyaWVzRXhwbG9yZXIgPSB7CiAgICAgICAgICBmb3JlY2FzdElkOiBmb3JlY2FzdC5mb3JlY2FzdF9pZCwKICAgICAgICAgIHpvb206IHsKICAgICAgICAgICAgZnJvbTogbmV3IERhdGUoem9vbUZyb20pLnRvSVNPU3RyaW5nKCksCiAgICAgICAgICAgIHRvOiBuZXcgRGF0ZShmb3JlY2FzdC5mb3JlY2FzdF9lbmRfdGltZXN0YW1wKS50b0lTT1N0cmluZygpCiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfQoKICAgICAgdmFyIF9hID0gX3Jpc29uTm9kZS5kZWZhdWx0LmVuY29kZShhcHBTdGF0ZSk7CgogICAgICB2YXIgdXJsID0gIj9fZz0iLmNvbmNhdChfZywgIiZfYT0iKS5jb25jYXQoX2EpOwogICAgICAoMCwgX3JlY2VudGx5X2FjY2Vzc2VkLmFkZEl0ZW1Ub1JlY2VudGx5QWNjZXNzZWQpKCd0aW1lc2VyaWVzZXhwbG9yZXInLCB0aGlzLnByb3BzLmpvYi5qb2JfaWQsIHVybCk7CiAgICAgIHdpbmRvdy5vcGVuKCIjL3RpbWVzZXJpZXNleHBsb3JlciIuY29uY2F0KHVybCksICdfc2VsZicpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIGlmICh0aGlzLnN0YXRlLmlzTG9hZGluZyA9PT0gdHJ1ZSkgewogICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogInNwYWNlQXJvdW5kIgogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTG9hZGluZ1NwaW5uZXIsIHsKICAgICAgICAgIHNpemU6ICJsIgogICAgICAgIH0pKSk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLnN0YXRlLmVycm9yTWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDYWxsT3V0LCB7CiAgICAgICAgICB0aXRsZTogdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UsCiAgICAgICAgICBjb2xvcjogImRhbmdlciIsCiAgICAgICAgICBpY29uVHlwZTogImNyb3NzIgogICAgICAgIH0pOwogICAgICB9CgogICAgICB2YXIgZm9yZWNhc3RzID0gdGhpcy5zdGF0ZS5mb3JlY2FzdHM7CgogICAgICBpZiAoZm9yZWNhc3RzLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ2FsbE91dCwgewogICAgICAgICAgdGl0bGU6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgIGlkOiAieHBhY2subWwuam9ic0xpc3Quam9iRGV0YWlscy5mb3JlY2FzdHNUYWJsZS5ub0ZvcmVjYXN0c1RpdGxlIiwKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJObyBmb3JlY2FzdHMgaGF2ZSBiZWVuIHJ1biBmb3IgdGhpcyBqb2IiCiAgICAgICAgICB9KSwKICAgICAgICAgIGljb25UeXBlOiAiaUluQ2lyY2xlIiwKICAgICAgICAgIHJvbGU6ICJhbGVydCIKICAgICAgICB9LCAoMCwgX2pvYl91dGlscy5pc1RpbWVTZXJpZXNWaWV3Sm9iKSh0aGlzLnByb3BzLmpvYikgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogInhwYWNrLm1sLmpvYnNMaXN0LmpvYkRldGFpbHMuZm9yZWNhc3RzVGFibGUubm9Gb3JlY2FzdHNEZXNjcmlwdGlvbiIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlRvIHJ1biBhIGZvcmVjYXN0LCBvcGVuIHRoZSB7c2luZ2xlTWV0cmljVmlld2VyTGlua30iLAogICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgIHNpbmdsZU1ldHJpY1ZpZXdlckxpbms6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlMaW5rLCB7CiAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczMub3BlblNpbmdsZU1ldHJpY1ZpZXcoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgICAgaWQ6ICJ4cGFjay5tbC5qb2JzTGlzdC5qb2JEZXRhaWxzLmZvcmVjYXN0c1RhYmxlLm5vRm9yZWNhc3RzRGVzY3JpcHRpb24ubGlua1RleHQiLAogICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiU2luZ2xlIE1ldHJpYyBWaWV3ZXIiCiAgICAgICAgICAgIH0pKQogICAgICAgICAgfQogICAgICAgIH0pKSk7CiAgICAgIH0KCiAgICAgIHZhciBpbnRsID0gdGhpcy5wcm9wcy5pbnRsOwogICAgICB2YXIgY29sdW1ucyA9IFt7CiAgICAgICAgZmllbGQ6ICdmb3JlY2FzdF9jcmVhdGVfdGltZXN0YW1wJywKICAgICAgICBuYW1lOiBpbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgICAgaWQ6ICd4cGFjay5tbC5qb2JzTGlzdC5qb2JEZXRhaWxzLmZvcmVjYXN0c1RhYmxlLmNyZWF0ZWRMYWJlbCcsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0NyZWF0ZWQnCiAgICAgICAgfSksCiAgICAgICAgZGF0YVR5cGU6ICdkYXRlJywKICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihkYXRlKSB7CiAgICAgICAgICByZXR1cm4gKDAsIF9mb3JtYXQuZm9ybWF0RGF0ZSkoZGF0ZSwgVElNRV9GT1JNQVQpOwogICAgICAgIH0sCiAgICAgICAgdGV4dE9ubHk6IHRydWUsCiAgICAgICAgc29ydGFibGU6IHRydWUsCiAgICAgICAgc2NvcGU6ICdyb3cnCiAgICAgIH0sIHsKICAgICAgICBmaWVsZDogJ2ZvcmVjYXN0X3N0YXJ0X3RpbWVzdGFtcCcsCiAgICAgICAgbmFtZTogaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICAgIGlkOiAneHBhY2subWwuam9ic0xpc3Quam9iRGV0YWlscy5mb3JlY2FzdHNUYWJsZS5mcm9tTGFiZWwnLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdGcm9tJwogICAgICAgIH0pLAogICAgICAgIGRhdGFUeXBlOiAnZGF0ZScsCiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoZGF0ZSkgewogICAgICAgICAgcmV0dXJuICgwLCBfZm9ybWF0LmZvcm1hdERhdGUpKGRhdGUsIFRJTUVfRk9STUFUKTsKICAgICAgICB9LAogICAgICAgIHRleHRPbmx5OiB0cnVlLAogICAgICAgIHNvcnRhYmxlOiB0cnVlCiAgICAgIH0sIHsKICAgICAgICBmaWVsZDogJ2ZvcmVjYXN0X2VuZF90aW1lc3RhbXAnLAogICAgICAgIG5hbWU6IGludGwuZm9ybWF0TWVzc2FnZSh7CiAgICAgICAgICBpZDogJ3hwYWNrLm1sLmpvYnNMaXN0LmpvYkRldGFpbHMuZm9yZWNhc3RzVGFibGUudG9MYWJlbCcsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1RvJwogICAgICAgIH0pLAogICAgICAgIGRhdGFUeXBlOiAnZGF0ZScsCiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoZGF0ZSkgewogICAgICAgICAgcmV0dXJuICgwLCBfZm9ybWF0LmZvcm1hdERhdGUpKGRhdGUsIFRJTUVfRk9STUFUKTsKICAgICAgICB9LAogICAgICAgIHRleHRPbmx5OiB0cnVlLAogICAgICAgIHNvcnRhYmxlOiB0cnVlCiAgICAgIH0sIHsKICAgICAgICBmaWVsZDogJ2ZvcmVjYXN0X3N0YXR1cycsCiAgICAgICAgbmFtZTogaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICAgIGlkOiAneHBhY2subWwuam9ic0xpc3Quam9iRGV0YWlscy5mb3JlY2FzdHNUYWJsZS5zdGF0dXNMYWJlbCcsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1N0YXR1cycKICAgICAgICB9KSwKICAgICAgICBzb3J0YWJsZTogdHJ1ZQogICAgICB9LCB7CiAgICAgICAgZmllbGQ6ICdmb3JlY2FzdF9tZW1vcnlfYnl0ZXMnLAogICAgICAgIG5hbWU6IGludGwuZm9ybWF0TWVzc2FnZSh7CiAgICAgICAgICBpZDogJ3hwYWNrLm1sLmpvYnNMaXN0LmpvYkRldGFpbHMuZm9yZWNhc3RzVGFibGUubWVtb3J5U2l6ZUxhYmVsJywKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTWVtb3J5IHNpemUnCiAgICAgICAgfSksCiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoYnl0ZXMpIHsKICAgICAgICAgIHJldHVybiAoMCwgX2Zvcm1hdC5mb3JtYXROdW1iZXIpKGJ5dGVzLCAnMGInKTsKICAgICAgICB9LAogICAgICAgIHNvcnRhYmxlOiB0cnVlCiAgICAgIH0sIHsKICAgICAgICBmaWVsZDogJ3Byb2Nlc3NpbmdfdGltZV9tcycsCiAgICAgICAgbmFtZTogaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICAgIGlkOiAneHBhY2subWwuam9ic0xpc3Quam9iRGV0YWlscy5mb3JlY2FzdHNUYWJsZS5wcm9jZXNzaW5nVGltZUxhYmVsJywKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUHJvY2Vzc2luZyB0aW1lJwogICAgICAgIH0pLAogICAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKG1zKSB7CiAgICAgICAgICByZXR1cm4gaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICAgICAgaWQ6ICd4cGFjay5tbC5qb2JzTGlzdC5qb2JEZXRhaWxzLmZvcmVjYXN0c1RhYmxlLm1zVGltZVVuaXRMYWJlbCcsCiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAne21zfSBtcycKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgbXM6IG1zCiAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIHNvcnRhYmxlOiB0cnVlCiAgICAgIH0sIHsKICAgICAgICBmaWVsZDogJ2ZvcmVjYXN0X2V4cGlyeV90aW1lc3RhbXAnLAogICAgICAgIG5hbWU6IGludGwuZm9ybWF0TWVzc2FnZSh7CiAgICAgICAgICBpZDogJ3hwYWNrLm1sLmpvYnNMaXN0LmpvYkRldGFpbHMuZm9yZWNhc3RzVGFibGUuZXhwaXJlc0xhYmVsJywKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRXhwaXJlcycKICAgICAgICB9KSwKICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihkYXRlKSB7CiAgICAgICAgICByZXR1cm4gKDAsIF9mb3JtYXQuZm9ybWF0RGF0ZSkoZGF0ZSwgVElNRV9GT1JNQVQpOwogICAgICAgIH0sCiAgICAgICAgdGV4dE9ubHk6IHRydWUsCiAgICAgICAgc29ydGFibGU6IHRydWUKICAgICAgfSwgewogICAgICAgIGZpZWxkOiAnZm9yZWNhc3RfbWVzc2FnZXMnLAogICAgICAgIG5hbWU6IGludGwuZm9ybWF0TWVzc2FnZSh7CiAgICAgICAgICBpZDogJ3hwYWNrLm1sLmpvYnNMaXN0LmpvYkRldGFpbHMuZm9yZWNhc3RzVGFibGUubWVzc2FnZXNMYWJlbCcsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ01lc3NhZ2VzJwogICAgICAgIH0pLAogICAgICAgIHNvcnRhYmxlOiBmYWxzZSwKICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihtZXNzYWdlcykgewogICAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIG51bGwsIG1lc3NhZ2VzLm1hcChmdW5jdGlvbiAobWVzc2FnZSwgaW5kZXgpIHsKICAgICAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCB7CiAgICAgICAgICAgICAga2V5OiBpbmRleAogICAgICAgICAgICB9LCBtZXNzYWdlKTsKICAgICAgICAgIH0pKTsKICAgICAgICB9LAogICAgICAgIHRleHRPbmx5OiB0cnVlCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiBpbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgICAgaWQ6ICd4cGFjay5tbC5qb2JzTGlzdC5qb2JEZXRhaWxzLmZvcmVjYXN0c1RhYmxlLnZpZXdMYWJlbCcsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1ZpZXcnCiAgICAgICAgfSksCiAgICAgICAgd2lkdGg6ICc2MHB4JywKICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihmb3JlY2FzdCkgewogICAgICAgICAgdmFyIHZpZXdGb3JlY2FzdEFyaWFMYWJlbCA9IGludGwuZm9ybWF0TWVzc2FnZSh7CiAgICAgICAgICAgIGlkOiAneHBhY2subWwuam9ic0xpc3Quam9iRGV0YWlscy5mb3JlY2FzdHNUYWJsZS52aWV3QXJpYUxhYmVsJywKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdWaWV3IGZvcmVjYXN0IGNyZWF0ZWQgYXQge2NyZWF0ZWREYXRlfScKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgY3JlYXRlZERhdGU6ICgwLCBfZm9ybWF0LmZvcm1hdERhdGUpKGZvcmVjYXN0LmZvcmVjYXN0X2NyZWF0ZV90aW1lc3RhbXAsIFRJTUVfRk9STUFUKQogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkljb24sIHsKICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMzLm9wZW5TaW5nbGVNZXRyaWNWaWV3KGZvcmVjYXN0KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNEaXNhYmxlZDogZm9yZWNhc3QuZm9yZWNhc3Rfc3RhdHVzICE9PSBfc3RhdGVzLkZPUkVDQVNUX1JFUVVFU1RfU1RBVEUuRklOSVNIRUQsCiAgICAgICAgICAgIGljb25UeXBlOiAic3RhdHMiLAogICAgICAgICAgICAiYXJpYS1sYWJlbCI6IHZpZXdGb3JlY2FzdEFyaWFMYWJlbAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9XTsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlJbk1lbW9yeVRhYmxlLCB7CiAgICAgICAgY29tcHJlc3NlZDogdHJ1ZSwKICAgICAgICBpdGVtczogZm9yZWNhc3RzLAogICAgICAgIGNvbHVtbnM6IGNvbHVtbnMsCiAgICAgICAgcGFnaW5hdGlvbjogewogICAgICAgICAgcGFnZVNpemVPcHRpb25zOiBbNSwgMTAsIDI1XQogICAgICAgIH0sCiAgICAgICAgc29ydGluZzogdHJ1ZQogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBGb3JlY2FzdHNUYWJsZVVJOwp9KF9yZWFjdC5Db21wb25lbnQpOwoKRm9yZWNhc3RzVGFibGVVSS5wcm9wVHlwZXMgPSB7CiAgam9iOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQKfTsKdmFyIEZvcmVjYXN0c1RhYmxlID0gKDAsIF9yZWFjdDIuaW5qZWN0STE4bikoRm9yZWNhc3RzVGFibGVVSSk7CmV4cG9ydHMuRm9yZWNhc3RzVGFibGUgPSBGb3JlY2FzdHNUYWJsZTs="},null]}