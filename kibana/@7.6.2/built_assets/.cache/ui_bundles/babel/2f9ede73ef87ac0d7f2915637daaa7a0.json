{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/security/public/views/management/role_mappings/model/except_all_rule.js","dependencies":[{"path":"x-pack/legacy/plugins/security/public/views/management/role_mappings/model/except_all_rule.js","mtime":1585205047260},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuRXhjZXB0QWxsUnVsZSA9IHZvaWQgMDsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9ydWxlX2dyb3VwID0gcmVxdWlyZSgiLi9ydWxlX2dyb3VwIik7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogIGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09ICJzeW1ib2wiKSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0gZWxzZSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfQoKICByZXR1cm4gX3R5cGVvZihvYmopOwp9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgYXJyMltpXSA9IGFycltpXTsKICAgIH0KCiAgICByZXR1cm4gYXJyMjsKICB9Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsKICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7CiAgICByZXR1cm4gY2FsbDsKICB9CgogIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOwp9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsKICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgfTsKICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOwp9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsKICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsKICB9CgogIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IHsKICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9CiAgfSk7CiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7Cn0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgICBvLl9fcHJvdG9fXyA9IHA7CiAgICByZXR1cm4gbzsKICB9OwoKICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOwp9Ci8qKgogKiBSZXByZXNlbnRzIGEgZ3JvdXAgb2YgcnVsZXMgaW4gd2hpY2ggYXQgbGVhc3Qgb25lIG11c3QgZXZhbHVhdGUgdG8gZmFsc2UuCiAqLwoKCnZhciBFeGNlcHRBbGxSdWxlID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX1J1bGVHcm91cCkgewogIF9pbmhlcml0cyhFeGNlcHRBbGxSdWxlLCBfUnVsZUdyb3VwKTsKCiAgZnVuY3Rpb24gRXhjZXB0QWxsUnVsZSgpIHsKICAgIHZhciBfdGhpczsKCiAgICB2YXIgcnVsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFeGNlcHRBbGxSdWxlKTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihFeGNlcHRBbGxSdWxlKS5jYWxsKHRoaXMpKTsKICAgIF90aGlzLnJ1bGVzID0gcnVsZXM7CiAgICByZXR1cm4gX3RoaXM7CiAgfQogIC8qKiB7QHNlZSBSdWxlR3JvdXAuZ2V0UnVsZXN9ICovCgoKICBfY3JlYXRlQ2xhc3MoRXhjZXB0QWxsUnVsZSwgW3sKICAgIGtleTogImdldFJ1bGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSdWxlcygpIHsKICAgICAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLnJ1bGVzKTsKICAgIH0KICAgIC8qKiB7QHNlZSBSdWxlR3JvdXAuZ2V0RGlzcGxheVRpdGxlfSAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXREaXNwbGF5VGl0bGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERpc3BsYXlUaXRsZSgpIHsKICAgICAgcmV0dXJuIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5zZWN1cml0eS5tYW5hZ2VtZW50LmVkaXRSb2xlTWFwcGluZy5leGNlcHRBbGxSdWxlLmRpc3BsYXlUaXRsZScsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0FueSBhcmUgZmFsc2UnCiAgICAgIH0pOwogICAgfQogICAgLyoqIHtAc2VlIFJ1bGVHcm91cC5yZXBsYWNlUnVsZX0gKi8KCiAgfSwgewogICAga2V5OiAicmVwbGFjZVJ1bGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2VSdWxlKHJ1bGVJbmRleCwgcnVsZSkgewogICAgICB0aGlzLnJ1bGVzLnNwbGljZShydWxlSW5kZXgsIDEsIHJ1bGUpOwogICAgfQogICAgLyoqIHtAc2VlIFJ1bGVHcm91cC5yZW1vdmVSdWxlfSAqLwoKICB9LCB7CiAgICBrZXk6ICJyZW1vdmVSdWxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVSdWxlKHJ1bGVJbmRleCkgewogICAgICB0aGlzLnJ1bGVzLnNwbGljZShydWxlSW5kZXgsIDEpOwogICAgfQogICAgLyoqIHtAc2VlIFJ1bGVHcm91cC5hZGRSdWxlfSAqLwoKICB9LCB7CiAgICBrZXk6ICJhZGRSdWxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSdWxlKHJ1bGUpIHsKICAgICAgdGhpcy5ydWxlcy5wdXNoKHJ1bGUpOwogICAgfQogICAgLyoqIHtAc2VlIFJ1bGVHcm91cC5jYW5Db250YWluUnVsZXN9ICovCgogIH0sIHsKICAgIGtleTogImNhbkNvbnRhaW5SdWxlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuQ29udGFpblJ1bGVzKCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIC8qKiB7QHNlZSBSdWxlR3JvdXAuY2xvbmV9ICovCgogIH0sIHsKICAgIGtleTogImNsb25lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHsKICAgICAgcmV0dXJuIG5ldyBFeGNlcHRBbGxSdWxlKHRoaXMucnVsZXMubWFwKGZ1bmN0aW9uIChyKSB7CiAgICAgICAgcmV0dXJuIHIuY2xvbmUoKTsKICAgICAgfSkpOwogICAgfQogICAgLyoqIHtAc2VlIFJ1bGVHcm91cC50b1Jhd30gKi8KCiAgfSwgewogICAga2V5OiAidG9SYXciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvUmF3KCkgewogICAgICB2YXIgcmF3UnVsZSA9IHsKICAgICAgICBhbGw6IF90b0NvbnN1bWFibGVBcnJheSh0aGlzLnJ1bGVzLm1hcChmdW5jdGlvbiAocnVsZSkgewogICAgICAgICAgcmV0dXJuIHJ1bGUudG9SYXcoKTsKICAgICAgICB9KSkKICAgICAgfTsKICAgICAgcmV0dXJuIHsKICAgICAgICBleGNlcHQ6IHJhd1J1bGUKICAgICAgfTsKICAgIH0KICB9XSk7CgogIHJldHVybiBFeGNlcHRBbGxSdWxlOwp9KF9ydWxlX2dyb3VwLlJ1bGVHcm91cCk7CgpleHBvcnRzLkV4Y2VwdEFsbFJ1bGUgPSBFeGNlcHRBbGxSdWxlOw=="},null]}