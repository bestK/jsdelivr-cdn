{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/data_frame_analytics/common/fields.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/data_frame_analytics/common/fields.js","mtime":1585205045541},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZ2V0RmxhdHRlbmVkRmllbGRzID0gZ2V0RmxhdHRlbmVkRmllbGRzOwpleHBvcnRzLnRvZ2dsZVNlbGVjdGVkRmllbGQgPSBleHBvcnRzLnRvZ2dsZVNlbGVjdGVkRmllbGRTaW1wbGUgPSBleHBvcnRzLmdldERlZmF1bHRTZWxlY3RhYmxlRmllbGRzID0gZXhwb3J0cy5nZXREZWZhdWx0UmVncmVzc2lvbkZpZWxkcyA9IGV4cG9ydHMuZ2V0RGVmYXVsdENsYXNzaWZpY2F0aW9uRmllbGRzID0gZXhwb3J0cy5nZXREZWZhdWx0RmllbGRzRnJvbUpvYkNhcHMgPSBleHBvcnRzLnNvcnRSZWdyZXNzaW9uUmVzdWx0c0NvbHVtbnMgPSBleHBvcnRzLnNvcnRSZWdyZXNzaW9uUmVzdWx0c0ZpZWxkcyA9IGV4cG9ydHMuc29ydENvbHVtbnMgPSBleHBvcnRzLmlzS2V5d29yZEFuZFRleHRUeXBlID0gZXhwb3J0cy5FWFRFTkRFRF9OVU1FUklDQUxfVFlQRVMgPSBleHBvcnRzLkJBU0lDX05VTUVSSUNBTF9UWVBFUyA9IGV4cG9ydHMuREVGQVVMVF9SRUdSRVNTSU9OX0NPTFVNTlMgPSBleHBvcnRzLk1BWF9DT0xVTU5TID0gdm9pZCAwOwoKdmFyIF9vYmplY3RfdXRpbHMgPSByZXF1aXJlKCIuLi8uLi91dGlsL29iamVjdF91dGlscyIpOwoKdmFyIF9hbmFseXRpY3MgPSByZXF1aXJlKCIuL2FuYWx5dGljcyIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvcGx1Z2lucy9kYXRhL3B1YmxpYyIpOwoKdmFyIF9uZXdfam9iX2NhcGFiaWxpdGllc19zZXJ2aWNlID0gcmVxdWlyZSgiLi4vLi4vc2VydmljZXMvbmV3X2pvYl9jYXBhYmlsaXRpZXNfc2VydmljZSIpOwoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogIGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09ICJzeW1ib2wiKSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0gZWxzZSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfQoKICByZXR1cm4gX3R5cGVvZihvYmopOwp9Cgp2YXIgTUFYX0NPTFVNTlMgPSAyMDsKZXhwb3J0cy5NQVhfQ09MVU1OUyA9IE1BWF9DT0xVTU5TOwp2YXIgREVGQVVMVF9SRUdSRVNTSU9OX0NPTFVNTlMgPSA4OwpleHBvcnRzLkRFRkFVTFRfUkVHUkVTU0lPTl9DT0xVTU5TID0gREVGQVVMVF9SRUdSRVNTSU9OX0NPTFVNTlM7CnZhciBCQVNJQ19OVU1FUklDQUxfVFlQRVMgPSBuZXcgU2V0KFtfcHVibGljLkVTX0ZJRUxEX1RZUEVTLkxPTkcsIF9wdWJsaWMuRVNfRklFTERfVFlQRVMuSU5URUdFUiwgX3B1YmxpYy5FU19GSUVMRF9UWVBFUy5TSE9SVCwgX3B1YmxpYy5FU19GSUVMRF9UWVBFUy5CWVRFXSk7CmV4cG9ydHMuQkFTSUNfTlVNRVJJQ0FMX1RZUEVTID0gQkFTSUNfTlVNRVJJQ0FMX1RZUEVTOwp2YXIgRVhURU5ERURfTlVNRVJJQ0FMX1RZUEVTID0gbmV3IFNldChbX3B1YmxpYy5FU19GSUVMRF9UWVBFUy5ET1VCTEUsIF9wdWJsaWMuRVNfRklFTERfVFlQRVMuRkxPQVQsIF9wdWJsaWMuRVNfRklFTERfVFlQRVMuSEFMRl9GTE9BVCwgX3B1YmxpYy5FU19GSUVMRF9UWVBFUy5TQ0FMRURfRkxPQVRdKTsKZXhwb3J0cy5FWFRFTkRFRF9OVU1FUklDQUxfVFlQRVMgPSBFWFRFTkRFRF9OVU1FUklDQUxfVFlQRVM7CnZhciBNTF9fSURfQ09QWSA9ICdtbF9faWRfY29weSc7Cgp2YXIgaXNLZXl3b3JkQW5kVGV4dFR5cGUgPSBmdW5jdGlvbiBpc0tleXdvcmRBbmRUZXh0VHlwZShmaWVsZE5hbWUpIHsKICB2YXIgX2ZpZWxkcyRmaW5kOwoKICB2YXIgZmllbGRzID0gX25ld19qb2JfY2FwYWJpbGl0aWVzX3NlcnZpY2UubmV3Sm9iQ2Fwc1NlcnZpY2UuZmllbGRzOwogIHZhciBmaWVsZFR5cGUgPSAoX2ZpZWxkcyRmaW5kID0gZmllbGRzLmZpbmQoZnVuY3Rpb24gKGZpZWxkKSB7CiAgICByZXR1cm4gZmllbGQubmFtZSA9PT0gZmllbGROYW1lOwogIH0pKSA9PT0gbnVsbCB8fCBfZmllbGRzJGZpbmQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9maWVsZHMkZmluZC50eXBlOwogIHZhciBpc0JvdGhUeXBlcyA9IGZhbHNlOyAvLyBJZiBpdCdzIGEga2V5d29yZCB0eXBlIC0gY2hlY2sgaWYgaXQgaGFzIGEgY29ycmVzcG9uZGluZyB0ZXh0IHR5cGUKCiAgaWYgKGZpZWxkVHlwZSAhPT0gdW5kZWZpbmVkICYmIGZpZWxkVHlwZSA9PT0gX3B1YmxpYy5FU19GSUVMRF9UWVBFUy5LRVlXT1JEKSB7CiAgICB2YXIgZmllbGQgPSBfbmV3X2pvYl9jYXBhYmlsaXRpZXNfc2VydmljZS5uZXdKb2JDYXBzU2VydmljZS5nZXRGaWVsZEJ5SWQoZmllbGROYW1lLnJlcGxhY2UoL1wua2V5d29yZCQvLCAnJykpOwoKICAgIGlzQm90aFR5cGVzID0gZmllbGQgIT09IG51bGwgJiYgZmllbGQudHlwZSA9PT0gX3B1YmxpYy5FU19GSUVMRF9UWVBFUy5URVhUOwogIH0gZWxzZSBpZiAoZmllbGRUeXBlICE9PSB1bmRlZmluZWQgJiYgZmllbGRUeXBlID09PSBfcHVibGljLkVTX0ZJRUxEX1RZUEVTLlRFWFQpIHsKICAgIC8vICAgSWYgdGV4dCwgY2hlY2sgaWYgaGFzIGNvcnJlc3BvbmRpbmcga2V5d29yZCB0eXBlCiAgICB2YXIgX2ZpZWxkID0gX25ld19qb2JfY2FwYWJpbGl0aWVzX3NlcnZpY2UubmV3Sm9iQ2Fwc1NlcnZpY2UuZ2V0RmllbGRCeUlkKCIiLmNvbmNhdChmaWVsZE5hbWUsICIua2V5d29yZCIpKTsKCiAgICBpc0JvdGhUeXBlcyA9IF9maWVsZCAhPT0gbnVsbCAmJiBfZmllbGQudHlwZSA9PT0gX3B1YmxpYy5FU19GSUVMRF9UWVBFUy5LRVlXT1JEOwogIH0KCiAgcmV0dXJuIGlzQm90aFR5cGVzOwp9OyAvLyBVc2VkIHRvIHNvcnQgY29sdW1uczoKLy8gLSBzdHJpbmcgYmFzZWQgY29sdW1ucyBhcmUgbW92ZWQgdG8gdGhlIGxlZnQKLy8gLSBmb2xsb3dlZCBieSB0aGUgb3V0bGllcl9zY29yZSBjb2x1bW4KLy8gLSBmZWF0dXJlX2luZmx1ZW5jZSBmaWVsZHMgZ2V0IG1vdmVkIG5leHQgdG8gdGhlIGNvcnJlc3BvbmRpbmcgZmllbGQgY29sdW1uCi8vIC0gb3ZlcmFsbCBmaWVsZHMgZ2V0IHNvcnRlZCBhbHBoYWJldGljYWxseQoKCmV4cG9ydHMuaXNLZXl3b3JkQW5kVGV4dFR5cGUgPSBpc0tleXdvcmRBbmRUZXh0VHlwZTsKCnZhciBzb3J0Q29sdW1ucyA9IGZ1bmN0aW9uIHNvcnRDb2x1bW5zKG9iaiwgcmVzdWx0c0ZpZWxkKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7CiAgICB2YXIgdHlwZW9mQSA9IF90eXBlb2Yob2JqW2FdKTsKCiAgICB2YXIgdHlwZW9mQiA9IF90eXBlb2Yob2JqW2JdKTsKCiAgICBpZiAodHlwZW9mQSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mQiA9PT0gJ3N0cmluZycpIHsKICAgICAgcmV0dXJuIDE7CiAgICB9CgogICAgaWYgKHR5cGVvZkEgPT09ICdzdHJpbmcnICYmIHR5cGVvZkIgIT09ICdzdHJpbmcnKSB7CiAgICAgIHJldHVybiAtMTsKICAgIH0KCiAgICBpZiAodHlwZW9mQSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mQiA9PT0gJ3N0cmluZycpIHsKICAgICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTsKICAgIH0KCiAgICBpZiAoYSA9PT0gIiIuY29uY2F0KHJlc3VsdHNGaWVsZCwgIi5vdXRsaWVyX3Njb3JlIikpIHsKICAgICAgcmV0dXJuIC0xOwogICAgfQoKICAgIGlmIChiID09PSAiIi5jb25jYXQocmVzdWx0c0ZpZWxkLCAiLm91dGxpZXJfc2NvcmUiKSkgewogICAgICByZXR1cm4gMTsKICAgIH0KCiAgICB2YXIgdG9rZW5zQSA9IGEuc3BsaXQoJy4nKTsKICAgIHZhciBwcmVmaXhBID0gdG9rZW5zQVswXTsKICAgIHZhciB0b2tlbnNCID0gYi5zcGxpdCgnLicpOwogICAgdmFyIHByZWZpeEIgPSB0b2tlbnNCWzBdOwoKICAgIGlmIChwcmVmaXhBID09PSByZXN1bHRzRmllbGQgJiYgdG9rZW5zQS5sZW5ndGggPiAxICYmIHByZWZpeEIgIT09IHJlc3VsdHNGaWVsZCkgewogICAgICB0b2tlbnNBLnNoaWZ0KCk7CiAgICAgIHRva2Vuc0Euc2hpZnQoKTsKICAgICAgaWYgKHRva2Vuc0Euam9pbignLicpID09PSBiKSByZXR1cm4gMTsKICAgICAgcmV0dXJuIHRva2Vuc0Euam9pbignLicpLmxvY2FsZUNvbXBhcmUoYik7CiAgICB9CgogICAgaWYgKHByZWZpeEIgPT09IHJlc3VsdHNGaWVsZCAmJiB0b2tlbnNCLmxlbmd0aCA+IDEgJiYgcHJlZml4QSAhPT0gcmVzdWx0c0ZpZWxkKSB7CiAgICAgIHRva2Vuc0Iuc2hpZnQoKTsKICAgICAgdG9rZW5zQi5zaGlmdCgpOwogICAgICBpZiAodG9rZW5zQi5qb2luKCcuJykgPT09IGEpIHJldHVybiAtMTsKICAgICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZSh0b2tlbnNCLmpvaW4oJy4nKSk7CiAgICB9CgogICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTsKICB9Owp9OwoKZXhwb3J0cy5zb3J0Q29sdW1ucyA9IHNvcnRDb2x1bW5zOwoKdmFyIHNvcnRSZWdyZXNzaW9uUmVzdWx0c0ZpZWxkcyA9IGZ1bmN0aW9uIHNvcnRSZWdyZXNzaW9uUmVzdWx0c0ZpZWxkcyhhLCBiLCBqb2JDb25maWcpIHsKICB2YXIgZGVwZW5kZW50VmFyaWFibGUgPSAoMCwgX2FuYWx5dGljcy5nZXREZXBlbmRlbnRWYXIpKGpvYkNvbmZpZy5hbmFseXNpcyk7CiAgdmFyIHJlc3VsdHNGaWVsZCA9IGpvYkNvbmZpZy5kZXN0LnJlc3VsdHNfZmllbGQ7CiAgdmFyIHByZWRpY3RlZEZpZWxkID0gKDAsIF9hbmFseXRpY3MuZ2V0UHJlZGljdGVkRmllbGROYW1lKShyZXN1bHRzRmllbGQsIGpvYkNvbmZpZy5hbmFseXNpcywgdHJ1ZSk7CgogIGlmIChhID09PSAiIi5jb25jYXQocmVzdWx0c0ZpZWxkLCAiLmlzX3RyYWluaW5nIikpIHsKICAgIHJldHVybiAtMTsKICB9CgogIGlmIChiID09PSAiIi5jb25jYXQocmVzdWx0c0ZpZWxkLCAiLmlzX3RyYWluaW5nIikpIHsKICAgIHJldHVybiAxOwogIH0KCiAgaWYgKGEgPT09IHByZWRpY3RlZEZpZWxkKSB7CiAgICByZXR1cm4gLTE7CiAgfQoKICBpZiAoYiA9PT0gcHJlZGljdGVkRmllbGQpIHsKICAgIHJldHVybiAxOwogIH0KCiAgaWYgKGEgPT09IGRlcGVuZGVudFZhcmlhYmxlIHx8IGEgPT09IGRlcGVuZGVudFZhcmlhYmxlLnJlcGxhY2UoL1wua2V5d29yZCQvLCAnJykpIHsKICAgIHJldHVybiAtMTsKICB9CgogIGlmIChiID09PSBkZXBlbmRlbnRWYXJpYWJsZSB8fCBiID09PSBkZXBlbmRlbnRWYXJpYWJsZS5yZXBsYWNlKC9cLmtleXdvcmQkLywgJycpKSB7CiAgICByZXR1cm4gMTsKICB9CgogIGlmIChhID09PSAiIi5jb25jYXQocmVzdWx0c0ZpZWxkLCAiLnByZWRpY3Rpb25fcHJvYmFiaWxpdHkiKSkgewogICAgcmV0dXJuIC0xOwogIH0KCiAgaWYgKGIgPT09ICIiLmNvbmNhdChyZXN1bHRzRmllbGQsICIucHJlZGljdGlvbl9wcm9iYWJpbGl0eSIpKSB7CiAgICByZXR1cm4gMTsKICB9CgogIHJldHVybiBhLmxvY2FsZUNvbXBhcmUoYik7Cn07IC8vIFVzZWQgdG8gc29ydCBjb2x1bW5zOgovLyBBbmNob3Igb24gdGhlIGxlZnQgbWwuaXNfdHJhaW5pbmcsIDxwcmVkaWN0ZWRGaWVsZD4sIDxhY3R1YWw+CgoKZXhwb3J0cy5zb3J0UmVncmVzc2lvblJlc3VsdHNGaWVsZHMgPSBzb3J0UmVncmVzc2lvblJlc3VsdHNGaWVsZHM7Cgp2YXIgc29ydFJlZ3Jlc3Npb25SZXN1bHRzQ29sdW1ucyA9IGZ1bmN0aW9uIHNvcnRSZWdyZXNzaW9uUmVzdWx0c0NvbHVtbnMob2JqLCBqb2JDb25maWcpIHsKICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHsKICAgIHZhciBkZXBlbmRlbnRWYXJpYWJsZSA9ICgwLCBfYW5hbHl0aWNzLmdldERlcGVuZGVudFZhcikoam9iQ29uZmlnLmFuYWx5c2lzKTsKICAgIHZhciByZXN1bHRzRmllbGQgPSBqb2JDb25maWcuZGVzdC5yZXN1bHRzX2ZpZWxkOwogICAgdmFyIHByZWRpY3RlZEZpZWxkID0gKDAsIF9hbmFseXRpY3MuZ2V0UHJlZGljdGVkRmllbGROYW1lKShyZXN1bHRzRmllbGQsIGpvYkNvbmZpZy5hbmFseXNpcywgdHJ1ZSk7CgogICAgdmFyIHR5cGVvZkEgPSBfdHlwZW9mKG9ialthXSk7CgogICAgdmFyIHR5cGVvZkIgPSBfdHlwZW9mKG9ialtiXSk7CgogICAgaWYgKGEgPT09ICIiLmNvbmNhdChyZXN1bHRzRmllbGQsICIuaXNfdHJhaW5pbmciKSkgewogICAgICByZXR1cm4gLTE7CiAgICB9CgogICAgaWYgKGIgPT09ICIiLmNvbmNhdChyZXN1bHRzRmllbGQsICIuaXNfdHJhaW5pbmciKSkgewogICAgICByZXR1cm4gMTsKICAgIH0KCiAgICBpZiAoYSA9PT0gcHJlZGljdGVkRmllbGQpIHsKICAgICAgcmV0dXJuIC0xOwogICAgfQoKICAgIGlmIChiID09PSBwcmVkaWN0ZWRGaWVsZCkgewogICAgICByZXR1cm4gMTsKICAgIH0KCiAgICBpZiAoYSA9PT0gZGVwZW5kZW50VmFyaWFibGUpIHsKICAgICAgcmV0dXJuIC0xOwogICAgfQoKICAgIGlmIChiID09PSBkZXBlbmRlbnRWYXJpYWJsZSkgewogICAgICByZXR1cm4gMTsKICAgIH0KCiAgICBpZiAoYSA9PT0gIiIuY29uY2F0KHJlc3VsdHNGaWVsZCwgIi5wcmVkaWN0aW9uX3Byb2JhYmlsaXR5IikpIHsKICAgICAgcmV0dXJuIC0xOwogICAgfQoKICAgIGlmIChiID09PSAiIi5jb25jYXQocmVzdWx0c0ZpZWxkLCAiLnByZWRpY3Rpb25fcHJvYmFiaWxpdHkiKSkgewogICAgICByZXR1cm4gMTsKICAgIH0KCiAgICBpZiAodHlwZW9mQSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mQiA9PT0gJ3N0cmluZycpIHsKICAgICAgcmV0dXJuIDE7CiAgICB9CgogICAgaWYgKHR5cGVvZkEgPT09ICdzdHJpbmcnICYmIHR5cGVvZkIgIT09ICdzdHJpbmcnKSB7CiAgICAgIHJldHVybiAtMTsKICAgIH0KCiAgICBpZiAodHlwZW9mQSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mQiA9PT0gJ3N0cmluZycpIHsKICAgICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTsKICAgIH0KCiAgICB2YXIgdG9rZW5zQSA9IGEuc3BsaXQoJy4nKTsKICAgIHZhciBwcmVmaXhBID0gdG9rZW5zQVswXTsKICAgIHZhciB0b2tlbnNCID0gYi5zcGxpdCgnLicpOwogICAgdmFyIHByZWZpeEIgPSB0b2tlbnNCWzBdOwoKICAgIGlmIChwcmVmaXhBID09PSByZXN1bHRzRmllbGQgJiYgdG9rZW5zQS5sZW5ndGggPiAxICYmIHByZWZpeEIgIT09IHJlc3VsdHNGaWVsZCkgewogICAgICB0b2tlbnNBLnNoaWZ0KCk7CiAgICAgIHRva2Vuc0Euc2hpZnQoKTsKICAgICAgaWYgKHRva2Vuc0Euam9pbignLicpID09PSBiKSByZXR1cm4gMTsKICAgICAgcmV0dXJuIHRva2Vuc0Euam9pbignLicpLmxvY2FsZUNvbXBhcmUoYik7CiAgICB9CgogICAgaWYgKHByZWZpeEIgPT09IHJlc3VsdHNGaWVsZCAmJiB0b2tlbnNCLmxlbmd0aCA+IDEgJiYgcHJlZml4QSAhPT0gcmVzdWx0c0ZpZWxkKSB7CiAgICAgIHRva2Vuc0Iuc2hpZnQoKTsKICAgICAgdG9rZW5zQi5zaGlmdCgpOwogICAgICBpZiAodG9rZW5zQi5qb2luKCcuJykgPT09IGEpIHJldHVybiAtMTsKICAgICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZSh0b2tlbnNCLmpvaW4oJy4nKSk7CiAgICB9CgogICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTsKICB9Owp9OwoKZXhwb3J0cy5zb3J0UmVncmVzc2lvblJlc3VsdHNDb2x1bW5zID0gc29ydFJlZ3Jlc3Npb25SZXN1bHRzQ29sdW1uczsKCmZ1bmN0aW9uIGdldEZsYXR0ZW5lZEZpZWxkcyhvYmosIHJlc3VsdHNGaWVsZCkgewogIHZhciBmbGF0RG9jRmllbGRzID0gW107CiAgdmFyIG5ld0RvY0ZpZWxkcyA9IE9iamVjdC5rZXlzKG9iaik7CiAgbmV3RG9jRmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGYpIHsKICAgIHZhciBmaWVsZFZhbHVlID0gKDAsIF9vYmplY3RfdXRpbHMuZ2V0TmVzdGVkUHJvcGVydHkpKG9iaiwgZik7CgogICAgaWYgKF90eXBlb2YoZmllbGRWYWx1ZSkgIT09ICdvYmplY3QnIHx8IGZpZWxkVmFsdWUgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShmaWVsZFZhbHVlKSkgewogICAgICBmbGF0RG9jRmllbGRzLnB1c2goZik7CiAgICB9IGVsc2UgewogICAgICB2YXIgaW5uZXJGaWVsZHMgPSBnZXRGbGF0dGVuZWRGaWVsZHMoZmllbGRWYWx1ZSwgcmVzdWx0c0ZpZWxkKTsKICAgICAgdmFyIGZsYXR0ZW5lZEZpZWxkcyA9IGlubmVyRmllbGRzLm1hcChmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiAiIi5jb25jYXQoZiwgIi4iKS5jb25jYXQoZCk7CiAgICAgIH0pOwogICAgICBmbGF0RG9jRmllbGRzLnB1c2guYXBwbHkoZmxhdERvY0ZpZWxkcywgX3RvQ29uc3VtYWJsZUFycmF5KGZsYXR0ZW5lZEZpZWxkcykpOwogICAgfQogIH0pOwogIHJldHVybiBmbGF0RG9jRmllbGRzLmZpbHRlcihmdW5jdGlvbiAoZikgewogICAgcmV0dXJuIGYgIT09IE1MX19JRF9DT1BZOwogIH0pOwp9Cgp2YXIgZ2V0RGVmYXVsdEZpZWxkc0Zyb21Kb2JDYXBzID0gZnVuY3Rpb24gZ2V0RGVmYXVsdEZpZWxkc0Zyb21Kb2JDYXBzKGZpZWxkcywgam9iQ29uZmlnKSB7CiAgdmFyIF9uZXdKb2JDYXBzU2VydmljZSRnZTsKCiAgdmFyIGZpZWxkc09iaiA9IHsKICAgIHNlbGVjdGVkRmllbGRzOiBbXSwKICAgIGRvY0ZpZWxkczogW10KICB9OwoKICBpZiAoZmllbGRzLmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuIGZpZWxkc09iajsKICB9CgogIHZhciBkZXBlbmRlbnRWYXJpYWJsZSA9ICgwLCBfYW5hbHl0aWNzLmdldERlcGVuZGVudFZhcikoam9iQ29uZmlnLmFuYWx5c2lzKTsKICB2YXIgdHlwZSA9IChfbmV3Sm9iQ2Fwc1NlcnZpY2UkZ2UgPSBfbmV3X2pvYl9jYXBhYmlsaXRpZXNfc2VydmljZS5uZXdKb2JDYXBzU2VydmljZS5nZXRGaWVsZEJ5SWQoZGVwZW5kZW50VmFyaWFibGUpKSA9PT0gbnVsbCB8fCBfbmV3Sm9iQ2Fwc1NlcnZpY2UkZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9uZXdKb2JDYXBzU2VydmljZSRnZS50eXBlOwogIHZhciBwcmVkaWN0aW9uRmllbGROYW1lID0gKDAsIF9hbmFseXRpY3MuZ2V0UHJlZGljdGlvbkZpZWxkTmFtZSkoam9iQ29uZmlnLmFuYWx5c2lzKTsgLy8gZGVmYXVsdCBpcyAnbWwnCgogIHZhciByZXN1bHRzRmllbGQgPSBqb2JDb25maWcuZGVzdC5yZXN1bHRzX2ZpZWxkOwogIHZhciBkZWZhdWx0UHJlZGljdGlvbkZpZWxkID0gIiIuY29uY2F0KGRlcGVuZGVudFZhcmlhYmxlLCAiX3ByZWRpY3Rpb24iKTsKICB2YXIgcHJlZGljdGVkRmllbGQgPSAiIi5jb25jYXQocmVzdWx0c0ZpZWxkLCAiLiIpLmNvbmNhdChwcmVkaWN0aW9uRmllbGROYW1lID8gcHJlZGljdGlvbkZpZWxkTmFtZSA6IGRlZmF1bHRQcmVkaWN0aW9uRmllbGQpOwogIHZhciBhbGxGaWVsZHMgPSBbewogICAgaWQ6ICIiLmNvbmNhdChyZXN1bHRzRmllbGQsICIuaXNfdHJhaW5pbmciKSwKICAgIG5hbWU6ICIiLmNvbmNhdChyZXN1bHRzRmllbGQsICIuaXNfdHJhaW5pbmciKSwKICAgIHR5cGU6IF9wdWJsaWMuRVNfRklFTERfVFlQRVMuQk9PTEVBTgogIH0sIHsKICAgIGlkOiBwcmVkaWN0ZWRGaWVsZCwKICAgIG5hbWU6IHByZWRpY3RlZEZpZWxkLAogICAgdHlwZTogdHlwZQogIH1dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoZmllbGRzKSkuc29ydChmdW5jdGlvbiAoX3JlZiwgX3JlZjIpIHsKICAgIHZhciBhID0gX3JlZi5uYW1lOwogICAgdmFyIGIgPSBfcmVmMi5uYW1lOwogICAgcmV0dXJuIHNvcnRSZWdyZXNzaW9uUmVzdWx0c0ZpZWxkcyhhLCBiLCBqb2JDb25maWcpOwogIH0pOwogIHZhciBzZWxlY3RlZEZpZWxkcyA9IGFsbEZpZWxkcy5zbGljZSgwLCBERUZBVUxUX1JFR1JFU1NJT05fQ09MVU1OUyAqIDIpLmZpbHRlcihmdW5jdGlvbiAoZmllbGQpIHsKICAgIHJldHVybiBmaWVsZC5uYW1lID09PSBwcmVkaWN0ZWRGaWVsZCB8fCAhZmllbGQubmFtZS5pbmNsdWRlcygnLmtleXdvcmQnKTsKICB9KTsKCiAgaWYgKHNlbGVjdGVkRmllbGRzLmxlbmd0aCA+IERFRkFVTFRfUkVHUkVTU0lPTl9DT0xVTU5TKSB7CiAgICBzZWxlY3RlZEZpZWxkcyA9IHNlbGVjdGVkRmllbGRzLnNsaWNlKDAsIERFRkFVTFRfUkVHUkVTU0lPTl9DT0xVTU5TKTsKICB9CgogIHJldHVybiB7CiAgICBzZWxlY3RlZEZpZWxkczogc2VsZWN0ZWRGaWVsZHMsCiAgICBkb2NGaWVsZHM6IGFsbEZpZWxkcywKICAgIGRlcFZhclR5cGU6IHR5cGUKICB9Owp9OwoKZXhwb3J0cy5nZXREZWZhdWx0RmllbGRzRnJvbUpvYkNhcHMgPSBnZXREZWZhdWx0RmllbGRzRnJvbUpvYkNhcHM7Cgp2YXIgZ2V0RGVmYXVsdENsYXNzaWZpY2F0aW9uRmllbGRzID0gZnVuY3Rpb24gZ2V0RGVmYXVsdENsYXNzaWZpY2F0aW9uRmllbGRzKGRvY3MsIGpvYkNvbmZpZykgewogIGlmIChkb2NzLmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuIFtdOwogIH0KCiAgdmFyIHJlc3VsdHNGaWVsZCA9IGpvYkNvbmZpZy5kZXN0LnJlc3VsdHNfZmllbGQ7CiAgdmFyIG5ld0RvY0ZpZWxkcyA9IGdldEZsYXR0ZW5lZEZpZWxkcyhkb2NzWzBdLl9zb3VyY2UsIHJlc3VsdHNGaWVsZCk7CiAgcmV0dXJuIG5ld0RvY0ZpZWxkcy5maWx0ZXIoZnVuY3Rpb24gKGspIHsKICAgIGlmIChrID09PSAiIi5jb25jYXQocmVzdWx0c0ZpZWxkLCAiLmlzX3RyYWluaW5nIikpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IC8vIHByZWRpY3RlZCB2YWx1ZSBvZiBkZXBlbmRlbnQgdmFyaWFibGUKCgogICAgaWYgKGsgPT09ICgwLCBfYW5hbHl0aWNzLmdldFByZWRpY3RlZEZpZWxkTmFtZSkocmVzdWx0c0ZpZWxkLCBqb2JDb25maWcuYW5hbHlzaXMsIHRydWUpKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSAvLyBhY3R1YWwgdmFsdWUgb2YgZGVwZW5kZW50IHZhcmlhYmxlCgoKICAgIGlmIChrID09PSAoMCwgX2FuYWx5dGljcy5nZXREZXBlbmRlbnRWYXIpKGpvYkNvbmZpZy5hbmFseXNpcykpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgaWYgKGsgPT09ICIiLmNvbmNhdChyZXN1bHRzRmllbGQsICIucHJlZGljdGlvbl9wcm9iYWJpbGl0eSIpKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGlmIChrLnNwbGl0KCcuJylbMF0gPT09IHJlc3VsdHNGaWVsZCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgcmV0dXJuIGRvY3Muc29tZShmdW5jdGlvbiAocm93KSB7CiAgICAgIHJldHVybiByb3cuX3NvdXJjZVtrXSAhPT0gbnVsbDsKICAgIH0pOwogIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgIHJldHVybiBzb3J0UmVncmVzc2lvblJlc3VsdHNGaWVsZHMoYSwgYiwgam9iQ29uZmlnKTsKICB9KS5zbGljZSgwLCBERUZBVUxUX1JFR1JFU1NJT05fQ09MVU1OUyk7Cn07CgpleHBvcnRzLmdldERlZmF1bHRDbGFzc2lmaWNhdGlvbkZpZWxkcyA9IGdldERlZmF1bHRDbGFzc2lmaWNhdGlvbkZpZWxkczsKCnZhciBnZXREZWZhdWx0UmVncmVzc2lvbkZpZWxkcyA9IGZ1bmN0aW9uIGdldERlZmF1bHRSZWdyZXNzaW9uRmllbGRzKGRvY3MsIGpvYkNvbmZpZykgewogIHZhciByZXN1bHRzRmllbGQgPSBqb2JDb25maWcuZGVzdC5yZXN1bHRzX2ZpZWxkOwoKICBpZiAoZG9jcy5sZW5ndGggPT09IDApIHsKICAgIHJldHVybiBbXTsKICB9CgogIHZhciBuZXdEb2NGaWVsZHMgPSBnZXRGbGF0dGVuZWRGaWVsZHMoZG9jc1swXS5fc291cmNlLCByZXN1bHRzRmllbGQpOwogIHJldHVybiBuZXdEb2NGaWVsZHMuZmlsdGVyKGZ1bmN0aW9uIChrKSB7CiAgICBpZiAoayA9PT0gIiIuY29uY2F0KHJlc3VsdHNGaWVsZCwgIi5pc190cmFpbmluZyIpKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSAvLyBwcmVkaWN0ZWQgdmFsdWUgb2YgZGVwZW5kZW50IHZhcmlhYmxlCgoKICAgIGlmIChrID09PSAoMCwgX2FuYWx5dGljcy5nZXRQcmVkaWN0ZWRGaWVsZE5hbWUpKHJlc3VsdHNGaWVsZCwgam9iQ29uZmlnLmFuYWx5c2lzKSkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gLy8gYWN0dWFsIHZhbHVlIG9mIGRlcGVuZGVudCB2YXJpYWJsZQoKCiAgICBpZiAoayA9PT0gKDAsIF9hbmFseXRpY3MuZ2V0RGVwZW5kZW50VmFyKShqb2JDb25maWcuYW5hbHlzaXMpKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGlmIChrLnNwbGl0KCcuJylbMF0gPT09IHJlc3VsdHNGaWVsZCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgcmV0dXJuIGRvY3Muc29tZShmdW5jdGlvbiAocm93KSB7CiAgICAgIHJldHVybiByb3cuX3NvdXJjZVtrXSAhPT0gbnVsbDsKICAgIH0pOwogIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgIHJldHVybiBzb3J0UmVncmVzc2lvblJlc3VsdHNGaWVsZHMoYSwgYiwgam9iQ29uZmlnKTsKICB9KS5zbGljZSgwLCBERUZBVUxUX1JFR1JFU1NJT05fQ09MVU1OUyk7Cn07CgpleHBvcnRzLmdldERlZmF1bHRSZWdyZXNzaW9uRmllbGRzID0gZ2V0RGVmYXVsdFJlZ3Jlc3Npb25GaWVsZHM7Cgp2YXIgZ2V0RGVmYXVsdFNlbGVjdGFibGVGaWVsZHMgPSBmdW5jdGlvbiBnZXREZWZhdWx0U2VsZWN0YWJsZUZpZWxkcyhkb2NzLCByZXN1bHRzRmllbGQpIHsKICBpZiAoZG9jcy5sZW5ndGggPT09IDApIHsKICAgIHJldHVybiBbXTsKICB9CgogIHZhciBuZXdEb2NGaWVsZHMgPSBnZXRGbGF0dGVuZWRGaWVsZHMoZG9jc1swXS5fc291cmNlLCByZXN1bHRzRmllbGQpOwogIHJldHVybiBuZXdEb2NGaWVsZHMuZmlsdGVyKGZ1bmN0aW9uIChrKSB7CiAgICBpZiAoayA9PT0gIiIuY29uY2F0KHJlc3VsdHNGaWVsZCwgIi5vdXRsaWVyX3Njb3JlIikpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgaWYgKGsuc3BsaXQoJy4nKVswXSA9PT0gcmVzdWx0c0ZpZWxkKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICByZXR1cm4gZG9jcy5zb21lKGZ1bmN0aW9uIChyb3cpIHsKICAgICAgcmV0dXJuIHJvdy5fc291cmNlW2tdICE9PSBudWxsOwogICAgfSk7CiAgfSkuc2xpY2UoMCwgTUFYX0NPTFVNTlMpOwp9OwoKZXhwb3J0cy5nZXREZWZhdWx0U2VsZWN0YWJsZUZpZWxkcyA9IGdldERlZmF1bHRTZWxlY3RhYmxlRmllbGRzOwoKdmFyIHRvZ2dsZVNlbGVjdGVkRmllbGRTaW1wbGUgPSBmdW5jdGlvbiB0b2dnbGVTZWxlY3RlZEZpZWxkU2ltcGxlKHNlbGVjdGVkRmllbGRzLCBjb2x1bW4pIHsKICB2YXIgaW5kZXggPSBzZWxlY3RlZEZpZWxkcy5pbmRleE9mKGNvbHVtbik7CgogIGlmIChpbmRleCA9PT0gLTEpIHsKICAgIHNlbGVjdGVkRmllbGRzLnB1c2goY29sdW1uKTsKICB9IGVsc2UgewogICAgc2VsZWN0ZWRGaWVsZHMuc3BsaWNlKGluZGV4LCAxKTsKICB9CgogIHJldHVybiBzZWxlY3RlZEZpZWxkczsKfTsgLy8gRmllbGRzIHN0YXJ0aW5nIHdpdGggJ21sJyBvciBjdXN0b20gcmVzdWx0IG5hbWUgbm90IGluY2x1ZGVkIGluIG5ld0pvYkNhcHNTZXJ2aWNlIGZpZWxkcyBzbwovLyBuZWVkIHRvIHJlY3JlYXRlIHRoZSBmaWVsZCB3aXRoIGNvcnJlY3QgdHlwZSBhbmQgYWRkIHRvIHNlbGVjdGVkIGZpZWxkcwoKCmV4cG9ydHMudG9nZ2xlU2VsZWN0ZWRGaWVsZFNpbXBsZSA9IHRvZ2dsZVNlbGVjdGVkRmllbGRTaW1wbGU7Cgp2YXIgdG9nZ2xlU2VsZWN0ZWRGaWVsZCA9IGZ1bmN0aW9uIHRvZ2dsZVNlbGVjdGVkRmllbGQoc2VsZWN0ZWRGaWVsZHMsIGNvbHVtbiwgcmVzdWx0c0ZpZWxkLCBkZXBWYXJUeXBlKSB7CiAgdmFyIGluZGV4ID0gc2VsZWN0ZWRGaWVsZHMubWFwKGZ1bmN0aW9uIChmaWVsZCkgewogICAgcmV0dXJuIGZpZWxkLm5hbWU7CiAgfSkuaW5kZXhPZihjb2x1bW4pOwoKICBpZiAoaW5kZXggPT09IC0xKSB7CiAgICB2YXIgY29sdW1uRmllbGQgPSBfbmV3X2pvYl9jYXBhYmlsaXRpZXNfc2VydmljZS5uZXdKb2JDYXBzU2VydmljZS5nZXRGaWVsZEJ5SWQoY29sdW1uKTsKCiAgICBpZiAoY29sdW1uRmllbGQgIT09IG51bGwpIHsKICAgICAgc2VsZWN0ZWRGaWVsZHMucHVzaChjb2x1bW5GaWVsZCk7CiAgICB9IGVsc2UgewogICAgICB2YXIgcmVzdWx0RmllbGRQYXR0ZXJuID0gIl4iLmNvbmNhdChyZXN1bHRzRmllbGQsICIuIik7CiAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAocmVzdWx0RmllbGRQYXR0ZXJuKTsKICAgICAgdmFyIGlzUmVzdWx0RmllbGQgPSBjb2x1bW4ubWF0Y2gocmVnZXgpICE9PSBudWxsOwogICAgICB2YXIgbmV3RmllbGQ7CgogICAgICBpZiAoaXNSZXN1bHRGaWVsZCAmJiBjb2x1bW4uaW5jbHVkZXMoJ2lzX3RyYWluaW5nJykpIHsKICAgICAgICBuZXdGaWVsZCA9IHsKICAgICAgICAgIGlkOiBjb2x1bW4sCiAgICAgICAgICBuYW1lOiBjb2x1bW4sCiAgICAgICAgICB0eXBlOiBfcHVibGljLkVTX0ZJRUxEX1RZUEVTLkJPT0xFQU4KICAgICAgICB9OwogICAgICB9IGVsc2UgaWYgKGlzUmVzdWx0RmllbGQgJiYgZGVwVmFyVHlwZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgbmV3RmllbGQgPSB7CiAgICAgICAgICBpZDogY29sdW1uLAogICAgICAgICAgbmFtZTogY29sdW1uLAogICAgICAgICAgdHlwZTogZGVwVmFyVHlwZQogICAgICAgIH07CiAgICAgIH0KCiAgICAgIGlmIChuZXdGaWVsZCkgc2VsZWN0ZWRGaWVsZHMucHVzaChuZXdGaWVsZCk7CiAgICB9CiAgfSBlbHNlIHsKICAgIHNlbGVjdGVkRmllbGRzLnNwbGljZShpbmRleCwgMSk7CiAgfQoKICByZXR1cm4gc2VsZWN0ZWRGaWVsZHM7Cn07CgpleHBvcnRzLnRvZ2dsZVNlbGVjdGVkRmllbGQgPSB0b2dnbGVTZWxlY3RlZEZpZWxkOw=="},null]}