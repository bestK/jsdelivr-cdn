{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/timeseriesexplorer/timeseriesexplorer.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/timeseriesexplorer/timeseriesexplorer.js","mtime":1585205045988},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeSeriesExplorer = void 0;

var _lodash = require("lodash");

var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _i18n = require("@kbn/i18n");

var _react2 = require("@kbn/i18n/react");

var _eui = require("@elastic/eui");

var _chrome = _interopRequireDefault(require("ui/chrome"));

var _notify = require("ui/notify");

var _public = require("../../../../../../../src/plugins/kibana_utils/public");

var _search = require("../../../common/constants/search");

var _job_utils = require("../../../common/util/job_utils");

var _annotation_flyout = require("../components/annotations/annotation_flyout");

var _annotations_table = require("../components/annotations/annotations_table");

var _anomalies_table = require("../components/anomalies_table/anomalies_table");

var _chart_tooltip = require("../components/chart_tooltip");

var _entity_control = require("./components/entity_control");

var _forecasting_modal = require("./components/forecasting_modal/forecasting_modal");

var _loading_indicator = require("../components/loading_indicator/loading_indicator");

var _select_interval = require("../components/controls/select_interval/select_interval");

var _select_severity = require("../components/controls/select_severity/select_severity");

var _timeseries_chart = require("./components/timeseries_chart/timeseries_chart");

var _timeseriesexplorer_no_chart_data = require("./components/timeseriesexplorer_no_chart_data");

var _timeseriesexplorer_page = require("./timeseriesexplorer_page");

var _ml_api_service = require("../services/ml_api_service");

var _field_format_service = require("../services/field_format_service");

var _forecast_service = require("../services/forecast_service");

var _job_service = require("../services/job_service");

var _results_service = require("../services/results_service");

var _time_buckets = require("../util/time_buckets");

var _timeseriesexplorer_constants = require("./timeseriesexplorer_constants");

var _timeseries_search_service = require("./timeseries_search_service");

var _timeseriesexplorer_utils = require("./timeseriesexplorer_utils");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var mlAnnotationsEnabled = _chrome.default.getInjected('mlAnnotationsEnabled', false); // Used to indicate the chart is being plotted across
// all partition field values, where the cardinality of the field cannot be
// obtained as it is not aggregatable e.g. 'all distinct kpi_indicator values'


var allValuesLabel = _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.allPartitionValuesLabel', {
  defaultMessage: 'all'
});

function getEntityControlOptions(fieldValues) {
  if (!Array.isArray(fieldValues)) {
    return [];
  }

  fieldValues.sort();
  return fieldValues.map(function (value) {
    return {
      label: value
    };
  });
}

function getViewableDetectors(selectedJob) {
  var jobDetectors = selectedJob.analysis_config.detectors;
  var viewableDetectors = [];
  (0, _lodash.each)(jobDetectors, function (dtr, index) {
    if ((0, _job_utils.isTimeSeriesViewDetector)(selectedJob, index)) {
      viewableDetectors.push({
        index: index,
        detector_description: dtr.detector_description
      });
    }
  });
  return viewableDetectors;
}

function getTimeseriesexplorerDefaultState() {
  return {
    chartDetails: undefined,
    contextAggregationInterval: undefined,
    contextChartData: undefined,
    contextForecastData: undefined,
    // Not chartable if e.g. model plot with terms for a varp detector
    dataNotChartable: false,
    entitiesLoading: false,
    entityValues: {},
    focusAnnotationData: [],
    focusChartData: undefined,
    focusForecastData: undefined,
    fullRefresh: true,
    hasResults: false,
    // Counter to keep track of what data sets have been loaded.
    loadCounter: 0,
    loading: false,
    modelPlotEnabled: false,
    // Toggles display of annotations in the focus chart
    showAnnotations: mlAnnotationsEnabled,
    showAnnotationsCheckbox: mlAnnotationsEnabled,
    // Toggles display of forecast data in the focus chart
    showForecast: true,
    showForecastCheckbox: false,
    // Toggles display of model bounds in the focus chart
    showModelBounds: true,
    showModelBoundsCheckbox: false,
    svgWidth: 0,
    tableData: undefined,
    zoomFrom: undefined,
    zoomTo: undefined,
    zoomFromFocusLoaded: undefined,
    zoomToFocusLoaded: undefined
  };
}

var containerPadding = 24;

var TimeSeriesExplorer =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TimeSeriesExplorer, _React$Component);

  function TimeSeriesExplorer() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TimeSeriesExplorer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TimeSeriesExplorer)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", getTimeseriesexplorerDefaultState());

    _defineProperty(_assertThisInitialized(_this), "subscriptions", new _rxjs.Subscription());

    _defineProperty(_assertThisInitialized(_this), "resizeRef", (0, _react.createRef)());

    _defineProperty(_assertThisInitialized(_this), "resizeChecker", undefined);

    _defineProperty(_assertThisInitialized(_this), "resizeHandler", function () {
      _this.setState({
        svgWidth: _this.resizeRef.current !== null ? _this.resizeRef.current.offsetWidth - containerPadding : 0
      });
    });

    _defineProperty(_assertThisInitialized(_this), "contextChart$", new _rxjs.Subject());

    _defineProperty(_assertThisInitialized(_this), "getFieldNamesWithEmptyValues", function () {
      var latestEntityControls = _this.getControlsForDetector();

      return latestEntityControls.filter(function (_ref) {
        var fieldValue = _ref.fieldValue;
        return !fieldValue;
      }).map(function (_ref2) {
        var fieldName = _ref2.fieldName;
        return fieldName;
      });
    });

    _defineProperty(_assertThisInitialized(_this), "arePartitioningFieldsProvided", function () {
      var fieldNamesWithEmptyValues = _this.getFieldNamesWithEmptyValues();

      return fieldNamesWithEmptyValues.length === 0;
    });

    _defineProperty(_assertThisInitialized(_this), "detectorIndexChangeHandler", function (e) {
      var appStateHandler = _this.props.appStateHandler;
      var id = e.target.value;

      if (id !== undefined) {
        appStateHandler(_timeseriesexplorer_constants.APP_STATE_ACTION.SET_DETECTOR_INDEX, +id);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "toggleShowAnnotationsHandler", function () {
      if (mlAnnotationsEnabled) {
        _this.setState(function (prevState) {
          return {
            showAnnotations: !prevState.showAnnotations
          };
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "toggleShowForecastHandler", function () {
      _this.setState(function (prevState) {
        return {
          showForecast: !prevState.showForecast
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "toggleShowModelBoundsHandler", function () {
      _this.setState({
        showModelBounds: !_this.state.showModelBounds
      });
    });

    _defineProperty(_assertThisInitialized(_this), "previousChartProps", {});

    _defineProperty(_assertThisInitialized(_this), "previousShowAnnotations", undefined);

    _defineProperty(_assertThisInitialized(_this), "previousShowForecast", undefined);

    _defineProperty(_assertThisInitialized(_this), "previousShowModelBounds", undefined);

    _defineProperty(_assertThisInitialized(_this), "tableFilter", function (field, value, operator) {
      var entities = _this.getControlsForDetector();

      var entity = entities.find(function (_ref3) {
        var fieldName = _ref3.fieldName;
        return fieldName === field;
      });

      if (entity === undefined) {
        return;
      }

      var appStateHandler = _this.props.appStateHandler;
      var resultValue = '';

      if (operator === '+' && entity.fieldValue !== value) {
        resultValue = value;
      } else if (operator === '-' && entity.fieldValue === value) {
        resultValue = '';
      } else {
        return;
      }

      var resultEntities = _objectSpread({}, entities.reduce(function (appStateEntities, appStateEntity) {
        appStateEntities[appStateEntity.fieldName] = appStateEntity.fieldValue;
        return appStateEntities;
      }, {}), _defineProperty({}, entity.fieldName, resultValue));

      appStateHandler(_timeseriesexplorer_constants.APP_STATE_ACTION.SET_ENTITIES, resultEntities);
    });

    _defineProperty(_assertThisInitialized(_this), "contextChartSelectedInitCallDone", false);

    _defineProperty(_assertThisInitialized(_this), "contextChartSelected", function (selection) {
      var zoomState = {
        from: selection.from.toISOString(),
        to: selection.to.toISOString()
      };

      if ((0, _lodash.isEqual)(_this.props.zoom, zoomState) && _this.state.focusChartData !== undefined && _this.props.previousRefresh === _this.props.lastRefresh) {
        return;
      }

      _this.contextChart$.next(selection);

      _this.props.appStateHandler(_timeseriesexplorer_constants.APP_STATE_ACTION.SET_ZOOM, zoomState);
    });

    _defineProperty(_assertThisInitialized(_this), "entityFieldValueChanged", function (entity, fieldValue) {
      var appStateHandler = _this.props.appStateHandler;

      var entityControls = _this.getControlsForDetector();

      var resultEntities = _objectSpread({}, entityControls.reduce(function (appStateEntities, appStateEntity) {
        appStateEntities[appStateEntity.fieldName] = appStateEntity.fieldValue;
        return appStateEntities;
      }, {}), _defineProperty({}, entity.fieldName, fieldValue));

      appStateHandler(_timeseriesexplorer_constants.APP_STATE_ACTION.SET_ENTITIES, resultEntities);
    });

    _defineProperty(_assertThisInitialized(_this), "entityFieldSearchChanged", (0, _lodash.debounce)(function (entity, queryTerm) {
      var entityControls = _this.getControlsForDetector();

      _this.loadEntityValues(entityControls, _defineProperty({}, entity.fieldType, queryTerm));
    }, 500));

    _defineProperty(_assertThisInitialized(_this), "loadAnomaliesTableData", function (earliestMs, latestMs) {
      var _this$props = _this.props,
          dateFormatTz = _this$props.dateFormatTz,
          selectedDetectorIndex = _this$props.selectedDetectorIndex,
          selectedJobId = _this$props.selectedJobId,
          tableInterval = _this$props.tableInterval,
          tableSeverity = _this$props.tableSeverity;

      var selectedJob = _job_service.mlJobService.getJob(selectedJobId);

      var entityControls = _this.getControlsForDetector();

      return _ml_api_service.ml.results.getAnomaliesTableData([selectedJob.job_id], _this.getCriteriaFields(selectedDetectorIndex, entityControls), [], tableInterval, tableSeverity, earliestMs, latestMs, dateFormatTz, _search.ANOMALIES_TABLE_DEFAULT_QUERY_SIZE).pipe((0, _operators.map)(function (resp) {
        var anomalies = resp.anomalies;
        var detectorsByJob = _job_service.mlJobService.detectorsByJob;
        anomalies.forEach(function (anomaly) {
          // Add a detector property to each anomaly.
          // Default to functionDescription if no description available.
          // TODO - when job_service is moved server_side, move this to server endpoint.
          var jobId = anomaly.jobId;
          var detector = (0, _lodash.get)(detectorsByJob, [jobId, anomaly.detectorIndex]);
          anomaly.detector = (0, _lodash.get)(detector, ['detector_description'], anomaly.source.function_description); // For detectors with rules, add a property with the rule count.

          var customRules = detector.custom_rules;

          if (customRules !== undefined) {
            anomaly.rulesLength = customRules.length;
          } // Add properties used for building the links menu.
          // TODO - when job_service is moved server_side, move this to server endpoint.


          if ((0, _lodash.has)(_job_service.mlJobService.customUrlsByJob, jobId)) {
            anomaly.customUrls = _job_service.mlJobService.customUrlsByJob[jobId];
          }
        });
        return {
          tableData: {
            anomalies: anomalies,
            interval: resp.interval,
            examplesByJobId: resp.examplesByJobId,
            showViewSeriesLink: false
          }
        };
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "loadEntityValues", function _callee(entities) {
      var searchTerm,
          _this$props2,
          bounds,
          selectedJobId,
          selectedDetectorIndex,
          selectedJob,
          detectorIndex,
          _ref4,
          partitionField,
          overField,
          byField,
          entityValues,
          _args = arguments;

      return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              searchTerm = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};

              _this.setState({
                entitiesLoading: true
              });

              _this$props2 = _this.props, bounds = _this$props2.bounds, selectedJobId = _this$props2.selectedJobId, selectedDetectorIndex = _this$props2.selectedDetectorIndex;
              selectedJob = _job_service.mlJobService.getJob(selectedJobId); // Populate the entity input datalists with the values from the top records by score
              // for the selected detector across the full time range. No need to pass through finish().

              detectorIndex = selectedDetectorIndex;
              _context.next = 7;
              return regeneratorRuntime.awrap(_results_service.mlResultsService.fetchPartitionFieldsValues(selectedJob.job_id, searchTerm, [{
                fieldName: 'detector_index',
                fieldValue: detectorIndex
              }], bounds.min.valueOf(), bounds.max.valueOf()).toPromise());

            case 7:
              _ref4 = _context.sent;
              partitionField = _ref4.partition_field;
              overField = _ref4.over_field;
              byField = _ref4.by_field;
              entityValues = {};
              entities.forEach(function (entity) {
                var fieldValues;

                if ((partitionField === null || partitionField === void 0 ? void 0 : partitionField.name) === entity.fieldName) {
                  fieldValues = partitionField.values;
                }

                if ((overField === null || overField === void 0 ? void 0 : overField.name) === entity.fieldName) {
                  fieldValues = overField.values;
                }

                if ((byField === null || byField === void 0 ? void 0 : byField.name) === entity.fieldName) {
                  fieldValues = byField.values;
                }

                entityValues[entity.fieldName] = fieldValues;
              });

              _this.setState({
                entitiesLoading: false,
                entityValues: entityValues
              });

            case 14:
            case "end":
              return _context.stop();
          }
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "setForecastId", function (forecastId) {
      _this.props.appStateHandler(_timeseriesexplorer_constants.APP_STATE_ACTION.SET_FORECAST_ID, forecastId);
    });

    _defineProperty(_assertThisInitialized(_this), "loadSingleMetricData", function () {
      var fullRefresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var _this$props3 = _this.props,
          autoZoomDuration = _this$props3.autoZoomDuration,
          bounds = _this$props3.bounds,
          selectedDetectorIndex = _this$props3.selectedDetectorIndex,
          selectedForecastId = _this$props3.selectedForecastId,
          selectedJobId = _this$props3.selectedJobId,
          zoom = _this$props3.zoom;
      var currentLoadCounter = _this.state.loadCounter;

      var currentSelectedJob = _job_service.mlJobService.getJob(selectedJobId);

      if (currentSelectedJob === undefined) {
        return;
      }

      _this.contextChartSelectedInitCallDone = false; // Only when `fullRefresh` is true we'll reset all data
      // and show the loading spinner within the page.

      var entityControls = _this.getControlsForDetector();

      _this.setState(_objectSpread({
        fullRefresh: fullRefresh,
        loadCounter: currentLoadCounter + 1,
        loading: true
      }, fullRefresh ? {
        chartDetails: undefined,
        contextChartData: undefined,
        contextForecastData: undefined,
        focusChartData: undefined,
        focusForecastData: undefined,
        modelPlotEnabled: (0, _job_utils.isModelPlotEnabled)(currentSelectedJob, selectedDetectorIndex, entityControls),
        hasResults: false,
        dataNotChartable: false
      } : {}), function () {
        var _this$state = _this.state,
            loadCounter = _this$state.loadCounter,
            modelPlotEnabled = _this$state.modelPlotEnabled;
        var jobs = (0, _timeseriesexplorer_utils.createTimeSeriesJobData)(_job_service.mlJobService.jobs);

        var selectedJob = _job_service.mlJobService.getJob(selectedJobId);

        var detectorIndex = selectedDetectorIndex;
        var awaitingCount = 3;
        var stateUpdate = {}; // finish() function, called after each data set has been loaded and processed.
        // The last one to call it will trigger the page render.

        var finish = function finish(counterVar) {
          awaitingCount--;

          if (awaitingCount === 0 && counterVar === loadCounter) {
            stateUpdate.hasResults = Array.isArray(stateUpdate.contextChartData) && stateUpdate.contextChartData.length > 0 || Array.isArray(stateUpdate.contextForecastData) && stateUpdate.contextForecastData.length > 0;
            stateUpdate.loading = false; // Set zoomFrom/zoomTo attributes in scope which will result in the metric chart automatically
            // selecting the specified range in the context chart, and so loading that date range in the focus chart.
            // Only touch the zoom range if data for the context chart has been loaded and all necessary
            // partition fields have a selection.

            if (stateUpdate.contextChartData.length && _this.arePartitioningFieldsProvided() === true) {
              // Check for a zoom parameter in the appState (URL).
              var focusRange = (0, _timeseriesexplorer_utils.calculateInitialFocusRange)(zoom, stateUpdate.contextAggregationInterval, bounds);

              if (focusRange === undefined || _this.previousSelectedForecastId !== _this.props.selectedForecastId) {
                focusRange = (0, _timeseriesexplorer_utils.calculateDefaultFocusRange)(autoZoomDuration, stateUpdate.contextAggregationInterval, stateUpdate.contextChartData, stateUpdate.contextForecastData);
                _this.previousSelectedForecastId = _this.props.selectedForecastId;
              }

              _this.contextChartSelected({
                from: focusRange[0],
                to: focusRange[1]
              });
            }

            _this.setState(stateUpdate);
          }
        };

        var nonBlankEntities = entityControls.filter(function (entity) {
          return entity.fieldValue.length > 0;
        });

        if (modelPlotEnabled === false && (0, _job_utils.isSourceDataChartableForDetector)(selectedJob, detectorIndex) === false && nonBlankEntities.length > 0) {
          // For detectors where model plot has been enabled with a terms filter and the
          // selected entity(s) are not in the terms list, indicate that data cannot be viewed.
          stateUpdate.hasResults = false;
          stateUpdate.loading = false;
          stateUpdate.dataNotChartable = true;

          _this.setState(stateUpdate);

          return;
        } // Calculate the aggregation interval for the context chart.
        // Context chart swimlane will display bucket anomaly score at the same interval.


        stateUpdate.contextAggregationInterval = (0, _timeseriesexplorer_utils.calculateAggregationInterval)(bounds, _timeseriesexplorer_constants.CHARTS_POINT_TARGET, jobs, selectedJob); // Ensure the search bounds align to the bucketing interval so that the first and last buckets are complete.
        // For sum or count detectors, short buckets would hold smaller values, and model bounds would also be affected
        // to some extent with all detector functions if not searching complete buckets.

        var searchBounds = (0, _time_buckets.getBoundsRoundedToInterval)(bounds, stateUpdate.contextAggregationInterval, false); // Query 1 - load metric data at low granularity across full time range.
        // Pass a counter flag into the finish() function to make sure we only process the results
        // for the most recent call to the load the data in cases where the job selection and time filter
        // have been altered in quick succession (such as from the job picker with 'Apply time range').

        var counter = loadCounter;

        _timeseries_search_service.mlTimeSeriesSearchService.getMetricData(selectedJob, detectorIndex, nonBlankEntities, searchBounds.min.valueOf(), searchBounds.max.valueOf(), stateUpdate.contextAggregationInterval.expression).toPromise().then(function (resp) {
          var fullRangeChartData = (0, _timeseriesexplorer_utils.processMetricPlotResults)(resp.results, modelPlotEnabled);
          stateUpdate.contextChartData = fullRangeChartData;
          finish(counter);
        }).catch(function (resp) {
          console.log('Time series explorer - error getting metric data from elasticsearch:', resp);
        }); // Query 2 - load max record score at same granularity as context chart
        // across full time range for use in the swimlane.


        _results_service.mlResultsService.getRecordMaxScoreByTime(selectedJob.job_id, _this.getCriteriaFields(detectorIndex, entityControls), searchBounds.min.valueOf(), searchBounds.max.valueOf(), stateUpdate.contextAggregationInterval.expression).then(function (resp) {
          var fullRangeRecordScoreData = (0, _timeseriesexplorer_utils.processRecordScoreResults)(resp.results);
          stateUpdate.swimlaneData = fullRangeRecordScoreData;
          finish(counter);
        }).catch(function (resp) {
          console.log('Time series explorer - error getting bucket anomaly scores from elasticsearch:', resp);
        }); // Query 3 - load details on the chart used in the chart title (charting function and entity(s)).


        _timeseries_search_service.mlTimeSeriesSearchService.getChartDetails(selectedJob, detectorIndex, entityControls, searchBounds.min.valueOf(), searchBounds.max.valueOf()).then(function (resp) {
          stateUpdate.chartDetails = resp.results;
          finish(counter);
        }).catch(function (resp) {
          console.log('Time series explorer - error getting entity counts from elasticsearch:', resp);
        }); // Plus query for forecast data if there is a forecastId stored in the appState.


        if (selectedForecastId !== undefined) {
          awaitingCount++;
          var aggType = undefined;
          var detector = selectedJob.analysis_config.detectors[detectorIndex];
          var esAgg = (0, _job_utils.mlFunctionToESAggregation)(detector.function);

          if (modelPlotEnabled === false && (esAgg === 'sum' || esAgg === 'count')) {
            aggType = {
              avg: 'sum',
              max: 'sum',
              min: 'sum'
            };
          }

          _forecast_service.mlForecastService.getForecastData(selectedJob, detectorIndex, selectedForecastId, nonBlankEntities, searchBounds.min.valueOf(), searchBounds.max.valueOf(), stateUpdate.contextAggregationInterval.expression, aggType).toPromise().then(function (resp) {
            stateUpdate.contextForecastData = (0, _timeseriesexplorer_utils.processForecastResults)(resp.results);
            finish(counter);
          }).catch(function (resp) {
            console.log("Time series explorer - error loading data for forecast ID ".concat(selectedForecastId), resp);
          });
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getControlsForDetector", function () {
      var _this$props4 = _this.props,
          selectedDetectorIndex = _this$props4.selectedDetectorIndex,
          selectedEntities = _this$props4.selectedEntities,
          selectedJobId = _this$props4.selectedJobId;

      var selectedJob = _job_service.mlJobService.getJob(selectedJobId);

      var entities = [];

      if (selectedJob === undefined) {
        return entities;
      } // Update the entity dropdown control(s) according to the partitioning fields for the selected detector.


      var detectorIndex = selectedDetectorIndex;
      var detector = selectedJob.analysis_config.detectors[detectorIndex];
      var entitiesState = selectedEntities;
      var partitionFieldName = (0, _lodash.get)(detector, 'partition_field_name');
      var overFieldName = (0, _lodash.get)(detector, 'over_field_name');
      var byFieldName = (0, _lodash.get)(detector, 'by_field_name');

      if (partitionFieldName !== undefined) {
        var partitionFieldValue = (0, _lodash.get)(entitiesState, partitionFieldName, '');
        entities.push({
          fieldType: 'partition_field',
          fieldName: partitionFieldName,
          fieldValue: partitionFieldValue
        });
      }

      if (overFieldName !== undefined) {
        var overFieldValue = (0, _lodash.get)(entitiesState, overFieldName, '');
        entities.push({
          fieldType: 'over_field',
          fieldName: overFieldName,
          fieldValue: overFieldValue
        });
      } // For jobs with by and over fields, don't add the 'by' field as this
      // field will only be added to the top-level fields for record type results
      // if it also an influencer over the bucket.
      // TODO - metric data can be filtered by this field, so should only exclude
      // from filter for the anomaly records.


      if (byFieldName !== undefined && overFieldName === undefined) {
        var byFieldValue = (0, _lodash.get)(entitiesState, byFieldName, '');
        entities.push({
          fieldType: 'by_field',
          fieldName: byFieldName,
          fieldValue: byFieldValue
        });
      }

      return entities;
    });

    return _this;
  }

  _createClass(TimeSeriesExplorer, [{
    key: "getFocusAggregationInterval",
    value: function getFocusAggregationInterval(selection) {
      var selectedJobId = this.props.selectedJobId;
      var jobs = (0, _timeseriesexplorer_utils.createTimeSeriesJobData)(_job_service.mlJobService.jobs);

      var selectedJob = _job_service.mlJobService.getJob(selectedJobId); // Calculate the aggregation interval for the focus chart.


      var bounds = {
        min: (0, _momentTimezone.default)(selection.from),
        max: (0, _momentTimezone.default)(selection.to)
      };
      return (0, _timeseriesexplorer_utils.calculateAggregationInterval)(bounds, _timeseriesexplorer_constants.CHARTS_POINT_TARGET, jobs, selectedJob);
    }
    /**
     * Gets focus data for the current component state/
     */

  }, {
    key: "getFocusData",
    value: function getFocusData(selection) {
      var _this$props5 = this.props,
          selectedJobId = _this$props5.selectedJobId,
          selectedForecastId = _this$props5.selectedForecastId,
          selectedDetectorIndex = _this$props5.selectedDetectorIndex;
      var modelPlotEnabled = this.state.modelPlotEnabled;

      var selectedJob = _job_service.mlJobService.getJob(selectedJobId);

      var entityControls = this.getControlsForDetector(); // Calculate the aggregation interval for the focus chart.

      var bounds = {
        min: (0, _momentTimezone.default)(selection.from),
        max: (0, _momentTimezone.default)(selection.to)
      };
      var focusAggregationInterval = this.getFocusAggregationInterval(selection); // Ensure the search bounds align to the bucketing interval so that the first and last buckets are complete.
      // For sum or count detectors, short buckets would hold smaller values, and model bounds would also be affected
      // to some extent with all detector functions if not searching complete buckets.

      var searchBounds = (0, _time_buckets.getBoundsRoundedToInterval)(bounds, focusAggregationInterval, false);
      return (0, _timeseriesexplorer_utils.getFocusData)(this.getCriteriaFields(selectedDetectorIndex, entityControls), selectedDetectorIndex, focusAggregationInterval, selectedForecastId, modelPlotEnabled, entityControls.filter(function (entity) {
        return entity.fieldValue.length > 0;
      }), searchBounds, selectedJob, _timeseriesexplorer_constants.TIME_FIELD_NAME);
    }
  }, {
    key: "getCriteriaFields",

    /**
     * Updates criteria fields for API calls, e.g. getAnomaliesTableData
     * @param detectorIndex
     * @param entities
     */
    value: function getCriteriaFields(detectorIndex, entities) {
      // Only filter on the entity if the field has a value.
      var nonBlankEntities = entities.filter(function (entity) {
        return entity.fieldValue.length > 0;
      });
      return [{
        fieldName: 'detector_index',
        fieldValue: detectorIndex
      }].concat(_toConsumableArray(nonBlankEntities));
    }
  }, {
    key: "loadForJobId",
    value: function loadForJobId(jobId) {
      var _this$props6 = this.props,
          appStateHandler = _this$props6.appStateHandler,
          selectedDetectorIndex = _this$props6.selectedDetectorIndex;

      var selectedJob = _job_service.mlJobService.getJob(jobId);

      if (selectedJob === undefined) {
        return;
      }

      var detectors = getViewableDetectors(selectedJob); // Check the supplied index is valid.

      var appStateDtrIdx = selectedDetectorIndex;
      var detectorIndex = appStateDtrIdx !== undefined ? appStateDtrIdx : detectors[0].index;

      if ((0, _lodash.find)(detectors, {
        index: detectorIndex
      }) === undefined) {
        var warningText = _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.requestedDetectorIndexNotValidWarningMessage', {
          defaultMessage: 'Requested detector index {detectorIndex} is not valid for job {jobId}',
          values: {
            detectorIndex: detectorIndex,
            jobId: selectedJob.job_id
          }
        });

        _notify.toastNotifications.addWarning(warningText);

        detectorIndex = detectors[0].index;
      }

      var detectorId = detectorIndex;

      if (detectorId !== selectedDetectorIndex) {
        appStateHandler(_timeseriesexplorer_constants.APP_STATE_ACTION.SET_DETECTOR_INDEX, detectorId);
      } // Populate the map of jobs / detectors / field formatters for the selected IDs and refresh.


      _field_format_service.mlFieldFormatService.populateFormats([jobId]).catch(function (err) {
        console.log('Error populating field formats:', err);
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      // Required to redraw the time series chart when the container is resized.
      this.resizeChecker = new _public.ResizeChecker(this.resizeRef.current);
      this.resizeChecker.on('resize', function () {
        _this2.resizeHandler();
      });
      this.resizeHandler(); // Listen for context chart updates.

      this.subscriptions.add(this.contextChart$.pipe((0, _operators.tap)(function (selection) {
        _this2.setState({
          zoomFrom: selection.from,
          zoomTo: selection.to
        });
      }), (0, _operators.debounceTime)(500), (0, _operators.tap)(function (selection) {
        var _this2$state = _this2.state,
            contextChartData = _this2$state.contextChartData,
            contextForecastData = _this2$state.contextForecastData,
            focusChartData = _this2$state.focusChartData,
            zoomFromFocusLoaded = _this2$state.zoomFromFocusLoaded,
            zoomToFocusLoaded = _this2$state.zoomToFocusLoaded;

        if ((contextChartData === undefined || contextChartData.length === 0) && (contextForecastData === undefined || contextForecastData.length === 0)) {
          return;
        }

        if (_this2.contextChartSelectedInitCallDone === false && focusChartData === undefined || zoomFromFocusLoaded.getTime() !== selection.from.getTime() || zoomToFocusLoaded.getTime() !== selection.to.getTime()) {
          _this2.contextChartSelectedInitCallDone = true;

          _this2.setState({
            loading: true,
            fullRefresh: false
          });
        }
      }), (0, _operators.switchMap)(function (selection) {
        var selectedJobId = _this2.props.selectedJobId;
        var jobs = (0, _timeseriesexplorer_utils.createTimeSeriesJobData)(_job_service.mlJobService.jobs);

        var selectedJob = _job_service.mlJobService.getJob(selectedJobId); // Calculate the aggregation interval for the focus chart.


        var bounds = {
          min: (0, _momentTimezone.default)(selection.from),
          max: (0, _momentTimezone.default)(selection.to)
        };
        var focusAggregationInterval = (0, _timeseriesexplorer_utils.calculateAggregationInterval)(bounds, _timeseriesexplorer_constants.CHARTS_POINT_TARGET, jobs, selectedJob); // Ensure the search bounds align to the bucketing interval so that the first and last buckets are complete.
        // For sum or count detectors, short buckets would hold smaller values, and model bounds would also be affected
        // to some extent with all detector functions if not searching complete buckets.

        var searchBounds = (0, _time_buckets.getBoundsRoundedToInterval)(bounds, focusAggregationInterval, false);
        return (0, _rxjs.forkJoin)([_this2.getFocusData(selection), // Load the data for the anomalies table.
        _this2.loadAnomaliesTableData(searchBounds.min.valueOf(), searchBounds.max.valueOf())]);
      }), (0, _operators.withLatestFrom)(this.contextChart$)).subscribe(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            _ref6$ = _slicedToArray(_ref6[0], 2),
            refreshFocusData = _ref6$[0],
            tableData = _ref6$[1],
            selection = _ref6[1];

        var modelPlotEnabled = _this2.state.modelPlotEnabled; // All the data is ready now for a state update.

        _this2.setState(_objectSpread({
          focusAggregationInterval: _this2.getFocusAggregationInterval({
            from: selection.from,
            to: selection.to
          }),
          loading: false,
          showModelBoundsCheckbox: modelPlotEnabled && refreshFocusData.focusChartData.length > 0,
          zoomFromFocusLoaded: selection.from,
          zoomToFocusLoaded: selection.to
        }, refreshFocusData, {}, tableData));
      }));
      this.componentDidUpdate();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(previousProps) {
      var _this3 = this;

      if (previousProps === undefined || previousProps.selectedJobId !== this.props.selectedJobId) {
        this.contextChartSelectedInitCallDone = false;
        this.setState({
          fullRefresh: false,
          loading: true
        }, function () {
          _this3.loadForJobId(_this3.props.selectedJobId);
        });
      }

      if (previousProps === undefined || previousProps.selectedJobId !== this.props.selectedJobId || previousProps.selectedDetectorIndex !== this.props.selectedDetectorIndex || !(0, _lodash.isEqual)(previousProps.selectedEntities, this.props.selectedEntities)) {
        var entityControls = this.getControlsForDetector();
        this.loadEntityValues(entityControls);
      }

      if (previousProps === undefined || previousProps.selectedForecastId !== this.props.selectedForecastId) {
        if (this.props.selectedForecastId !== undefined) {
          // Ensure the forecast data will be shown if hidden previously.
          this.setState({
            showForecast: true
          }); // Not best practice but we need the previous value for another comparison
          // once all the data was loaded.

          if (previousProps !== undefined) {
            this.previousSelectedForecastId = previousProps.selectedForecastId;
          }
        }
      }

      if (previousProps === undefined || !(0, _lodash.isEqual)(previousProps.bounds, this.props.bounds) || !(0, _lodash.isEqual)(previousProps.lastRefresh, this.props.lastRefresh) || !(0, _lodash.isEqual)(previousProps.selectedDetectorIndex, this.props.selectedDetectorIndex) || !(0, _lodash.isEqual)(previousProps.selectedEntities, this.props.selectedEntities) || previousProps.selectedForecastId !== this.props.selectedForecastId || previousProps.selectedJobId !== this.props.selectedJobId) {
        var fullRefresh = previousProps === undefined || !(0, _lodash.isEqual)(previousProps.bounds, this.props.bounds) || !(0, _lodash.isEqual)(previousProps.selectedDetectorIndex, this.props.selectedDetectorIndex) || !(0, _lodash.isEqual)(previousProps.selectedEntities, this.props.selectedEntities) || previousProps.selectedForecastId !== this.props.selectedForecastId || previousProps.selectedJobId !== this.props.selectedJobId;
        this.loadSingleMetricData(fullRefresh);
      }

      if (previousProps === undefined) {
        return;
      } // Reload the anomalies table if the Interval or Threshold controls are changed.


      var tableControlsListener = function tableControlsListener() {
        var _this3$state = _this3.state,
            zoomFrom = _this3$state.zoomFrom,
            zoomTo = _this3$state.zoomTo;

        if (zoomFrom !== undefined && zoomTo !== undefined) {
          _this3.loadAnomaliesTableData(zoomFrom.getTime(), zoomTo.getTime()).subscribe(function (res) {
            return _this3.setState(res);
          });
        }
      };

      if (previousProps.tableInterval !== this.props.tableInterval || previousProps.tableSeverity !== this.props.tableSeverity) {
        tableControlsListener();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.subscriptions.unsubscribe();
      this.resizeChecker.destroy();
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var _this$props7 = this.props,
          autoZoomDuration = _this$props7.autoZoomDuration,
          bounds = _this$props7.bounds,
          dateFormatTz = _this$props7.dateFormatTz,
          lastRefresh = _this$props7.lastRefresh,
          selectedDetectorIndex = _this$props7.selectedDetectorIndex,
          selectedJobId = _this$props7.selectedJobId;
      var _this$state2 = this.state,
          chartDetails = _this$state2.chartDetails,
          contextAggregationInterval = _this$state2.contextAggregationInterval,
          contextChartData = _this$state2.contextChartData,
          contextForecastData = _this$state2.contextForecastData,
          dataNotChartable = _this$state2.dataNotChartable,
          entityValues = _this$state2.entityValues,
          focusAggregationInterval = _this$state2.focusAggregationInterval,
          focusAnnotationData = _this$state2.focusAnnotationData,
          focusChartData = _this$state2.focusChartData,
          focusForecastData = _this$state2.focusForecastData,
          fullRefresh = _this$state2.fullRefresh,
          hasResults = _this$state2.hasResults,
          loading = _this$state2.loading,
          modelPlotEnabled = _this$state2.modelPlotEnabled,
          showAnnotations = _this$state2.showAnnotations,
          showAnnotationsCheckbox = _this$state2.showAnnotationsCheckbox,
          showForecast = _this$state2.showForecast,
          showForecastCheckbox = _this$state2.showForecastCheckbox,
          showModelBounds = _this$state2.showModelBounds,
          showModelBoundsCheckbox = _this$state2.showModelBoundsCheckbox,
          svgWidth = _this$state2.svgWidth,
          swimlaneData = _this$state2.swimlaneData,
          tableData = _this$state2.tableData,
          zoomFrom = _this$state2.zoomFrom,
          zoomTo = _this$state2.zoomTo,
          zoomFromFocusLoaded = _this$state2.zoomFromFocusLoaded,
          zoomToFocusLoaded = _this$state2.zoomToFocusLoaded;
      var chartProps = {
        modelPlotEnabled: modelPlotEnabled,
        contextChartData: contextChartData,
        contextChartSelected: this.contextChartSelected,
        contextForecastData: contextForecastData,
        contextAggregationInterval: contextAggregationInterval,
        swimlaneData: swimlaneData,
        focusAnnotationData: focusAnnotationData,
        focusChartData: focusChartData,
        focusForecastData: focusForecastData,
        focusAggregationInterval: focusAggregationInterval,
        svgWidth: svgWidth,
        zoomFrom: zoomFrom,
        zoomTo: zoomTo,
        zoomFromFocusLoaded: zoomFromFocusLoaded,
        zoomToFocusLoaded: zoomToFocusLoaded,
        autoZoomDuration: autoZoomDuration
      };
      var jobs = (0, _timeseriesexplorer_utils.createTimeSeriesJobData)(_job_service.mlJobService.jobs);

      if (selectedDetectorIndex === undefined || _job_service.mlJobService.getJob(selectedJobId) === undefined) {
        return _react.default.createElement(_timeseriesexplorer_page.TimeSeriesExplorerPage, {
          dateFormatTz: dateFormatTz,
          resizeRef: this.resizeRef
        });
      }

      var selectedJob = _job_service.mlJobService.getJob(selectedJobId);

      var entityControls = this.getControlsForDetector();
      var fieldNamesWithEmptyValues = this.getFieldNamesWithEmptyValues();
      var arePartitioningFieldsProvided = this.arePartitioningFieldsProvided();
      var detectorSelectOptions = getViewableDetectors(selectedJob).map(function (d) {
        return {
          value: d.index,
          text: d.detector_description
        };
      });
      var renderFocusChartOnly = true;

      if ((0, _lodash.isEqual)(this.previousChartProps.focusForecastData, chartProps.focusForecastData) && (0, _lodash.isEqual)(this.previousChartProps.focusChartData, chartProps.focusChartData) && (0, _lodash.isEqual)(this.previousChartProps.focusAnnotationData, chartProps.focusAnnotationData) && this.previousShowAnnotations === showAnnotations && this.previousShowForecast === showForecast && this.previousShowModelBounds === showModelBounds && this.props.previousRefresh === lastRefresh) {
        renderFocusChartOnly = false;
      }

      this.previousChartProps = chartProps;
      this.previousShowAnnotations = showAnnotations;
      this.previousShowForecast = showForecast;
      this.previousShowModelBounds = showModelBounds;
      /**
       * Indicates if any of the previous controls is empty.
       * @type {boolean}
       */

      var hasEmptyFieldValues = false;
      return _react.default.createElement(_timeseriesexplorer_page.TimeSeriesExplorerPage, {
        dateFormatTz: dateFormatTz,
        loading: loading,
        resizeRef: this.resizeRef
      }, fieldNamesWithEmptyValues.length > 0 && _react.default.createElement(_eui.EuiCallOut, {
        className: "single-metric-request-callout",
        title: _react.default.createElement(_react2.FormattedMessage, {
          id: "xpack.ml.timeSeriesExplorer.singleMetricRequiredMessage",
          defaultMessage: "To view a single metric you must select {missingValuesCount, plural, one {a value for {fieldName1}} other {values for {fieldName1} and {fieldName2}}}",
          values: {
            missingValuesCount: fieldNamesWithEmptyValues.length,
            fieldName1: fieldNamesWithEmptyValues[0],
            fieldName2: fieldNamesWithEmptyValues[1]
          }
        }),
        color: "warning",
        iconType: "help",
        size: "s"
      }), _react.default.createElement("div", {
        className: "series-controls",
        "data-test-subj": "mlSingleMetricViewerSeriesControls"
      }, _react.default.createElement(_eui.EuiFlexGroup, null, _react.default.createElement(_eui.EuiFlexItem, {
        grow: false
      }, _react.default.createElement(_eui.EuiFormRow, {
        label: _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.detectorLabel', {
          defaultMessage: 'Detector'
        })
      }, _react.default.createElement(_eui.EuiSelect, {
        onChange: this.detectorIndexChangeHandler,
        value: selectedDetectorIndex,
        options: detectorSelectOptions,
        "data-test-subj": "mlSingleMetricViewerDetectorSelect"
      }))), entityControls.map(function (entity) {
        var entityKey = "".concat(entity.fieldName);
        var forceSelection = !hasEmptyFieldValues && !entity.fieldValue;
        hasEmptyFieldValues = !hasEmptyFieldValues && forceSelection;
        return _react.default.createElement(_entity_control.EntityControl, {
          entity: entity,
          entityFieldValueChanged: _this4.entityFieldValueChanged,
          isLoading: _this4.state.entitiesLoading,
          onSearchChange: _this4.entityFieldSearchChanged,
          forceSelection: forceSelection,
          key: entityKey,
          options: getEntityControlOptions(entityValues[entity.fieldName])
        });
      }), arePartitioningFieldsProvided && _react.default.createElement(_eui.EuiFlexItem, {
        style: {
          textAlign: 'right'
        }
      }, _react.default.createElement(_eui.EuiFormRow, {
        hasEmptyLabelSpace: true,
        style: {
          maxWidth: '100%'
        }
      }, _react.default.createElement(_forecasting_modal.ForecastingModal, {
        job: selectedJob,
        detectorIndex: selectedDetectorIndex,
        entities: entityControls,
        setForecastId: this.setForecastId,
        className: "forecast-controls"
      }))))), fullRefresh && loading === true && _react.default.createElement(_loading_indicator.LoadingIndicator, {
        label: _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.loadingLabel', {
          defaultMessage: 'Loading'
        })
      }), arePartitioningFieldsProvided && jobs.length > 0 && (fullRefresh === false || loading === false) && hasResults === false && _react.default.createElement(_timeseriesexplorer_no_chart_data.TimeseriesexplorerNoChartData, {
        dataNotChartable: dataNotChartable,
        entities: entityControls
      }), arePartitioningFieldsProvided && jobs.length > 0 && (fullRefresh === false || loading === false) && hasResults === true && _react.default.createElement("div", null, _react.default.createElement(_chart_tooltip.ChartTooltip, null), _react.default.createElement(_eui.EuiText, {
        className: "results-container"
      }, _react.default.createElement("span", {
        className: "panel-title"
      }, _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.singleTimeSeriesAnalysisTitle', {
        defaultMessage: 'Single time series analysis of {functionLabel}',
        values: {
          functionLabel: chartDetails.functionLabel
        }
      })), "\xA0", chartDetails.entityData.count === 1 && _react.default.createElement("span", {
        className: "entity-count-text"
      }, chartDetails.entityData.entities.length > 0 && '(', chartDetails.entityData.entities.map(function (entity) {
        return "".concat(entity.fieldName, ": ").concat(entity.fieldValue);
      }).join(', '), chartDetails.entityData.entities.length > 0 && ')'), chartDetails.entityData.count !== 1 && _react.default.createElement("span", {
        className: "entity-count-text"
      }, chartDetails.entityData.entities.map(function (countData, i) {
        return _react.default.createElement(_react.Fragment, {
          key: countData.fieldName
        }, _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.countDataInChartDetailsDescription', {
          defaultMessage: '{openBrace}{cardinalityValue} distinct {fieldName} {cardinality, plural, one {} other { values}}{closeBrace}',
          values: {
            openBrace: i === 0 ? '(' : '',
            closeBrace: i === chartDetails.entityData.entities.length - 1 ? ')' : '',
            cardinalityValue: countData.cardinality === 0 ? allValuesLabel : countData.cardinality,
            cardinality: countData.cardinality,
            fieldName: countData.fieldName
          }
        }), i !== chartDetails.entityData.entities.length - 1 ? ', ' : '');
      })), _react.default.createElement(_eui.EuiFlexGroup, {
        style: {
          float: 'right'
        }
      }, showModelBoundsCheckbox && _react.default.createElement(_eui.EuiFlexItem, {
        grow: false
      }, _react.default.createElement(_eui.EuiCheckbox, {
        id: "toggleModelBoundsCheckbox",
        label: _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.showModelBoundsLabel', {
          defaultMessage: 'show model bounds'
        }),
        checked: showModelBounds,
        onChange: this.toggleShowModelBoundsHandler
      })), showAnnotationsCheckbox && _react.default.createElement(_eui.EuiFlexItem, {
        grow: false
      }, _react.default.createElement(_eui.EuiCheckbox, {
        id: "toggleAnnotationsCheckbox",
        label: _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.annotationsLabel', {
          defaultMessage: 'annotations'
        }),
        checked: showAnnotations,
        onChange: this.toggleShowAnnotationsHandler
      })), showForecastCheckbox && _react.default.createElement(_eui.EuiFlexItem, {
        grow: false
      }, _react.default.createElement(_eui.EuiCheckbox, {
        id: "toggleShowForecastCheckbox",
        label: _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.showForecastLabel', {
          defaultMessage: 'show forecast'
        }),
        checked: showForecast,
        onChange: this.toggleShowForecastHandler
      }))), _react.default.createElement("div", {
        className: "ml-timeseries-chart",
        "data-test-subj": "mlSingleMetricViewerChart"
      }, _react.default.createElement(_timeseries_chart.TimeseriesChart, _extends({}, chartProps, {
        bounds: bounds,
        detectorIndex: selectedDetectorIndex,
        renderFocusChartOnly: renderFocusChartOnly,
        selectedJob: selectedJob,
        showAnnotations: showAnnotations,
        showForecast: showForecast,
        showModelBounds: showModelBounds
      }))), showAnnotations && focusAnnotationData.length > 0 && _react.default.createElement("div", null, _react.default.createElement("span", {
        className: "panel-title"
      }, _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.annotationsTitle', {
        defaultMessage: 'Annotations'
      })), _react.default.createElement(_annotations_table.AnnotationsTable, {
        annotations: focusAnnotationData,
        isSingleMetricViewerLinkVisible: false,
        isNumberBadgeVisible: true
      }), _react.default.createElement(_eui.EuiSpacer, {
        size: "l"
      })), _react.default.createElement(_annotation_flyout.AnnotationFlyout, null), _react.default.createElement("span", {
        className: "panel-title"
      }, _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.anomaliesTitle', {
        defaultMessage: 'Anomalies'
      })), _react.default.createElement(_eui.EuiFlexGroup, {
        direction: "row",
        gutterSize: "l",
        responsive: true,
        className: "ml-anomalies-controls"
      }, _react.default.createElement(_eui.EuiFlexItem, {
        grow: false,
        style: {
          width: '170px'
        }
      }, _react.default.createElement(_eui.EuiFormRow, {
        label: _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.severityThresholdLabel', {
          defaultMessage: 'Severity threshold'
        })
      }, _react.default.createElement(_select_severity.SelectSeverity, null))), _react.default.createElement(_eui.EuiFlexItem, {
        grow: false,
        style: {
          width: '170px'
        }
      }, _react.default.createElement(_eui.EuiFormRow, {
        label: _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.intervalLabel', {
          defaultMessage: 'Interval'
        })
      }, _react.default.createElement(_select_interval.SelectInterval, null)))), _react.default.createElement(_eui.EuiSpacer, {
        size: "m"
      }))), arePartitioningFieldsProvided && jobs.length > 0 && hasResults === true && _react.default.createElement(_anomalies_table.AnomaliesTable, {
        bounds: bounds,
        tableData: tableData,
        filter: this.tableFilter
      }));
    }
  }]);

  return TimeSeriesExplorer;
}(_react.default.Component);

exports.TimeSeriesExplorer = TimeSeriesExplorer;

_defineProperty(TimeSeriesExplorer, "propTypes", {
  appStateHandler: _propTypes.default.func.isRequired,
  autoZoomDuration: _propTypes.default.number.isRequired,
  bounds: _propTypes.default.object.isRequired,
  dateFormatTz: _propTypes.default.string.isRequired,
  lastRefresh: _propTypes.default.number.isRequired,
  previousRefresh: _propTypes.default.number.isRequired,
  selectedJobId: _propTypes.default.string.isRequired,
  selectedDetectorIndex: _propTypes.default.number,
  selectedEntities: _propTypes.default.object,
  selectedForecastId: _propTypes.default.string,
  tableInterval: _propTypes.default.string,
  tableSeverity: _propTypes.default.number,
  zoom: _propTypes.default.object
});"},null]}