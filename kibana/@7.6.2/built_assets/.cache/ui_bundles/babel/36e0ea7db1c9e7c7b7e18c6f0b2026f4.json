{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/transform/public/plugin.js","dependencies":[{"path":"x-pack/legacy/plugins/transform/public/plugin.js","mtime":1585205048491},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlBsdWdpbiA9IHZvaWQgMDsKCnZhciBfcmVhY3REb20gPSByZXF1aXJlKCJyZWFjdC1kb20iKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX2NvbnN0YW50czIgPSByZXF1aXJlKCIuL2FwcC9jb25zdGFudHMiKTsKCnZhciBfYXBwID0gcmVxdWlyZSgiLi9hcHAvYXBwIik7Cgp2YXIgX25hdmlnYXRpb24gPSByZXF1aXJlKCIuL2FwcC9zZXJ2aWNlcy9uYXZpZ2F0aW9uIik7Cgp2YXIgX2RvY3VtZW50YXRpb24gPSByZXF1aXJlKCIuL2FwcC9zZXJ2aWNlcy9kb2N1bWVudGF0aW9uIik7Cgp2YXIgX2h0dHAgPSByZXF1aXJlKCIuL2FwcC9zZXJ2aWNlcy9odHRwIik7Cgp2YXIgX3RleHQgPSByZXF1aXJlKCIuL2FwcC9zZXJ2aWNlcy90ZXh0Iik7Cgp2YXIgX3VpX21ldHJpYyA9IHJlcXVpcmUoIi4vYXBwL3NlcnZpY2VzL3VpX21ldHJpYyIpOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKdmFyIFJFQUNUX1JPT1RfSUQgPSAndHJhbnNmb3JtUmVhY3RSb290JzsKdmFyIEtCTl9NQU5BR0VNRU5UX1NFQ1RJT04gPSAnZWxhc3RpY3NlYXJjaC90cmFuc2Zvcm0nOwp2YXIgdGVtcGxhdGUgPSAiPGtibi1tYW5hZ2VtZW50LWFwcCBzZWN0aW9uPVwiIi5jb25jYXQoS0JOX01BTkFHRU1FTlRfU0VDVElPTiwgIlwiPjxkaXYgaWQ9XCIiKS5jb25jYXQoUkVBQ1RfUk9PVF9JRCwgIlwiLz48L2tibi1tYW5hZ2VtZW50LWFwcD4iKTsKCnZhciBQbHVnaW4gPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQbHVnaW4oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGx1Z2luKTsKICB9CgogIF9jcmVhdGVDbGFzcyhQbHVnaW4sIFt7CiAgICBrZXk6ICJzdGFydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoY29yZSwgcGx1Z2lucykgewogICAgICB2YXIgaHR0cCA9IGNvcmUuaHR0cCwKICAgICAgICAgIHJvdXRpbmcgPSBjb3JlLnJvdXRpbmcsCiAgICAgICAgICBsZWdhY3lIdHRwID0gY29yZS5sZWdhY3lIdHRwLAogICAgICAgICAgY2hyb21lID0gY29yZS5jaHJvbWUsCiAgICAgICAgICBkb2N1bWVudGF0aW9uID0gY29yZS5kb2N1bWVudGF0aW9uLAogICAgICAgICAgZG9jVGl0bGUgPSBjb3JlLmRvY1RpdGxlLAogICAgICAgICAgdWlTZXR0aW5ncyA9IGNvcmUudWlTZXR0aW5ncywKICAgICAgICAgIHNhdmVkT2JqZWN0cyA9IGNvcmUuc2F2ZWRPYmplY3RzOwogICAgICB2YXIgbWFuYWdlbWVudCA9IHBsdWdpbnMubWFuYWdlbWVudCwKICAgICAgICAgIGNvcmVTYXZlZFNlYXJjaGVzID0gcGx1Z2lucy5zYXZlZFNlYXJjaGVzLAogICAgICAgICAgdWlNZXRyaWMgPSBwbHVnaW5zLnVpTWV0cmljOyAvLyBBcHBDb3JlL0FwcFBsdWdpbnMgdG8gYmUgcGFzc2VkIG9uIGFzIFJlYWN0IGNvbnRleHQKCiAgICAgIHZhciBBcHBEZXBlbmRlbmNpZXMgPSB7CiAgICAgICAgY29yZTogewogICAgICAgICAgY2hyb21lOiBjaHJvbWUsCiAgICAgICAgICBodHRwOiBodHRwLAogICAgICAgICAgaTE4bjogY29yZS5pMThuLAogICAgICAgICAgdWlTZXR0aW5nczogdWlTZXR0aW5ncywKICAgICAgICAgIHNhdmVkT2JqZWN0czogc2F2ZWRPYmplY3RzCiAgICAgICAgfSwKICAgICAgICBwbHVnaW5zOiB7CiAgICAgICAgICBtYW5hZ2VtZW50OiB7CiAgICAgICAgICAgIHNlY3Rpb25zOiBtYW5hZ2VtZW50LnNlY3Rpb25zCiAgICAgICAgICB9LAogICAgICAgICAgc2F2ZWRTZWFyY2hlczogY29yZVNhdmVkU2VhcmNoZXMKICAgICAgICB9CiAgICAgIH07IC8vIFJlZ2lzdGVyIG1hbmFnZW1lbnQgc2VjdGlvbgoKICAgICAgdmFyIGVzU2VjdGlvbiA9IG1hbmFnZW1lbnQuc2VjdGlvbnMuZ2V0U2VjdGlvbignZWxhc3RpY3NlYXJjaCcpOwogICAgICBlc1NlY3Rpb24ucmVnaXN0ZXIoX2NvbnN0YW50cy5QTFVHSU4uSUQsIHsKICAgICAgICB2aXNpYmxlOiB0cnVlLAogICAgICAgIGRpc3BsYXk6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay50cmFuc2Zvcm0uYXBwTmFtZScsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVHJhbnNmb3JtcycKICAgICAgICB9KSwKICAgICAgICBvcmRlcjogMywKICAgICAgICB1cmw6ICIjIi5jb25jYXQoX2NvbnN0YW50czIuQ0xJRU5UX0JBU0VfUEFUSCkKICAgICAgfSk7IC8vIEluaXRpYWxpemUgc2VydmljZXMKCiAgICAgIF90ZXh0LnRleHRTZXJ2aWNlLmluaXQoKTsKCiAgICAgIF9uYXZpZ2F0aW9uLmJyZWFkY3J1bWJTZXJ2aWNlLmluaXQoY2hyb21lLCBtYW5hZ2VtZW50LmNvbnN0YW50cy5CUkVBRENSVU1CKTsKCiAgICAgIF91aV9tZXRyaWMudWlNZXRyaWNTZXJ2aWNlLmluaXQodWlNZXRyaWMuY3JlYXRlVWlTdGF0c1JlcG9ydGVyKTsKCiAgICAgIF9kb2N1bWVudGF0aW9uLmRvY3VtZW50YXRpb25MaW5rc1NlcnZpY2UuaW5pdChkb2N1bWVudGF0aW9uLmVzRG9jQmFzZVBhdGgpOwoKICAgICAgX25hdmlnYXRpb24uZG9jVGl0bGVTZXJ2aWNlLmluaXQoZG9jVGl0bGUuY2hhbmdlKTsKCiAgICAgIHZhciB1bm1vdW50UmVhY3RBcHAgPSBmdW5jdGlvbiB1bm1vdW50UmVhY3RBcHAoKSB7CiAgICAgICAgdmFyIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChSRUFDVF9ST09UX0lEKTsKCiAgICAgICAgaWYgKGVsZW0pIHsKICAgICAgICAgICgwLCBfcmVhY3REb20udW5tb3VudENvbXBvbmVudEF0Tm9kZSkoZWxlbSk7CiAgICAgICAgfQogICAgICB9OyAvLyBSZWdpc3RlciByZWFjdCByb290CgoKICAgICAgcm91dGluZy5yZWdpc3RlckFuZ3VsYXJSb3V0ZSgiIi5jb25jYXQoX2NvbnN0YW50czIuQ0xJRU5UX0JBU0VfUEFUSCwgIi86c2VjdGlvbj8vOnN1YnNlY3Rpb24/Lzp2aWV3Py86aWQ/IiksIHsKICAgICAgICB0ZW1wbGF0ZTogdGVtcGxhdGUsCiAgICAgICAgY29udHJvbGxlckFzOiAndHJhbnNmb3JtQ29udHJvbGxlcicsCiAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24gY29udHJvbGxlcigkc2NvcGUsICRyb3V0ZSwgJGh0dHAsIHNhdmVkU2VhcmNoZXMpIHsKICAgICAgICAgIC8vIE5PVEU6IFdlIGRlcGVuZCB1cG9uIEFuZ3VsYXIncyAkaHR0cCBzZXJ2aWNlIGJlY2F1c2UgaXQncyBkZWNvcmF0ZWQgd2l0aCBpbnRlcmNlcHRvcnMsCiAgICAgICAgICAvLyBlLmcuIHRvIGNoZWNrIGxpY2Vuc2Ugc3RhdHVzIHBlciByZXF1ZXN0LgogICAgICAgICAgbGVnYWN5SHR0cC5zZXRDbGllbnQoJGh0dHApOwoKICAgICAgICAgIF9odHRwLmh0dHBTZXJ2aWNlLmluaXQobGVnYWN5SHR0cC5nZXRDbGllbnQoKSk7CgogICAgICAgICAgY29yZVNhdmVkU2VhcmNoZXMuc2V0Q2xpZW50KHNhdmVkU2VhcmNoZXMpOyAvLyBBbmd1bGFyIExpZmVjeWNsZQoKICAgICAgICAgIHZhciBhcHBSb3V0ZSA9ICRyb3V0ZS5jdXJyZW50OwogICAgICAgICAgdmFyIHN0b3BMaXN0ZW5pbmdGb3JMb2NhdGlvbkNoYW5nZSA9ICRzY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBjdXJyZW50Um91dGUgPSAkcm91dGUuY3VycmVudDsKICAgICAgICAgICAgdmFyIGlzTmF2aWdhdGlvbkluQXBwID0gY3VycmVudFJvdXRlLiQkcm91dGUudGVtcGxhdGUgPT09IGFwcFJvdXRlLiQkcm91dGUudGVtcGxhdGU7IC8vIFdoZW4gd2UgbmF2aWdhdGUgd2l0aGluIFRyYW5zZm9ybSwgcHJldmVudCBBbmd1bGFyIGZyb20gcmUtbWF0Y2hpbmcgdGhlIHJvdXRlIGFuZCByZWJ1aWxkIHRoZSBhcHAKCiAgICAgICAgICAgIGlmIChpc05hdmlnYXRpb25JbkFwcCkgewogICAgICAgICAgICAgICRyb3V0ZS5jdXJyZW50ID0gYXBwUm91dGU7CiAgICAgICAgICAgIH0gZWxzZSB7Ly8gQW55IGNsZWFuIHVwIHdoZW4gdXNlciBsZWF2ZXMgVHJhbnNmb3JtCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGlmIChzdG9wTGlzdGVuaW5nRm9yTG9jYXRpb25DaGFuZ2UpIHsKICAgICAgICAgICAgICAgIHN0b3BMaXN0ZW5pbmdGb3JMb2NhdGlvbkNoYW5nZSgpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdW5tb3VudFJlYWN0QXBwKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgICAkc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdW5tb3VudFJlYWN0QXBwKCk7CiAgICAgICAgICAgIHZhciBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoUkVBQ1RfUk9PVF9JRCk7CgogICAgICAgICAgICBpZiAoZWxlbSkgewogICAgICAgICAgICAgICgwLCBfYXBwLnJlbmRlclJlYWN0KShlbGVtLCBBcHBEZXBlbmRlbmNpZXMpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFBsdWdpbjsKfSgpOwoKZXhwb3J0cy5QbHVnaW4gPSBQbHVnaW47"},null]}