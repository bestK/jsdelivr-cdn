{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/lens/public/indexpattern_plugin/operations/definitions/date_histogram.js","dependencies":[{"path":"x-pack/legacy/plugins/lens/public/indexpattern_plugin/operations/definitions/date_histogram.js","mtime":1585205045033},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmRhdGVIaXN0b2dyYW1PcGVyYXRpb24gPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCJ1aS9hZ2dfdHlwZXMvdXRpbHMiKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX3N0YXRlX2hlbHBlcnMgPSByZXF1aXJlKCIuLi8uLi9zdGF0ZV9oZWxwZXJzIik7Cgp2YXIgX2F1dG9fZGF0ZSA9IHJlcXVpcmUoIi4uLy4uL2F1dG9fZGF0ZSIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBhdXRvSW50ZXJ2YWwgPSAnYXV0byc7CnZhciBjYWxlbmRhck9ubHlJbnRlcnZhbHMgPSBuZXcgU2V0KFsndycsICdNJywgJ3EnLCAneSddKTsKdmFyIGRhdGVIaXN0b2dyYW1PcGVyYXRpb24gPSB7CiAgdHlwZTogJ2RhdGVfaGlzdG9ncmFtJywKICBkaXNwbGF5TmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLmRhdGVIaXN0b2dyYW0nLCB7CiAgICBkZWZhdWx0TWVzc2FnZTogJ0RhdGUgaGlzdG9ncmFtJwogIH0pLAogIGdldFBvc3NpYmxlT3BlcmF0aW9uRm9yRmllbGQ6IGZ1bmN0aW9uIGdldFBvc3NpYmxlT3BlcmF0aW9uRm9yRmllbGQoX3JlZikgewogICAgdmFyIGFnZ3JlZ2F0aW9uUmVzdHJpY3Rpb25zID0gX3JlZi5hZ2dyZWdhdGlvblJlc3RyaWN0aW9ucywKICAgICAgICBhZ2dyZWdhdGFibGUgPSBfcmVmLmFnZ3JlZ2F0YWJsZSwKICAgICAgICB0eXBlID0gX3JlZi50eXBlOwoKICAgIGlmICh0eXBlID09PSAnZGF0ZScgJiYgYWdncmVnYXRhYmxlICYmICghYWdncmVnYXRpb25SZXN0cmljdGlvbnMgfHwgYWdncmVnYXRpb25SZXN0cmljdGlvbnMuZGF0ZV9oaXN0b2dyYW0pKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgZGF0YVR5cGU6ICdkYXRlJywKICAgICAgICBpc0J1Y2tldGVkOiB0cnVlLAogICAgICAgIHNjYWxlOiAnaW50ZXJ2YWwnCiAgICAgIH07CiAgICB9CiAgfSwKICBidWlsZENvbHVtbjogZnVuY3Rpb24gYnVpbGRDb2x1bW4oX3JlZjIpIHsKICAgIHZhciBzdWdnZXN0ZWRQcmlvcml0eSA9IF9yZWYyLnN1Z2dlc3RlZFByaW9yaXR5LAogICAgICAgIGZpZWxkID0gX3JlZjIuZmllbGQ7CiAgICB2YXIgaW50ZXJ2YWwgPSBhdXRvSW50ZXJ2YWw7CiAgICB2YXIgdGltZVpvbmU7CgogICAgaWYgKGZpZWxkLmFnZ3JlZ2F0aW9uUmVzdHJpY3Rpb25zICYmIGZpZWxkLmFnZ3JlZ2F0aW9uUmVzdHJpY3Rpb25zLmRhdGVfaGlzdG9ncmFtKSB7CiAgICAgIGludGVydmFsID0gcmVzdHJpY3RlZEludGVydmFsKGZpZWxkLmFnZ3JlZ2F0aW9uUmVzdHJpY3Rpb25zKTsKICAgICAgdGltZVpvbmUgPSBmaWVsZC5hZ2dyZWdhdGlvblJlc3RyaWN0aW9ucy5kYXRlX2hpc3RvZ3JhbS50aW1lX3pvbmU7CiAgICB9CgogICAgcmV0dXJuIHsKICAgICAgbGFiZWw6IGZpZWxkLm5hbWUsCiAgICAgIGRhdGFUeXBlOiAnZGF0ZScsCiAgICAgIG9wZXJhdGlvblR5cGU6ICdkYXRlX2hpc3RvZ3JhbScsCiAgICAgIHN1Z2dlc3RlZFByaW9yaXR5OiBzdWdnZXN0ZWRQcmlvcml0eSwKICAgICAgc291cmNlRmllbGQ6IGZpZWxkLm5hbWUsCiAgICAgIGlzQnVja2V0ZWQ6IHRydWUsCiAgICAgIHNjYWxlOiAnaW50ZXJ2YWwnLAogICAgICBwYXJhbXM6IHsKICAgICAgICBpbnRlcnZhbDogaW50ZXJ2YWwsCiAgICAgICAgdGltZVpvbmU6IHRpbWVab25lCiAgICAgIH0KICAgIH07CiAgfSwKICBpc1RyYW5zZmVyYWJsZTogZnVuY3Rpb24gaXNUcmFuc2ZlcmFibGUoY29sdW1uLCBuZXdJbmRleFBhdHRlcm4pIHsKICAgIHZhciBuZXdGaWVsZCA9IG5ld0luZGV4UGF0dGVybi5maWVsZHMuZmluZChmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgcmV0dXJuIGZpZWxkLm5hbWUgPT09IGNvbHVtbi5zb3VyY2VGaWVsZDsKICAgIH0pOwogICAgcmV0dXJuIEJvb2xlYW4obmV3RmllbGQgJiYgbmV3RmllbGQudHlwZSA9PT0gJ2RhdGUnICYmIG5ld0ZpZWxkLmFnZ3JlZ2F0YWJsZSAmJiAoIW5ld0ZpZWxkLmFnZ3JlZ2F0aW9uUmVzdHJpY3Rpb25zIHx8IG5ld0ZpZWxkLmFnZ3JlZ2F0aW9uUmVzdHJpY3Rpb25zLmRhdGVfaGlzdG9ncmFtKSk7CiAgfSwKICB0cmFuc2ZlcjogZnVuY3Rpb24gdHJhbnNmZXIoY29sdW1uLCBuZXdJbmRleFBhdHRlcm4pIHsKICAgIHZhciBuZXdGaWVsZCA9IG5ld0luZGV4UGF0dGVybi5maWVsZHMuZmluZChmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgcmV0dXJuIGZpZWxkLm5hbWUgPT09IGNvbHVtbi5zb3VyY2VGaWVsZDsKICAgIH0pOwoKICAgIGlmIChuZXdGaWVsZCAmJiBuZXdGaWVsZC5hZ2dyZWdhdGlvblJlc3RyaWN0aW9ucyAmJiBuZXdGaWVsZC5hZ2dyZWdhdGlvblJlc3RyaWN0aW9ucy5kYXRlX2hpc3RvZ3JhbSkgewogICAgICB2YXIgcmVzdHJpY3Rpb25zID0gbmV3RmllbGQuYWdncmVnYXRpb25SZXN0cmljdGlvbnMuZGF0ZV9oaXN0b2dyYW07CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBjb2x1bW4sIHsKICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGNvbHVtbi5wYXJhbXMsIHsKICAgICAgICAgIHRpbWVab25lOiByZXN0cmljdGlvbnMudGltZV96b25lLAogICAgICAgICAgLy8gVE9ETyB0aGlzIHJld3JpdGUgbG9naWMgaXMgc2ltcGxpZmllZCAtIGlmIHRoZSBjdXJyZW50IGludGVydmFsIGlzIGEgbXVsdGlwbGUgb2YKICAgICAgICAgIC8vIHRoZSByZXN0cmljdGVkIGludGVydmFsLCB3ZSBjb3VsZCBjYXJyeSBpdCBvdmVyIGRpcmVjdGx5LiBIb3dldmVyIGFzIHRoZSBjdXJyZW50CiAgICAgICAgICAvLyBVSSBkb2VzIG5vdCBhbGxvdyB0byBzZWxlY3QgbXVsdGlwbGVzIG9mIGFuIGludGVydmFsIGFueXdheSwgdGhpcyBpcyBub3QgaW5jbHVkZWQgeWV0LgogICAgICAgICAgLy8gSWYgdGhlIFVJIGFsbG93cyB0byBwaWNrIG1vcmUgY29tcGxpY2F0ZWQgaW50ZXJ2YWxzLCB0aGlzIHNob3VsZCBiZSByZS12aXNpdGVkLgogICAgICAgICAgaW50ZXJ2YWw6IHJlc3RyaWN0ZWRJbnRlcnZhbChuZXdGaWVsZC5hZ2dyZWdhdGlvblJlc3RyaWN0aW9ucykKICAgICAgICB9KQogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gY29sdW1uOwogIH0sCiAgb25GaWVsZENoYW5nZTogZnVuY3Rpb24gb25GaWVsZENoYW5nZShvbGRDb2x1bW4sIGluZGV4UGF0dGVybiwgZmllbGQpIHsKICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBvbGRDb2x1bW4sIHsKICAgICAgbGFiZWw6IGZpZWxkLm5hbWUsCiAgICAgIHNvdXJjZUZpZWxkOiBmaWVsZC5uYW1lCiAgICB9KTsKICB9LAogIHRvRXNBZ2dzQ29uZmlnOiBmdW5jdGlvbiB0b0VzQWdnc0NvbmZpZyhjb2x1bW4sIGNvbHVtbklkKSB7CiAgICByZXR1cm4gewogICAgICBpZDogY29sdW1uSWQsCiAgICAgIGVuYWJsZWQ6IHRydWUsCiAgICAgIHR5cGU6ICdkYXRlX2hpc3RvZ3JhbScsCiAgICAgIHNjaGVtYTogJ3NlZ21lbnQnLAogICAgICBwYXJhbXM6IHsKICAgICAgICBmaWVsZDogY29sdW1uLnNvdXJjZUZpZWxkLAogICAgICAgIHRpbWVfem9uZTogY29sdW1uLnBhcmFtcy50aW1lWm9uZSwKICAgICAgICB1c2VOb3JtYWxpemVkRXNJbnRlcnZhbDogdHJ1ZSwKICAgICAgICBpbnRlcnZhbDogY29sdW1uLnBhcmFtcy5pbnRlcnZhbCwKICAgICAgICBkcm9wX3BhcnRpYWxzOiBmYWxzZSwKICAgICAgICBtaW5fZG9jX2NvdW50OiAwLAogICAgICAgIGV4dGVuZGVkX2JvdW5kczoge30KICAgICAgfQogICAgfTsKICB9LAogIHBhcmFtRWRpdG9yOiBmdW5jdGlvbiBwYXJhbUVkaXRvcihfcmVmMykgewogICAgdmFyIHN0YXRlID0gX3JlZjMuc3RhdGUsCiAgICAgICAgc2V0U3RhdGUgPSBfcmVmMy5zZXRTdGF0ZSwKICAgICAgICBjdXJyZW50Q29sdW1uID0gX3JlZjMuY3VycmVudENvbHVtbiwKICAgICAgICBsYXllcklkID0gX3JlZjMubGF5ZXJJZCwKICAgICAgICBkYXRlUmFuZ2UgPSBfcmVmMy5kYXRlUmFuZ2U7CiAgICB2YXIgZmllbGQgPSBjdXJyZW50Q29sdW1uICYmIHN0YXRlLmluZGV4UGF0dGVybnNbc3RhdGUubGF5ZXJzW2xheWVySWRdLmluZGV4UGF0dGVybklkXS5maWVsZHMuZmluZChmdW5jdGlvbiAoY3VycmVudEZpZWxkKSB7CiAgICAgIHJldHVybiBjdXJyZW50RmllbGQubmFtZSA9PT0gY3VycmVudENvbHVtbi5zb3VyY2VGaWVsZDsKICAgIH0pOwogICAgdmFyIGludGVydmFsSXNSZXN0cmljdGVkID0gZmllbGQuYWdncmVnYXRpb25SZXN0cmljdGlvbnMgJiYgZmllbGQuYWdncmVnYXRpb25SZXN0cmljdGlvbnMuZGF0ZV9oaXN0b2dyYW07CiAgICB2YXIgaW50ZXJ2YWwgPSBwYXJzZUludGVydmFsKGN1cnJlbnRDb2x1bW4ucGFyYW1zLmludGVydmFsKTsgLy8gV2UgZm9yY2UgdGhlIGludGVydmFsIHZhbHVlIHRvIDEgaWYgaXQncyBlbXB0eSwgc2luY2UgdGhhdCBpcyB0aGUgRVMgYmVoYXZpb3IsCiAgICAvLyBhbmQgdGhlIGlzVmFsaWRJbnRlcnZhbCBmdW5jdGlvbiBkb2Vzbid0IGhhbmRsZSB0aGUgZW1wdHkgY2FzZSBwcm9wZXJseS4gRml4aW5nCiAgICAvLyBpc1ZhbGlkSW50ZXJ2YWwgaW52b2x2ZXMgYnJlYWtpbmcgY2hhbmdlcyBpbiBvdGhlciBhcmVhcy4KCiAgICB2YXIgaXNWYWxpZCA9ICgwLCBfdXRpbHMuaXNWYWxpZEludGVydmFsKSgiIi5jb25jYXQoaW50ZXJ2YWwudmFsdWUgPT09ICcnID8gJzEnIDogaW50ZXJ2YWwudmFsdWUpLmNvbmNhdChpbnRlcnZhbC51bml0KSwgcmVzdHJpY3RlZEludGVydmFsKGZpZWxkLmFnZ3JlZ2F0aW9uUmVzdHJpY3Rpb25zKSk7CgogICAgZnVuY3Rpb24gb25DaGFuZ2VBdXRvSW50ZXJ2YWwoZXYpIHsKICAgICAgdmFyIHZhbHVlID0gZXYudGFyZ2V0LmNoZWNrZWQgPyAoMCwgX2F1dG9fZGF0ZS5hdXRvSW50ZXJ2YWxGcm9tRGF0ZVJhbmdlKShkYXRlUmFuZ2UpIDogYXV0b0ludGVydmFsOwogICAgICBzZXRTdGF0ZSgoMCwgX3N0YXRlX2hlbHBlcnMudXBkYXRlQ29sdW1uUGFyYW0pKHsKICAgICAgICBzdGF0ZTogc3RhdGUsCiAgICAgICAgbGF5ZXJJZDogbGF5ZXJJZCwKICAgICAgICBjdXJyZW50Q29sdW1uOiBjdXJyZW50Q29sdW1uLAogICAgICAgIHBhcmFtTmFtZTogJ2ludGVydmFsJywKICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgfSkpOwogICAgfQoKICAgIHZhciBzZXRJbnRlcnZhbCA9IGZ1bmN0aW9uIHNldEludGVydmFsKG5ld0ludGVydmFsKSB7CiAgICAgIHZhciBpc0NhbGVuZGFySW50ZXJ2YWwgPSBjYWxlbmRhck9ubHlJbnRlcnZhbHMuaGFzKG5ld0ludGVydmFsLnVuaXQpOwogICAgICB2YXIgdmFsdWUgPSAiIi5jb25jYXQoaXNDYWxlbmRhckludGVydmFsID8gJzEnIDogbmV3SW50ZXJ2YWwudmFsdWUpLmNvbmNhdChuZXdJbnRlcnZhbC51bml0IHx8ICdkJyk7CiAgICAgIHNldFN0YXRlKCgwLCBfc3RhdGVfaGVscGVycy51cGRhdGVDb2x1bW5QYXJhbSkoewogICAgICAgIHN0YXRlOiBzdGF0ZSwKICAgICAgICBsYXllcklkOiBsYXllcklkLAogICAgICAgIGN1cnJlbnRDb2x1bW46IGN1cnJlbnRDb2x1bW4sCiAgICAgICAgdmFsdWU6IHZhbHVlLAogICAgICAgIHBhcmFtTmFtZTogJ2ludGVydmFsJwogICAgICB9KSk7CiAgICB9OwoKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybSwgbnVsbCwgIWludGVydmFsSXNSZXN0cmljdGVkICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3dpdGNoLCB7CiAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subGVucy5pbmRleFBhdHRlcm4uZGF0ZUhpc3RvZ3JhbS5hdXRvSW50ZXJ2YWwnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDdXN0b21pemUgdGltZSBpbnRlcnZhbCcKICAgICAgfSksCiAgICAgIGNoZWNrZWQ6IGN1cnJlbnRDb2x1bW4ucGFyYW1zLmludGVydmFsICE9PSBhdXRvSW50ZXJ2YWwsCiAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZUF1dG9JbnRlcnZhbAogICAgfSkpLCBjdXJyZW50Q29sdW1uLnBhcmFtcy5pbnRlcnZhbCAhPT0gYXV0b0ludGVydmFsICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subGVucy5pbmRleFBhdHRlcm4uZGF0ZUhpc3RvZ3JhbS5taW5pbXVtSW50ZXJ2YWwnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdNaW5pbXVtIGludGVydmFsJwogICAgICB9KQogICAgfSwgaW50ZXJ2YWxJc1Jlc3RyaWN0ZWQgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLmRhdGVIaXN0b2dyYW0ucmVzdHJpY3RlZEludGVydmFsIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJJbnRlcnZhbCBmaXhlZCB0byB7aW50ZXJ2YWxWYWx1ZX0gZHVlIHRvIGFnZ3JlZ2F0aW9uIHJlc3RyaWN0aW9ucy4iLAogICAgICB2YWx1ZXM6IHsKICAgICAgICBpbnRlcnZhbFZhbHVlOiBjdXJyZW50Q29sdW1uLnBhcmFtcy5pbnRlcnZhbAogICAgICB9CiAgICB9KSA6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZpZWxkTnVtYmVyLCB7CiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJsZW5zRGF0ZUhpc3RvZ3JhbVZhbHVlIiwKICAgICAgdmFsdWU6IHR5cGVvZiBpbnRlcnZhbC52YWx1ZSA9PT0gJ251bWJlcicgfHwgaW50ZXJ2YWwudmFsdWUgPT09ICcnID8gaW50ZXJ2YWwudmFsdWUgOiBwYXJzZUludChpbnRlcnZhbC52YWx1ZSwgMTApLAogICAgICBkaXNhYmxlZDogY2FsZW5kYXJPbmx5SW50ZXJ2YWxzLmhhcyhpbnRlcnZhbC51bml0KSwKICAgICAgaXNJbnZhbGlkOiAhaXNWYWxpZCwKICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgICBzZXRJbnRlcnZhbChfb2JqZWN0U3ByZWFkKHt9LCBpbnRlcnZhbCwgewogICAgICAgICAgdmFsdWU6IGUudGFyZ2V0LnZhbHVlCiAgICAgICAgfSkpOwogICAgICB9CiAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNlbGVjdCwgewogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAibGVuc0RhdGVIaXN0b2dyYW1Vbml0IiwKICAgICAgdmFsdWU6IGludGVydmFsLnVuaXQsCiAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7CiAgICAgICAgc2V0SW50ZXJ2YWwoX29iamVjdFNwcmVhZCh7fSwgaW50ZXJ2YWwsIHsKICAgICAgICAgIHVuaXQ6IGUudGFyZ2V0LnZhbHVlCiAgICAgICAgfSkpOwogICAgICB9LAogICAgICBpc0ludmFsaWQ6ICFpc1ZhbGlkLAogICAgICBvcHRpb25zOiBbewogICAgICAgIHZhbHVlOiAnbXMnLAogICAgICAgIHRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5kYXRlSGlzdG9ncmFtLm1pbGxpc2Vjb25kcycsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnbWlsbGlzZWNvbmRzJwogICAgICAgIH0pCiAgICAgIH0sIHsKICAgICAgICB2YWx1ZTogJ3MnLAogICAgICAgIHRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5kYXRlSGlzdG9ncmFtLnNlY29uZHMnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ3NlY29uZHMnCiAgICAgICAgfSkKICAgICAgfSwgewogICAgICAgIHZhbHVlOiAnbScsCiAgICAgICAgdGV4dDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLmRhdGVIaXN0b2dyYW0ubWludXRlcycsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnbWludXRlcycKICAgICAgICB9KQogICAgICB9LCB7CiAgICAgICAgdmFsdWU6ICdoJywKICAgICAgICB0ZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subGVucy5pbmRleFBhdHRlcm4uZGF0ZUhpc3RvZ3JhbS5ob3VycycsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnaG91cnMnCiAgICAgICAgfSkKICAgICAgfSwgewogICAgICAgIHZhbHVlOiAnZCcsCiAgICAgICAgdGV4dDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLmRhdGVIaXN0b2dyYW0uZGF5cycsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnZGF5cycKICAgICAgICB9KQogICAgICB9LCB7CiAgICAgICAgdmFsdWU6ICd3JywKICAgICAgICB0ZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subGVucy5pbmRleFBhdHRlcm4uZGF0ZUhpc3RvZ3JhbS53ZWVrJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICd3ZWVrJwogICAgICAgIH0pCiAgICAgIH0sIHsKICAgICAgICB2YWx1ZTogJ00nLAogICAgICAgIHRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5kYXRlSGlzdG9ncmFtLm1vbnRoJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdtb250aCcKICAgICAgICB9KQogICAgICB9LCAvLyBRdWFydGVybHkgaW50ZXJ2YWxzIGFwcGVhciB0byBiZSB1bnN1cHBvcnRlZCBieSBlc2FnZ3MKICAgICAgewogICAgICAgIHZhbHVlOiAneScsCiAgICAgICAgdGV4dDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLmRhdGVIaXN0b2dyYW0ueWVhcicsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAneWVhcicKICAgICAgICB9KQogICAgICB9XQogICAgfSkpKSwgIWlzVmFsaWQgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICBzaXplOiAicyIKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dENvbG9yLCB7CiAgICAgIGNvbG9yOiAiZGFuZ2VyIiwKICAgICAgImRhdGEtdGVzdC1zdWJqIjogImxlbnNEYXRlSGlzdG9ncmFtRXJyb3IiCiAgICB9LCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subGVucy5pbmRleFBhdHRlcm4uaW52YWxpZEludGVydmFsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0ludmFsaWQgaW50ZXJ2YWwgdmFsdWUnCiAgICB9KSkpKSkpOwogIH0KfTsKZXhwb3J0cy5kYXRlSGlzdG9ncmFtT3BlcmF0aW9uID0gZGF0ZUhpc3RvZ3JhbU9wZXJhdGlvbjsKCmZ1bmN0aW9uIHBhcnNlSW50ZXJ2YWwoY3VycmVudEludGVydmFsKSB7CiAgdmFyIGludGVydmFsID0gY3VycmVudEludGVydmFsIHx8ICcnOwogIHZhciB2YWx1ZU1hdGNoID0gaW50ZXJ2YWwubWF0Y2goL1tcZF0rLykgfHwgW107CiAgdmFyIHVuaXRNYXRjaCA9IGludGVydmFsLm1hdGNoKC9bXERdKy8pIHx8IFtdOwogIHZhciByZXN1bHQgPSBwYXJzZUludCh2YWx1ZU1hdGNoWzBdIHx8ICcnLCAxMCk7CiAgcmV0dXJuIHsKICAgIHZhbHVlOiBpc05hTihyZXN1bHQpID8gJycgOiByZXN1bHQsCiAgICB1bml0OiB1bml0TWF0Y2hbMF0gfHwgJ2gnCiAgfTsKfQoKZnVuY3Rpb24gcmVzdHJpY3RlZEludGVydmFsKGFnZ3JlZ2F0aW9uUmVzdHJpY3Rpb25zKSB7CiAgaWYgKCFhZ2dyZWdhdGlvblJlc3RyaWN0aW9ucyB8fCAhYWdncmVnYXRpb25SZXN0cmljdGlvbnMuZGF0ZV9oaXN0b2dyYW0pIHsKICAgIHJldHVybjsKICB9CgogIHJldHVybiBhZ2dyZWdhdGlvblJlc3RyaWN0aW9ucy5kYXRlX2hpc3RvZ3JhbS5jYWxlbmRhcl9pbnRlcnZhbCB8fCBhZ2dyZWdhdGlvblJlc3RyaWN0aW9ucy5kYXRlX2hpc3RvZ3JhbS5maXhlZF9pbnRlcnZhbDsKfQ=="},null]}