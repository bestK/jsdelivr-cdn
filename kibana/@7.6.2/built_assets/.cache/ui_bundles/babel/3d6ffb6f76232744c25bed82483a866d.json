{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/embeddable/public/lib/embeddables/embeddable_factory.js","dependencies":[{"path":"src/plugins/embeddable/public/lib/embeddables/embeddable_factory.js","mtime":1585205041650},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkVtYmVkZGFibGVGYWN0b3J5ID0gdm9pZCAwOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KLyoKICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yCiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoCiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0CiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIKICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkKICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsCiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiAqICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWQogKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUKICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwogKiB1bmRlciB0aGUgTGljZW5zZS4KICovCgovKioKICogVGhlIEVtYmVkZGFibGVGYWN0b3J5IGNyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGVtYmVkZGFibGUgaW5zdGFuY2UKICovCgoKdmFyIEVtYmVkZGFibGVGYWN0b3J5ID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgLy8gQSB1bmlxdWUgaWRlbnRpZmllZCBmb3IgdGhpcyBmYWN0b3J5LCB3aGljaCB3aWxsIGJlIHVzZWQgdG8gbWFwIGFuIGVtYmVkZGFibGUgc3BlYyB0bwogIC8vIGEgZmFjdG9yeSB0aGF0IGNhbiBnZW5lcmF0ZSBhbiBpbnN0YW5jZSBvZiBpdC4KCiAgLyoqCiAgICogVHJ1ZSBpZiBpcyB0aGlzIGZhY3RvcnkgY3JlYXRlIGVtYmVkZGFibGVzIHRoYXQgYXJlIENvbnRhaW5lcnMuIFVzZWQgaW4gdGhlIGFkZCBwYW5lbCB0bwogICAqIGNvbmRpdGlvbmFsbHkgc2hvdyB3aGV0aGVyIHRoZXNlIGNhbiBiZSBhZGRlZCB0byBhbm90aGVyIGNvbnRhaW5lci4gSXQncyBqdXN0IG5vdAogICAqIHN1cHBvcnRlZCByaWdodCBub3csIGJ1dCBvbmNlIG5lc3RlZCBjb250YWluZXJzIGFyZSBvZmZpY2lhbGx5IHN1cHBvcnRlZCB3ZSBjYW4gcHJvYmFibHkgZ2V0CiAgICogcmlkIG9mIHRoaXMgaW50ZXJmYWNlLgogICAqLwogIGZ1bmN0aW9uIEVtYmVkZGFibGVGYWN0b3J5KCkgewogICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LAogICAgICAgIHNhdmVkT2JqZWN0TWV0YURhdGEgPSBfcmVmLnNhdmVkT2JqZWN0TWV0YURhdGE7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVtYmVkZGFibGVGYWN0b3J5KTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInR5cGUiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAic2F2ZWRPYmplY3RNZXRhRGF0YSIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJpc0NvbnRhaW5lclR5cGUiLCBmYWxzZSk7CgogICAgdGhpcy5zYXZlZE9iamVjdE1ldGFEYXRhID0gc2F2ZWRPYmplY3RNZXRhRGF0YTsKICB9IC8vIFRPRE86IENhbiB0aGlzIGJlIGEgcHJvcGVydHk/IElmIHRoaXMgIi4uLnNob3VsZCBiZSBiYXNlZCBvZiBjYXBhYmlsaXRpZXMgc2VydmljZS4uLiIsCiAgLy8gVE9ETzogbWF5YmUgdGhlbiBpdCBzaG91bGQgYmUgKmFzeW5jKj8KCiAgLyoqCiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHVzZXIgc2hvdWxkIGJlIGFsbG93ZWQgdG8gZWRpdCB0aGlzIHR5cGUgb2YKICAgKiBlbWJlZGRhYmxlLiBNb3N0IG9mIHRoZSB0aW1lIHRoaXMgc2hvdWxkIGJlIGJhc2VkIG9mZiB0aGUgY2FwYWJpbGl0aWVzIHNlcnZpY2UuCiAgICovCgoKICBfY3JlYXRlQ2xhc3MoRW1iZWRkYWJsZUZhY3RvcnksIFt7CiAgICBrZXk6ICJjYW5DcmVhdGVOZXciLAoKICAgIC8qKgogICAgICogSWYgZmFsc2UsIHRoaXMgdHlwZSBvZiBlbWJlZGRhYmxlIGNhbid0IGJlIGNyZWF0ZWQgd2l0aCB0aGUgImNyZWF0ZU5ldyIgZnVuY3Rpb25hbGl0eS4gSW5zdGVhZCwKICAgICAqIHVzZSBjcmVhdGVGcm9tU2F2ZWRPYmplY3QsIHdoZXJlIGFuIGV4aXN0aW5nIHNhdmVkIG9iamVjdCBtdXN0IGZpcnN0IGV4aXN0LgogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuQ3JlYXRlTmV3KCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIC8qKgogICAgICogQ2FuIGJlIHVzZWQgdG8gZ2V0IGFueSBkZWZhdWx0IGlucHV0LCB0byBiZSBwYXNzZWQgaW4gdG8gZHVyaW5nIHRoZSBjcmVhdGlvbiBwcm9jZXNzLiBEZWZhdWx0CiAgICAgKiBpbnB1dCB3aWxsIG5vdCBiZSBzdG9yZWQgaW4gYSBwYXJlbnQgY29udGFpbmVyLCBzbyBhbnkgaW5oZXJpdGVkIGlucHV0IGZyb20gYSBjb250YWluZXIgd2lsbCB0cnVtcAogICAgICogZGVmYXVsdCBpbnB1dCBwYXJhbWV0ZXJzLgogICAgICogQHBhcmFtIHBhcnRpYWwKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXREZWZhdWx0SW5wdXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlZmF1bHRJbnB1dChwYXJ0aWFsKSB7CiAgICAgIHJldHVybiB7fTsKICAgIH0KICAgIC8qKgogICAgICogQ2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBleHBsaWNpdCBpbnB1dCBmcm9tIHRoZSB1c2VyLCB0byBiZSBwYXNzZWQgaW4gdG8gYEVtYmVkZGFibGVGYWN0b3J5OmNyZWF0ZWAuCiAgICAgKiBFeHBsaWNpdCBpbnB1dCBpcyBzdG9yZWQgb24gdGhlIHBhcmVudCBjb250YWluZXIgZm9yIHRoaXMgZW1iZWRkYWJsZS4gSXQgb3ZlcnJpZGVzIGFueSBpbmhlcml0ZWQKICAgICAqIGlucHV0IHBhc3NlZCBkb3duIGZyb20gdGhlIHBhcmVudCBjb250YWluZXIuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0RXhwbGljaXRJbnB1dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RXhwbGljaXRJbnB1dCgpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBnZXRFeHBsaWNpdElucHV0JChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB7fSk7CgogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgbmV3IGVtYmVkZGFibGUgaW5zdGFuY2UgYmFzZWQgb2ZmIHRoZSBzYXZlZCBvYmplY3QgaWQuCiAgICAgKiBAcGFyYW0gc2F2ZWRPYmplY3RJZAogICAgICogQHBhcmFtIGlucHV0IC0gc29tZSBpbnB1dCBtYXkgY29tZSBmcm9tIGEgcGFyZW50LCBvciB1c2VyLCBpZiBpdCdzIG5vdCBzdG9yZWQgd2l0aCB0aGUgc2F2ZWQgb2JqZWN0LiBGb3IgZXhhbXBsZSwgdGhlIHRpbWUKICAgICAqIHJhbmdlIG9mIHRoZSBwYXJlbnQgY29udGFpbmVyLgogICAgICogQHBhcmFtIHBhcmVudAogICAgICovCgogIH0sIHsKICAgIGtleTogImNyZWF0ZUZyb21TYXZlZE9iamVjdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRnJvbVNhdmVkT2JqZWN0KHNhdmVkT2JqZWN0SWQsIGlucHV0LCBwYXJlbnQpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJDcmVhdGlvbiBmcm9tIHNhdmVkIG9iamVjdCBub3Qgc3VwcG9ydGVkIGJ5IHR5cGUgIi5jb25jYXQodGhpcy50eXBlKSk7CiAgICB9CiAgICAvKioKICAgICAqIFJlc29sdmVzIHRvIHVuZGVmaW5lZCBpZiBhIG5ldyBFbWJlZGRhYmxlIGNhbm5vdCBiZSBkaXJlY3RseSBjcmVhdGVkIGFuZCB0aGUgdXNlciB3aWxsIGluc3RlYWQgYmUgcmVkaXJlY3RlZAogICAgICogZWxzZXdoZXJlLgogICAgICoKICAgICAqIFRoaXMgd2lsbCBsaWtlbHkgY2hhbmdlIGluIGZ1dHVyZSBpdGVyYXRpb25zIHdoZW4gd2UgaW1wcm92ZSBpbiBwbGFjZSBlZGl0aW5nIGNhcGFiaWxpdGllcy4KICAgICAqLwoKICB9XSk7CgogIHJldHVybiBFbWJlZGRhYmxlRmFjdG9yeTsKfSgpOwoKZXhwb3J0cy5FbWJlZGRhYmxlRmFjdG9yeSA9IEVtYmVkZGFibGVGYWN0b3J5Ow=="},null]}