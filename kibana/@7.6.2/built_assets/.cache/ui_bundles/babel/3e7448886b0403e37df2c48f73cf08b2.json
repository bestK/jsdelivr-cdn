{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/all/reducer.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/all/reducer.js","mtime":1585205047863},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmFsbFJ1bGVzUmVkdWNlciA9IHZvaWQgMDsKCmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsKICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7CiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSAiW29iamVjdCBBcmd1bWVudHNdIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7CiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgewogICAgICBhcnIyW2ldID0gYXJyW2ldOwogICAgfQoKICAgIHJldHVybiBhcnIyOwogIH0KfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KLyoKICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZQogKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuCiAqLwoKCnZhciBhbGxSdWxlc1JlZHVjZXIgPSBmdW5jdGlvbiBhbGxSdWxlc1JlZHVjZXIodGFibGVSZWYpIHsKICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHsKICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHsKICAgICAgY2FzZSAnZXhwb3J0UnVsZUlkcyc6CiAgICAgICAgewogICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICAgICAgICAgIGxvYWRpbmdSdWxlSWRzOiBhY3Rpb24uaWRzLAogICAgICAgICAgICBsb2FkaW5nUnVsZXNBY3Rpb246ICdleHBvcnQnLAogICAgICAgICAgICBleHBvcnRSdWxlSWRzOiBhY3Rpb24uaWRzCiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICBjYXNlICdsb2FkaW5nUnVsZUlkcyc6CiAgICAgICAgewogICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICAgICAgICAgIGxvYWRpbmdSdWxlSWRzOiBhY3Rpb24uYWN0aW9uVHlwZSA9PSBudWxsID8gW10gOiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0YXRlLmxvYWRpbmdSdWxlSWRzKSwgX3RvQ29uc3VtYWJsZUFycmF5KGFjdGlvbi5pZHMpKSwKICAgICAgICAgICAgbG9hZGluZ1J1bGVzQWN0aW9uOiBhY3Rpb24uYWN0aW9uVHlwZQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgY2FzZSAnc2VsZWN0ZWRSdWxlSWRzJzoKICAgICAgICB7CiAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHsKICAgICAgICAgICAgc2VsZWN0ZWRSdWxlSWRzOiBhY3Rpb24uaWRzCiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICBjYXNlICdzZXRSdWxlcyc6CiAgICAgICAgewogICAgICAgICAgaWYgKHRhYmxlUmVmICE9IG51bGwgJiYgdGFibGVSZWYuY3VycmVudCAhPSBudWxsICYmIHRhYmxlUmVmLmN1cnJlbnQuY2hhbmdlU2VsZWN0aW9uICE9IG51bGwpIHsKICAgICAgICAgICAgdGFibGVSZWYuY3VycmVudC5jaGFuZ2VTZWxlY3Rpb24oW10pOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICAgICAgICBydWxlczogYWN0aW9uLnJ1bGVzLAogICAgICAgICAgICBzZWxlY3RlZFJ1bGVJZHM6IFtdLAogICAgICAgICAgICBsb2FkaW5nUnVsZUlkczogW10sCiAgICAgICAgICAgIGxvYWRpbmdSdWxlc0FjdGlvbjogbnVsbCwKICAgICAgICAgICAgcGFnaW5hdGlvbjogX29iamVjdFNwcmVhZCh7fSwgc3RhdGUucGFnaW5hdGlvbiwge30sIGFjdGlvbi5wYWdpbmF0aW9uKQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgY2FzZSAndXBkYXRlUnVsZXMnOgogICAgICAgIHsKICAgICAgICAgIGlmIChzdGF0ZS5ydWxlcyAhPSBudWxsKSB7CiAgICAgICAgICAgIHZhciBydWxlSWRzID0gc3RhdGUucnVsZXMubWFwKGZ1bmN0aW9uIChyKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHIuaWQ7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgdXBkYXRlZFJ1bGVzID0gYWN0aW9uLnJ1bGVzLnJlZHVjZShmdW5jdGlvbiAocnVsZXMsIHVwZGF0ZWRSdWxlKSB7CiAgICAgICAgICAgICAgdmFyIG5ld1J1bGVzID0gcnVsZXM7CgogICAgICAgICAgICAgIGlmIChydWxlSWRzLmluY2x1ZGVzKHVwZGF0ZWRSdWxlLmlkKSkgewogICAgICAgICAgICAgICAgbmV3UnVsZXMgPSBuZXdSdWxlcy5tYXAoZnVuY3Rpb24gKHIpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWRSdWxlLmlkID09PSByLmlkID8gdXBkYXRlZFJ1bGUgOiByOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG5ld1J1bGVzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShuZXdSdWxlcyksIFt1cGRhdGVkUnVsZV0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIG5ld1J1bGVzOwogICAgICAgICAgICB9LCBzdGF0ZS5ydWxlcyk7CiAgICAgICAgICAgIHZhciB1cGRhdGVkUnVsZUlkcyA9IGFjdGlvbi5ydWxlcy5tYXAoZnVuY3Rpb24gKHIpIHsKICAgICAgICAgICAgICByZXR1cm4gci5pZDsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBuZXdMb2FkaW5nUnVsZUlkcyA9IHN0YXRlLmxvYWRpbmdSdWxlSWRzLmZpbHRlcihmdW5jdGlvbiAoaWQpIHsKICAgICAgICAgICAgICByZXR1cm4gIXVwZGF0ZWRSdWxlSWRzLmluY2x1ZGVzKGlkKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICAgICAgICAgIHJ1bGVzOiB1cGRhdGVkUnVsZXMsCiAgICAgICAgICAgICAgbG9hZGluZ1J1bGVJZHM6IG5ld0xvYWRpbmdSdWxlSWRzLAogICAgICAgICAgICAgIGxvYWRpbmdSdWxlc0FjdGlvbjogbmV3TG9hZGluZ1J1bGVJZHMubGVuZ3RoID09PSAwID8gbnVsbCA6IHN0YXRlLmxvYWRpbmdSdWxlc0FjdGlvbgogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gc3RhdGU7CiAgICAgICAgfQoKICAgICAgY2FzZSAndXBkYXRlRmlsdGVyT3B0aW9ucyc6CiAgICAgICAgewogICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICAgICAgICAgIGZpbHRlck9wdGlvbnM6IF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLmZpbHRlck9wdGlvbnMsIHt9LCBhY3Rpb24uZmlsdGVyT3B0aW9ucyksCiAgICAgICAgICAgIHBhZ2luYXRpb246IF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLnBhZ2luYXRpb24sIHt9LCBhY3Rpb24ucGFnaW5hdGlvbikKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgIGNhc2UgJ2ZhaWx1cmUnOgogICAgICAgIHsKICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICAgICAgICBydWxlczogW10KICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgfQogIH07Cn07CgpleHBvcnRzLmFsbFJ1bGVzUmVkdWNlciA9IGFsbFJ1bGVzUmVkdWNlcjs="},null]}