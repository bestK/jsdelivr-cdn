{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/home/index.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/home/index.js","mtime":1585205039548},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnRyYWNrVWlNZXRyaWMgPSB2b2lkIDA7Cgp2YXIgX2ZlYXR1cmVfY2F0YWxvZ3VlID0gcmVxdWlyZSgidWkvcmVnaXN0cnkvZmVhdHVyZV9jYXRhbG9ndWUiKTsKCnZhciBfbmV3X3BsYXRmb3JtID0gcmVxdWlyZSgidWkvbmV3X3BsYXRmb3JtIik7Cgp2YXIgX2Nocm9tZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgidWkvY2hyb21lIikpOwoKdmFyIF9wbHVnaW4gPSByZXF1aXJlKCIuL3BsdWdpbiIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi91aV9tZXRyaWMvcHVibGljIik7Cgp2YXIgX3NlcnZpY2VzID0gcmVxdWlyZSgiLi4vLi4vLi4vdGVsZW1ldHJ5L3B1YmxpYy9zZXJ2aWNlcyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciB0cmFja1VpTWV0cmljID0gKDAsIF9wdWJsaWMuY3JlYXRlVWlTdGF0c1JlcG9ydGVyKSgnS2liYW5hX2hvbWUnKTsKLyoqCiAqIEdldCBkZXBlbmRlbmNpZXMgcmVseWluZyBvbiB0aGUgZ2xvYmFsIGFuZ3VsYXIgY29udGV4dC4KICogVGhleSBhbHNvIGhhdmUgdG8gZ2V0IHJlc29sdmVkIHRvZ2V0aGVyIHdpdGggdGhlIGxlZ2FjeSBpbXBvcnRzIGFib3ZlCiAqLwoKZXhwb3J0cy50cmFja1VpTWV0cmljID0gdHJhY2tVaU1ldHJpYzsKCmZ1bmN0aW9uIGdldEFuZ3VsYXJEZXBlbmRlbmNpZXMoKSB7CiAgdmFyIGluamVjdG9yLCBQcml2YXRlLCB0ZWxlbWV0cnlFbmFibGVkLCB0ZWxlbWV0cnlCYW5uZXIsIHRlbGVtZXRyeU9wdEluUHJvdmlkZXI7CiAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBnZXRBbmd1bGFyRGVwZW5kZW5jaWVzJChfY29udGV4dCkgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChfY2hyb21lLmRlZmF1bHQuZGFuZ2Vyb3VzbHlHZXRBY3RpdmVJbmplY3RvcigpKTsKCiAgICAgICAgY2FzZSAyOgogICAgICAgICAgaW5qZWN0b3IgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgUHJpdmF0ZSA9IGluamVjdG9yLmdldCgnUHJpdmF0ZScpOwogICAgICAgICAgdGVsZW1ldHJ5RW5hYmxlZCA9IF9uZXdfcGxhdGZvcm0ubnBTdGFydC5jb3JlLmluamVjdGVkTWV0YWRhdGEuZ2V0SW5qZWN0ZWRWYXIoJ3RlbGVtZXRyeUVuYWJsZWQnKTsKICAgICAgICAgIHRlbGVtZXRyeUJhbm5lciA9IF9uZXdfcGxhdGZvcm0ubnBTdGFydC5jb3JlLmluamVjdGVkTWV0YWRhdGEuZ2V0SW5qZWN0ZWRWYXIoJ3RlbGVtZXRyeUJhbm5lcicpOwogICAgICAgICAgdGVsZW1ldHJ5T3B0SW5Qcm92aWRlciA9IFByaXZhdGUoX3NlcnZpY2VzLlRlbGVtZXRyeU9wdEluUHJvdmlkZXIpOwogICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICB0ZWxlbWV0cnlPcHRJblByb3ZpZGVyOiB0ZWxlbWV0cnlPcHRJblByb3ZpZGVyLAogICAgICAgICAgICBzaG91bGRTaG93VGVsZW1ldHJ5T3B0SW46IHRlbGVtZXRyeUVuYWJsZWQgJiYgdGVsZW1ldHJ5QmFubmVyICYmICF0ZWxlbWV0cnlPcHRJblByb3ZpZGVyLmdldE9wdEluKCkKICAgICAgICAgIH0pOwoKICAgICAgICBjYXNlIDg6CiAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgIH0KICAgIH0KICB9KTsKfQoKdmFyIGNvcGllZExlZ2FjeUNhdGFsb2d1ZSA9IGZhbHNlOwoKKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgdmFyIGluc3RhbmNlOwogIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQzKSB7CiAgICB3aGlsZSAoMSkgewogICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICBjYXNlIDA6CiAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBfcGx1Z2luLkhvbWVQbHVnaW4oKTsKICAgICAgICAgIGluc3RhbmNlLnNldHVwKF9uZXdfcGxhdGZvcm0ubnBTZXR1cC5jb3JlLCBfb2JqZWN0U3ByZWFkKHt9LCBfbmV3X3BsYXRmb3JtLm5wU2V0dXAucGx1Z2lucywgewogICAgICAgICAgICBfX0xFR0FDWTogewogICAgICAgICAgICAgIHRyYWNrVWlNZXRyaWM6IHRyYWNrVWlNZXRyaWMsCiAgICAgICAgICAgICAgbWV0YWRhdGE6IF9uZXdfcGxhdGZvcm0ubnBTdGFydC5jb3JlLmluamVjdGVkTWV0YWRhdGEuZ2V0TGVnYWN5TWV0YWRhdGEoKSwKICAgICAgICAgICAgICBNRVRSSUNfVFlQRTogX3B1YmxpYy5NRVRSSUNfVFlQRSwKICAgICAgICAgICAgICBnZXRGZWF0dXJlQ2F0YWxvZ3VlRW50cmllczogZnVuY3Rpb24gZ2V0RmVhdHVyZUNhdGFsb2d1ZUVudHJpZXMoKSB7CiAgICAgICAgICAgICAgICB2YXIgX2luamVjdG9yLCBfUHJpdmF0ZTsKCiAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGdldEZlYXR1cmVDYXRhbG9ndWVFbnRyaWVzJChfY29udGV4dDIpIHsKICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcGllZExlZ2FjeUNhdGFsb2d1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNzsKICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKF9jaHJvbWUuZGVmYXVsdC5kYW5nZXJvdXNseUdldEFjdGl2ZUluamVjdG9yKCkpOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgX2luamVjdG9yID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIF9Qcml2YXRlID0gX2luamVjdG9yLmdldCgnUHJpdmF0ZScpOyAvLyBNZXJnZSBsZWdhY3kgcmVnaXN0cnkgd2l0aCBuZXcgcmVnaXN0cnkKCiAgICAgICAgICAgICAgICAgICAgICAgIF9Qcml2YXRlKF9mZWF0dXJlX2NhdGFsb2d1ZS5GZWF0dXJlQ2F0YWxvZ3VlUmVnaXN0cnlQcm92aWRlcikuaW5UaXRsZU9yZGVyLm1hcChfbmV3X3BsYXRmb3JtLm5wU2V0dXAucGx1Z2lucy5ob21lLmZlYXR1cmVDYXRhbG9ndWUucmVnaXN0ZXIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgY29waWVkTGVnYWN5Q2F0YWxvZ3VlID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBfbmV3X3BsYXRmb3JtLm5wU3RhcnQucGx1Z2lucy5ob21lLmZlYXR1cmVDYXRhbG9ndWUuZ2V0KCkpOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBnZXRBbmd1bGFyRGVwZW5kZW5jaWVzOiBnZXRBbmd1bGFyRGVwZW5kZW5jaWVzCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pKTsKICAgICAgICAgIGluc3RhbmNlLnN0YXJ0KF9uZXdfcGxhdGZvcm0ubnBTdGFydC5jb3JlLCBfb2JqZWN0U3ByZWFkKHt9LCBfbmV3X3BsYXRmb3JtLm5wU3RhcnQucGx1Z2lucykpOwoKICAgICAgICBjYXNlIDM6CiAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICB9CiAgICB9CiAgfSk7Cn0pKCk7"},null]}