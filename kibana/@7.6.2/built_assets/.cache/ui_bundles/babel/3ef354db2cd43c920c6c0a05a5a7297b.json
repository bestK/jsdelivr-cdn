{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/infra/public/containers/logs/log_analysis/api/ml_cleanup.js","dependencies":[{"path":"x-pack/legacy/plugins/infra/public/containers/logs/log_analysis/api/ml_cleanup.js","mtime":1585205044665},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnN0b3BEYXRhZmVlZHNSZXNwb25zZVBheWxvYWRSVCA9IGV4cG9ydHMuc3RvcERhdGFmZWVkc1JlcXVlc3RQYXlsb2FkUlQgPSBleHBvcnRzLmdldEpvYkRlbGV0aW9uVGFza3NSZXNwb25zZVBheWxvYWRSVCA9IGV4cG9ydHMuZGVsZXRlSm9ic1Jlc3BvbnNlUGF5bG9hZFJUID0gZXhwb3J0cy5kZWxldGVKb2JzUmVxdWVzdFBheWxvYWRSVCA9IGV4cG9ydHMuY2FsbFN0b3BEYXRhZmVlZHMgPSBleHBvcnRzLmNhbGxHZXRKb2JEZWxldGlvblRhc2tzID0gZXhwb3J0cy5jYWxsRGVsZXRlSm9icyA9IHZvaWQgMDsKCnZhciBydCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoImlvLXRzIikpOwoKdmFyIF9waXBlYWJsZSA9IHJlcXVpcmUoImZwLXRzL2xpYi9waXBlYWJsZSIpOwoKdmFyIF9FaXRoZXIgPSByZXF1aXJlKCJmcC10cy9saWIvRWl0aGVyIik7Cgp2YXIgX2Z1bmN0aW9uID0gcmVxdWlyZSgiZnAtdHMvbGliL2Z1bmN0aW9uIik7Cgp2YXIgX25ld19wbGF0Zm9ybSA9IHJlcXVpcmUoInVpL25ld19wbGF0Zm9ybSIpOwoKdmFyIF9sb2dfYW5hbHlzaXMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9jb21tb24vbG9nX2FuYWx5c2lzIik7Cgp2YXIgX3J1bnRpbWVfdHlwZXMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9jb21tb24vcnVudGltZV90eXBlcyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9Ci8qCiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUKICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLgogKi8KCgp2YXIgY2FsbERlbGV0ZUpvYnMgPSBmdW5jdGlvbiBjYWxsRGVsZXRlSm9icyhzcGFjZUlkLCBzb3VyY2VJZCwgam9iVHlwZXMpIHsKICB2YXIgZGVsZXRlSm9ic1Jlc3BvbnNlOwogIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gY2FsbERlbGV0ZUpvYnMkKF9jb250ZXh0KSB7CiAgICB3aGlsZSAoMSkgewogICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKF9uZXdfcGxhdGZvcm0ubnBTdGFydC5jb3JlLmh0dHAuZmV0Y2goJy9hcGkvbWwvam9icy9kZWxldGVfam9icycsIHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRlbGV0ZUpvYnNSZXF1ZXN0UGF5bG9hZFJULmVuY29kZSh7CiAgICAgICAgICAgICAgam9iSWRzOiBqb2JUeXBlcy5tYXAoZnVuY3Rpb24gKGpvYlR5cGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX2xvZ19hbmFseXNpcy5nZXRKb2JJZCkoc3BhY2VJZCwgc291cmNlSWQsIGpvYlR5cGUpOwogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0pKQogICAgICAgICAgfSkpOwoKICAgICAgICBjYXNlIDI6CiAgICAgICAgICBkZWxldGVKb2JzUmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgKDAsIF9waXBlYWJsZS5waXBlKShkZWxldGVKb2JzUmVzcG9uc2VQYXlsb2FkUlQuZGVjb2RlKGRlbGV0ZUpvYnNSZXNwb25zZSksICgwLCBfRWl0aGVyLmZvbGQpKCgwLCBfcnVudGltZV90eXBlcy50aHJvd0Vycm9ycykoX3J1bnRpbWVfdHlwZXMuY3JlYXRlUGxhaW5FcnJvciksIF9mdW5jdGlvbi5pZGVudGl0eSkpKTsKCiAgICAgICAgY2FzZSA0OgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICB9CiAgICB9CiAgfSk7Cn07CgpleHBvcnRzLmNhbGxEZWxldGVKb2JzID0gY2FsbERlbGV0ZUpvYnM7Cgp2YXIgY2FsbEdldEpvYkRlbGV0aW9uVGFza3MgPSBmdW5jdGlvbiBjYWxsR2V0Sm9iRGVsZXRpb25UYXNrcygpIHsKICB2YXIgam9iRGVsZXRpb25UYXNrc1Jlc3BvbnNlOwogIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gY2FsbEdldEpvYkRlbGV0aW9uVGFza3MkKF9jb250ZXh0MikgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChfbmV3X3BsYXRmb3JtLm5wU3RhcnQuY29yZS5odHRwLmZldGNoKCcvYXBpL21sL2pvYnMvZGVsZXRpbmdfam9ic190YXNrcycpKTsKCiAgICAgICAgY2FzZSAyOgogICAgICAgICAgam9iRGVsZXRpb25UYXNrc1Jlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgKDAsIF9waXBlYWJsZS5waXBlKShnZXRKb2JEZWxldGlvblRhc2tzUmVzcG9uc2VQYXlsb2FkUlQuZGVjb2RlKGpvYkRlbGV0aW9uVGFza3NSZXNwb25zZSksICgwLCBfRWl0aGVyLmZvbGQpKCgwLCBfcnVudGltZV90eXBlcy50aHJvd0Vycm9ycykoX3J1bnRpbWVfdHlwZXMuY3JlYXRlUGxhaW5FcnJvciksIF9mdW5jdGlvbi5pZGVudGl0eSkpKTsKCiAgICAgICAgY2FzZSA0OgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgfQogICAgfQogIH0pOwp9OwoKZXhwb3J0cy5jYWxsR2V0Sm9iRGVsZXRpb25UYXNrcyA9IGNhbGxHZXRKb2JEZWxldGlvblRhc2tzOwoKdmFyIGNhbGxTdG9wRGF0YWZlZWRzID0gZnVuY3Rpb24gY2FsbFN0b3BEYXRhZmVlZHMoc3BhY2VJZCwgc291cmNlSWQsIGpvYlR5cGVzKSB7CiAgdmFyIHN0b3BEYXRhZmVlZFJlc3BvbnNlOwogIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gY2FsbFN0b3BEYXRhZmVlZHMkKF9jb250ZXh0MykgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChfbmV3X3BsYXRmb3JtLm5wU3RhcnQuY29yZS5odHRwLmZldGNoKCcvYXBpL21sL2pvYnMvc3RvcF9kYXRhZmVlZHMnLCB7CiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShzdG9wRGF0YWZlZWRzUmVxdWVzdFBheWxvYWRSVC5lbmNvZGUoewogICAgICAgICAgICAgIGRhdGFmZWVkSWRzOiBqb2JUeXBlcy5tYXAoZnVuY3Rpb24gKGpvYlR5cGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX2xvZ19hbmFseXNpcy5nZXREYXRhZmVlZElkKShzcGFjZUlkLCBzb3VyY2VJZCwgam9iVHlwZSk7CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSkpCiAgICAgICAgICB9KSk7CgogICAgICAgIGNhc2UgMjoKICAgICAgICAgIHN0b3BEYXRhZmVlZFJlc3BvbnNlID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgKDAsIF9waXBlYWJsZS5waXBlKShzdG9wRGF0YWZlZWRzUmVzcG9uc2VQYXlsb2FkUlQuZGVjb2RlKHN0b3BEYXRhZmVlZFJlc3BvbnNlKSwgKDAsIF9FaXRoZXIuZm9sZCkoKDAsIF9ydW50aW1lX3R5cGVzLnRocm93RXJyb3JzKShfcnVudGltZV90eXBlcy5jcmVhdGVQbGFpbkVycm9yKSwgX2Z1bmN0aW9uLmlkZW50aXR5KSkpOwoKICAgICAgICBjYXNlIDQ6CiAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICB9CiAgICB9CiAgfSk7Cn07CgpleHBvcnRzLmNhbGxTdG9wRGF0YWZlZWRzID0gY2FsbFN0b3BEYXRhZmVlZHM7CnZhciBkZWxldGVKb2JzUmVxdWVzdFBheWxvYWRSVCA9IHJ0LnR5cGUoewogIGpvYklkczogcnQuYXJyYXkocnQuc3RyaW5nKQp9KTsKZXhwb3J0cy5kZWxldGVKb2JzUmVxdWVzdFBheWxvYWRSVCA9IGRlbGV0ZUpvYnNSZXF1ZXN0UGF5bG9hZFJUOwp2YXIgZGVsZXRlSm9ic1Jlc3BvbnNlUGF5bG9hZFJUID0gcnQucmVjb3JkKHJ0LnN0cmluZywgcnQudHlwZSh7CiAgZGVsZXRlZDogcnQuYm9vbGVhbgp9KSk7CmV4cG9ydHMuZGVsZXRlSm9ic1Jlc3BvbnNlUGF5bG9hZFJUID0gZGVsZXRlSm9ic1Jlc3BvbnNlUGF5bG9hZFJUOwp2YXIgZ2V0Sm9iRGVsZXRpb25UYXNrc1Jlc3BvbnNlUGF5bG9hZFJUID0gcnQudHlwZSh7CiAgam9iSWRzOiBydC5hcnJheShydC5zdHJpbmcpCn0pOwpleHBvcnRzLmdldEpvYkRlbGV0aW9uVGFza3NSZXNwb25zZVBheWxvYWRSVCA9IGdldEpvYkRlbGV0aW9uVGFza3NSZXNwb25zZVBheWxvYWRSVDsKdmFyIHN0b3BEYXRhZmVlZHNSZXF1ZXN0UGF5bG9hZFJUID0gcnQudHlwZSh7CiAgZGF0YWZlZWRJZHM6IHJ0LmFycmF5KHJ0LnN0cmluZykKfSk7CmV4cG9ydHMuc3RvcERhdGFmZWVkc1JlcXVlc3RQYXlsb2FkUlQgPSBzdG9wRGF0YWZlZWRzUmVxdWVzdFBheWxvYWRSVDsKdmFyIHN0b3BEYXRhZmVlZHNSZXNwb25zZVBheWxvYWRSVCA9IHJ0LnJlY29yZChydC5zdHJpbmcsIHJ0LnR5cGUoewogIHN0b3BwZWQ6IHJ0LmJvb2xlYW4KfSkpOwpleHBvcnRzLnN0b3BEYXRhZmVlZHNSZXNwb25zZVBheWxvYWRSVCA9IHN0b3BEYXRhZmVlZHNSZXNwb25zZVBheWxvYWRSVDs="},null]}