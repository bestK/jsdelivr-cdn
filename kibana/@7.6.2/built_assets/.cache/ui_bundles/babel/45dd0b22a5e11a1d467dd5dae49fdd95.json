{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/jobs/jobs_list/components/multi_job_actions/group_selector/group_selector.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/jobs/jobs_list/components/multi_job_actions/group_selector/group_selector.js","mtime":1585205045836},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkdyb3VwU2VsZWN0b3IgPSB2b2lkIDA7Cgp2YXIgX2NoZWNrX3ByaXZpbGVnZSA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uL3ByaXZpbGVnZS9jaGVja19wcml2aWxlZ2UiKTsKCnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJwcm9wLXR5cGVzIikpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX21sX2FwaV9zZXJ2aWNlID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vc2VydmljZXMvbWxfYXBpX3NlcnZpY2UiKTsKCnZhciBfZ3JvdXBfbGlzdCA9IHJlcXVpcmUoIi4vZ3JvdXBfbGlzdCIpOwoKdmFyIF9uZXdfZ3JvdXBfaW5wdXQgPSByZXF1aXJlKCIuL25ld19ncm91cF9pbnB1dCIpOwoKdmFyIF9tZXNzYWdlYmFyID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50cy9tZXNzYWdlYmFyIik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9jbGFzcywgX3RlbXA7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdGVkR3JvdXBzKGpvYnMsIGdyb3VwcykgewogIHZhciBqb2JJZHMgPSBqb2JzLm1hcChmdW5jdGlvbiAoaikgewogICAgcmV0dXJuIGouaWQ7CiAgfSk7CiAgdmFyIGdyb3VwQ291bnRzID0ge307CiAgam9icy5mb3JFYWNoKGZ1bmN0aW9uIChqKSB7CiAgICBqLmdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChnKSB7CiAgICAgIGlmIChncm91cENvdW50c1tnXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgZ3JvdXBDb3VudHNbZ10gPSAwOwogICAgICB9CgogICAgICBncm91cENvdW50c1tnXSsrOwogICAgfSk7CiAgfSk7CiAgdmFyIHNlbGVjdGVkR3JvdXBzID0gZ3JvdXBzLnJlZHVjZShmdW5jdGlvbiAocCwgYykgewogICAgaWYgKGMuam9iSWRzLnNvbWUoZnVuY3Rpb24gKGopIHsKICAgICAgcmV0dXJuIGpvYklkcy5pbmNsdWRlcyhqKTsKICAgIH0pKSB7CiAgICAgIHBbYy5pZF0gPSB7CiAgICAgICAgcGFydGlhbDogZ3JvdXBDb3VudHNbYy5pZF0gIT09IGpvYklkcy5sZW5ndGgKICAgICAgfTsKICAgIH0KCiAgICByZXR1cm4gcDsKICB9LCB7fSk7CiAgcmV0dXJuIHNlbGVjdGVkR3JvdXBzOwp9Cgp2YXIgR3JvdXBTZWxlY3RvciA9ICgwLCBfcmVhY3QyLmluamVjdEkxOG4pKChfdGVtcCA9IF9jbGFzcyA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9Db21wb25lbnQpIHsKICBfaW5oZXJpdHMoR3JvdXBTZWxlY3RvciwgX0NvbXBvbmVudCk7CgogIGZ1bmN0aW9uIEdyb3VwU2VsZWN0b3IocHJvcHMpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR3JvdXBTZWxlY3Rvcik7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoR3JvdXBTZWxlY3RvcikuY2FsbCh0aGlzLCBwcm9wcykpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInRvZ2dsZVBvcG92ZXIiLCBmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChfdGhpcy5zdGF0ZS5pc1BvcG92ZXJPcGVuKSB7CiAgICAgICAgX3RoaXMuY2xvc2VQb3BvdmVyKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgX21sX2FwaV9zZXJ2aWNlLm1sLmpvYnMuZ3JvdXBzKCkudGhlbihmdW5jdGlvbiAoZ3JvdXBzKSB7CiAgICAgICAgICB2YXIgc2VsZWN0ZWRHcm91cHMgPSBjcmVhdGVTZWxlY3RlZEdyb3VwcyhfdGhpcy5wcm9wcy5qb2JzLCBncm91cHMpOwoKICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICAgICAgaXNQb3BvdmVyT3BlbjogdHJ1ZSwKICAgICAgICAgICAgZWRpdGVkOiBmYWxzZSwKICAgICAgICAgICAgc2VsZWN0ZWRHcm91cHM6IHNlbGVjdGVkR3JvdXBzLAogICAgICAgICAgICBncm91cHM6IGdyb3VwcwogICAgICAgICAgfSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiY2xvc2VQb3BvdmVyIiwgZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgZWRpdGVkOiBmYWxzZSwKICAgICAgICBpc1BvcG92ZXJPcGVuOiBmYWxzZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInNlbGVjdEdyb3VwIiwgZnVuY3Rpb24gKGdyb3VwKSB7CiAgICAgIHZhciBuZXdTZWxlY3RlZEdyb3VwcyA9ICgwLCBfbG9kYXNoLmNsb25lRGVlcCkoX3RoaXMuc3RhdGUuc2VsZWN0ZWRHcm91cHMpOwoKICAgICAgaWYgKG5ld1NlbGVjdGVkR3JvdXBzW2dyb3VwLmlkXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgbmV3U2VsZWN0ZWRHcm91cHNbZ3JvdXAuaWRdID0gewogICAgICAgICAgcGFydGlhbDogZmFsc2UKICAgICAgICB9OwogICAgICB9IGVsc2UgaWYgKG5ld1NlbGVjdGVkR3JvdXBzW2dyb3VwLmlkXS5wYXJ0aWFsID09PSB0cnVlKSB7CiAgICAgICAgbmV3U2VsZWN0ZWRHcm91cHNbZ3JvdXAuaWRdLnBhcnRpYWwgPSBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkZWxldGUgbmV3U2VsZWN0ZWRHcm91cHNbZ3JvdXAuaWRdOwogICAgICB9CgogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgc2VsZWN0ZWRHcm91cHM6IG5ld1NlbGVjdGVkR3JvdXBzLAogICAgICAgIGVkaXRlZDogdHJ1ZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImFwcGx5Q2hhbmdlcyIsIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHNlbGVjdGVkR3JvdXBzID0gX3RoaXMuc3RhdGUuc2VsZWN0ZWRHcm91cHM7CiAgICAgIHZhciBqb2JzID0gX3RoaXMucHJvcHMuam9iczsKICAgICAgdmFyIG5ld0pvYnMgPSBqb2JzLm1hcChmdW5jdGlvbiAoaikgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBpZDogai5pZCwKICAgICAgICAgIG9sZEdyb3Vwczogai5ncm91cHMsCiAgICAgICAgICBuZXdHcm91cHM6IFtdCiAgICAgICAgfTsKICAgICAgfSk7CgogICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChnSWQpIHsKICAgICAgICBpZiAoc2VsZWN0ZWRHcm91cHMuaGFzT3duUHJvcGVydHkoZ0lkKSkgewogICAgICAgICAgdmFyIGdyb3VwID0gc2VsZWN0ZWRHcm91cHNbZ0lkXTsKICAgICAgICAgIG5ld0pvYnMuZm9yRWFjaChmdW5jdGlvbiAoaikgewogICAgICAgICAgICBpZiAoZ3JvdXAucGFydGlhbCA9PT0gZmFsc2UgfHwgZ3JvdXAucGFydGlhbCA9PT0gdHJ1ZSAmJiBqLm9sZEdyb3Vwcy5pbmNsdWRlcyhnSWQpKSB7CiAgICAgICAgICAgICAgai5uZXdHcm91cHMucHVzaChnSWQpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH07CgogICAgICBmb3IgKHZhciBnSWQgaW4gc2VsZWN0ZWRHcm91cHMpIHsKICAgICAgICBfbG9vcChnSWQpOwogICAgICB9CgogICAgICB2YXIgdGVtcEpvYnMgPSBuZXdKb2JzLm1hcChmdW5jdGlvbiAoaikgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBqb2JfaWQ6IGouaWQsCiAgICAgICAgICBncm91cHM6IGoubmV3R3JvdXBzCiAgICAgICAgfTsKICAgICAgfSk7CgogICAgICBfbWxfYXBpX3NlcnZpY2UubWwuam9icy51cGRhdGVHcm91cHModGVtcEpvYnMpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICB2YXIgc3VjY2VzcyA9IHRydWU7CgogICAgICAgIGZvciAodmFyIGpvYklkIGluIHJlc3ApIHsKICAgICAgICAgIC8vIGNoZWNrIHN1Y2Nlc3Mgb2YgZWFjaCBqb2IgdXBkYXRlCiAgICAgICAgICBpZiAocmVzcC5oYXNPd25Qcm9wZXJ0eShqb2JJZCkpIHsKICAgICAgICAgICAgaWYgKHJlc3Bbam9iSWRdLnN1Y2Nlc3MgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgX21lc3NhZ2ViYXIubWxNZXNzYWdlQmFyU2VydmljZS5ub3RpZnkuZXJyb3IocmVzcFtqb2JJZF0uZXJyb3IpOwoKICAgICAgICAgICAgICBzdWNjZXNzID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChzdWNjZXNzKSB7CiAgICAgICAgICAvLyBpZiBhbGwgYXJlIHN1Y2Nlc3NmdWwgcmVmcmVzaCB0aGUgam9iIGxpc3QKICAgICAgICAgIF90aGlzLnJlZnJlc2hKb2JzKCk7CgogICAgICAgICAgX3RoaXMuY2xvc2VQb3BvdmVyKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IocmVzcCk7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBfbWVzc2FnZWJhci5tbE1lc3NhZ2VCYXJTZXJ2aWNlLm5vdGlmeS5lcnJvcihlcnJvcik7CgogICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImFkZE5ld0dyb3VwIiwgZnVuY3Rpb24gKGlkKSB7CiAgICAgIHZhciBuZXdHcm91cCA9IHsKICAgICAgICBpZDogaWQsCiAgICAgICAgY2FsZW5kYXJJZHM6IFtdLAogICAgICAgIGpvYklkczogW10KICAgICAgfTsKICAgICAgdmFyIGdyb3VwcyA9IF90aGlzLnN0YXRlLmdyb3VwczsKCiAgICAgIGlmIChncm91cHMuc29tZShmdW5jdGlvbiAoZykgewogICAgICAgIHJldHVybiBnLmlkID09PSBuZXdHcm91cC5pZDsKICAgICAgfSkgPT09IGZhbHNlKSB7CiAgICAgICAgZ3JvdXBzLnB1c2gobmV3R3JvdXApOwogICAgICB9CgogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgZ3JvdXBzOiBncm91cHMKICAgICAgfSk7CiAgICB9KTsKCiAgICBfdGhpcy5zdGF0ZSA9IHsKICAgICAgaXNQb3BvdmVyT3BlbjogZmFsc2UsCiAgICAgIGdyb3VwczogW10sCiAgICAgIHNlbGVjdGVkR3JvdXBzOiB7fSwKICAgICAgZWRpdGVkOiBmYWxzZQogICAgfTsKICAgIF90aGlzLnJlZnJlc2hKb2JzID0gX3RoaXMucHJvcHMucmVmcmVzaEpvYnM7CiAgICBfdGhpcy5jYW5VcGRhdGVKb2IgPSAoMCwgX2NoZWNrX3ByaXZpbGVnZS5jaGVja1Blcm1pc3Npb24pKCdjYW5VcGRhdGVKb2InKTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhHcm91cFNlbGVjdG9yLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGludGwgPSB0aGlzLnByb3BzLmludGw7CiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsCiAgICAgICAgICBncm91cHMgPSBfdGhpcyRzdGF0ZS5ncm91cHMsCiAgICAgICAgICBzZWxlY3RlZEdyb3VwcyA9IF90aGlzJHN0YXRlLnNlbGVjdGVkR3JvdXBzLAogICAgICAgICAgZWRpdGVkID0gX3RoaXMkc3RhdGUuZWRpdGVkOwoKICAgICAgdmFyIGJ1dHRvbiA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUb29sVGlwLCB7CiAgICAgICAgcG9zaXRpb246ICJib3R0b20iLAogICAgICAgIGNvbnRlbnQ6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogInhwYWNrLm1sLmpvYnNMaXN0Lm11bHRpSm9iQWN0aW9ucy5ncm91cFNlbGVjdG9yLmVkaXRKb2JHcm91cHNCdXR0b25Ub29sdGlwIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRWRpdCBqb2IgZ3JvdXBzIgogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25JY29uLCB7CiAgICAgICAgaWNvblR5cGU6ICJpbmRleEVkaXQiLAogICAgICAgICJhcmlhLWxhYmVsIjogaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICAgIGlkOiAneHBhY2subWwuam9ic0xpc3QubXVsdGlKb2JBY3Rpb25zLmdyb3VwU2VsZWN0b3IuZWRpdEpvYkdyb3Vwc0J1dHRvbkFyaWFMYWJlbCcsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0VkaXQgam9iIGdyb3VwcycKICAgICAgICB9KSwKICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMi50b2dnbGVQb3BvdmVyKCk7CiAgICAgICAgfSwKICAgICAgICBkaXNhYmxlZDogdGhpcy5jYW5VcGRhdGVKb2IgPT09IGZhbHNlCiAgICAgIH0pKTsKCiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUG9wb3ZlciwgewogICAgICAgIGlkOiAidHJhcEZvY3VzIiwKICAgICAgICBvd25Gb2N1czogdHJ1ZSwKICAgICAgICBidXR0b246IGJ1dHRvbiwKICAgICAgICBpc09wZW46IHRoaXMuc3RhdGUuaXNQb3BvdmVyT3BlbiwKICAgICAgICBjbG9zZVBvcG92ZXI6IGZ1bmN0aW9uIGNsb3NlUG9wb3ZlcigpIHsKICAgICAgICAgIHJldHVybiBfdGhpczIuY2xvc2VQb3BvdmVyKCk7CiAgICAgICAgfQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgY2xhc3NOYW1lOiAiZ3JvdXAtc2VsZWN0b3IiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQb3BvdmVyVGl0bGUsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5tbC5qb2JzTGlzdC5tdWx0aUpvYkFjdGlvbnMuZ3JvdXBTZWxlY3Rvci5hcHBseUdyb3Vwc1RvSm9iVGl0bGUiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQXBwbHkgZ3JvdXBzIHRvIHtqb2JzQ291bnQsIHBsdXJhbCwgb25lIHtqb2J9IG90aGVyIHtqb2JzfX0iLAogICAgICAgIHZhbHVlczogewogICAgICAgICAgam9ic0NvdW50OiB0aGlzLnByb3BzLmpvYnMubGVuZ3RoCiAgICAgICAgfQogICAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2dyb3VwX2xpc3QuR3JvdXBMaXN0LCB7CiAgICAgICAgZ3JvdXBzOiBncm91cHMsCiAgICAgICAgc2VsZWN0ZWRHcm91cHM6IHNlbGVjdGVkR3JvdXBzLAogICAgICAgIHNlbGVjdEdyb3VwOiB0aGlzLnNlbGVjdEdyb3VwCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSG9yaXpvbnRhbFJ1bGUsIHsKICAgICAgICBtYXJnaW46ICJ4cyIKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAicyIKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX25ld19ncm91cF9pbnB1dC5OZXdHcm91cElucHV0LCB7CiAgICAgICAgYWRkTmV3R3JvdXA6IHRoaXMuYWRkTmV3R3JvdXAsCiAgICAgICAgYWxsSm9iSWRzOiB0aGlzLnByb3BzLmFsbEpvYklkcwogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUhvcml6b250YWxSdWxlLCB7CiAgICAgICAgbWFyZ2luOiAibSIKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgICAgICBzaXplOiAicyIsCiAgICAgICAgb25DbGljazogdGhpcy5hcHBseUNoYW5nZXMsCiAgICAgICAgaXNEaXNhYmxlZDogZWRpdGVkID09PSBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2subWwuam9ic0xpc3QubXVsdGlKb2JBY3Rpb25zLmdyb3VwU2VsZWN0b3IuYXBwbHlCdXR0b25MYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJBcHBseSIKICAgICAgfSkpKSkpKSk7CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHsKICAgICAgaWYgKHN0YXRlLmVkaXRlZCA9PT0gZmFsc2UpIHsKICAgICAgICB2YXIgc2VsZWN0ZWRHcm91cHMgPSBjcmVhdGVTZWxlY3RlZEdyb3Vwcyhwcm9wcy5qb2JzLCBzdGF0ZS5ncm91cHMpOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBzZWxlY3RlZEdyb3Vwczogc2VsZWN0ZWRHcm91cHMKICAgICAgICB9OwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB7fTsKICAgICAgfQogICAgfQogIH1dKTsKCiAgcmV0dXJuIEdyb3VwU2VsZWN0b3I7Cn0oX3JlYWN0LkNvbXBvbmVudCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MsICJwcm9wVHlwZXMiLCB7CiAgam9iczogX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5LmlzUmVxdWlyZWQsCiAgYWxsSm9iSWRzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXkuaXNSZXF1aXJlZCwKICByZWZyZXNoSm9iczogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZAp9KSwgX3RlbXApKTsKZXhwb3J0cy5Hcm91cFNlbGVjdG9yID0gR3JvdXBTZWxlY3Rvcjs="},null]}