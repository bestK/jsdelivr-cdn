{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/url_state/initialize_redux_by_url.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/url_state/initialize_redux_by_url.js","mtime":1585205047763},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmRpc3BhdGNoU2V0SW5pdGlhbFN0YXRlRnJvbVVybCA9IHZvaWQgMDsKCnZhciBfZnAgPSByZXF1aXJlKCJsb2Rhc2gvZnAiKTsKCnZhciBfYWN0aW9ucyA9IHJlcXVpcmUoIi4uLy4uL3N0b3JlL2FjdGlvbnMiKTsKCnZhciBfc2VhcmNoX2JhciA9IHJlcXVpcmUoIi4uL3NlYXJjaF9iYXIiKTsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi9jb25zdGFudHMiKTsKCnZhciBfaGVscGVycyA9IHJlcXVpcmUoIi4vaGVscGVycyIpOwoKdmFyIF9ub3JtYWxpemVfdGltZV9yYW5nZSA9IHJlcXVpcmUoIi4vbm9ybWFsaXplX3RpbWVfcmFuZ2UiKTsKCnZhciBfaGVscGVyczIgPSByZXF1aXJlKCIuLi9vcGVuX3RpbWVsaW5lL2hlbHBlcnMiKTsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgZGlzcGF0Y2hTZXRJbml0aWFsU3RhdGVGcm9tVXJsID0gZnVuY3Rpb24gZGlzcGF0Y2hTZXRJbml0aWFsU3RhdGVGcm9tVXJsKGRpc3BhdGNoKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7CiAgICB2YXIgYXBvbGxvQ2xpZW50ID0gX3JlZi5hcG9sbG9DbGllbnQsCiAgICAgICAgZGV0YWlsTmFtZSA9IF9yZWYuZGV0YWlsTmFtZSwKICAgICAgICBpbmRleFBhdHRlcm4gPSBfcmVmLmluZGV4UGF0dGVybiwKICAgICAgICBwYWdlTmFtZSA9IF9yZWYucGFnZU5hbWUsCiAgICAgICAgdXBkYXRlVGltZWxpbmUgPSBfcmVmLnVwZGF0ZVRpbWVsaW5lLAogICAgICAgIHVwZGF0ZVRpbWVsaW5lSXNMb2FkaW5nID0gX3JlZi51cGRhdGVUaW1lbGluZUlzTG9hZGluZywKICAgICAgICB1cmxTdGF0ZVRvVXBkYXRlID0gX3JlZi51cmxTdGF0ZVRvVXBkYXRlOwogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgdXJsU3RhdGVUb1VwZGF0ZS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMikgewogICAgICAgIHZhciB1cmxLZXkgPSBfcmVmMi51cmxLZXksCiAgICAgICAgICAgIG5ld1VybFN0YXRlU3RyaW5nID0gX3JlZjIubmV3VXJsU3RhdGVTdHJpbmc7CgogICAgICAgIGlmICh1cmxLZXkgPT09IF9jb25zdGFudHMuQ09OU1RBTlRTLnRpbWVyYW5nZSkgewogICAgICAgICAgdXBkYXRlVGltZXJhbmdlKG5ld1VybFN0YXRlU3RyaW5nLCBkaXNwYXRjaCk7CiAgICAgICAgfQoKICAgICAgICBpZiAodXJsS2V5ID09PSBfY29uc3RhbnRzLkNPTlNUQU5UUy5hcHBRdWVyeSAmJiBpbmRleFBhdHRlcm4gIT0gbnVsbCkgewogICAgICAgICAgdmFyIGFwcFF1ZXJ5ID0gKDAsIF9oZWxwZXJzLmRlY29kZVJpc29uVXJsU3RhdGUpKG5ld1VybFN0YXRlU3RyaW5nKTsKCiAgICAgICAgICBpZiAoYXBwUXVlcnkgIT0gbnVsbCkgewogICAgICAgICAgICBkaXNwYXRjaChfYWN0aW9ucy5pbnB1dHNBY3Rpb25zLnNldEZpbHRlclF1ZXJ5KHsKICAgICAgICAgICAgICBpZDogJ2dsb2JhbCcsCiAgICAgICAgICAgICAgcXVlcnk6IGFwcFF1ZXJ5LnF1ZXJ5LAogICAgICAgICAgICAgIGxhbmd1YWdlOiBhcHBRdWVyeS5sYW5ndWFnZQogICAgICAgICAgICB9KSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAodXJsS2V5ID09PSBfY29uc3RhbnRzLkNPTlNUQU5UUy5maWx0ZXJzKSB7CiAgICAgICAgICB2YXIgZmlsdGVycyA9ICgwLCBfaGVscGVycy5kZWNvZGVSaXNvblVybFN0YXRlKShuZXdVcmxTdGF0ZVN0cmluZyk7CgogICAgICAgICAgX3NlYXJjaF9iYXIuc2llbUZpbHRlck1hbmFnZXIuc2V0RmlsdGVycyhmaWx0ZXJzIHx8IFtdKTsKICAgICAgICB9CgogICAgICAgIGlmICh1cmxLZXkgPT09IF9jb25zdGFudHMuQ09OU1RBTlRTLnNhdmVkUXVlcnkpIHsKICAgICAgICAgIHZhciBzYXZlZFF1ZXJ5SWQgPSAoMCwgX2hlbHBlcnMuZGVjb2RlUmlzb25VcmxTdGF0ZSkobmV3VXJsU3RhdGVTdHJpbmcpOwoKICAgICAgICAgIGlmIChzYXZlZFF1ZXJ5SWQgIT0gbnVsbCAmJiBzYXZlZFF1ZXJ5SWQgIT09ICcnKSB7CiAgICAgICAgICAgIF9zZWFyY2hfYmFyLnNhdmVkUXVlcnlTZXJ2aWNlLmdldFNhdmVkUXVlcnkoc2F2ZWRRdWVyeUlkKS50aGVuKGZ1bmN0aW9uIChzYXZlZFF1ZXJ5RGF0YSkgewogICAgICAgICAgICAgIF9zZWFyY2hfYmFyLnNpZW1GaWx0ZXJNYW5hZ2VyLnNldEZpbHRlcnMoc2F2ZWRRdWVyeURhdGEuYXR0cmlidXRlcy5maWx0ZXJzIHx8IFtdKTsKCiAgICAgICAgICAgICAgZGlzcGF0Y2goX2FjdGlvbnMuaW5wdXRzQWN0aW9ucy5zZXRGaWx0ZXJRdWVyeShfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgICAgICAgIGlkOiAnZ2xvYmFsJwogICAgICAgICAgICAgIH0sIHNhdmVkUXVlcnlEYXRhLmF0dHJpYnV0ZXMucXVlcnkpKSk7CiAgICAgICAgICAgICAgZGlzcGF0Y2goX2FjdGlvbnMuaW5wdXRzQWN0aW9ucy5zZXRTYXZlZFF1ZXJ5KHsKICAgICAgICAgICAgICAgIGlkOiAnZ2xvYmFsJywKICAgICAgICAgICAgICAgIHNhdmVkUXVlcnk6IHNhdmVkUXVlcnlEYXRhCiAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICh1cmxLZXkgPT09IF9jb25zdGFudHMuQ09OU1RBTlRTLnRpbWVsaW5lKSB7CiAgICAgICAgICB2YXIgdGltZWxpbmUgPSAoMCwgX2hlbHBlcnMuZGVjb2RlUmlzb25VcmxTdGF0ZSkobmV3VXJsU3RhdGVTdHJpbmcpOwoKICAgICAgICAgIGlmICh0aW1lbGluZSAhPSBudWxsICYmIHRpbWVsaW5lLmlkICE9PSAnJykgewogICAgICAgICAgICAoMCwgX2hlbHBlcnMyLnF1ZXJ5VGltZWxpbmVCeUlkKSh7CiAgICAgICAgICAgICAgYXBvbGxvQ2xpZW50OiBhcG9sbG9DbGllbnQsCiAgICAgICAgICAgICAgZHVwbGljYXRlOiBmYWxzZSwKICAgICAgICAgICAgICB0aW1lbGluZUlkOiB0aW1lbGluZS5pZCwKICAgICAgICAgICAgICBvcGVuVGltZWxpbmU6IHRpbWVsaW5lLmlzT3BlbiwKICAgICAgICAgICAgICB1cGRhdGVJc0xvYWRpbmc6IHVwZGF0ZVRpbWVsaW5lSXNMb2FkaW5nLAogICAgICAgICAgICAgIHVwZGF0ZVRpbWVsaW5lOiB1cGRhdGVUaW1lbGluZQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKICB9Owp9OwoKZXhwb3J0cy5kaXNwYXRjaFNldEluaXRpYWxTdGF0ZUZyb21VcmwgPSBkaXNwYXRjaFNldEluaXRpYWxTdGF0ZUZyb21Vcmw7Cgp2YXIgdXBkYXRlVGltZXJhbmdlID0gZnVuY3Rpb24gdXBkYXRlVGltZXJhbmdlKG5ld1VybFN0YXRlU3RyaW5nLCBkaXNwYXRjaCkgewogIHZhciB0aW1lcmFuZ2VTdGF0ZURhdGEgPSAoMCwgX2hlbHBlcnMuZGVjb2RlUmlzb25VcmxTdGF0ZSkobmV3VXJsU3RhdGVTdHJpbmcpOwogIHZhciBnbG9iYWxJZCA9ICdnbG9iYWwnOwogIHZhciBnbG9iYWxMaW5rVG8gPSB7CiAgICBsaW5rVG86ICgwLCBfZnAuZ2V0KSgnZ2xvYmFsLmxpbmtUbycsIHRpbWVyYW5nZVN0YXRlRGF0YSkKICB9OwogIHZhciBnbG9iYWxUeXBlID0gKDAsIF9mcC5nZXQpKCdnbG9iYWwudGltZXJhbmdlLmtpbmQnLCB0aW1lcmFuZ2VTdGF0ZURhdGEpOwogIHZhciB0aW1lbGluZUlkID0gJ3RpbWVsaW5lJzsKICB2YXIgdGltZWxpbmVMaW5rVG8gPSB7CiAgICBsaW5rVG86ICgwLCBfZnAuZ2V0KSgndGltZWxpbmUubGlua1RvJywgdGltZXJhbmdlU3RhdGVEYXRhKQogIH07CiAgdmFyIHRpbWVsaW5lVHlwZSA9ICgwLCBfZnAuZ2V0KSgndGltZWxpbmUudGltZXJhbmdlLmtpbmQnLCB0aW1lcmFuZ2VTdGF0ZURhdGEpOwoKICBpZiAoKDAsIF9mcC5pc0VtcHR5KShnbG9iYWxMaW5rVG8ubGlua1RvKSkgewogICAgZGlzcGF0Y2goX2FjdGlvbnMuaW5wdXRzQWN0aW9ucy5yZW1vdmVHbG9iYWxMaW5rVG8oKSk7CiAgfSBlbHNlIHsKICAgIGRpc3BhdGNoKF9hY3Rpb25zLmlucHV0c0FjdGlvbnMuYWRkR2xvYmFsTGlua1RvKHsKICAgICAgbGlua1RvSWQ6ICd0aW1lbGluZScKICAgIH0pKTsKICB9CgogIGlmICgoMCwgX2ZwLmlzRW1wdHkpKHRpbWVsaW5lTGlua1RvLmxpbmtUbykpIHsKICAgIGRpc3BhdGNoKF9hY3Rpb25zLmlucHV0c0FjdGlvbnMucmVtb3ZlVGltZWxpbmVMaW5rVG8oKSk7CiAgfSBlbHNlIHsKICAgIGRpc3BhdGNoKF9hY3Rpb25zLmlucHV0c0FjdGlvbnMuYWRkVGltZWxpbmVMaW5rVG8oewogICAgICBsaW5rVG9JZDogJ2dsb2JhbCcKICAgIH0pKTsKICB9CgogIGlmICh0aW1lbGluZVR5cGUpIHsKICAgIGlmICh0aW1lbGluZVR5cGUgPT09ICdhYnNvbHV0ZScpIHsKICAgICAgdmFyIGFic29sdXRlUmFuZ2UgPSAoMCwgX25vcm1hbGl6ZV90aW1lX3JhbmdlLm5vcm1hbGl6ZVRpbWVSYW5nZSkoKDAsIF9mcC5nZXQpKCd0aW1lbGluZS50aW1lcmFuZ2UnLCB0aW1lcmFuZ2VTdGF0ZURhdGEpKTsKICAgICAgZGlzcGF0Y2goX2FjdGlvbnMuaW5wdXRzQWN0aW9ucy5zZXRBYnNvbHV0ZVJhbmdlRGF0ZVBpY2tlcihfb2JqZWN0U3ByZWFkKHt9LCBhYnNvbHV0ZVJhbmdlLCB7CiAgICAgICAgaWQ6IHRpbWVsaW5lSWQKICAgICAgfSkpKTsKICAgIH0KCiAgICBpZiAodGltZWxpbmVUeXBlID09PSAncmVsYXRpdmUnKSB7CiAgICAgIHZhciByZWxhdGl2ZVJhbmdlID0gKDAsIF9ub3JtYWxpemVfdGltZV9yYW5nZS5ub3JtYWxpemVUaW1lUmFuZ2UpKCgwLCBfZnAuZ2V0KSgndGltZWxpbmUudGltZXJhbmdlJywgdGltZXJhbmdlU3RhdGVEYXRhKSk7CiAgICAgIGRpc3BhdGNoKF9hY3Rpb25zLmlucHV0c0FjdGlvbnMuc2V0UmVsYXRpdmVSYW5nZURhdGVQaWNrZXIoX29iamVjdFNwcmVhZCh7fSwgcmVsYXRpdmVSYW5nZSwgewogICAgICAgIGlkOiB0aW1lbGluZUlkCiAgICAgIH0pKSk7CiAgICB9CiAgfQoKICBpZiAoZ2xvYmFsVHlwZSkgewogICAgaWYgKGdsb2JhbFR5cGUgPT09ICdhYnNvbHV0ZScpIHsKICAgICAgdmFyIF9hYnNvbHV0ZVJhbmdlID0gKDAsIF9ub3JtYWxpemVfdGltZV9yYW5nZS5ub3JtYWxpemVUaW1lUmFuZ2UpKCgwLCBfZnAuZ2V0KSgnZ2xvYmFsLnRpbWVyYW5nZScsIHRpbWVyYW5nZVN0YXRlRGF0YSkpOwoKICAgICAgZGlzcGF0Y2goX2FjdGlvbnMuaW5wdXRzQWN0aW9ucy5zZXRBYnNvbHV0ZVJhbmdlRGF0ZVBpY2tlcihfb2JqZWN0U3ByZWFkKHt9LCBfYWJzb2x1dGVSYW5nZSwgewogICAgICAgIGlkOiBnbG9iYWxJZAogICAgICB9KSkpOwogICAgfQoKICAgIGlmIChnbG9iYWxUeXBlID09PSAncmVsYXRpdmUnKSB7CiAgICAgIHZhciBfcmVsYXRpdmVSYW5nZSA9ICgwLCBfbm9ybWFsaXplX3RpbWVfcmFuZ2Uubm9ybWFsaXplVGltZVJhbmdlKSgoMCwgX2ZwLmdldCkoJ2dsb2JhbC50aW1lcmFuZ2UnLCB0aW1lcmFuZ2VTdGF0ZURhdGEpKTsKCiAgICAgIGRpc3BhdGNoKF9hY3Rpb25zLmlucHV0c0FjdGlvbnMuc2V0UmVsYXRpdmVSYW5nZURhdGVQaWNrZXIoX29iamVjdFNwcmVhZCh7fSwgX3JlbGF0aXZlUmFuZ2UsIHsKICAgICAgICBpZDogZ2xvYmFsSWQKICAgICAgfSkpKTsKICAgIH0KICB9Cn07"},null]}