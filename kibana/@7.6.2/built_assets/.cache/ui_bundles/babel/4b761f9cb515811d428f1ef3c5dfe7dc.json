{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/interpreter/public/canvas/load_legacy_server_function_wrappers.js","dependencies":[{"path":"src/legacy/core_plugins/interpreter/public/canvas/load_legacy_server_function_wrappers.js","mtime":1585205039368},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZ2V0VHlwZSA9IGdldFR5cGU7CmV4cG9ydHMuc2VyaWFsaXplUHJvdmlkZXIgPSBzZXJpYWxpemVQcm92aWRlcjsKZXhwb3J0cy5sb2FkTGVnYWN5U2VydmVyRnVuY3Rpb25XcmFwcGVycyA9IHZvaWQgMDsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX25ld19wbGF0Zm9ybSA9IHJlcXVpcmUoInVpL25ld19wbGF0Zm9ybSIpOwoKdmFyIF9jb25zdHMgPSByZXF1aXJlKCIuL2NvbnN0cyIpOwoKdmFyIF9iYXRjaGVkX2ZldGNoID0gcmVxdWlyZSgiLi9iYXRjaGVkX2ZldGNoIik7CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSAic3ltYm9sIikgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9IGVsc2UgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0KCiAgcmV0dXJuIF90eXBlb2Yob2JqKTsKfQoKZnVuY3Rpb24gZ2V0VHlwZShub2RlKSB7CiAgaWYgKG5vZGUgPT0gbnVsbCkgcmV0dXJuICdudWxsJzsKCiAgaWYgKF90eXBlb2Yobm9kZSkgPT09ICdvYmplY3QnKSB7CiAgICBpZiAoIW5vZGUudHlwZSkgdGhyb3cgbmV3IEVycm9yKCdPYmplY3RzIG11c3QgaGF2ZSBhIHR5cGUgcHJvcGVydHknKTsKICAgIHJldHVybiBub2RlLnR5cGU7CiAgfQoKICByZXR1cm4gX3R5cGVvZihub2RlKTsKfQoKZnVuY3Rpb24gc2VyaWFsaXplUHJvdmlkZXIodHlwZXMpIHsKICByZXR1cm4gewogICAgc2VyaWFsaXplOiBwcm92aWRlcignc2VyaWFsaXplJyksCiAgICBkZXNlcmlhbGl6ZTogcHJvdmlkZXIoJ2Rlc2VyaWFsaXplJykKICB9OwoKICBmdW5jdGlvbiBwcm92aWRlcihrZXkpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoY29udGV4dCkgewogICAgICB2YXIgdHlwZSA9IGdldFR5cGUoY29udGV4dCk7CiAgICAgIHZhciB0eXBlRGVmID0gdHlwZXNbdHlwZV07CgogICAgICB2YXIgZm4gPSAoMCwgX2xvZGFzaC5nZXQpKHR5cGVEZWYsIGtleSkgfHwgX2xvZGFzaC5pZGVudGl0eTsKCiAgICAgIHJldHVybiBmbihjb250ZXh0KTsKICAgIH07CiAgfQp9Cgp2YXIgY2FjaGVkID0gbnVsbDsKCnZhciBsb2FkTGVnYWN5U2VydmVyRnVuY3Rpb25XcmFwcGVycyA9IGZ1bmN0aW9uIGxvYWRMZWdhY3lTZXJ2ZXJGdW5jdGlvbldyYXBwZXJzKCkgewogIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gbG9hZExlZ2FjeVNlcnZlckZ1bmN0aW9uV3JhcHBlcnMkKF9jb250ZXh0MikgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgaWYgKCFjYWNoZWQpIHsKICAgICAgICAgICAgY2FjaGVkID0gZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICAgICAgICB2YXIgc2VydmVyRnVuY3Rpb25MaXN0LCB0eXBlcywgX3NlcmlhbGl6ZVByb3ZpZGVyLCBzZXJpYWxpemUsIGJhdGNoOwoKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKF9uZXdfcGxhdGZvcm0ubnBTZXR1cC5jb3JlLmh0dHAuZ2V0KF9jb25zdHMuRlVOQ1RJT05TX1VSTCkpOwoKICAgICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJGdW5jdGlvbkxpc3QgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICAgICAgdHlwZXMgPSBfbmV3X3BsYXRmb3JtLm5wU2V0dXAucGx1Z2lucy5leHByZXNzaW9ucy5fX0xFR0FDWS50eXBlcy50b0pTKCk7CiAgICAgICAgICAgICAgICAgICAgICBfc2VyaWFsaXplUHJvdmlkZXIgPSBzZXJpYWxpemVQcm92aWRlcih0eXBlcyksIHNlcmlhbGl6ZSA9IF9zZXJpYWxpemVQcm92aWRlci5zZXJpYWxpemU7CiAgICAgICAgICAgICAgICAgICAgICBiYXRjaCA9ICgwLCBfYmF0Y2hlZF9mZXRjaC5iYXRjaGVkRmV0Y2gpKHsKICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2hTdHJlYW1pbmc6IF9uZXdfcGxhdGZvcm0ubnBTdGFydC5wbHVnaW5zLmJmZXRjaC5mZXRjaFN0cmVhbWluZywKICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplOiBzZXJpYWxpemUKICAgICAgICAgICAgICAgICAgICAgIH0pOyAvLyBGb3IgZXZlcnkgc2V2ZXItc2lkZSBmdW5jdGlvbiwgcmVnaXN0ZXIgYSBjbGllbnQtc2lkZQogICAgICAgICAgICAgICAgICAgICAgLy8gZnVuY3Rpb24gdGhhdCBtYXRjaGVzIGl0cyBkZWZpbml0aW9uLCBidXQgd2hpY2ggc2ltcGx5CiAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxscyB0aGUgc2VydmVyLXNpZGUgZnVuY3Rpb24gZW5kcG9pbnQuCgogICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoc2VydmVyRnVuY3Rpb25MaXN0KS5mb3JFYWNoKGZ1bmN0aW9uIChmdW5jdGlvbk5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24gZm4oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHNlcnZlckZ1bmN0aW9uTGlzdFtmdW5jdGlvbk5hbWVdLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24gZm4oY29udGV4dCwgYXJncykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmF0Y2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uTmFtZTogZnVuY3Rpb25OYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogY29udGV4dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgIF9uZXdfcGxhdGZvcm0ubnBTZXR1cC5wbHVnaW5zLmV4cHJlc3Npb25zLnJlZ2lzdGVyRnVuY3Rpb24oZm4pOwogICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KCk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIGNhY2hlZCk7CgogICAgICAgIGNhc2UgMjoKICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgIH0KICAgIH0KICB9KTsKfTsKCmV4cG9ydHMubG9hZExlZ2FjeVNlcnZlckZ1bmN0aW9uV3JhcHBlcnMgPSBsb2FkTGVnYWN5U2VydmVyRnVuY3Rpb25XcmFwcGVyczs="},null]}