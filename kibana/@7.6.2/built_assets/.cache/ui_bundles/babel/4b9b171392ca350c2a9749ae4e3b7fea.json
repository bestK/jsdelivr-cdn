{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/rollup/public/crud_app/sections/job_list/detail_panel/detail_panel.js","dependencies":[{"path":"x-pack/legacy/plugins/rollup/public/crud_app/sections/job_list/detail_panel/detail_panel.js","mtime":1585205047012},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkRldGFpbFBhbmVsID0gZXhwb3J0cy5EZXRhaWxQYW5lbFVpID0gZXhwb3J0cy5KT0JfREVUQUlMU19UQUJTID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInByb3AtdHlwZXMiKSk7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfY29tbW9uID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vY29tbW9uIik7Cgp2YXIgX3NlcnZpY2VzID0gcmVxdWlyZSgiLi4vLi4vLi4vc2VydmljZXMiKTsKCnZhciBfY29tcG9uZW50cyA9IHJlcXVpcmUoIi4uLy4uL2NvbXBvbmVudHMiKTsKCnZhciBfdGFiVG9VaU1ldHJpY01hcDsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKdmFyIEpPQl9ERVRBSUxTX1RBQlMgPSBbX2NvbXBvbmVudHMuSk9CX0RFVEFJTFNfVEFCX1NVTU1BUlksIF9jb21wb25lbnRzLkpPQl9ERVRBSUxTX1RBQl9URVJNUywgX2NvbXBvbmVudHMuSk9CX0RFVEFJTFNfVEFCX0hJU1RPR1JBTSwgX2NvbXBvbmVudHMuSk9CX0RFVEFJTFNfVEFCX01FVFJJQ1MsIF9jb21wb25lbnRzLkpPQl9ERVRBSUxTX1RBQl9KU09OXTsKZXhwb3J0cy5KT0JfREVUQUlMU19UQUJTID0gSk9CX0RFVEFJTFNfVEFCUzsKdmFyIHRhYlRvVWlNZXRyaWNNYXAgPSAoX3RhYlRvVWlNZXRyaWNNYXAgPSB7fSwgX2RlZmluZVByb3BlcnR5KF90YWJUb1VpTWV0cmljTWFwLCBfY29tcG9uZW50cy5KT0JfREVUQUlMU19UQUJfU1VNTUFSWSwgX2NvbW1vbi5VSU1fREVUQUlMX1BBTkVMX1NVTU1BUllfVEFCX0NMSUNLKSwgX2RlZmluZVByb3BlcnR5KF90YWJUb1VpTWV0cmljTWFwLCBfY29tcG9uZW50cy5KT0JfREVUQUlMU19UQUJfVEVSTVMsIF9jb21tb24uVUlNX0RFVEFJTF9QQU5FTF9URVJNU19UQUJfQ0xJQ0spLCBfZGVmaW5lUHJvcGVydHkoX3RhYlRvVWlNZXRyaWNNYXAsIF9jb21wb25lbnRzLkpPQl9ERVRBSUxTX1RBQl9ISVNUT0dSQU0sIF9jb21tb24uVUlNX0RFVEFJTF9QQU5FTF9ISVNUT0dSQU1fVEFCX0NMSUNLKSwgX2RlZmluZVByb3BlcnR5KF90YWJUb1VpTWV0cmljTWFwLCBfY29tcG9uZW50cy5KT0JfREVUQUlMU19UQUJfTUVUUklDUywgX2NvbW1vbi5VSU1fREVUQUlMX1BBTkVMX01FVFJJQ1NfVEFCX0NMSUNLKSwgX2RlZmluZVByb3BlcnR5KF90YWJUb1VpTWV0cmljTWFwLCBfY29tcG9uZW50cy5KT0JfREVUQUlMU19UQUJfSlNPTiwgX2NvbW1vbi5VSU1fREVUQUlMX1BBTkVMX0pTT05fVEFCX0NMSUNLKSwgX3RhYlRvVWlNZXRyaWNNYXApOwoKdmFyIERldGFpbFBhbmVsVWkgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKERldGFpbFBhbmVsVWksIF9Db21wb25lbnQpOwoKICBmdW5jdGlvbiBEZXRhaWxQYW5lbFVpKHByb3BzKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGV0YWlsUGFuZWxVaSk7CgogICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEZXRhaWxQYW5lbFVpKS5jYWxsKHRoaXMsIHByb3BzKSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRGV0YWlsUGFuZWxVaSwgW3sKICAgIGtleTogInJlbmRlclRhYnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclRhYnMoKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsCiAgICAgICAgICBwYW5lbFR5cGUgPSBfdGhpcyRwcm9wcy5wYW5lbFR5cGUsCiAgICAgICAgICBqb2IgPSBfdGhpcyRwcm9wcy5qb2IsCiAgICAgICAgICBvcGVuRGV0YWlsUGFuZWwgPSBfdGhpcyRwcm9wcy5vcGVuRGV0YWlsUGFuZWw7CgogICAgICBpZiAoIWpvYikgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGlkID0gam9iLmlkLAogICAgICAgICAgdGVybXMgPSBqb2IudGVybXMsCiAgICAgICAgICBoaXN0b2dyYW0gPSBqb2IuaGlzdG9ncmFtLAogICAgICAgICAgbWV0cmljcyA9IGpvYi5tZXRyaWNzOwogICAgICB2YXIgcmVuZGVyZWRUYWJzID0gW107CiAgICAgIEpPQl9ERVRBSUxTX1RBQlMubWFwKGZ1bmN0aW9uICh0YWIsIGluZGV4KSB7CiAgICAgICAgaWYgKHRhYiA9PT0gX2NvbXBvbmVudHMuSk9CX0RFVEFJTFNfVEFCX1RFUk1TICYmICF0ZXJtcy5sZW5ndGgpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmICh0YWIgPT09IF9jb21wb25lbnRzLkpPQl9ERVRBSUxTX1RBQl9ISVNUT0dSQU0gJiYgIWhpc3RvZ3JhbS5sZW5ndGgpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmICh0YWIgPT09IF9jb21wb25lbnRzLkpPQl9ERVRBSUxTX1RBQl9NRVRSSUNTICYmICFtZXRyaWNzLmxlbmd0aCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIGlzU2VsZWN0ZWQgPSB0YWIgPT09IHBhbmVsVHlwZTsKICAgICAgICByZW5kZXJlZFRhYnMucHVzaChfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGFiLCB7CiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAoMCwgX3NlcnZpY2VzLnRyYWNrVWlNZXRyaWMpKF9zZXJ2aWNlcy5NRVRSSUNfVFlQRS5DTElDSywgdGFiVG9VaU1ldHJpY01hcFt0YWJdKTsKICAgICAgICAgICAgb3BlbkRldGFpbFBhbmVsKHsKICAgICAgICAgICAgICBwYW5lbFR5cGU6IHRhYiwKICAgICAgICAgICAgICBqb2JJZDogaWQKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LAogICAgICAgICAgaXNTZWxlY3RlZDogaXNTZWxlY3RlZCwKICAgICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJkZXRhaWxQYW5lbFRhYiIuY29uY2F0KGlzU2VsZWN0ZWQgPyAnU2VsZWN0ZWQnIDogJycpLAogICAgICAgICAga2V5OiBpbmRleAogICAgICAgIH0sIF9jb21wb25lbnRzLnRhYlRvSHVtYW5pemVkTWFwW3RhYl0pKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgIHNpemU6ICJzIgogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRhYnMsIG51bGwsIHJlbmRlcmVkVGFicykpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlckpvYiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVySm9iKCkgewogICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcywKICAgICAgICAgIHBhbmVsVHlwZSA9IF90aGlzJHByb3BzMi5wYW5lbFR5cGUsCiAgICAgICAgICBqb2IgPSBfdGhpcyRwcm9wczIuam9iLAogICAgICAgICAgaW50bCA9IF90aGlzJHByb3BzMi5pbnRsOwogICAgICB2YXIgc3RhdHVzID0gam9iLnN0YXR1cywKICAgICAgICAgIGRvY3VtZW50c1Byb2Nlc3NlZCA9IGpvYi5kb2N1bWVudHNQcm9jZXNzZWQsCiAgICAgICAgICBwYWdlc1Byb2Nlc3NlZCA9IGpvYi5wYWdlc1Byb2Nlc3NlZCwKICAgICAgICAgIHJvbGx1cHNJbmRleGVkID0gam9iLnJvbGx1cHNJbmRleGVkLAogICAgICAgICAgdHJpZ2dlckNvdW50ID0gam9iLnRyaWdnZXJDb3VudCwKICAgICAgICAgIGpzb24gPSBqb2IuanNvbjsKICAgICAgdmFyIHN0YXRzID0gewogICAgICAgIHN0YXR1czogc3RhdHVzLAogICAgICAgIGRvY3VtZW50c1Byb2Nlc3NlZDogZG9jdW1lbnRzUHJvY2Vzc2VkLAogICAgICAgIHBhZ2VzUHJvY2Vzc2VkOiBwYWdlc1Byb2Nlc3NlZCwKICAgICAgICByb2xsdXBzSW5kZXhlZDogcm9sbHVwc0luZGV4ZWQsCiAgICAgICAgdHJpZ2dlckNvdW50OiB0cmlnZ2VyQ291bnQKICAgICAgfTsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmx5b3V0Qm9keSwgewogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJyb2xsdXBKb2JEZXRhaWxUYWJDb250ZW50IgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRXJyb3JCb3VuZGFyeSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tcG9uZW50cy5Kb2JEZXRhaWxzLCB7CiAgICAgICAgdGFiOiBwYW5lbFR5cGUsCiAgICAgICAgam9iOiBqb2IsCiAgICAgICAgc3RhdHM6IHN0YXRzLAogICAgICAgIGpzb246IGpzb24KICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZseW91dEZvb3RlciwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICAgIGp1c3RpZnlDb250ZW50OiAiZmxleEVuZCIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tcG9uZW50cy5Kb2JBY3Rpb25NZW51LCB7CiAgICAgICAgaWNvblNpZGU6ICJsZWZ0IiwKICAgICAgICBqb2JzOiBbam9iXSwKICAgICAgICBhbmNob3JQb3NpdGlvbjogInVwUmlnaHQiLAogICAgICAgIGRldGFpbFBhbmVsOiB0cnVlLAogICAgICAgIGljb25UeXBlOiAiYXJyb3dVcCIsCiAgICAgICAgbGFiZWw6IGludGwuZm9ybWF0TWVzc2FnZSh7CiAgICAgICAgICBpZDogJ3hwYWNrLnJvbGx1cEpvYnMuZGV0YWlsUGFuZWwuam9iQWN0aW9uTWVudS5idXR0b25MYWJlbCcsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ01hbmFnZScKICAgICAgICB9KQogICAgICB9KSkpKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLAogICAgICAgICAgaXNPcGVuID0gX3RoaXMkcHJvcHMzLmlzT3BlbiwKICAgICAgICAgIGlzTG9hZGluZyA9IF90aGlzJHByb3BzMy5pc0xvYWRpbmcsCiAgICAgICAgICBjbG9zZURldGFpbFBhbmVsID0gX3RoaXMkcHJvcHMzLmNsb3NlRGV0YWlsUGFuZWwsCiAgICAgICAgICBqb2IgPSBfdGhpcyRwcm9wczMuam9iLAogICAgICAgICAgam9iSWQgPSBfdGhpcyRwcm9wczMuam9iSWQ7CgogICAgICBpZiAoIWlzT3BlbikgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICB2YXIgY29udGVudDsKCiAgICAgIGlmIChpc0xvYWRpbmcpIHsKICAgICAgICBjb250ZW50ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZseW91dEJvZHksIHsKICAgICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJyb2xsdXBKb2JEZXRhaWxMb2FkaW5nIgogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAiZmxleFN0YXJ0IiwKICAgICAgICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiLAogICAgICAgICAgZ3V0dGVyU2l6ZTogInMiCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgICBncm93OiBmYWxzZQogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlMb2FkaW5nU3Bpbm5lciwgewogICAgICAgICAgc2l6ZTogIm0iCiAgICAgICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICAgIGdyb3c6IGZhbHNlCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0Q29sb3IsIHsKICAgICAgICAgIGNvbG9yOiAic3ViZHVlZCIKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ4cGFjay5yb2xsdXBKb2JzLmRldGFpbFBhbmVsLmxvYWRpbmdMYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkxvYWRpbmcgcm9sbHVwIGpvYi4uLiIKICAgICAgICB9KSkpKSkpOwogICAgICB9IGVsc2UgaWYgKGpvYikgewogICAgICAgIGNvbnRlbnQgPSB0aGlzLnJlbmRlckpvYigpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnRlbnQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmx5b3V0Qm9keSwgewogICAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInJvbGx1cEpvYkRldGFpbEpvYk5vdEZvdW5kIgogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAiZmxleFN0YXJ0IiwKICAgICAgICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiLAogICAgICAgICAgZ3V0dGVyU2l6ZTogInMiCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgICBncm93OiBmYWxzZQogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlJY29uLCB7CiAgICAgICAgICBzaXplOiAibSIsCiAgICAgICAgICB0eXBlOiAiYWxlcnQiLAogICAgICAgICAgY29sb3I6ICJkYW5nZXIiCiAgICAgICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICAgIGdyb3c6IGZhbHNlCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0Q29sb3IsIHsKICAgICAgICAgIGNvbG9yOiAic3ViZHVlZCIKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ4cGFjay5yb2xsdXBKb2JzLmRldGFpbFBhbmVsLm5vdEZvdW5kTGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJSb2xsdXAgam9iIG5vdCBmb3VuZCIKICAgICAgICB9KSkpKSkpOwogICAgICB9CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZseW91dCwgewogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJyb2xsdXBKb2JEZXRhaWxGbHlvdXQiLAogICAgICAgIG9uQ2xvc2U6IGNsb3NlRGV0YWlsUGFuZWwsCiAgICAgICAgImFyaWEtbGFiZWxsZWRieSI6ICJyb2xsdXBKb2JEZXRhaWxzRmx5b3V0VGl0bGUiLAogICAgICAgIHNpemU6ICJtIiwKICAgICAgICBtYXhXaWR0aDogNDAwCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbHlvdXRIZWFkZXIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICAgIHNpemU6ICJtIiwKICAgICAgICBpZDogInJvbGx1cEpvYkRldGFpbHNGbHlvdXRUaXRsZSIsCiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInJvbGx1cEpvYkRldGFpbHNGbHlvdXRUaXRsZSIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDIiLCBudWxsLCBqb2JJZCkpLCB0aGlzLnJlbmRlclRhYnMoKSksIGNvbnRlbnQpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIERldGFpbFBhbmVsVWk7Cn0oX3JlYWN0LkNvbXBvbmVudCk7CgpleHBvcnRzLkRldGFpbFBhbmVsVWkgPSBEZXRhaWxQYW5lbFVpOwoKX2RlZmluZVByb3BlcnR5KERldGFpbFBhbmVsVWksICJwcm9wVHlwZXMiLCB7CiAgaXNPcGVuOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLAogIGlzTG9hZGluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsCiAgam9iOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LAogIGpvYklkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLAogIHBhbmVsVHlwZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKEpPQl9ERVRBSUxTX1RBQlMpLAogIGNsb3NlRGV0YWlsUGFuZWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgb3BlbkRldGFpbFBhbmVsOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkCn0pOwoKX2RlZmluZVByb3BlcnR5KERldGFpbFBhbmVsVWksICJkZWZhdWx0UHJvcHMiLCB7CiAgcGFuZWxUeXBlOiBKT0JfREVUQUlMU19UQUJTWzBdCn0pOwoKdmFyIERldGFpbFBhbmVsID0gKDAsIF9yZWFjdDIuaW5qZWN0STE4bikoRGV0YWlsUGFuZWxVaSk7CmV4cG9ydHMuRGV0YWlsUGFuZWwgPSBEZXRhaWxQYW5lbDs="},null]}