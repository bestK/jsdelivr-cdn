{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/snapshot_restore/public/app/sections/repository_add/repository_add.js","dependencies":[{"path":"x-pack/legacy/plugins/snapshot_restore/public/app/sections/repository_add/repository_add.js","mtime":1585205048251},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlJlcG9zaXRvcnlBZGQgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3F1ZXJ5c3RyaW5nID0gcmVxdWlyZSgicXVlcnlzdHJpbmciKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2NvbXBvbmVudHMgPSByZXF1aXJlKCIuLi8uLi9jb21wb25lbnRzIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uL2NvbnN0YW50cyIpOwoKdmFyIF9pbmRleCA9IHJlcXVpcmUoIi4uLy4uL2luZGV4Iik7Cgp2YXIgX25hdmlnYXRpb24gPSByZXF1aXJlKCIuLi8uLi9zZXJ2aWNlcy9uYXZpZ2F0aW9uIik7Cgp2YXIgX2h0dHAgPSByZXF1aXJlKCIuLi8uLi9zZXJ2aWNlcy9odHRwIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KCnZhciBSZXBvc2l0b3J5QWRkID0gZnVuY3Rpb24gUmVwb3NpdG9yeUFkZChfcmVmKSB7CiAgdmFyIGhpc3RvcnkgPSBfcmVmLmhpc3RvcnksCiAgICAgIHNlYXJjaCA9IF9yZWYubG9jYXRpb24uc2VhcmNoOwoKICB2YXIgX3VzZUFwcERlcGVuZGVuY2llcyA9ICgwLCBfaW5kZXgudXNlQXBwRGVwZW5kZW5jaWVzKSgpLAogICAgICBGb3JtYXR0ZWRNZXNzYWdlID0gX3VzZUFwcERlcGVuZGVuY2llcy5jb3JlLmkxOG4uRm9ybWF0dGVkTWVzc2FnZTsKCiAgdmFyIHNlY3Rpb24gPSAncmVwb3NpdG9yaWVzJzsKCiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKGZhbHNlKSwKICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksCiAgICAgIGlzU2F2aW5nID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0SXNTYXZpbmcgPSBfdXNlU3RhdGUyWzFdOwoKICB2YXIgX3VzZVN0YXRlMyA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKG51bGwpLAogICAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksCiAgICAgIHNhdmVFcnJvciA9IF91c2VTdGF0ZTRbMF0sCiAgICAgIHNldFNhdmVFcnJvciA9IF91c2VTdGF0ZTRbMV07IC8vIFNldCBicmVhZGNydW1iIGFuZCBwYWdlIHRpdGxlCgoKICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgX25hdmlnYXRpb24uYnJlYWRjcnVtYlNlcnZpY2Uuc2V0QnJlYWRjcnVtYnMoJ3JlcG9zaXRvcnlBZGQnKTsKCiAgICBfbmF2aWdhdGlvbi5kb2NUaXRsZVNlcnZpY2Uuc2V0VGl0bGUoJ3JlcG9zaXRvcnlBZGQnKTsKICB9LCBbXSk7CgogIHZhciBvblNhdmUgPSBmdW5jdGlvbiBvblNhdmUobmV3UmVwb3NpdG9yeSkgewogICAgdmFyIG5hbWUsIF9yZWYyLCBlcnJvciwgX3BhcnNlLCByZWRpcmVjdDsKCiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIG9uU2F2ZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHNldElzU2F2aW5nKHRydWUpOwogICAgICAgICAgICBzZXRTYXZlRXJyb3IobnVsbCk7CiAgICAgICAgICAgIG5hbWUgPSBuZXdSZXBvc2l0b3J5Lm5hbWU7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKCgwLCBfaHR0cC5hZGRSZXBvc2l0b3J5KShuZXdSZXBvc2l0b3J5KSk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBfcmVmMiA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIGVycm9yID0gX3JlZjIuZXJyb3I7CiAgICAgICAgICAgIHNldElzU2F2aW5nKGZhbHNlKTsKCiAgICAgICAgICAgIGlmIChlcnJvcikgewogICAgICAgICAgICAgIHNldFNhdmVFcnJvcihlcnJvcik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgX3BhcnNlID0gKDAsIF9xdWVyeXN0cmluZy5wYXJzZSkoc2VhcmNoLnJlcGxhY2UoL15cPy8sICcnKSksIHJlZGlyZWN0ID0gX3BhcnNlLnJlZGlyZWN0OwogICAgICAgICAgICAgIGhpc3RvcnkucHVzaChyZWRpcmVjdCA/IHJlZGlyZWN0IDogIiIuY29uY2F0KF9jb25zdGFudHMuQkFTRV9QQVRILCAiLyIpLmNvbmNhdChzZWN0aW9uLCAiLyIpLmNvbmNhdChuYW1lKSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfTsKCiAgdmFyIGVtcHR5UmVwb3NpdG9yeSA9IHsKICAgIG5hbWU6ICcnLAogICAgdHlwZTogbnVsbCwKICAgIHNldHRpbmdzOiB7fQogIH07CgogIHZhciByZW5kZXJTYXZlRXJyb3IgPSBmdW5jdGlvbiByZW5kZXJTYXZlRXJyb3IoKSB7CiAgICByZXR1cm4gc2F2ZUVycm9yID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tcG9uZW50cy5TZWN0aW9uRXJyb3IsIHsKICAgICAgdGl0bGU6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLmFkZFJlcG9zaXRvcnkuc2F2aW5nUmVwb3NpdG9yeUVycm9yVGl0bGUiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQ2Fubm90IHJlZ2lzdGVyIG5ldyByZXBvc2l0b3J5IgogICAgICB9KSwKICAgICAgZXJyb3I6IHNhdmVFcnJvciwKICAgICAgImRhdGEtdGVzdC1zdWJqIjogInNhdmVSZXBvc2l0b3J5QXBpRXJyb3IiCiAgICB9KSA6IG51bGw7CiAgfTsKCiAgdmFyIGNsZWFyU2F2ZUVycm9yID0gZnVuY3Rpb24gY2xlYXJTYXZlRXJyb3IoKSB7CiAgICBzZXRTYXZlRXJyb3IobnVsbCk7CiAgfTsKCiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYWdlQm9keSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhZ2VDb250ZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgIHNpemU6ICJsIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgxIiwgewogICAgImRhdGEtdGVzdC1zdWJqIjogInBhZ2VUaXRsZSIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLmFkZFJlcG9zaXRvcnlUaXRsZSIsCiAgICBkZWZhdWx0TWVzc2FnZTogIlJlZ2lzdGVyIHJlcG9zaXRvcnkiCiAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogImwiCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudHMuUmVwb3NpdG9yeUZvcm0sIHsKICAgIHJlcG9zaXRvcnk6IGVtcHR5UmVwb3NpdG9yeSwKICAgIGlzU2F2aW5nOiBpc1NhdmluZywKICAgIHNhdmVFcnJvcjogcmVuZGVyU2F2ZUVycm9yKCksCiAgICBjbGVhclNhdmVFcnJvcjogY2xlYXJTYXZlRXJyb3IsCiAgICBvblNhdmU6IG9uU2F2ZQogIH0pKSk7Cn07CgpleHBvcnRzLlJlcG9zaXRvcnlBZGQgPSBSZXBvc2l0b3J5QWRkOw=="},null]}