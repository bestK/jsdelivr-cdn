{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/timeseriesexplorer/timeseriesexplorer_utils/get_focus_data.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/timeseriesexplorer/timeseriesexplorer_utils/get_focus_data.js","mtime":1585205046004},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmdldEZvY3VzRGF0YSA9IGdldEZvY3VzRGF0YTsKCnZhciBfcnhqcyA9IHJlcXVpcmUoInJ4anMiKTsKCnZhciBfb3BlcmF0b3JzID0gcmVxdWlyZSgicnhqcy9vcGVyYXRvcnMiKTsKCnZhciBfY2hyb21lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJ1aS9jaHJvbWUiKSk7Cgp2YXIgX21sX2FwaV9zZXJ2aWNlID0gcmVxdWlyZSgiLi4vLi4vc2VydmljZXMvbWxfYXBpX3NlcnZpY2UiKTsKCnZhciBfc2VhcmNoID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vY29tbW9uL2NvbnN0YW50cy9zZWFyY2giKTsKCnZhciBfdGltZXNlcmllc19zZWFyY2hfc2VydmljZSA9IHJlcXVpcmUoIi4uL3RpbWVzZXJpZXNfc2VhcmNoX3NlcnZpY2UiKTsKCnZhciBfcmVzdWx0c19zZXJ2aWNlID0gcmVxdWlyZSgiLi4vLi4vc2VydmljZXMvcmVzdWx0c19zZXJ2aWNlIik7Cgp2YXIgX3RpbWVzZXJpZXNleHBsb3Jlcl9jb25zdGFudHMgPSByZXF1aXJlKCIuLi90aW1lc2VyaWVzZXhwbG9yZXJfY29uc3RhbnRzIik7Cgp2YXIgX3RpbWVzZXJpZXNleHBsb3Jlcl91dGlscyA9IHJlcXVpcmUoIi4vdGltZXNlcmllc2V4cGxvcmVyX3V0aWxzIik7Cgp2YXIgX2ZvcmVjYXN0X3NlcnZpY2UgPSByZXF1aXJlKCIuLi8uLi9zZXJ2aWNlcy9mb3JlY2FzdF9zZXJ2aWNlIik7Cgp2YXIgX2pvYl91dGlscyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2NvbW1vbi91dGlsL2pvYl91dGlscyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKdmFyIG1sQW5ub3RhdGlvbnNFbmFibGVkID0gX2Nocm9tZS5kZWZhdWx0LmdldEluamVjdGVkKCdtbEFubm90YXRpb25zRW5hYmxlZCcsIGZhbHNlKTsKCmZ1bmN0aW9uIGdldEZvY3VzRGF0YShjcml0ZXJpYUZpZWxkcywgZGV0ZWN0b3JJbmRleCwgZm9jdXNBZ2dyZWdhdGlvbkludGVydmFsLCBmb3JlY2FzdElkLCBtb2RlbFBsb3RFbmFibGVkLCBub25CbGFua0VudGl0aWVzLCBzZWFyY2hCb3VuZHMsIHNlbGVjdGVkSm9iKSB7CiAgcmV0dXJuICgwLCBfcnhqcy5mb3JrSm9pbikoWy8vIFF1ZXJ5IDEgLSBsb2FkIG1ldHJpYyBkYXRhIGFjcm9zcyBzZWxlY3RlZCB0aW1lIHJhbmdlLgogIF90aW1lc2VyaWVzX3NlYXJjaF9zZXJ2aWNlLm1sVGltZVNlcmllc1NlYXJjaFNlcnZpY2UuZ2V0TWV0cmljRGF0YShzZWxlY3RlZEpvYiwgZGV0ZWN0b3JJbmRleCwgbm9uQmxhbmtFbnRpdGllcywgc2VhcmNoQm91bmRzLm1pbi52YWx1ZU9mKCksIHNlYXJjaEJvdW5kcy5tYXgudmFsdWVPZigpLCBmb2N1c0FnZ3JlZ2F0aW9uSW50ZXJ2YWwuZXhwcmVzc2lvbiksIC8vIFF1ZXJ5IDIgLSBsb2FkIGFsbCB0aGUgcmVjb3JkcyBhY3Jvc3Mgc2VsZWN0ZWQgdGltZSByYW5nZSBmb3IgdGhlIGNoYXJ0IGFub21hbHkgbWFya2Vycy4KICBfcmVzdWx0c19zZXJ2aWNlLm1sUmVzdWx0c1NlcnZpY2UuZ2V0UmVjb3Jkc0ZvckNyaXRlcmlhKFtzZWxlY3RlZEpvYi5qb2JfaWRdLCBjcml0ZXJpYUZpZWxkcywgMCwgc2VhcmNoQm91bmRzLm1pbi52YWx1ZU9mKCksIHNlYXJjaEJvdW5kcy5tYXgudmFsdWVPZigpLCBfc2VhcmNoLkFOT01BTElFU19UQUJMRV9ERUZBVUxUX1FVRVJZX1NJWkUpLCAvLyBRdWVyeSAzIC0gbG9hZCBhbnkgc2NoZWR1bGVkIGV2ZW50cyBmb3IgdGhlIHNlbGVjdGVkIGpvYi4KICBfcmVzdWx0c19zZXJ2aWNlLm1sUmVzdWx0c1NlcnZpY2UuZ2V0U2NoZWR1bGVkRXZlbnRzQnlCdWNrZXQoW3NlbGVjdGVkSm9iLmpvYl9pZF0sIHNlYXJjaEJvdW5kcy5taW4udmFsdWVPZigpLCBzZWFyY2hCb3VuZHMubWF4LnZhbHVlT2YoKSwgZm9jdXNBZ2dyZWdhdGlvbkludGVydmFsLmV4cHJlc3Npb24sIDEsIF90aW1lc2VyaWVzZXhwbG9yZXJfY29uc3RhbnRzLk1BWF9TQ0hFRFVMRURfRVZFTlRTKSwgLy8gUXVlcnkgNCAtIGxvYWQgYW55IGFubm90YXRpb25zIGZvciB0aGUgc2VsZWN0ZWQgam9iLgogIG1sQW5ub3RhdGlvbnNFbmFibGVkID8gX21sX2FwaV9zZXJ2aWNlLm1sLmFubm90YXRpb25zLmdldEFubm90YXRpb25zKHsKICAgIGpvYklkczogW3NlbGVjdGVkSm9iLmpvYl9pZF0sCiAgICBlYXJsaWVzdE1zOiBzZWFyY2hCb3VuZHMubWluLnZhbHVlT2YoKSwKICAgIGxhdGVzdE1zOiBzZWFyY2hCb3VuZHMubWF4LnZhbHVlT2YoKSwKICAgIG1heEFubm90YXRpb25zOiBfc2VhcmNoLkFOTk9UQVRJT05TX1RBQkxFX0RFRkFVTFRfUVVFUllfU0laRQogIH0pLnBpcGUoKDAsIF9vcGVyYXRvcnMuY2F0Y2hFcnJvcikoZnVuY3Rpb24gKCkgewogICAgLy8gc2lsZW50IGZhaWwKICAgIHJldHVybiAoMCwgX3J4anMub2YpKHsKICAgICAgYW5ub3RhdGlvbnM6IHt9CiAgICB9KTsKICB9KSkgOiAoMCwgX3J4anMub2YpKG51bGwpLCAvLyBQbHVzIHF1ZXJ5IGZvciBmb3JlY2FzdCBkYXRhIGlmIHRoZXJlIGlzIGEgZm9yZWNhc3RJZCBzdG9yZWQgaW4gdGhlIGFwcFN0YXRlLgogIGZvcmVjYXN0SWQgIT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uICgpIHsKICAgIHZhciBhZ2dUeXBlOwogICAgdmFyIGRldGVjdG9yID0gc2VsZWN0ZWRKb2IuYW5hbHlzaXNfY29uZmlnLmRldGVjdG9yc1tkZXRlY3RvckluZGV4XTsKICAgIHZhciBlc0FnZyA9ICgwLCBfam9iX3V0aWxzLm1sRnVuY3Rpb25Ub0VTQWdncmVnYXRpb24pKGRldGVjdG9yLmZ1bmN0aW9uKTsKCiAgICBpZiAoIW1vZGVsUGxvdEVuYWJsZWQgJiYgKGVzQWdnID09PSAnc3VtJyB8fCBlc0FnZyA9PT0gJ2NvdW50JykpIHsKICAgICAgYWdnVHlwZSA9IHsKICAgICAgICBhdmc6ICdzdW0nLAogICAgICAgIG1heDogJ3N1bScsCiAgICAgICAgbWluOiAnc3VtJwogICAgICB9OwogICAgfQoKICAgIHJldHVybiBfZm9yZWNhc3Rfc2VydmljZS5tbEZvcmVjYXN0U2VydmljZS5nZXRGb3JlY2FzdERhdGEoc2VsZWN0ZWRKb2IsIGRldGVjdG9ySW5kZXgsIGZvcmVjYXN0SWQsIG5vbkJsYW5rRW50aXRpZXMsIHNlYXJjaEJvdW5kcy5taW4udmFsdWVPZigpLCBzZWFyY2hCb3VuZHMubWF4LnZhbHVlT2YoKSwgZm9jdXNBZ2dyZWdhdGlvbkludGVydmFsLmV4cHJlc3Npb24sIGFnZ1R5cGUpOwogIH0oKSA6ICgwLCBfcnhqcy5vZikobnVsbCldKS5waXBlKCgwLCBfb3BlcmF0b3JzLm1hcCkoZnVuY3Rpb24gKF9yZWYpIHsKICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDUpLAogICAgICAgIG1ldHJpY0RhdGEgPSBfcmVmMlswXSwKICAgICAgICByZWNvcmRzRm9yQ3JpdGVyaWEgPSBfcmVmMlsxXSwKICAgICAgICBzY2hlZHVsZWRFdmVudHNCeUJ1Y2tldCA9IF9yZWYyWzJdLAogICAgICAgIGFubm90YXRpb25zID0gX3JlZjJbM10sCiAgICAgICAgZm9yZWNhc3REYXRhID0gX3JlZjJbNF07IC8vIFNvcnQgaW4gZGVzY2VuZGluZyB0aW1lIG9yZGVyIGJlZm9yZSBzdG9yaW5nIGluIHNjb3BlLgoKCiAgICB2YXIgYW5vbWFseVJlY29yZHMgPSByZWNvcmRzRm9yQ3JpdGVyaWEucmVjb3Jkcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgIHJldHVybiBhW190aW1lc2VyaWVzZXhwbG9yZXJfY29uc3RhbnRzLlRJTUVfRklFTERfTkFNRV0gLSBiW190aW1lc2VyaWVzZXhwbG9yZXJfY29uc3RhbnRzLlRJTUVfRklFTERfTkFNRV07CiAgICB9KS5yZXZlcnNlKCk7CiAgICB2YXIgc2NoZWR1bGVkRXZlbnRzID0gc2NoZWR1bGVkRXZlbnRzQnlCdWNrZXQuZXZlbnRzW3NlbGVjdGVkSm9iLmpvYl9pZF07CiAgICB2YXIgZm9jdXNDaGFydERhdGEgPSAoMCwgX3RpbWVzZXJpZXNleHBsb3Jlcl91dGlscy5wcm9jZXNzTWV0cmljUGxvdFJlc3VsdHMpKG1ldHJpY0RhdGEucmVzdWx0cywgbW9kZWxQbG90RW5hYmxlZCk7IC8vIFRlbGwgdGhlIHJlc3VsdHMgY29udGFpbmVyIGRpcmVjdGl2ZXMgdG8gcmVuZGVyIHRoZSBmb2N1cyBjaGFydC4KCiAgICBmb2N1c0NoYXJ0RGF0YSA9ICgwLCBfdGltZXNlcmllc2V4cGxvcmVyX3V0aWxzLnByb2Nlc3NEYXRhRm9yRm9jdXNBbm9tYWxpZXMpKGZvY3VzQ2hhcnREYXRhLCBhbm9tYWx5UmVjb3JkcywgZm9jdXNBZ2dyZWdhdGlvbkludGVydmFsLCBtb2RlbFBsb3RFbmFibGVkKTsKICAgIGZvY3VzQ2hhcnREYXRhID0gKDAsIF90aW1lc2VyaWVzZXhwbG9yZXJfdXRpbHMucHJvY2Vzc1NjaGVkdWxlZEV2ZW50c0ZvckNoYXJ0KShmb2N1c0NoYXJ0RGF0YSwgc2NoZWR1bGVkRXZlbnRzKTsKICAgIHZhciByZWZyZXNoRm9jdXNEYXRhID0gewogICAgICBzY2hlZHVsZWRFdmVudHM6IHNjaGVkdWxlZEV2ZW50cywKICAgICAgYW5vbWFseVJlY29yZHM6IGFub21hbHlSZWNvcmRzLAogICAgICBmb2N1c0NoYXJ0RGF0YTogZm9jdXNDaGFydERhdGEKICAgIH07CgogICAgaWYgKGFubm90YXRpb25zKSB7CiAgICAgIHZhciBfYW5ub3RhdGlvbnMkYW5ub3RhdGk7CgogICAgICByZWZyZXNoRm9jdXNEYXRhLmZvY3VzQW5ub3RhdGlvbkRhdGEgPSAoKF9hbm5vdGF0aW9ucyRhbm5vdGF0aSA9IGFubm90YXRpb25zLmFubm90YXRpb25zW3NlbGVjdGVkSm9iLmpvYl9pZF0pICE9PSBudWxsICYmIF9hbm5vdGF0aW9ucyRhbm5vdGF0aSAhPT0gdm9pZCAwID8gX2Fubm90YXRpb25zJGFubm90YXRpIDogW10pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICByZXR1cm4gYS50aW1lc3RhbXAgLSBiLnRpbWVzdGFtcDsKICAgICAgfSkubWFwKGZ1bmN0aW9uIChkLCBpKSB7CiAgICAgICAgZC5rZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDY1ICsgaSk7CiAgICAgICAgcmV0dXJuIGQ7CiAgICAgIH0pOwogICAgfQoKICAgIGlmIChmb3JlY2FzdERhdGEpIHsKICAgICAgcmVmcmVzaEZvY3VzRGF0YS5mb2N1c0ZvcmVjYXN0RGF0YSA9ICgwLCBfdGltZXNlcmllc2V4cGxvcmVyX3V0aWxzLnByb2Nlc3NGb3JlY2FzdFJlc3VsdHMpKGZvcmVjYXN0RGF0YS5yZXN1bHRzKTsKICAgICAgcmVmcmVzaEZvY3VzRGF0YS5zaG93Rm9yZWNhc3RDaGVja2JveCA9IHJlZnJlc2hGb2N1c0RhdGEuZm9jdXNGb3JlY2FzdERhdGEubGVuZ3RoID4gMDsKICAgIH0KCiAgICByZXR1cm4gcmVmcmVzaEZvY3VzRGF0YTsKICB9KSk7Cn0="},null]}