{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/data_frame_analytics/common/analytics.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/data_frame_analytics/common/analytics.js","mtime":1585205045541},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmdldFZhbHVlc0Zyb21SZXNwb25zZSA9IGdldFZhbHVlc0Zyb21SZXNwb25zZTsKZXhwb3J0cy5nZXRFdmFsUXVlcnlCb2R5ID0gZ2V0RXZhbFF1ZXJ5Qm9keTsKZXhwb3J0cy5sb2FkRG9jc0NvdW50ID0gZXhwb3J0cy5sb2FkRXZhbERhdGEgPSBleHBvcnRzLnVzZVJlZnJlc2hBbmFseXRpY3NMaXN0ID0gZXhwb3J0cy5yZWZyZXNoQW5hbHl0aWNzTGlzdCQgPSBleHBvcnRzLlJFRlJFU0hfQU5BTFlUSUNTX0xJU1RfU1RBVEUgPSBleHBvcnRzLmlzQ2xhc3NpZmljYXRpb25FdmFsdWF0ZVJlc3BvbnNlID0gZXhwb3J0cy5pc1JlZ3Jlc3Npb25FdmFsdWF0ZVJlc3BvbnNlID0gZXhwb3J0cy5pc1Jlc3VsdHNTZWFyY2hCb29sUXVlcnkgPSBleHBvcnRzLmlzQ2xhc3NpZmljYXRpb25BbmFseXNpcyA9IGV4cG9ydHMuaXNSZWdyZXNzaW9uQW5hbHlzaXMgPSBleHBvcnRzLmlzT3V0bGllckFuYWx5c2lzID0gZXhwb3J0cy5nZXRQcmVkaWN0ZWRGaWVsZE5hbWUgPSBleHBvcnRzLmdldFByZWRpY3Rpb25GaWVsZE5hbWUgPSBleHBvcnRzLmdldERlcGVuZGVudFZhciA9IGV4cG9ydHMuZ2V0QW5hbHlzaXNUeXBlID0gZXhwb3J0cy5BTkFMWVNJU19DT05GSUdfVFlQRSA9IGV4cG9ydHMuSU5ERVhfU1RBVFVTID0gZXhwb3J0cy5kZWZhdWx0U2VhcmNoUXVlcnkgPSBleHBvcnRzLlNFQVJDSF9TSVpFID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IHJlcXVpcmUoInJlYWN0Iik7Cgp2YXIgX3J4anMgPSByZXF1aXJlKCJyeGpzIik7Cgp2YXIgX29wZXJhdG9ycyA9IHJlcXVpcmUoInJ4anMvb3BlcmF0b3JzIik7Cgp2YXIgX2xvZGFzaCA9IHJlcXVpcmUoImxvZGFzaCIpOwoKdmFyIF9tbF9hcGlfc2VydmljZSA9IHJlcXVpcmUoIi4uLy4uL3NlcnZpY2VzL21sX2FwaV9zZXJ2aWNlIik7Cgp2YXIgX3VzZV9jcmVhdGVfYW5hbHl0aWNzX2Zvcm0gPSByZXF1aXJlKCIuLi9wYWdlcy9hbmFseXRpY3NfbWFuYWdlbWVudC9ob29rcy91c2VfY3JlYXRlX2FuYWx5dGljc19mb3JtIik7CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIFNFQVJDSF9TSVpFID0gMTAwMDsKZXhwb3J0cy5TRUFSQ0hfU0laRSA9IFNFQVJDSF9TSVpFOwp2YXIgZGVmYXVsdFNlYXJjaFF1ZXJ5ID0gewogIG1hdGNoX2FsbDoge30KfTsKZXhwb3J0cy5kZWZhdWx0U2VhcmNoUXVlcnkgPSBkZWZhdWx0U2VhcmNoUXVlcnk7CnZhciBJTkRFWF9TVEFUVVM7CmV4cG9ydHMuSU5ERVhfU1RBVFVTID0gSU5ERVhfU1RBVFVTOwoKKGZ1bmN0aW9uIChJTkRFWF9TVEFUVVMpIHsKICBJTkRFWF9TVEFUVVNbSU5ERVhfU1RBVFVTWyJVTlVTRUQiXSA9IDBdID0gIlVOVVNFRCI7CiAgSU5ERVhfU1RBVFVTW0lOREVYX1NUQVRVU1siTE9BRElORyJdID0gMV0gPSAiTE9BRElORyI7CiAgSU5ERVhfU1RBVFVTW0lOREVYX1NUQVRVU1siTE9BREVEIl0gPSAyXSA9ICJMT0FERUQiOwogIElOREVYX1NUQVRVU1tJTkRFWF9TVEFUVVNbIkVSUk9SIl0gPSAzXSA9ICJFUlJPUiI7Cn0pKElOREVYX1NUQVRVUyB8fCAoZXhwb3J0cy5JTkRFWF9TVEFUVVMgPSBJTkRFWF9TVEFUVVMgPSB7fSkpOwoKdmFyIEFOQUxZU0lTX0NPTkZJR19UWVBFOwpleHBvcnRzLkFOQUxZU0lTX0NPTkZJR19UWVBFID0gQU5BTFlTSVNfQ09ORklHX1RZUEU7CgooZnVuY3Rpb24gKEFOQUxZU0lTX0NPTkZJR19UWVBFKSB7CiAgQU5BTFlTSVNfQ09ORklHX1RZUEVbIk9VVExJRVJfREVURUNUSU9OIl0gPSAib3V0bGllcl9kZXRlY3Rpb24iOwogIEFOQUxZU0lTX0NPTkZJR19UWVBFWyJSRUdSRVNTSU9OIl0gPSAicmVncmVzc2lvbiI7CiAgQU5BTFlTSVNfQ09ORklHX1RZUEVbIkNMQVNTSUZJQ0FUSU9OIl0gPSAiY2xhc3NpZmljYXRpb24iOwogIEFOQUxZU0lTX0NPTkZJR19UWVBFWyJVTktOT1dOIl0gPSAidW5rbm93biI7Cn0pKEFOQUxZU0lTX0NPTkZJR19UWVBFIHx8IChleHBvcnRzLkFOQUxZU0lTX0NPTkZJR19UWVBFID0gQU5BTFlTSVNfQ09ORklHX1RZUEUgPSB7fSkpOwoKdmFyIGdldEFuYWx5c2lzVHlwZSA9IGZ1bmN0aW9uIGdldEFuYWx5c2lzVHlwZShhbmFseXNpcykgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYW5hbHlzaXMpOwoKICBpZiAoa2V5cy5sZW5ndGggPT09IDEpIHsKICAgIHJldHVybiBrZXlzWzBdOwogIH0KCiAgcmV0dXJuIEFOQUxZU0lTX0NPTkZJR19UWVBFLlVOS05PV047Cn07CgpleHBvcnRzLmdldEFuYWx5c2lzVHlwZSA9IGdldEFuYWx5c2lzVHlwZTsKCnZhciBnZXREZXBlbmRlbnRWYXIgPSBmdW5jdGlvbiBnZXREZXBlbmRlbnRWYXIoYW5hbHlzaXMpIHsKICB2YXIgZGVwVmFyID0gJyc7CgogIGlmIChpc1JlZ3Jlc3Npb25BbmFseXNpcyhhbmFseXNpcykpIHsKICAgIGRlcFZhciA9IGFuYWx5c2lzLnJlZ3Jlc3Npb24uZGVwZW5kZW50X3ZhcmlhYmxlOwogIH0KCiAgaWYgKGlzQ2xhc3NpZmljYXRpb25BbmFseXNpcyhhbmFseXNpcykpIHsKICAgIGRlcFZhciA9IGFuYWx5c2lzLmNsYXNzaWZpY2F0aW9uLmRlcGVuZGVudF92YXJpYWJsZTsKICB9CgogIHJldHVybiBkZXBWYXI7Cn07CgpleHBvcnRzLmdldERlcGVuZGVudFZhciA9IGdldERlcGVuZGVudFZhcjsKCnZhciBnZXRQcmVkaWN0aW9uRmllbGROYW1lID0gZnVuY3Rpb24gZ2V0UHJlZGljdGlvbkZpZWxkTmFtZShhbmFseXNpcykgewogIC8vIElmIHVuZGVmaW5lZCB3aWxsIGJlIGRlZmF1bHRlZCB0byBkZXBlbmRlbnRfdmFyaWFibGUgd2hlbiBjb25maWcgaXMgY3JlYXRlZAogIHZhciBwcmVkaWN0aW9uRmllbGROYW1lOwoKICBpZiAoaXNSZWdyZXNzaW9uQW5hbHlzaXMoYW5hbHlzaXMpICYmIGFuYWx5c2lzLnJlZ3Jlc3Npb24ucHJlZGljdGlvbl9maWVsZF9uYW1lICE9PSB1bmRlZmluZWQpIHsKICAgIHByZWRpY3Rpb25GaWVsZE5hbWUgPSBhbmFseXNpcy5yZWdyZXNzaW9uLnByZWRpY3Rpb25fZmllbGRfbmFtZTsKICB9IGVsc2UgaWYgKGlzQ2xhc3NpZmljYXRpb25BbmFseXNpcyhhbmFseXNpcykgJiYgYW5hbHlzaXMuY2xhc3NpZmljYXRpb24ucHJlZGljdGlvbl9maWVsZF9uYW1lICE9PSB1bmRlZmluZWQpIHsKICAgIHByZWRpY3Rpb25GaWVsZE5hbWUgPSBhbmFseXNpcy5jbGFzc2lmaWNhdGlvbi5wcmVkaWN0aW9uX2ZpZWxkX25hbWU7CiAgfQoKICByZXR1cm4gcHJlZGljdGlvbkZpZWxkTmFtZTsKfTsKCmV4cG9ydHMuZ2V0UHJlZGljdGlvbkZpZWxkTmFtZSA9IGdldFByZWRpY3Rpb25GaWVsZE5hbWU7Cgp2YXIgZ2V0UHJlZGljdGVkRmllbGROYW1lID0gZnVuY3Rpb24gZ2V0UHJlZGljdGVkRmllbGROYW1lKHJlc3VsdHNGaWVsZCwgYW5hbHlzaXMsIGZvclNvcnQpIHsKICAvLyBkZWZhdWx0IGlzICdtbCcKICB2YXIgcHJlZGljdGlvbkZpZWxkTmFtZSA9IGdldFByZWRpY3Rpb25GaWVsZE5hbWUoYW5hbHlzaXMpOwogIHZhciBkZWZhdWx0UHJlZGljdGlvbkZpZWxkID0gIiIuY29uY2F0KGdldERlcGVuZGVudFZhcihhbmFseXNpcyksICJfcHJlZGljdGlvbiIpOwogIHZhciBwcmVkaWN0ZWRGaWVsZCA9ICIiLmNvbmNhdChyZXN1bHRzRmllbGQsICIuIikuY29uY2F0KHByZWRpY3Rpb25GaWVsZE5hbWUgPyBwcmVkaWN0aW9uRmllbGROYW1lIDogZGVmYXVsdFByZWRpY3Rpb25GaWVsZCk7CiAgcmV0dXJuIHByZWRpY3RlZEZpZWxkOwp9OwoKZXhwb3J0cy5nZXRQcmVkaWN0ZWRGaWVsZE5hbWUgPSBnZXRQcmVkaWN0ZWRGaWVsZE5hbWU7Cgp2YXIgaXNPdXRsaWVyQW5hbHlzaXMgPSBmdW5jdGlvbiBpc091dGxpZXJBbmFseXNpcyhhcmcpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFyZyk7CiAgcmV0dXJuIGtleXMubGVuZ3RoID09PSAxICYmIGtleXNbMF0gPT09IEFOQUxZU0lTX0NPTkZJR19UWVBFLk9VVExJRVJfREVURUNUSU9OOwp9OwoKZXhwb3J0cy5pc091dGxpZXJBbmFseXNpcyA9IGlzT3V0bGllckFuYWx5c2lzOwoKdmFyIGlzUmVncmVzc2lvbkFuYWx5c2lzID0gZnVuY3Rpb24gaXNSZWdyZXNzaW9uQW5hbHlzaXMoYXJnKSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhcmcpOwogIHJldHVybiBrZXlzLmxlbmd0aCA9PT0gMSAmJiBrZXlzWzBdID09PSBBTkFMWVNJU19DT05GSUdfVFlQRS5SRUdSRVNTSU9OOwp9OwoKZXhwb3J0cy5pc1JlZ3Jlc3Npb25BbmFseXNpcyA9IGlzUmVncmVzc2lvbkFuYWx5c2lzOwoKdmFyIGlzQ2xhc3NpZmljYXRpb25BbmFseXNpcyA9IGZ1bmN0aW9uIGlzQ2xhc3NpZmljYXRpb25BbmFseXNpcyhhcmcpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFyZyk7CiAgcmV0dXJuIGtleXMubGVuZ3RoID09PSAxICYmIGtleXNbMF0gPT09IEFOQUxZU0lTX0NPTkZJR19UWVBFLkNMQVNTSUZJQ0FUSU9OOwp9OwoKZXhwb3J0cy5pc0NsYXNzaWZpY2F0aW9uQW5hbHlzaXMgPSBpc0NsYXNzaWZpY2F0aW9uQW5hbHlzaXM7Cgp2YXIgaXNSZXN1bHRzU2VhcmNoQm9vbFF1ZXJ5ID0gZnVuY3Rpb24gaXNSZXN1bHRzU2VhcmNoQm9vbFF1ZXJ5KGFyZykgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYXJnKTsKICByZXR1cm4ga2V5cy5sZW5ndGggPT09IDEgJiYga2V5c1swXSA9PT0gJ2Jvb2wnOwp9OwoKZXhwb3J0cy5pc1Jlc3VsdHNTZWFyY2hCb29sUXVlcnkgPSBpc1Jlc3VsdHNTZWFyY2hCb29sUXVlcnk7Cgp2YXIgaXNSZWdyZXNzaW9uRXZhbHVhdGVSZXNwb25zZSA9IGZ1bmN0aW9uIGlzUmVncmVzc2lvbkV2YWx1YXRlUmVzcG9uc2UoYXJnKSB7CiAgdmFyIF9hcmckcmVncmVzc2lvbiwgX2FyZyRyZWdyZXNzaW9uMjsKCiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhcmcpOwogIHJldHVybiBrZXlzLmxlbmd0aCA9PT0gMSAmJiBrZXlzWzBdID09PSBBTkFMWVNJU19DT05GSUdfVFlQRS5SRUdSRVNTSU9OICYmIChhcmcgPT09IG51bGwgfHwgYXJnID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2FyZyRyZWdyZXNzaW9uID0gYXJnLnJlZ3Jlc3Npb24pID09PSBudWxsIHx8IF9hcmckcmVncmVzc2lvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FyZyRyZWdyZXNzaW9uLm1lYW5fc3F1YXJlZF9lcnJvcikgIT09IHVuZGVmaW5lZCAmJiAoYXJnID09PSBudWxsIHx8IGFyZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9hcmckcmVncmVzc2lvbjIgPSBhcmcucmVncmVzc2lvbikgPT09IG51bGwgfHwgX2FyZyRyZWdyZXNzaW9uMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FyZyRyZWdyZXNzaW9uMi5yX3NxdWFyZWQpICE9PSB1bmRlZmluZWQ7Cn07CgpleHBvcnRzLmlzUmVncmVzc2lvbkV2YWx1YXRlUmVzcG9uc2UgPSBpc1JlZ3Jlc3Npb25FdmFsdWF0ZVJlc3BvbnNlOwoKdmFyIGlzQ2xhc3NpZmljYXRpb25FdmFsdWF0ZVJlc3BvbnNlID0gZnVuY3Rpb24gaXNDbGFzc2lmaWNhdGlvbkV2YWx1YXRlUmVzcG9uc2UoYXJnKSB7CiAgdmFyIF9hcmckY2xhc3NpZmljYXRpb247CgogIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYXJnKTsKICByZXR1cm4ga2V5cy5sZW5ndGggPT09IDEgJiYga2V5c1swXSA9PT0gQU5BTFlTSVNfQ09ORklHX1RZUEUuQ0xBU1NJRklDQVRJT04gJiYgKGFyZyA9PT0gbnVsbCB8fCBhcmcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfYXJnJGNsYXNzaWZpY2F0aW9uID0gYXJnLmNsYXNzaWZpY2F0aW9uKSA9PT0gbnVsbCB8fCBfYXJnJGNsYXNzaWZpY2F0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYXJnJGNsYXNzaWZpY2F0aW9uLm11bHRpY2xhc3NfY29uZnVzaW9uX21hdHJpeCkgIT09IHVuZGVmaW5lZDsKfTsKCmV4cG9ydHMuaXNDbGFzc2lmaWNhdGlvbkV2YWx1YXRlUmVzcG9uc2UgPSBpc0NsYXNzaWZpY2F0aW9uRXZhbHVhdGVSZXNwb25zZTsKdmFyIFJFRlJFU0hfQU5BTFlUSUNTX0xJU1RfU1RBVEU7CmV4cG9ydHMuUkVGUkVTSF9BTkFMWVRJQ1NfTElTVF9TVEFURSA9IFJFRlJFU0hfQU5BTFlUSUNTX0xJU1RfU1RBVEU7CgooZnVuY3Rpb24gKFJFRlJFU0hfQU5BTFlUSUNTX0xJU1RfU1RBVEUpIHsKICBSRUZSRVNIX0FOQUxZVElDU19MSVNUX1NUQVRFWyJFUlJPUiJdID0gImVycm9yIjsKICBSRUZSRVNIX0FOQUxZVElDU19MSVNUX1NUQVRFWyJJRExFIl0gPSAiaWRsZSI7CiAgUkVGUkVTSF9BTkFMWVRJQ1NfTElTVF9TVEFURVsiTE9BRElORyJdID0gImxvYWRpbmciOwogIFJFRlJFU0hfQU5BTFlUSUNTX0xJU1RfU1RBVEVbIlJFRlJFU0giXSA9ICJyZWZyZXNoIjsKfSkoUkVGUkVTSF9BTkFMWVRJQ1NfTElTVF9TVEFURSB8fCAoZXhwb3J0cy5SRUZSRVNIX0FOQUxZVElDU19MSVNUX1NUQVRFID0gUkVGUkVTSF9BTkFMWVRJQ1NfTElTVF9TVEFURSA9IHt9KSk7Cgp2YXIgcmVmcmVzaEFuYWx5dGljc0xpc3QkID0gbmV3IF9yeGpzLkJlaGF2aW9yU3ViamVjdChSRUZSRVNIX0FOQUxZVElDU19MSVNUX1NUQVRFLklETEUpOwpleHBvcnRzLnJlZnJlc2hBbmFseXRpY3NMaXN0JCA9IHJlZnJlc2hBbmFseXRpY3NMaXN0JDsKCnZhciB1c2VSZWZyZXNoQW5hbHl0aWNzTGlzdCA9IGZ1bmN0aW9uIHVzZVJlZnJlc2hBbmFseXRpY3NMaXN0KCkgewogIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CiAgKDAsIF9yZWFjdC51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHsKICAgIHZhciBkaXN0aW5jdCQgPSByZWZyZXNoQW5hbHl0aWNzTGlzdCQucGlwZSgoMCwgX29wZXJhdG9ycy5kaXN0aW5jdFVudGlsQ2hhbmdlZCkoKSk7CiAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IFtdOwoKICAgIGlmICh0eXBlb2YgY2FsbGJhY2sub25SZWZyZXNoID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIC8vIGluaXRpYWwgY2FsbCB0byByZWZyZXNoCiAgICAgIGNhbGxiYWNrLm9uUmVmcmVzaCgpOwogICAgICBzdWJzY3JpcHRpb25zLnB1c2goZGlzdGluY3QkLnBpcGUoKDAsIF9vcGVyYXRvcnMuZmlsdGVyKShmdW5jdGlvbiAoc3RhdGUpIHsKICAgICAgICByZXR1cm4gc3RhdGUgPT09IFJFRlJFU0hfQU5BTFlUSUNTX0xJU1RfU1RBVEUuUkVGUkVTSDsKICAgICAgfSkpLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHR5cGVvZiBjYWxsYmFjay5vblJlZnJlc2ggPT09ICdmdW5jdGlvbicgJiYgY2FsbGJhY2sub25SZWZyZXNoKCk7CiAgICAgIH0pKTsKICAgIH0KCiAgICBpZiAodHlwZW9mIGNhbGxiYWNrLmlzTG9hZGluZyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICBzdWJzY3JpcHRpb25zLnB1c2goZGlzdGluY3QkLnN1YnNjcmliZShmdW5jdGlvbiAoc3RhdGUpIHsKICAgICAgICByZXR1cm4gdHlwZW9mIGNhbGxiYWNrLmlzTG9hZGluZyA9PT0gJ2Z1bmN0aW9uJyAmJiBjYWxsYmFjay5pc0xvYWRpbmcoc3RhdGUgPT09IFJFRlJFU0hfQU5BTFlUSUNTX0xJU1RfU1RBVEUuTE9BRElORyk7CiAgICAgIH0pKTsKICAgIH0KCiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICBzdWJzY3JpcHRpb25zLm1hcChmdW5jdGlvbiAoc3ViKSB7CiAgICAgICAgcmV0dXJuIHN1Yi51bnN1YnNjcmliZSgpOwogICAgICB9KTsKICAgIH07CiAgfSwgW10pOwogIHJldHVybiB7CiAgICByZWZyZXNoOiBmdW5jdGlvbiByZWZyZXNoKCkgewogICAgICAvLyBBIHJlZnJlc2ggaXMgZm9sbG93ZWQgaW1tZWRpYXRlbHkgYnkgc2V0dGluZyB0aGUgc3RhdGUgdG8gbG9hZGluZwogICAgICAvLyB0byB0cmlnZ2VyIGRhdGEgZmV0Y2hpbmcgYW5kIGxvYWRpbmcgaW5kaWNhdG9ycyBpbiBvbmUgZ28uCiAgICAgIHJlZnJlc2hBbmFseXRpY3NMaXN0JC5uZXh0KFJFRlJFU0hfQU5BTFlUSUNTX0xJU1RfU1RBVEUuUkVGUkVTSCk7CiAgICAgIHJlZnJlc2hBbmFseXRpY3NMaXN0JC5uZXh0KFJFRlJFU0hfQU5BTFlUSUNTX0xJU1RfU1RBVEUuTE9BRElORyk7CiAgICB9CiAgfTsKfTsKCmV4cG9ydHMudXNlUmVmcmVzaEFuYWx5dGljc0xpc3QgPSB1c2VSZWZyZXNoQW5hbHl0aWNzTGlzdDsKdmFyIERFRkFVTFRfU0lHX0ZJR1MgPSAzOwoKZnVuY3Rpb24gZ2V0VmFsdWVzRnJvbVJlc3BvbnNlKHJlc3BvbnNlKSB7CiAgdmFyIF9yZXNwb25zZSRyZWdyZXNzaW9uLCBfcmVzcG9uc2UkcmVncmVzc2lvbiQsIF9yZXNwb25zZSRyZWdyZXNzaW9uMiwgX3Jlc3BvbnNlJHJlZ3Jlc3Npb24zOwoKICB2YXIgbWVhblNxdWFyZWRFcnJvciA9IHJlc3BvbnNlID09PSBudWxsIHx8IHJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3Jlc3BvbnNlJHJlZ3Jlc3Npb24gPSByZXNwb25zZS5yZWdyZXNzaW9uKSA9PT0gbnVsbCB8fCBfcmVzcG9uc2UkcmVncmVzc2lvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9yZXNwb25zZSRyZWdyZXNzaW9uJCA9IF9yZXNwb25zZSRyZWdyZXNzaW9uLm1lYW5fc3F1YXJlZF9lcnJvcikgPT09IG51bGwgfHwgX3Jlc3BvbnNlJHJlZ3Jlc3Npb24kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcmVzcG9uc2UkcmVncmVzc2lvbiQuZXJyb3I7CgogIGlmIChtZWFuU3F1YXJlZEVycm9yKSB7CiAgICBtZWFuU3F1YXJlZEVycm9yID0gTnVtYmVyKG1lYW5TcXVhcmVkRXJyb3IudG9QcmVjaXNpb24oREVGQVVMVF9TSUdfRklHUykpOwogIH0KCiAgdmFyIHJTcXVhcmVkID0gcmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfcmVzcG9uc2UkcmVncmVzc2lvbjIgPSByZXNwb25zZS5yZWdyZXNzaW9uKSA9PT0gbnVsbCB8fCBfcmVzcG9uc2UkcmVncmVzc2lvbjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfcmVzcG9uc2UkcmVncmVzc2lvbjMgPSBfcmVzcG9uc2UkcmVncmVzc2lvbjIucl9zcXVhcmVkKSA9PT0gbnVsbCB8fCBfcmVzcG9uc2UkcmVncmVzc2lvbjMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZXNwb25zZSRyZWdyZXNzaW9uMy52YWx1ZTsKCiAgaWYgKHJTcXVhcmVkKSB7CiAgICByU3F1YXJlZCA9IE51bWJlcihyU3F1YXJlZC50b1ByZWNpc2lvbihERUZBVUxUX1NJR19GSUdTKSk7CiAgfQoKICByZXR1cm4gewogICAgbWVhblNxdWFyZWRFcnJvcjogbWVhblNxdWFyZWRFcnJvciwKICAgIHJTcXVhcmVkOiByU3F1YXJlZAogIH07Cn0KCmZ1bmN0aW9uIGdldEV2YWxRdWVyeUJvZHkoX3JlZikgewogIHZhciByZXN1bHRzRmllbGQgPSBfcmVmLnJlc3VsdHNGaWVsZCwKICAgICAgaXNUcmFpbmluZyA9IF9yZWYuaXNUcmFpbmluZywKICAgICAgc2VhcmNoUXVlcnkgPSBfcmVmLnNlYXJjaFF1ZXJ5LAogICAgICBpZ25vcmVEZWZhdWx0UXVlcnkgPSBfcmVmLmlnbm9yZURlZmF1bHRRdWVyeTsKICB2YXIgcXVlcnkgPSB7CiAgICB0ZXJtOiBfZGVmaW5lUHJvcGVydHkoe30sICIiLmNvbmNhdChyZXN1bHRzRmllbGQsICIuaXNfdHJhaW5pbmciKSwgewogICAgICB2YWx1ZTogaXNUcmFpbmluZwogICAgfSkKICB9OwoKICBpZiAoc2VhcmNoUXVlcnkgIT09IHVuZGVmaW5lZCAmJiBpZ25vcmVEZWZhdWx0UXVlcnkgPT09IHRydWUpIHsKICAgIHF1ZXJ5ID0gc2VhcmNoUXVlcnk7CiAgfSBlbHNlIGlmIChzZWFyY2hRdWVyeSAhPT0gdW5kZWZpbmVkICYmIGlzUmVzdWx0c1NlYXJjaEJvb2xRdWVyeShzZWFyY2hRdWVyeSkpIHsKICAgIHZhciBzZWFyY2hRdWVyeUNsb25lID0gKDAsIF9sb2Rhc2guY2xvbmVEZWVwKShzZWFyY2hRdWVyeSk7CiAgICBzZWFyY2hRdWVyeUNsb25lLmJvb2wubXVzdC5wdXNoKHF1ZXJ5KTsKICAgIHF1ZXJ5ID0gc2VhcmNoUXVlcnlDbG9uZTsKICB9CgogIHJldHVybiBxdWVyeTsKfQoKdmFyIGxvYWRFdmFsRGF0YSA9IGZ1bmN0aW9uIGxvYWRFdmFsRGF0YShfcmVmMikgewogIHZhciBpc1RyYWluaW5nLCBpbmRleCwgZGVwZW5kZW50VmFyaWFibGUsIHJlc3VsdHNGaWVsZCwgcHJlZGljdGlvbkZpZWxkTmFtZSwgc2VhcmNoUXVlcnksIGlnbm9yZURlZmF1bHRRdWVyeSwgam9iVHlwZSwgcmVxdWlyZXNLZXl3b3JkLCByZXN1bHRzLCBkZWZhdWx0UHJlZGljdGlvbkZpZWxkLCBwcmVkaWN0ZWRGaWVsZCwgcXVlcnksIG1ldHJpY3MsIGNvbmZpZywgZXZhbFJlc3VsdDsKICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGxvYWRFdmFsRGF0YSQoX2NvbnRleHQpIHsKICAgIHdoaWxlICgxKSB7CiAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICBjYXNlIDA6CiAgICAgICAgICBpc1RyYWluaW5nID0gX3JlZjIuaXNUcmFpbmluZywgaW5kZXggPSBfcmVmMi5pbmRleCwgZGVwZW5kZW50VmFyaWFibGUgPSBfcmVmMi5kZXBlbmRlbnRWYXJpYWJsZSwgcmVzdWx0c0ZpZWxkID0gX3JlZjIucmVzdWx0c0ZpZWxkLCBwcmVkaWN0aW9uRmllbGROYW1lID0gX3JlZjIucHJlZGljdGlvbkZpZWxkTmFtZSwgc2VhcmNoUXVlcnkgPSBfcmVmMi5zZWFyY2hRdWVyeSwgaWdub3JlRGVmYXVsdFF1ZXJ5ID0gX3JlZjIuaWdub3JlRGVmYXVsdFF1ZXJ5LCBqb2JUeXBlID0gX3JlZjIuam9iVHlwZSwgcmVxdWlyZXNLZXl3b3JkID0gX3JlZjIucmVxdWlyZXNLZXl3b3JkOwogICAgICAgICAgcmVzdWx0cyA9IHsKICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsCiAgICAgICAgICAgIGV2YWw6IG51bGwsCiAgICAgICAgICAgIGVycm9yOiBudWxsCiAgICAgICAgICB9OwogICAgICAgICAgZGVmYXVsdFByZWRpY3Rpb25GaWVsZCA9ICIiLmNvbmNhdChkZXBlbmRlbnRWYXJpYWJsZSwgIl9wcmVkaWN0aW9uIik7CiAgICAgICAgICBwcmVkaWN0ZWRGaWVsZCA9ICIiLmNvbmNhdChyZXN1bHRzRmllbGQsICIuIikuY29uY2F0KHByZWRpY3Rpb25GaWVsZE5hbWUgPyBwcmVkaWN0aW9uRmllbGROYW1lIDogZGVmYXVsdFByZWRpY3Rpb25GaWVsZCk7CgogICAgICAgICAgaWYgKGpvYlR5cGUgPT09IEFOQUxZU0lTX0NPTkZJR19UWVBFLkNMQVNTSUZJQ0FUSU9OICYmIHJlcXVpcmVzS2V5d29yZCA9PT0gdHJ1ZSkgewogICAgICAgICAgICBwcmVkaWN0ZWRGaWVsZCA9ICIiLmNvbmNhdChwcmVkaWN0ZWRGaWVsZCwgIi5rZXl3b3JkIik7CiAgICAgICAgICB9CgogICAgICAgICAgcXVlcnkgPSBnZXRFdmFsUXVlcnlCb2R5KHsKICAgICAgICAgICAgcmVzdWx0c0ZpZWxkOiByZXN1bHRzRmllbGQsCiAgICAgICAgICAgIGlzVHJhaW5pbmc6IGlzVHJhaW5pbmcsCiAgICAgICAgICAgIHNlYXJjaFF1ZXJ5OiBzZWFyY2hRdWVyeSwKICAgICAgICAgICAgaWdub3JlRGVmYXVsdFF1ZXJ5OiBpZ25vcmVEZWZhdWx0UXVlcnkKICAgICAgICAgIH0pOwogICAgICAgICAgbWV0cmljcyA9IHsKICAgICAgICAgICAgY2xhc3NpZmljYXRpb246IHsKICAgICAgICAgICAgICBtdWx0aWNsYXNzX2NvbmZ1c2lvbl9tYXRyaXg6IHt9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlZ3Jlc3Npb246IHsKICAgICAgICAgICAgICByX3NxdWFyZWQ6IHt9LAogICAgICAgICAgICAgIG1lYW5fc3F1YXJlZF9lcnJvcjoge30KICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICAgIGNvbmZpZyA9IHsKICAgICAgICAgICAgaW5kZXg6IGluZGV4LAogICAgICAgICAgICBxdWVyeTogcXVlcnksCiAgICAgICAgICAgIGV2YWx1YXRpb246IF9kZWZpbmVQcm9wZXJ0eSh7fSwgam9iVHlwZSwgewogICAgICAgICAgICAgIGFjdHVhbF9maWVsZDogZGVwZW5kZW50VmFyaWFibGUsCiAgICAgICAgICAgICAgcHJlZGljdGVkX2ZpZWxkOiBwcmVkaWN0ZWRGaWVsZCwKICAgICAgICAgICAgICBtZXRyaWNzOiBtZXRyaWNzW2pvYlR5cGVdCiAgICAgICAgICAgIH0pCiAgICAgICAgICB9OwogICAgICAgICAgX2NvbnRleHQucHJldiA9IDg7CiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKF9tbF9hcGlfc2VydmljZS5tbC5kYXRhRnJhbWVBbmFseXRpY3MuZXZhbHVhdGVEYXRhRnJhbWVBbmFseXRpY3MoY29uZmlnKSk7CgogICAgICAgIGNhc2UgMTE6CiAgICAgICAgICBldmFsUmVzdWx0ID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgIHJlc3VsdHMuc3VjY2VzcyA9IHRydWU7CiAgICAgICAgICByZXN1bHRzLmV2YWwgPSBldmFsUmVzdWx0OwogICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzdWx0cyk7CgogICAgICAgIGNhc2UgMTc6CiAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTc7CiAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDgpOwogICAgICAgICAgcmVzdWx0cy5lcnJvciA9ICgwLCBfdXNlX2NyZWF0ZV9hbmFseXRpY3NfZm9ybS5nZXRFcnJvck1lc3NhZ2UpKF9jb250ZXh0LnQwKTsKICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlc3VsdHMpOwoKICAgICAgICBjYXNlIDIxOgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICB9CiAgICB9CiAgfSwgbnVsbCwgbnVsbCwgW1s4LCAxN11dKTsKfTsKCmV4cG9ydHMubG9hZEV2YWxEYXRhID0gbG9hZEV2YWxEYXRhOwoKdmFyIGxvYWREb2NzQ291bnQgPSBmdW5jdGlvbiBsb2FkRG9jc0NvdW50KF9yZWYzKSB7CiAgdmFyIF9yZWYzJGlnbm9yZURlZmF1bHRRdSwgaWdub3JlRGVmYXVsdFF1ZXJ5LCBpc1RyYWluaW5nLCBzZWFyY2hRdWVyeSwgcmVzdWx0c0ZpZWxkLCBkZXN0SW5kZXgsIHF1ZXJ5LCBib2R5LCByZXNwLCBkb2NzQ291bnQ7CgogIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gbG9hZERvY3NDb3VudCQoX2NvbnRleHQyKSB7CiAgICB3aGlsZSAoMSkgewogICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICBjYXNlIDA6CiAgICAgICAgICBfcmVmMyRpZ25vcmVEZWZhdWx0UXUgPSBfcmVmMy5pZ25vcmVEZWZhdWx0UXVlcnksIGlnbm9yZURlZmF1bHRRdWVyeSA9IF9yZWYzJGlnbm9yZURlZmF1bHRRdSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYzJGlnbm9yZURlZmF1bHRRdSwgaXNUcmFpbmluZyA9IF9yZWYzLmlzVHJhaW5pbmcsIHNlYXJjaFF1ZXJ5ID0gX3JlZjMuc2VhcmNoUXVlcnksIHJlc3VsdHNGaWVsZCA9IF9yZWYzLnJlc3VsdHNGaWVsZCwgZGVzdEluZGV4ID0gX3JlZjMuZGVzdEluZGV4OwogICAgICAgICAgcXVlcnkgPSBnZXRFdmFsUXVlcnlCb2R5KHsKICAgICAgICAgICAgcmVzdWx0c0ZpZWxkOiByZXN1bHRzRmllbGQsCiAgICAgICAgICAgIGlzVHJhaW5pbmc6IGlzVHJhaW5pbmcsCiAgICAgICAgICAgIGlnbm9yZURlZmF1bHRRdWVyeTogaWdub3JlRGVmYXVsdFF1ZXJ5LAogICAgICAgICAgICBzZWFyY2hRdWVyeTogc2VhcmNoUXVlcnkKICAgICAgICAgIH0pOwogICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAyOwogICAgICAgICAgYm9keSA9IHsKICAgICAgICAgICAgdHJhY2tfdG90YWxfaGl0czogdHJ1ZSwKICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICB9OwogICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2OwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChfbWxfYXBpX3NlcnZpY2UubWwuZXNTZWFyY2goewogICAgICAgICAgICBpbmRleDogZGVzdEluZGV4LAogICAgICAgICAgICBzaXplOiAwLAogICAgICAgICAgICBib2R5OiBib2R5CiAgICAgICAgICB9KSk7CgogICAgICAgIGNhc2UgNjoKICAgICAgICAgIHJlc3AgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgIGRvY3NDb3VudCA9IHJlc3AuaGl0cy50b3RhbCAmJiByZXNwLmhpdHMudG90YWwudmFsdWU7CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICBkb2NzQ291bnQ6IGRvY3NDb3VudCwKICAgICAgICAgICAgc3VjY2VzczogZG9jc0NvdW50ICE9PSB1bmRlZmluZWQKICAgICAgICAgIH0pOwoKICAgICAgICBjYXNlIDExOgogICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxMTsKICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgyKTsKICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgIGRvY3NDb3VudDogbnVsbCwKICAgICAgICAgICAgc3VjY2VzczogZmFsc2UKICAgICAgICAgIH0pOwoKICAgICAgICBjYXNlIDE0OgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgfQogICAgfQogIH0sIG51bGwsIG51bGwsIFtbMiwgMTFdXSk7Cn07CgpleHBvcnRzLmxvYWREb2NzQ291bnQgPSBsb2FkRG9jc0NvdW50Ow=="},null]}