{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/components/import_rule_modal/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/components/import_rule_modal/index.js","mtime":1585205047867},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkltcG9ydFJ1bGVNb2RhbCA9IGV4cG9ydHMuSW1wb3J0UnVsZU1vZGFsQ29tcG9uZW50ID0gdm9pZCAwOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcnVsZXMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9jb250YWluZXJzL2RldGVjdGlvbl9lbmdpbmUvcnVsZXMiKTsKCnZhciBfdG9hc3RlcnMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9jb21wb25lbnRzL3RvYXN0ZXJzIik7Cgp2YXIgaTE4biA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoIi4vdHJhbnNsYXRpb25zIikpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9Ci8qKgogKiBNb2RhbCBjb21wb25lbnQgZm9yIGltcG9ydGluZyBSdWxlcyBmcm9tIGEganNvbiBmaWxlCiAqLwoKCnZhciBJbXBvcnRSdWxlTW9kYWxDb21wb25lbnQgPSBmdW5jdGlvbiBJbXBvcnRSdWxlTW9kYWxDb21wb25lbnQoX3JlZikgewogIHZhciBzaG93TW9kYWwgPSBfcmVmLnNob3dNb2RhbCwKICAgICAgY2xvc2VNb2RhbCA9IF9yZWYuY2xvc2VNb2RhbCwKICAgICAgaW1wb3J0Q29tcGxldGUgPSBfcmVmLmltcG9ydENvbXBsZXRlOwoKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkobnVsbCksCiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLAogICAgICBzZWxlY3RlZEZpbGVzID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0U2VsZWN0ZWRGaWxlcyA9IF91c2VTdGF0ZTJbMV07CgogIHZhciBfdXNlU3RhdGUzID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZmFsc2UpLAogICAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksCiAgICAgIGlzSW1wb3J0aW5nID0gX3VzZVN0YXRlNFswXSwKICAgICAgc2V0SXNJbXBvcnRpbmcgPSBfdXNlU3RhdGU0WzFdOwoKICB2YXIgX3VzZVN0YXRlNSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKGZhbHNlKSwKICAgICAgX3VzZVN0YXRlNiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTUsIDIpLAogICAgICBvdmVyd3JpdGUgPSBfdXNlU3RhdGU2WzBdLAogICAgICBzZXRPdmVyd3JpdGUgPSBfdXNlU3RhdGU2WzFdOwoKICB2YXIgX3VzZVN0YXRlVG9hc3RlciA9ICgwLCBfdG9hc3RlcnMudXNlU3RhdGVUb2FzdGVyKSgpLAogICAgICBfdXNlU3RhdGVUb2FzdGVyMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZVRvYXN0ZXIsIDIpLAogICAgICBkaXNwYXRjaFRvYXN0ZXIgPSBfdXNlU3RhdGVUb2FzdGVyMlsxXTsKCiAgdmFyIGNsZWFudXBBbmRDbG9zZU1vZGFsID0gZnVuY3Rpb24gY2xlYW51cEFuZENsb3NlTW9kYWwoKSB7CiAgICBzZXRJc0ltcG9ydGluZyhmYWxzZSk7CiAgICBzZXRTZWxlY3RlZEZpbGVzKG51bGwpOwogICAgY2xvc2VNb2RhbCgpOwogIH07CgogIHZhciBpbXBvcnRSdWxlc0NhbGxiYWNrID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgIHZhciBhYm9ydEN0cmwsIGltcG9ydFJlc3BvbnNlLCBmb3JtYXR0ZWRFcnJvcnM7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBpZiAoIShzZWxlY3RlZEZpbGVzICE9IG51bGwpKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE3OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzZXRJc0ltcG9ydGluZyh0cnVlKTsKICAgICAgICAgICAgYWJvcnRDdHJsID0gbmV3IEFib3J0Q29udHJvbGxlcigpOwogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMzsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoKDAsIF9ydWxlcy5pbXBvcnRSdWxlcykoewogICAgICAgICAgICAgIGZpbGVUb0ltcG9ydDogc2VsZWN0ZWRGaWxlc1swXSwKICAgICAgICAgICAgICBvdmVyd3JpdGU6IG92ZXJ3cml0ZSwKICAgICAgICAgICAgICBzaWduYWw6IGFib3J0Q3RybC5zaWduYWwKICAgICAgICAgICAgfSkpOwoKICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgaW1wb3J0UmVzcG9uc2UgPSBfY29udGV4dC5zZW50OyAvLyBUT0RPOiBJbXByb3ZlIGVycm9yIHRvYXN0IGRldGFpbHMgZm9yIGJldHRlciBkZWJ1Z2dpbmcgZmFpbGVkIGltcG9ydHMKICAgICAgICAgICAgLy8gZS5nLiBXaGVuIHN1Y2Nlc3MgPT0gdHJ1ZSAmJiBzdWNjZXNzX2NvdW50ID09PSAwIHRoYXQgbWVhbnMgbm8gcnVsZXMgd2VyZSBvdmVyd3JpdHRlbiwgZXRjCgogICAgICAgICAgICBpZiAoaW1wb3J0UmVzcG9uc2Uuc3VjY2VzcykgewogICAgICAgICAgICAgICgwLCBfdG9hc3RlcnMuZGlzcGxheVN1Y2Nlc3NUb2FzdCkoaTE4bi5TVUNDRVNTRlVMTFlfSU1QT1JURURfUlVMRVMoaW1wb3J0UmVzcG9uc2Uuc3VjY2Vzc19jb3VudCksIGRpc3BhdGNoVG9hc3Rlcik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChpbXBvcnRSZXNwb25zZS5lcnJvcnMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgIGZvcm1hdHRlZEVycm9ycyA9IGltcG9ydFJlc3BvbnNlLmVycm9ycy5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBpMThuLklNUE9SVF9GQUlMRURfREVUQUlMRUQoZS5ydWxlX2lkLCBlLmVycm9yLnN0YXR1c19jb2RlLCBlLmVycm9yLm1lc3NhZ2UpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICgwLCBfdG9hc3RlcnMuZGlzcGxheUVycm9yVG9hc3QpKGkxOG4uSU1QT1JUX0ZBSUxFRCwgZm9ybWF0dGVkRXJyb3JzLCBkaXNwYXRjaFRvYXN0ZXIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpbXBvcnRDb21wbGV0ZSgpOwogICAgICAgICAgICBjbGVhbnVwQW5kQ2xvc2VNb2RhbCgpOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTc7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMzsKICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgzKTsKICAgICAgICAgICAgY2xlYW51cEFuZENsb3NlTW9kYWwoKTsKICAgICAgICAgICAgKDAsIF90b2FzdGVycy5kaXNwbGF5RXJyb3JUb2FzdCkoaTE4bi5JTVBPUlRfRkFJTEVELCBbX2NvbnRleHQudDAubWVzc2FnZV0sIGRpc3BhdGNoVG9hc3Rlcik7CgogICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBudWxsLCBudWxsLCBbWzMsIDEzXV0pOwogIH0sIFtzZWxlY3RlZEZpbGVzLCBvdmVyd3JpdGVdKTsKICB2YXIgaGFuZGxlQ2xvc2VNb2RhbCA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uICgpIHsKICAgIHNldFNlbGVjdGVkRmlsZXMobnVsbCk7CiAgICBjbG9zZU1vZGFsKCk7CiAgfSwgW2Nsb3NlTW9kYWxdKTsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgc2hvd01vZGFsICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlPdmVybGF5TWFzaywgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aU1vZGFsLCB7CiAgICBvbkNsb3NlOiBjbG9zZU1vZGFsLAogICAgbWF4V2lkdGg6ICc3NTBweCcKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTW9kYWxIZWFkZXIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlNb2RhbEhlYWRlclRpdGxlLCBudWxsLCBpMThuLklNUE9SVF9SVUxFKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlNb2RhbEJvZHksIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCB7CiAgICBzaXplOiAicyIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoNCIsIG51bGwsIGkxOG4uU0VMRUNUX1JVTEUpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogInMiCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWxlUGlja2VyLCB7CiAgICBpZDogInJ1bGUtZmlsZS1waWNrZXIiLAogICAgaW5pdGlhbFByb21wdFRleHQ6IGkxOG4uSU5JVElBTF9QUk9NUFRfVEVYVCwKICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShmaWxlcykgewogICAgICBzZXRTZWxlY3RlZEZpbGVzKE9iamVjdC5rZXlzKGZpbGVzKS5sZW5ndGggPiAwID8gZmlsZXMgOiBudWxsKTsKICAgIH0sCiAgICBkaXNwbGF5OiAnbGFyZ2UnLAogICAgZnVsbFdpZHRoOiB0cnVlLAogICAgaXNMb2FkaW5nOiBpc0ltcG9ydGluZwogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAicyIKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNoZWNrYm94LCB7CiAgICBpZDogInJ1bGUtb3ZlcndyaXRlLXNhdmVkLW9iamVjdCIsCiAgICBsYWJlbDogaTE4bi5PVkVSV1JJVEVfV0lUSF9TQU1FX05BTUUsCiAgICBjaGVja2VkOiBvdmVyd3JpdGUsCiAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoKSB7CiAgICAgIHJldHVybiBzZXRPdmVyd3JpdGUoIW92ZXJ3cml0ZSk7CiAgICB9CiAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTW9kYWxGb290ZXIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25FbXB0eSwgewogICAgb25DbGljazogaGFuZGxlQ2xvc2VNb2RhbAogIH0sIGkxOG4uQ0FOQ0VMX0JVVFRPTiksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgIG9uQ2xpY2s6IGltcG9ydFJ1bGVzQ2FsbGJhY2ssCiAgICBkaXNhYmxlZDogc2VsZWN0ZWRGaWxlcyA9PSBudWxsIHx8IGlzSW1wb3J0aW5nLAogICAgZmlsbDogdHJ1ZQogIH0sIGkxOG4uSU1QT1JUX1JVTEUpKSkpKTsKfTsKCmV4cG9ydHMuSW1wb3J0UnVsZU1vZGFsQ29tcG9uZW50ID0gSW1wb3J0UnVsZU1vZGFsQ29tcG9uZW50OwpJbXBvcnRSdWxlTW9kYWxDb21wb25lbnQuZGlzcGxheU5hbWUgPSAnSW1wb3J0UnVsZU1vZGFsQ29tcG9uZW50JzsKCnZhciBJbXBvcnRSdWxlTW9kYWwgPSBfcmVhY3QuZGVmYXVsdC5tZW1vKEltcG9ydFJ1bGVNb2RhbENvbXBvbmVudCk7CgpleHBvcnRzLkltcG9ydFJ1bGVNb2RhbCA9IEltcG9ydFJ1bGVNb2RhbDsKSW1wb3J0UnVsZU1vZGFsLmRpc3BsYXlOYW1lID0gJ0ltcG9ydFJ1bGVNb2RhbCc7"},null]}