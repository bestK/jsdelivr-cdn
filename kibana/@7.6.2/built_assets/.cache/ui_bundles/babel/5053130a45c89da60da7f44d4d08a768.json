{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/layers/styles/vector/properties/dynamic_style_property.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/layers/styles/vector/properties/dynamic_style_property.js","mtime":1585205045385},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkR5bmFtaWNTdHlsZVByb3BlcnR5ID0gdm9pZCAwOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfc3R5bGVfcHJvcGVydHkgPSByZXF1aXJlKCIuL3N0eWxlX3Byb3BlcnR5Iik7Cgp2YXIgX3ZlY3Rvcl9zdHlsZV9kZWZhdWx0cyA9IHJlcXVpcmUoIi4uL3ZlY3Rvcl9zdHlsZV9kZWZhdWx0cyIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX3N0eWxlX3V0aWwgPSByZXF1aXJlKCIuLi9zdHlsZV91dGlsIik7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfb3JkaW5hbF9sZWdlbmQgPSByZXF1aXJlKCIuL2NvbXBvbmVudHMvb3JkaW5hbF9sZWdlbmQiKTsKCnZhciBfY2F0ZWdvcmljYWxfbGVnZW5kID0gcmVxdWlyZSgiLi9jb21wb25lbnRzL2NhdGVnb3JpY2FsX2xlZ2VuZCIpOwoKdmFyIF9vcmRpbmFsX2ZpZWxkX21ldGFfb3B0aW9uc19wb3BvdmVyID0gcmVxdWlyZSgiLi4vY29tcG9uZW50cy9vcmRpbmFsX2ZpZWxkX21ldGFfb3B0aW9uc19wb3BvdmVyIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKdmFyIER5bmFtaWNTdHlsZVByb3BlcnR5ID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0Fic3RyYWN0U3R5bGVQcm9wZXJ0KSB7CiAgX2luaGVyaXRzKER5bmFtaWNTdHlsZVByb3BlcnR5LCBfQWJzdHJhY3RTdHlsZVByb3BlcnQpOwoKICBmdW5jdGlvbiBEeW5hbWljU3R5bGVQcm9wZXJ0eShvcHRpb25zLCBzdHlsZU5hbWUsIGZpZWxkLCBnZXRGaWVsZE1ldGEsIGdldEZpZWxkRm9ybWF0dGVyKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIER5bmFtaWNTdHlsZVByb3BlcnR5KTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEeW5hbWljU3R5bGVQcm9wZXJ0eSkuY2FsbCh0aGlzLCBvcHRpb25zLCBzdHlsZU5hbWUpKTsKICAgIF90aGlzLl9maWVsZCA9IGZpZWxkOwogICAgX3RoaXMuX2dldEZpZWxkTWV0YSA9IGdldEZpZWxkTWV0YTsKICAgIF90aGlzLl9nZXRGaWVsZEZvcm1hdHRlciA9IGdldEZpZWxkRm9ybWF0dGVyOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKER5bmFtaWNTdHlsZVByb3BlcnR5LCBbewogICAga2V5OiAiZ2V0RmllbGRNZXRhIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaWVsZE1ldGEoKSB7CiAgICAgIHJldHVybiB0aGlzLl9nZXRGaWVsZE1ldGEgJiYgdGhpcy5fZmllbGQgPyB0aGlzLl9nZXRGaWVsZE1ldGEodGhpcy5fZmllbGQuZ2V0TmFtZSgpKSA6IG51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0RmllbGQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZpZWxkKCkgewogICAgICByZXR1cm4gdGhpcy5fZmllbGQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0Q29tcHV0ZWRGaWVsZE5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbXB1dGVkRmllbGROYW1lKCkgewogICAgICBpZiAoIXRoaXMuaXNDb21wbGV0ZSgpKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHJldHVybiAoMCwgX3N0eWxlX3V0aWwuZ2V0Q29tcHV0ZWRGaWVsZE5hbWUpKHRoaXMuX3N0eWxlTmFtZSwgdGhpcy5nZXRGaWVsZCgpLmdldE5hbWUoKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNEeW5hbWljIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0R5bmFtaWMoKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogImlzT3JkaW5hbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNPcmRpbmFsKCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc0NhdGVnb3JpY2FsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0NhdGVnb3JpY2FsKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAiaGFzT3JkaW5hbEJyZWFrcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzT3JkaW5hbEJyZWFrcygpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogImlzT3JkaW5hbFJhbmdlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNPcmRpbmFsUmFuZ2VkKCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc0NvbXBsZXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0NvbXBsZXRlKCkgewogICAgICByZXR1cm4gISF0aGlzLl9maWVsZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRGaWVsZE9yaWdpbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmllbGRPcmlnaW4oKSB7CiAgICAgIHJldHVybiB0aGlzLl9maWVsZC5nZXRPcmlnaW4oKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc0ZpZWxkTWV0YUVuYWJsZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzRmllbGRNZXRhRW5hYmxlZCgpIHsKICAgICAgdmFyIGZpZWxkTWV0YU9wdGlvbnMgPSB0aGlzLmdldEZpZWxkTWV0YU9wdGlvbnMoKTsKICAgICAgcmV0dXJuIHRoaXMuc3VwcG9ydHNGaWVsZE1ldGEoKSAmJiBfbG9kYXNoLmRlZmF1bHQuZ2V0KGZpZWxkTWV0YU9wdGlvbnMsICdpc0VuYWJsZWQnLCB0cnVlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdXBwb3J0c0ZpZWxkTWV0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3VwcG9ydHNGaWVsZE1ldGEoKSB7CiAgICAgIGlmICh0aGlzLmlzT3JkaW5hbCgpKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaXNDb21wbGV0ZSgpICYmIHRoaXMuaXNPcmRpbmFsU2NhbGVkKCkgJiYgdGhpcy5fZmllbGQuc3VwcG9ydHNGaWVsZE1ldGEoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmlzQ2F0ZWdvcmljYWwoKSkgewogICAgICAgIHJldHVybiB0aGlzLmlzQ29tcGxldGUoKSAmJiB0aGlzLl9maWVsZC5zdXBwb3J0c0ZpZWxkTWV0YSgpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImdldEZpZWxkTWV0YVJlcXVlc3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZpZWxkTWV0YVJlcXVlc3QoKSB7CiAgICAgIHZhciBmaWVsZE1ldGFPcHRpb25zOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGdldEZpZWxkTWV0YVJlcXVlc3QkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGlmICghdGhpcy5pc09yZGluYWwoKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGZpZWxkTWV0YU9wdGlvbnMgPSB0aGlzLmdldEZpZWxkTWV0YU9wdGlvbnMoKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB0aGlzLl9maWVsZC5nZXRPcmRpbmFsRmllbGRNZXRhUmVxdWVzdCh7CiAgICAgICAgICAgICAgICBzaWdtYTogX2xvZGFzaC5kZWZhdWx0LmdldChmaWVsZE1ldGFPcHRpb25zLCAnc2lnbWEnLCBfdmVjdG9yX3N0eWxlX2RlZmF1bHRzLkRFRkFVTFRfU0lHTUEpCiAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGlmICghdGhpcy5pc0NhdGVnb3JpY2FsKCkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB0aGlzLl9maWVsZC5nZXRDYXRlZ29yaWNhbEZpZWxkTWV0YVJlcXVlc3QoKSk7CgogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgbnVsbCk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBudWxsLCB0aGlzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdXBwb3J0c0ZlYXR1cmVTdGF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3VwcG9ydHNGZWF0dXJlU3RhdGUoKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogImlzT3JkaW5hbFNjYWxlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNPcmRpbmFsU2NhbGVkKCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRGaWVsZE1ldGFPcHRpb25zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaWVsZE1ldGFPcHRpb25zKCkgewogICAgICByZXR1cm4gX2xvZGFzaC5kZWZhdWx0LmdldCh0aGlzLmdldE9wdGlvbnMoKSwgJ2ZpZWxkTWV0YU9wdGlvbnMnLCB7fSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3BsdWNrT3JkaW5hbFN0eWxlTWV0YUZyb21GZWF0dXJlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3BsdWNrT3JkaW5hbFN0eWxlTWV0YUZyb21GZWF0dXJlcyhmZWF0dXJlcykgewogICAgICB2YXIgbmFtZSA9IHRoaXMuZ2V0RmllbGQoKS5nZXROYW1lKCk7CiAgICAgIHZhciBtaW4gPSBJbmZpbml0eTsKICAgICAgdmFyIG1heCA9IC1JbmZpbml0eTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgZmVhdHVyZSA9IGZlYXR1cmVzW2ldOwogICAgICAgIHZhciBuZXdWYWx1ZSA9IHBhcnNlRmxvYXQoZmVhdHVyZS5wcm9wZXJ0aWVzW25hbWVdKTsKCiAgICAgICAgaWYgKCFpc05hTihuZXdWYWx1ZSkpIHsKICAgICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgbmV3VmFsdWUpOwogICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBuZXdWYWx1ZSk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gbWluID09PSBJbmZpbml0eSB8fCBtYXggPT09IC1JbmZpbml0eSA/IG51bGwgOiB7CiAgICAgICAgbWluOiBtaW4sCiAgICAgICAgbWF4OiBtYXgsCiAgICAgICAgZGVsdGE6IG1heCAtIG1pbgogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogIl9wbHVja0NhdGVnb3JpY2FsU3R5bGVNZXRhRnJvbUZlYXR1cmVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcGx1Y2tDYXRlZ29yaWNhbFN0eWxlTWV0YUZyb21GZWF0dXJlcyhmZWF0dXJlcykgewogICAgICB2YXIgZmllbGROYW1lID0gdGhpcy5nZXRGaWVsZCgpLmdldE5hbWUoKTsKICAgICAgdmFyIGNvdW50cyA9IG5ldyBNYXAoKTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgZmVhdHVyZSA9IGZlYXR1cmVzW2ldOwogICAgICAgIHZhciB0ZXJtID0gZmVhdHVyZS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV07IC8vcHJvcGVydGllcyBvYmplY3QgbWF5IGJlIHNwYXJzZSwgc28gbmVlZCB0byBjaGVjayBpZiB0aGUgZmllbGQgaXMgZWZmZWN0aXZlbHkgcHJlc2VudAoKICAgICAgICBpZiAoX3R5cGVvZih0ZXJtKSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBpZiAoY291bnRzLmhhcyh0ZXJtKSkgewogICAgICAgICAgICBjb3VudHMuc2V0KHRlcm0sIGNvdW50cy5nZXQodGVybSkgKyAxKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvdW50cy5zZXQodGVybSwgMSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgb3JkZXJlZCA9IFtdOwogICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7CiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlOwogICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7CgogICAgICB0cnkgewogICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGNvdW50c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHsKICAgICAgICAgIHZhciBfc3RlcCR2YWx1ZSA9IF9zbGljZWRUb0FycmF5KF9zdGVwLnZhbHVlLCAyKSwKICAgICAgICAgICAgICBrZXkgPSBfc3RlcCR2YWx1ZVswXSwKICAgICAgICAgICAgICB2YWx1ZSA9IF9zdGVwJHZhbHVlWzFdOwoKICAgICAgICAgIG9yZGVyZWQucHVzaCh7CiAgICAgICAgICAgIGtleToga2V5LAogICAgICAgICAgICBjb3VudDogdmFsdWUKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlOwogICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTsKICAgICAgICAgIH0KICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7CiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgb3JkZXJlZC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgcmV0dXJuIGIuY291bnQgLSBhLmNvdW50OwogICAgICB9KTsKICAgICAgdmFyIHRydW5jYXRlZCA9IG9yZGVyZWQuc2xpY2UoMCwgX2NvbnN0YW50cy5DT0xPUl9QQUxFVFRFX01BWF9TSVpFKTsKICAgICAgcmV0dXJuIHsKICAgICAgICBjYXRlZ29yaWVzOiB0cnVuY2F0ZWQKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwbHVja1N0eWxlTWV0YUZyb21GZWF0dXJlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGx1Y2tTdHlsZU1ldGFGcm9tRmVhdHVyZXMoZmVhdHVyZXMpIHsKICAgICAgaWYgKHRoaXMuaXNPcmRpbmFsKCkpIHsKICAgICAgICByZXR1cm4gdGhpcy5fcGx1Y2tPcmRpbmFsU3R5bGVNZXRhRnJvbUZlYXR1cmVzKGZlYXR1cmVzKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmlzQ2F0ZWdvcmljYWwoKSkgewogICAgICAgIHJldHVybiB0aGlzLl9wbHVja0NhdGVnb3JpY2FsU3R5bGVNZXRhRnJvbUZlYXR1cmVzKGZlYXR1cmVzKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogIl9wbHVja09yZGluYWxTdHlsZU1ldGFGcm9tRmllbGRNZXRhRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3BsdWNrT3JkaW5hbFN0eWxlTWV0YUZyb21GaWVsZE1ldGFEYXRhKGZpZWxkTWV0YURhdGEpIHsKICAgICAgdmFyIHJlYWxGaWVsZE5hbWUgPSB0aGlzLl9maWVsZC5nZXRFU0RvY0ZpZWxkTmFtZSA/IHRoaXMuX2ZpZWxkLmdldEVTRG9jRmllbGROYW1lKCkgOiB0aGlzLl9maWVsZC5nZXROYW1lKCk7CiAgICAgIHZhciBzdGF0cyA9IGZpZWxkTWV0YURhdGFbcmVhbEZpZWxkTmFtZV07CgogICAgICBpZiAoIXN0YXRzKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHZhciBzaWdtYSA9IF9sb2Rhc2guZGVmYXVsdC5nZXQodGhpcy5nZXRGaWVsZE1ldGFPcHRpb25zKCksICdzaWdtYScsIF92ZWN0b3Jfc3R5bGVfZGVmYXVsdHMuREVGQVVMVF9TSUdNQSk7CgogICAgICB2YXIgc3RkTG93ZXJCb3VuZHMgPSBzdGF0cy5hdmcgLSBzdGF0cy5zdGRfZGV2aWF0aW9uICogc2lnbWE7CiAgICAgIHZhciBzdGRVcHBlckJvdW5kcyA9IHN0YXRzLmF2ZyArIHN0YXRzLnN0ZF9kZXZpYXRpb24gKiBzaWdtYTsKICAgICAgdmFyIG1pbiA9IE1hdGgubWF4KHN0YXRzLm1pbiwgc3RkTG93ZXJCb3VuZHMpOwogICAgICB2YXIgbWF4ID0gTWF0aC5taW4oc3RhdHMubWF4LCBzdGRVcHBlckJvdW5kcyk7CiAgICAgIHJldHVybiB7CiAgICAgICAgbWluOiBtaW4sCiAgICAgICAgbWF4OiBtYXgsCiAgICAgICAgZGVsdGE6IG1heCAtIG1pbiwKICAgICAgICBpc01pbk91dHNpZGVTdGRSYW5nZTogc3RhdHMubWluIDwgc3RkTG93ZXJCb3VuZHMsCiAgICAgICAgaXNNYXhPdXRzaWRlU3RkUmFuZ2U6IHN0YXRzLm1heCA+IHN0ZFVwcGVyQm91bmRzCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAiX3BsdWNrQ2F0ZWdvcmljYWxTdHlsZU1ldGFGcm9tRmllbGRNZXRhRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3BsdWNrQ2F0ZWdvcmljYWxTdHlsZU1ldGFGcm9tRmllbGRNZXRhRGF0YShmaWVsZE1ldGFEYXRhKSB7CiAgICAgIHZhciBuYW1lID0gdGhpcy5nZXRGaWVsZCgpLmdldE5hbWUoKTsKCiAgICAgIGlmICghZmllbGRNZXRhRGF0YVtuYW1lXSB8fCAhZmllbGRNZXRhRGF0YVtuYW1lXS5idWNrZXRzKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHZhciBvcmRlcmVkID0gZmllbGRNZXRhRGF0YVtuYW1lXS5idWNrZXRzLm1hcChmdW5jdGlvbiAoYnVja2V0KSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGtleTogYnVja2V0LmtleSwKICAgICAgICAgIGNvdW50OiBidWNrZXQuZG9jX2NvdW50CiAgICAgICAgfTsKICAgICAgfSk7CiAgICAgIHJldHVybiB7CiAgICAgICAgY2F0ZWdvcmllczogb3JkZXJlZAogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInBsdWNrU3R5bGVNZXRhRnJvbUZpZWxkTWV0YURhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBsdWNrU3R5bGVNZXRhRnJvbUZpZWxkTWV0YURhdGEoZmllbGRNZXRhRGF0YSkgewogICAgICBpZiAodGhpcy5pc09yZGluYWwoKSkgewogICAgICAgIHJldHVybiB0aGlzLl9wbHVja09yZGluYWxTdHlsZU1ldGFGcm9tRmllbGRNZXRhRGF0YShmaWVsZE1ldGFEYXRhKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmlzQ2F0ZWdvcmljYWwoKSkgewogICAgICAgIHJldHVybiB0aGlzLl9wbHVja0NhdGVnb3JpY2FsU3R5bGVNZXRhRnJvbUZpZWxkTWV0YURhdGEoZmllbGRNZXRhRGF0YSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJmb3JtYXRGaWVsZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0RmllbGQodmFsdWUpIHsKICAgICAgaWYgKHRoaXMuZ2V0RmllbGQoKSkgewogICAgICAgIHZhciBmaWVsZE5hbWUgPSB0aGlzLmdldEZpZWxkKCkuZ2V0TmFtZSgpOwoKICAgICAgICB2YXIgZmllbGRGb3JtYXR0ZXIgPSB0aGlzLl9nZXRGaWVsZEZvcm1hdHRlcihmaWVsZE5hbWUpOwoKICAgICAgICByZXR1cm4gZmllbGRGb3JtYXR0ZXIgPyBmaWVsZEZvcm1hdHRlcih2YWx1ZSkgOiB2YWx1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRNYlZhbHVlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNYlZhbHVlKHZhbHVlKSB7CiAgICAgIGlmICghdGhpcy5pc09yZGluYWwoKSkgewogICAgICAgIHJldHVybiB0aGlzLmZvcm1hdEZpZWxkKHZhbHVlKTsKICAgICAgfQoKICAgICAgdmFyIHZhbHVlQXNGbG9hdCA9IHBhcnNlRmxvYXQodmFsdWUpOwoKICAgICAgaWYgKHRoaXMuaXNPcmRpbmFsU2NhbGVkKCkpIHsKICAgICAgICByZXR1cm4gKDAsIF9zdHlsZV91dGlsLnNjYWxlVmFsdWUpKHZhbHVlQXNGbG9hdCwgdGhpcy5nZXRGaWVsZE1ldGEoKSk7CiAgICAgIH0KCiAgICAgIGlmIChpc05hTih2YWx1ZUFzRmxvYXQpKSB7CiAgICAgICAgcmV0dXJuIDA7CiAgICAgIH0KCiAgICAgIHJldHVybiB2YWx1ZUFzRmxvYXQ7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyQnJlYWtlZExlZ2VuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQnJlYWtlZExlZ2VuZCgpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3JlbmRlckNhdGVnb3JpY2FsTGVnZW5kIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuZGVyQ2F0ZWdvcmljYWxMZWdlbmQoX3JlZikgewogICAgICB2YXIgaXNQb2ludHNPbmx5ID0gX3JlZi5pc1BvaW50c09ubHksCiAgICAgICAgICBpc0xpbmVzT25seSA9IF9yZWYuaXNMaW5lc09ubHksCiAgICAgICAgICBzeW1ib2xJZCA9IF9yZWYuc3ltYm9sSWQ7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jYXRlZ29yaWNhbF9sZWdlbmQuQ2F0ZWdvcmljYWxMZWdlbmQsIHsKICAgICAgICBzdHlsZTogdGhpcywKICAgICAgICBpc1BvaW50c09ubHk6IGlzUG9pbnRzT25seSwKICAgICAgICBpc0xpbmVzT25seTogaXNMaW5lc09ubHksCiAgICAgICAgc3ltYm9sSWQ6IHN5bWJvbElkCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIl9yZW5kZXJSYW5nZUxlZ2VuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbmRlclJhbmdlTGVnZW5kKCkgewogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfb3JkaW5hbF9sZWdlbmQuT3JkaW5hbExlZ2VuZCwgewogICAgICAgIHN0eWxlOiB0aGlzCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlckxlZ2VuZERldGFpbFJvdyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyTGVnZW5kRGV0YWlsUm93KF9yZWYyKSB7CiAgICAgIHZhciBpc1BvaW50c09ubHkgPSBfcmVmMi5pc1BvaW50c09ubHksCiAgICAgICAgICBpc0xpbmVzT25seSA9IF9yZWYyLmlzTGluZXNPbmx5LAogICAgICAgICAgc3ltYm9sSWQgPSBfcmVmMi5zeW1ib2xJZDsKCiAgICAgIGlmICh0aGlzLmlzT3JkaW5hbCgpKSB7CiAgICAgICAgaWYgKHRoaXMuaXNPcmRpbmFsUmFuZ2VkKCkpIHsKICAgICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJSYW5nZUxlZ2VuZCgpOwogICAgICAgIH0gZWxzZSBpZiAodGhpcy5oYXNPcmRpbmFsQnJlYWtzKCkpIHsKICAgICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJDYXRlZ29yaWNhbExlZ2VuZCh7CiAgICAgICAgICAgIGlzUG9pbnRzT25seTogaXNQb2ludHNPbmx5LAogICAgICAgICAgICBpc0xpbmVzT25seTogaXNMaW5lc09ubHksCiAgICAgICAgICAgIHN5bWJvbElkOiBzeW1ib2xJZAogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICh0aGlzLmlzQ2F0ZWdvcmljYWwoKSkgewogICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJDYXRlZ29yaWNhbExlZ2VuZCh7CiAgICAgICAgICBpc1BvaW50c09ubHk6IGlzUG9pbnRzT25seSwKICAgICAgICAgIGlzTGluZXNPbmx5OiBpc0xpbmVzT25seSwKICAgICAgICAgIHN5bWJvbElkOiBzeW1ib2xJZAogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyRmllbGRNZXRhUG9wb3ZlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRmllbGRNZXRhUG9wb3ZlcihvbkZpZWxkTWV0YU9wdGlvbnNDaGFuZ2UpIHsKICAgICAgaWYgKCF0aGlzLmlzT3JkaW5hbCgpIHx8ICF0aGlzLnN1cHBvcnRzRmllbGRNZXRhKCkpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX29yZGluYWxfZmllbGRfbWV0YV9vcHRpb25zX3BvcG92ZXIuT3JkaW5hbEZpZWxkTWV0YU9wdGlvbnNQb3BvdmVyLCB7CiAgICAgICAgc3R5bGVQcm9wZXJ0eTogdGhpcywKICAgICAgICBvbkNoYW5nZTogb25GaWVsZE1ldGFPcHRpb25zQ2hhbmdlCiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIER5bmFtaWNTdHlsZVByb3BlcnR5Owp9KF9zdHlsZV9wcm9wZXJ0eS5BYnN0cmFjdFN0eWxlUHJvcGVydHkpOwoKZXhwb3J0cy5EeW5hbWljU3R5bGVQcm9wZXJ0eSA9IER5bmFtaWNTdHlsZVByb3BlcnR5OwoKX2RlZmluZVByb3BlcnR5KER5bmFtaWNTdHlsZVByb3BlcnR5LCAidHlwZSIsIF9jb25zdGFudHMuU1RZTEVfVFlQRS5EWU5BTUlDKTs="},null]}