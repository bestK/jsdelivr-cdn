{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/infra/public/apps/start_app.js","dependencies":[{"path":"x-pack/legacy/plugins/infra/public/apps/start_app.js","mtime":1585205044577},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnN0YXJ0QXBwID0gc3RhcnRBcHA7Cgp2YXIgX2hpc3RvcnkgPSByZXF1aXJlKCJoaXN0b3J5Iik7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0LWRvbSIpKTsKCnZhciBfcmVhY3RBcG9sbG8gPSByZXF1aXJlKCJyZWFjdC1hcG9sbG8iKTsKCnZhciBfcmVhY3RSZWR1eCA9IHJlcXVpcmUoInJlYWN0LXJlZHV4Iik7Cgp2YXIgX3J4anMgPSByZXF1aXJlKCJyeGpzIik7Cgp2YXIgX29wZXJhdG9ycyA9IHJlcXVpcmUoInJ4anMvb3BlcmF0b3JzIik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9ldWlfc3R5bGVkX2NvbXBvbmVudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9jb21tb24vZXVpX3N0eWxlZF9jb21wb25lbnRzIik7Cgp2YXIgX3JvdXRlcyA9IHJlcXVpcmUoIi4uL3JvdXRlcyIpOwoKdmFyIF9zdG9yZSA9IHJlcXVpcmUoIi4uL3N0b3JlIik7Cgp2YXIgX2Fwb2xsb19jb250ZXh0ID0gcmVxdWlyZSgiLi4vdXRpbHMvYXBvbGxvX2NvbnRleHQiKTsKCnZhciBfcmVkdXhfY29udGV4dCA9IHJlcXVpcmUoIi4uL3V0aWxzL3JlZHV4X2NvbnRleHQiKTsKCnZhciBfaGlzdG9yeV9jb250ZXh0ID0gcmVxdWlyZSgiLi4vdXRpbHMvaGlzdG9yeV9jb250ZXh0Iik7Cgp2YXIgX3B1YmxpYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9wbHVnaW5zL2tpYmFuYV9yZWFjdC9wdWJsaWMiKTsKCnZhciBfYXBwID0gcmVxdWlyZSgiLi4vYXBwIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfSAvLyBOUF9UT0RPOiBUeXBlIHBsdWdpbnMKCgpmdW5jdGlvbiBzdGFydEFwcChsaWJzLCBjb3JlLCBwbHVnaW5zKSB7CiAgdmFyIGhpc3RvcnksIGxpYnMkLCBzdG9yZSwgSW5mcmFQbHVnaW5Sb290LCBub2RlLCBBcHA7CiAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBzdGFydEFwcCQoX2NvbnRleHQpIHsKICAgIHdoaWxlICgxKSB7CiAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICBjYXNlIDA6CiAgICAgICAgICBoaXN0b3J5ID0gKDAsIF9oaXN0b3J5LmNyZWF0ZUhhc2hIaXN0b3J5KSgpOwogICAgICAgICAgbGlicyQgPSBuZXcgX3J4anMuQmVoYXZpb3JTdWJqZWN0KGxpYnMpOwogICAgICAgICAgc3RvcmUgPSAoMCwgX3N0b3JlLmNyZWF0ZVN0b3JlKSh7CiAgICAgICAgICAgIGFwb2xsb0NsaWVudDogbGlicyQucGlwZSgoMCwgX29wZXJhdG9ycy5wbHVjaykoJ2Fwb2xsb0NsaWVudCcpKSwKICAgICAgICAgICAgb2JzZXJ2YWJsZUFwaTogbGlicyQucGlwZSgoMCwgX29wZXJhdG9ycy5wbHVjaykoJ29ic2VydmFibGVBcGknKSkKICAgICAgICAgIH0pOwoKICAgICAgICAgIEluZnJhUGx1Z2luUm9vdCA9IGZ1bmN0aW9uIEluZnJhUGx1Z2luUm9vdCgpIHsKICAgICAgICAgICAgdmFyIF91c2VVaVNldHRpbmckID0gKDAsIF9wdWJsaWMudXNlVWlTZXR0aW5nJCkoJ3RoZW1lOmRhcmtNb2RlJyksCiAgICAgICAgICAgICAgICBfdXNlVWlTZXR0aW5nJDIgPSBfc2xpY2VkVG9BcnJheShfdXNlVWlTZXR0aW5nJCwgMSksCiAgICAgICAgICAgICAgICBkYXJrTW9kZSA9IF91c2VVaVNldHRpbmckMlswXTsKCiAgICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGNvcmUuaTE4bi5Db250ZXh0LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRXJyb3JCb3VuZGFyeSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSZWR1eC5Qcm92aWRlciwgewogICAgICAgICAgICAgIHN0b3JlOiBzdG9yZQogICAgICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWR1eF9jb250ZXh0LlJlZHV4U3RhdGVDb250ZXh0UHJvdmlkZXIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0QXBvbGxvLkFwb2xsb1Byb3ZpZGVyLCB7CiAgICAgICAgICAgICAgY2xpZW50OiBsaWJzLmFwb2xsb0NsaWVudAogICAgICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9hcG9sbG9fY29udGV4dC5BcG9sbG9DbGllbnRDb250ZXh0LlByb3ZpZGVyLCB7CiAgICAgICAgICAgICAgdmFsdWU6IGxpYnMuYXBvbGxvQ2xpZW50CiAgICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aV9zdHlsZWRfY29tcG9uZW50cy5FdWlUaGVtZVByb3ZpZGVyLCB7CiAgICAgICAgICAgICAgZGFya01vZGU6IGRhcmtNb2RlCiAgICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2hpc3RvcnlfY29udGV4dC5IaXN0b3J5Q29udGV4dC5Qcm92aWRlciwgewogICAgICAgICAgICAgIHZhbHVlOiBoaXN0b3J5CiAgICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JvdXRlcy5QYWdlUm91dGVyLCB7CiAgICAgICAgICAgICAgaGlzdG9yeTogaGlzdG9yeQogICAgICAgICAgICB9KSkpKSkpKSkpOwogICAgICAgICAgfTsKCiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoX2FwcC5ST09UX0VMRU1FTlRfSUQpKTsKCiAgICAgICAgY2FzZSA2OgogICAgICAgICAgbm9kZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICBBcHAgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9wdWJsaWMuS2liYW5hQ29udGV4dFByb3ZpZGVyLCB7CiAgICAgICAgICAgIHNlcnZpY2VzOiBfb2JqZWN0U3ByZWFkKHt9LCBjb3JlLCB7fSwgcGx1Z2lucykKICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSW5mcmFQbHVnaW5Sb290LCBudWxsKSk7CgogICAgICAgICAgaWYgKG5vZGUpIHsKICAgICAgICAgICAgX3JlYWN0RG9tLmRlZmF1bHQucmVuZGVyKEFwcCwgbm9kZSk7CiAgICAgICAgICB9CgogICAgICAgIGNhc2UgOToKICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgfQogICAgfQogIH0pOwp9"},null]}