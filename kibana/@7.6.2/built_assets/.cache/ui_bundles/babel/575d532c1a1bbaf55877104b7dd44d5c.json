{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/snapshot_restore/public/app/components/repository_form/step_two.js","dependencies":[{"path":"x-pack/legacy/plugins/snapshot_restore/public/app/components/repository_form/step_two.js","mtime":1585205048211},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlJlcG9zaXRvcnlGb3JtU3RlcFR3byA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2NvbW1vbi9jb25zdGFudHMiKTsKCnZhciBfaW5kZXggPSByZXF1aXJlKCIuLi8uLi9pbmRleCIpOwoKdmFyIF9kb2N1bWVudGF0aW9uID0gcmVxdWlyZSgiLi4vLi4vc2VydmljZXMvZG9jdW1lbnRhdGlvbiIpOwoKdmFyIF90eXBlX3NldHRpbmdzID0gcmVxdWlyZSgiLi90eXBlX3NldHRpbmdzIik7Cgp2YXIgX3RleHQgPSByZXF1aXJlKCIuLi8uLi9zZXJ2aWNlcy90ZXh0Iik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KLyoKICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZQogKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuCiAqLwoKCnZhciBSZXBvc2l0b3J5Rm9ybVN0ZXBUd28gPSBmdW5jdGlvbiBSZXBvc2l0b3J5Rm9ybVN0ZXBUd28oX3JlZikgewogIHZhciByZXBvc2l0b3J5ID0gX3JlZi5yZXBvc2l0b3J5LAogICAgICBpc01hbmFnZWRSZXBvc2l0b3J5ID0gX3JlZi5pc01hbmFnZWRSZXBvc2l0b3J5LAogICAgICBpc0VkaXRpbmcgPSBfcmVmLmlzRWRpdGluZywKICAgICAgaXNTYXZpbmcgPSBfcmVmLmlzU2F2aW5nLAogICAgICBvblNhdmUgPSBfcmVmLm9uU2F2ZSwKICAgICAgdXBkYXRlUmVwb3NpdG9yeSA9IF9yZWYudXBkYXRlUmVwb3NpdG9yeSwKICAgICAgdmFsaWRhdGlvbiA9IF9yZWYudmFsaWRhdGlvbiwKICAgICAgc2F2ZUVycm9yID0gX3JlZi5zYXZlRXJyb3IsCiAgICAgIG9uQmFjayA9IF9yZWYub25CYWNrOwoKICB2YXIgX3VzZUFwcERlcGVuZGVuY2llcyA9ICgwLCBfaW5kZXgudXNlQXBwRGVwZW5kZW5jaWVzKSgpLAogICAgICBGb3JtYXR0ZWRNZXNzYWdlID0gX3VzZUFwcERlcGVuZGVuY2llcy5jb3JlLmkxOG4uRm9ybWF0dGVkTWVzc2FnZTsKCiAgdmFyIGhhc1ZhbGlkYXRpb25FcnJvcnMgPSAhdmFsaWRhdGlvbi5pc1ZhbGlkOwogIHZhciBuYW1lID0gcmVwb3NpdG9yeS5uYW1lLAogICAgICB0eXBlID0gcmVwb3NpdG9yeS50eXBlLAogICAgICBkZWxlZ2F0ZVR5cGUgPSByZXBvc2l0b3J5LnNldHRpbmdzLmRlbGVnYXRlVHlwZTsKICB2YXIgdHlwZUZvckRvY3MgPSB0eXBlID09PSBfY29uc3RhbnRzLlJFUE9TSVRPUllfVFlQRVMuc291cmNlID8gZGVsZWdhdGVUeXBlIDogdHlwZTsKCiAgdmFyIHJlbmRlclNldHRpbmdzID0gZnVuY3Rpb24gcmVuZGVyU2V0dGluZ3MoKSB7CiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgYWxpZ25JdGVtczogImNlbnRlciIsCiAgICAgIGp1c3RpZnlDb250ZW50OiAic3BhY2VCZXR3ZWVuIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIGdyb3c6IGZhbHNlCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgc2l6ZTogIm0iCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMiIsIHsKICAgICAgImRhdGEtdGVzdC1zdWJqIjogInRpdGxlIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlGb3JtLmZpZWxkcy5zZXR0aW5nc1RpdGxlIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJ7cmVwb3NpdG9yeU5hbWV9IHNldHRpbmdzIiwKICAgICAgdmFsdWVzOiB7CiAgICAgICAgcmVwb3NpdG9yeU5hbWU6ICInIi5jb25jYXQobmFtZSwgIiciKQogICAgICB9CiAgICB9KSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIGdyb3c6IGZhbHNlCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uRW1wdHksIHsKICAgICAgc2l6ZTogInMiLAogICAgICBmbHVzaDogInJpZ2h0IiwKICAgICAgaHJlZjogX2RvY3VtZW50YXRpb24uZG9jdW1lbnRhdGlvbkxpbmtzU2VydmljZS5nZXRSZXBvc2l0b3J5VHlwZURvY1VybCh0eXBlRm9yRG9jcyksCiAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgIGljb25UeXBlOiAiaGVscCIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5Rm9ybS5yZXBvc2l0b3J5VHlwZURvY0xpbmsiLAogICAgICBkZWZhdWx0TWVzc2FnZTogIntyZXBvc2l0b3J5VHlwZX0gcmVwb3NpdG9yeSBkb2NzIiwKICAgICAgdmFsdWVzOiB7CiAgICAgICAgcmVwb3NpdG9yeVR5cGU6IF90ZXh0LnRleHRTZXJ2aWNlLmdldFJlcG9zaXRvcnlUeXBlTmFtZSh0eXBlRm9yRG9jcykKICAgICAgfQogICAgfSkpKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgc2l6ZTogImwiCiAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfdHlwZV9zZXR0aW5ncy5UeXBlU2V0dGluZ3MsIHsKICAgICAgcmVwb3NpdG9yeTogcmVwb3NpdG9yeSwKICAgICAgdXBkYXRlUmVwb3NpdG9yeTogdXBkYXRlUmVwb3NpdG9yeSwKICAgICAgc2V0dGluZ0Vycm9yczogaGFzVmFsaWRhdGlvbkVycm9ycyAmJiB2YWxpZGF0aW9uLmVycm9ycy5zZXR0aW5ncyA/IHZhbGlkYXRpb24uZXJyb3JzLnNldHRpbmdzIDoge30KICAgIH0pKTsKICB9OwoKICB2YXIgcmVuZGVyQWN0aW9ucyA9IGZ1bmN0aW9uIHJlbmRlckFjdGlvbnMoKSB7CiAgICB2YXIgc2F2ZUxhYmVsID0gaXNFZGl0aW5nID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlGb3JtLnNhdmVCdXR0b25MYWJlbCIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiU2F2ZSIKICAgIH0pIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlGb3JtLnJlZ2lzdGVyQnV0dG9uTGFiZWwiLAogICAgICBkZWZhdWx0TWVzc2FnZTogIlJlZ2lzdGVyIgogICAgfSk7CgogICAgdmFyIHNhdmluZ0xhYmVsID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlGb3JtLnNhdmluZ0J1dHRvbkxhYmVsIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJTYXZpbmdcdTIwMjYiCiAgICB9KTsKCiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICBndXR0ZXJTaXplOiAibSIsCiAgICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiCiAgICB9LCBpc0VkaXRpbmcgPyBudWxsIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIGdyb3c6IGZhbHNlCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uRW1wdHksIHsKICAgICAgY29sb3I6ICJwcmltYXJ5IiwKICAgICAgaWNvblR5cGU6ICJhcnJvd0xlZnQiLAogICAgICBvbkNsaWNrOiBvbkJhY2ssCiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJiYWNrQnV0dG9uIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlGb3JtLmJhY2tCdXR0b25MYWJlbCIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQmFjayIKICAgIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICBncm93OiBmYWxzZQogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbiwgewogICAgICBjb2xvcjogaXNNYW5hZ2VkUmVwb3NpdG9yeSA/ICd3YXJuaW5nJyA6ICdzZWNvbmRhcnknLAogICAgICBpY29uVHlwZTogImNoZWNrIiwKICAgICAgb25DbGljazogb25TYXZlLAogICAgICBmaWxsOiBpc01hbmFnZWRSZXBvc2l0b3J5ID8gZmFsc2UgOiB0cnVlLAogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAic3VibWl0QnV0dG9uIiwKICAgICAgaXNMb2FkaW5nOiBpc1NhdmluZwogICAgfSwgaXNTYXZpbmcgPyBzYXZpbmdMYWJlbCA6IHNhdmVMYWJlbCkpKTsKICB9OwoKICB2YXIgcmVuZGVyRm9ybVZhbGlkYXRpb25FcnJvciA9IGZ1bmN0aW9uIHJlbmRlckZvcm1WYWxpZGF0aW9uRXJyb3IoKSB7CiAgICBpZiAoIWhhc1ZhbGlkYXRpb25FcnJvcnMpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ2FsbE91dCwgewogICAgICB0aXRsZTogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUZvcm0udmFsaWRhdGlvbkVycm9yVGl0bGUiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRml4IGVycm9ycyBiZWZvcmUgY29udGludWluZy4iCiAgICAgIH0pLAogICAgICBjb2xvcjogImRhbmdlciIsCiAgICAgIGljb25UeXBlOiAiY3Jvc3MiLAogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAicmVwb3NpdG9yeUZvcm1FcnJvciIKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgIHNpemU6ICJtIgogICAgfSkpOwogIH07CgogIHZhciByZW5kZXJTYXZlRXJyb3IgPSBmdW5jdGlvbiByZW5kZXJTYXZlRXJyb3IoKSB7CiAgICBpZiAoIXNhdmVFcnJvcikgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIHNhdmVFcnJvciwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICBzaXplOiAibSIKICAgIH0pKTsKICB9OwoKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgImRhdGEtdGVzdC1zdWJqIjogInN0ZXBUd28iCiAgfSwgcmVuZGVyU2V0dGluZ3MoKSwgcmVuZGVyRm9ybVZhbGlkYXRpb25FcnJvcigpLCByZW5kZXJTYXZlRXJyb3IoKSwgcmVuZGVyQWN0aW9ucygpKTsKfTsKCmV4cG9ydHMuUmVwb3NpdG9yeUZvcm1TdGVwVHdvID0gUmVwb3NpdG9yeUZvcm1TdGVwVHdvOw=="},null]}