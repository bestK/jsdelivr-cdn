{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/lens/public/indexpattern_plugin/field_item.js","dependencies":[{"path":"x-pack/legacy/plugins/lens/public/indexpattern_plugin/field_item.js","mtime":1585205045013},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkZpZWxkSXRlbSA9IEZpZWxkSXRlbTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZGF0ZW1hdGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkBlbGFzdGljL2RhdGVtYXRoIikpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfbmV3X3BsYXRmb3JtID0gcmVxdWlyZSgidWkvbmV3X3BsYXRmb3JtIik7Cgp2YXIgX2V1aV9jaGFydHNfdGhlbWUgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkvZGlzdC9ldWlfY2hhcnRzX3RoZW1lIik7Cgp2YXIgX2NoYXJ0cyA9IHJlcXVpcmUoIkBlbGFzdGljL2NoYXJ0cyIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3B1YmxpYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9wbHVnaW5zL2RhdGEvcHVibGljIik7Cgp2YXIgX2RyYWdfZHJvcCA9IHJlcXVpcmUoIi4uL2RyYWdfZHJvcCIpOwoKdmFyIF9sZW5zX2ZpZWxkX2ljb24gPSByZXF1aXJlKCIuL2xlbnNfZmllbGRfaWNvbiIpOwoKdmFyIF9sZW5zX3VpX3RlbGVtZXRyeSA9IHJlcXVpcmUoIi4uL2xlbnNfdWlfdGVsZW1ldHJ5Iik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF9leHRlbmRzKCkgewogIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7CiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOwoKICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7CiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHJldHVybiB0YXJnZXQ7CiAgfTsKCiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9CgpmdW5jdGlvbiB3cmFwT25Eb3Qoc3RyKSB7CiAgLy8gdTIwMEIgaXMgYSBub24td2lkdGggd2hpdGUtc3BhY2UgY2hhcmFjdGVyLCB3aGljaCBhbGxvd3MKICAvLyB0aGUgYnJvd3NlciB0byBlZmZpY2llbnRseSB3b3JkLXdyYXAgcmlnaHQgYWZ0ZXIgdGhlIGRvdAogIC8vIHdpdGhvdXQgdXMgaGF2aW5nIHRvIGRyYXcgYSBsb3Qgb2YgZXh0cmEgRE9NIGVsZW1lbnRzLCBldGMKICByZXR1cm4gc3RyID8gc3RyLnJlcGxhY2UoL1wuL2csICIuXHUyMDBCIikgOiAnJzsKfQoKZnVuY3Rpb24gRmllbGRJdGVtKHByb3BzKSB7CiAgdmFyIGNvcmUgPSBwcm9wcy5jb3JlLAogICAgICBmaWVsZCA9IHByb3BzLmZpZWxkLAogICAgICBpbmRleFBhdHRlcm4gPSBwcm9wcy5pbmRleFBhdHRlcm4sCiAgICAgIGhpZ2hsaWdodCA9IHByb3BzLmhpZ2hsaWdodCwKICAgICAgZXhpc3RzID0gcHJvcHMuZXhpc3RzLAogICAgICBxdWVyeSA9IHByb3BzLnF1ZXJ5LAogICAgICBkYXRlUmFuZ2UgPSBwcm9wcy5kYXRlUmFuZ2UsCiAgICAgIGZpbHRlcnMgPSBwcm9wcy5maWx0ZXJzLAogICAgICBoaWRlRGV0YWlscyA9IHByb3BzLmhpZGVEZXRhaWxzOwoKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZmFsc2UpLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgaW5mb0lzT3BlbiA9IF91c2VTdGF0ZTJbMF0sCiAgICAgIHNldE9wZW4gPSBfdXNlU3RhdGUyWzFdOwoKICB2YXIgX3VzZVN0YXRlMyA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKHsKICAgIGlzTG9hZGluZzogZmFsc2UKICB9KSwKICAgICAgX3VzZVN0YXRlNCA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTMsIDIpLAogICAgICBzdGF0ZSA9IF91c2VTdGF0ZTRbMF0sCiAgICAgIHNldFN0YXRlID0gX3VzZVN0YXRlNFsxXTsKCiAgdmFyIHdyYXBwYWJsZU5hbWUgPSB3cmFwT25Eb3QoZmllbGQubmFtZSk7CiAgdmFyIHdyYXBwYWJsZUhpZ2hsaWdodCA9IHdyYXBPbkRvdChoaWdobGlnaHQpOwogIHZhciBoaWdobGlnaHRJbmRleCA9IHdyYXBwYWJsZUhpZ2hsaWdodCA/IHdyYXBwYWJsZU5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHdyYXBwYWJsZUhpZ2hsaWdodC50b0xvd2VyQ2FzZSgpKSA6IC0xOwogIHZhciB3cmFwcGFibGVIaWdobGlnaHRhYmxlRmllbGROYW1lID0gaGlnaGxpZ2h0SW5kZXggPCAwID8gd3JhcHBhYmxlTmFtZSA6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgbnVsbCwgd3JhcHBhYmxlTmFtZS5zdWJzdHIoMCwgaGlnaGxpZ2h0SW5kZXgpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3Ryb25nIiwgbnVsbCwgd3JhcHBhYmxlTmFtZS5zdWJzdHIoaGlnaGxpZ2h0SW5kZXgsIHdyYXBwYWJsZUhpZ2hsaWdodC5sZW5ndGgpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3BhbiIsIG51bGwsIHdyYXBwYWJsZU5hbWUuc3Vic3RyKGhpZ2hsaWdodEluZGV4ICsgd3JhcHBhYmxlSGlnaGxpZ2h0Lmxlbmd0aCkpKTsKCiAgZnVuY3Rpb24gZmV0Y2hEYXRhKCkgewogICAgaWYgKHN0YXRlLmlzTG9hZGluZyB8fCBmaWVsZC50eXBlICE9PSAnbnVtYmVyJyAmJiBmaWVsZC50eXBlICE9PSAnc3RyaW5nJyAmJiBmaWVsZC50eXBlICE9PSAnZGF0ZScgJiYgZmllbGQudHlwZSAhPT0gJ2Jvb2xlYW4nICYmIGZpZWxkLnR5cGUgIT09ICdpcCcpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHNldFN0YXRlKGZ1bmN0aW9uIChzKSB7CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzLCB7CiAgICAgICAgaXNMb2FkaW5nOiB0cnVlCiAgICAgIH0pOwogICAgfSk7CiAgICBjb3JlLmh0dHAucG9zdCgiL2FwaS9sZW5zL2luZGV4X3N0YXRzLyIuY29uY2F0KGluZGV4UGF0dGVybi50aXRsZSwgIi9maWVsZCIpLCB7CiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBkc2xRdWVyeTogX3B1YmxpYy5lc1F1ZXJ5LmJ1aWxkRXNRdWVyeShpbmRleFBhdHRlcm4sIHF1ZXJ5LCBmaWx0ZXJzLCBfcHVibGljLmVzUXVlcnkuZ2V0RXNRdWVyeUNvbmZpZyhjb3JlLnVpU2V0dGluZ3MpKSwKICAgICAgICBmcm9tRGF0ZTogZGF0ZVJhbmdlLmZyb21EYXRlLAogICAgICAgIHRvRGF0ZTogZGF0ZVJhbmdlLnRvRGF0ZSwKICAgICAgICB0aW1lRmllbGROYW1lOiBpbmRleFBhdHRlcm4udGltZUZpZWxkTmFtZSwKICAgICAgICBmaWVsZDogZmllbGQKICAgICAgfSkKICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHsKICAgICAgc2V0U3RhdGUoZnVuY3Rpb24gKHMpIHsKICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgcywgewogICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSwKICAgICAgICAgIHRvdGFsRG9jdW1lbnRzOiByZXN1bHRzLnRvdGFsRG9jdW1lbnRzLAogICAgICAgICAgc2FtcGxlZERvY3VtZW50czogcmVzdWx0cy5zYW1wbGVkRG9jdW1lbnRzLAogICAgICAgICAgc2FtcGxlZFZhbHVlczogcmVzdWx0cy5zYW1wbGVkVmFsdWVzLAogICAgICAgICAgaGlzdG9ncmFtOiByZXN1bHRzLmhpc3RvZ3JhbSwKICAgICAgICAgIHRvcFZhbHVlczogcmVzdWx0cy50b3BWYWx1ZXMKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7CiAgICAgIHNldFN0YXRlKGZ1bmN0aW9uIChzKSB7CiAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHMsIHsKICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIHRvZ2dsZVBvcG92ZXIoKSB7CiAgICBpZiAoaGlkZURldGFpbHMpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHNldE9wZW4oIWluZm9Jc09wZW4pOwoKICAgIGlmICghaW5mb0lzT3BlbikgewogICAgICAoMCwgX2xlbnNfdWlfdGVsZW1ldHJ5LnRyYWNrVWlFdmVudCkoJ2luZGV4cGF0dGVybl9maWVsZF9pbmZvX2NsaWNrJyk7CiAgICAgIGZldGNoRGF0YSgpOwogICAgfQogIH0KCiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQb3BvdmVyLCB7CiAgICBpZDogImxuc0ZpZWxkTGlzdFBhbmVsX19maWVsZCIsCiAgICBjbGFzc05hbWU6ICJsbnNGaWVsZEl0ZW1fX3BvcG92ZXJBbmNob3IiLAogICAgZGlzcGxheTogImJsb2NrIiwKICAgIGNvbnRhaW5lcjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFwcGxpY2F0aW9uJykgfHwgdW5kZWZpbmVkLAogICAgYnV0dG9uOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9kcmFnX2Ryb3AuRHJhZ0Ryb3AsIHsKICAgICAgdmFsdWU6IHsKICAgICAgICBmaWVsZDogZmllbGQsCiAgICAgICAgaW5kZXhQYXR0ZXJuSWQ6IGluZGV4UGF0dGVybi5pZAogICAgICB9LAogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAibG5zRmllbGRMaXN0UGFuZWxGaWVsZCIsCiAgICAgIGRyYWdnYWJsZTogdHJ1ZSwKICAgICAgY2xhc3NOYW1lOiAibG5zRmllbGRJdGVtIGxuc0ZpZWxkSXRlbS0tIi5jb25jYXQoZmllbGQudHlwZSwgIiBsbnNGaWVsZEl0ZW0tLSIpLmNvbmNhdChleGlzdHMgPyAnZXhpc3RzJyA6ICdtaXNzaW5nJykKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlLZXlib2FyZEFjY2Vzc2libGUsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgY2xhc3NOYW1lOiAibG5zRmllbGRJdGVtX19pbmZvICIuY29uY2F0KGluZm9Jc09wZW4gPyAnbG5zRmllbGRJdGVtX19pbmZvLWlzT3BlbicgOiAnJyksCiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJsbnNGaWVsZExpc3RQYW5lbEZpZWxkLSIuY29uY2F0KGZpZWxkLm5hbWUpLAogICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgIHRvZ2dsZVBvcG92ZXIoKTsKICAgICAgfSwKICAgICAgb25LZXlQcmVzczogZnVuY3Rpb24gb25LZXlQcmVzcyhldmVudCkgewogICAgICAgIGlmIChldmVudC5rZXkgPT09ICdFTlRFUicpIHsKICAgICAgICAgIHRvZ2dsZVBvcG92ZXIoKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJhcmlhLWxhYmVsIjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLmZpZWxkU3RhdHNCdXR0b25MYWJlbCcsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0NsaWNrIGZvciBhIGZpZWxkIHByZXZpZXcsIG9yIGRyYWcgYW5kIGRyb3AgdG8gdmlzdWFsaXplLicKICAgICAgfSkKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2xlbnNfZmllbGRfaWNvbi5MZW5zRmllbGRJY29uLCB7CiAgICAgIHR5cGU6IGZpZWxkLnR5cGUKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgewogICAgICBjbGFzc05hbWU6ICJsbnNGaWVsZEl0ZW1fX25hbWUiLAogICAgICB0aXRsZTogZmllbGQubmFtZQogICAgfSwgd3JhcHBhYmxlSGlnaGxpZ2h0YWJsZUZpZWxkTmFtZSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlJY29uVGlwLCB7CiAgICAgIGFuY2hvckNsYXNzTmFtZTogImxuc0ZpZWxkSXRlbV9faW5mb0ljb24iLAogICAgICBjb250ZW50OiBoaWRlRGV0YWlscyA/IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5maWVsZEl0ZW1Ub29sdGlwJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRHJhZyBhbmQgZHJvcCB0byB2aXN1YWxpemUuJwogICAgICB9KSA6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5maWVsZFN0YXRzQnV0dG9uTGFiZWwnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDbGljayBmb3IgYSBmaWVsZCBwcmV2aWV3LCBvciBkcmFnIGFuZCBkcm9wIHRvIHZpc3VhbGl6ZS4nCiAgICAgIH0pLAogICAgICB0eXBlOiAiaUluQ2lyY2xlIiwKICAgICAgY29sb3I6ICJzdWJkdWVkIiwKICAgICAgc2l6ZTogInMiCiAgICB9KSkpKSwKICAgIGlzT3BlbjogaW5mb0lzT3BlbiwKICAgIGNsb3NlUG9wb3ZlcjogZnVuY3Rpb24gY2xvc2VQb3BvdmVyKCkgewogICAgICByZXR1cm4gc2V0T3BlbihmYWxzZSk7CiAgICB9LAogICAgYW5jaG9yUG9zaXRpb246ICJyaWdodFVwIiwKICAgIHBhbmVsQ2xhc3NOYW1lOiAibG5zRmllbGRJdGVtX19maWVsZFBvcG92ZXJQYW5lbCIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEZpZWxkSXRlbVBvcG92ZXJDb250ZW50cywgX2V4dGVuZHMoe30sIHN0YXRlLCBwcm9wcykpKTsKfQoKZnVuY3Rpb24gRmllbGRJdGVtUG9wb3ZlckNvbnRlbnRzKHByb3BzKSB7CiAgdmFyIGZpZWxkRm9ybWF0cyA9IF9uZXdfcGxhdGZvcm0ubnBTdGFydC5wbHVnaW5zLmRhdGEuZmllbGRGb3JtYXRzOwogIHZhciBoaXN0b2dyYW0gPSBwcm9wcy5oaXN0b2dyYW0sCiAgICAgIHRvcFZhbHVlcyA9IHByb3BzLnRvcFZhbHVlcywKICAgICAgaW5kZXhQYXR0ZXJuID0gcHJvcHMuaW5kZXhQYXR0ZXJuLAogICAgICBmaWVsZCA9IHByb3BzLmZpZWxkLAogICAgICBkYXRlUmFuZ2UgPSBwcm9wcy5kYXRlUmFuZ2UsCiAgICAgIGNvcmUgPSBwcm9wcy5jb3JlLAogICAgICBzYW1wbGVkVmFsdWVzID0gcHJvcHMuc2FtcGxlZFZhbHVlczsKICB2YXIgSVNfREFSS19USEVNRSA9IGNvcmUudWlTZXR0aW5ncy5nZXQoJ3RoZW1lOmRhcmtNb2RlJyk7CiAgdmFyIGNoYXJ0VGhlbWUgPSBJU19EQVJLX1RIRU1FID8gX2V1aV9jaGFydHNfdGhlbWUuRVVJX0NIQVJUU19USEVNRV9EQVJLLnRoZW1lIDogX2V1aV9jaGFydHNfdGhlbWUuRVVJX0NIQVJUU19USEVNRV9MSUdIVC50aGVtZTsKCiAgaWYgKHByb3BzLmlzTG9hZGluZykgewogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlMb2FkaW5nU3Bpbm5lciwgbnVsbCk7CiAgfSBlbHNlIGlmICgoIXByb3BzLmhpc3RvZ3JhbSB8fCBwcm9wcy5oaXN0b2dyYW0uYnVja2V0cy5sZW5ndGggPT09IDApICYmICghcHJvcHMudG9wVmFsdWVzIHx8IHByb3BzLnRvcFZhbHVlcy5idWNrZXRzLmxlbmd0aCA9PT0gMCkpIHsKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgICBzaXplOiAicyIKICAgIH0sIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5maWVsZFN0YXRzTm9EYXRhJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ05vIGRhdGEgdG8gZGlzcGxheS4nCiAgICB9KSk7CiAgfQoKICB2YXIgaGlzdG9ncmFtRGVmYXVsdCA9ICEhcHJvcHMuaGlzdG9ncmFtOwogIHZhciB0b3RhbFZhbHVlc0NvdW50ID0gdG9wVmFsdWVzICYmIHRvcFZhbHVlcy5idWNrZXRzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgYnVja2V0KSB7CiAgICByZXR1cm4gYnVja2V0LmNvdW50ICsgcHJldjsKICB9LCAwKTsKICB2YXIgb3RoZXJDb3VudCA9IHNhbXBsZWRWYWx1ZXMgJiYgdG90YWxWYWx1ZXNDb3VudCA/IHNhbXBsZWRWYWx1ZXMgLSB0b3RhbFZhbHVlc0NvdW50IDogMDsKCiAgaWYgKHRvdGFsVmFsdWVzQ291bnQgJiYgaGlzdG9ncmFtICYmIGhpc3RvZ3JhbS5idWNrZXRzLmxlbmd0aCAmJiB0b3BWYWx1ZXMgJiYgdG9wVmFsdWVzLmJ1Y2tldHMubGVuZ3RoKSB7CiAgICAvLyBEZWZhdWx0IHRvIGhpc3RvZ3JhbSB3aGVuIHRvcCB2YWx1ZXMgYXJlIGxlc3MgdGhhbiAxMCUgb2YgdG90YWwKICAgIGhpc3RvZ3JhbURlZmF1bHQgPSBvdGhlckNvdW50IC8gdG90YWxWYWx1ZXNDb3VudCA+IDAuOTsKICB9CgogIHZhciBfdXNlU3RhdGU1ID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoaGlzdG9ncmFtRGVmYXVsdCksCiAgICAgIF91c2VTdGF0ZTYgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGU1LCAyKSwKICAgICAgc2hvd2luZ0hpc3RvZ3JhbSA9IF91c2VTdGF0ZTZbMF0sCiAgICAgIHNldFNob3dpbmdIaXN0b2dyYW0gPSBfdXNlU3RhdGU2WzFdOwoKICB2YXIgZm9ybWF0dGVyOwoKICBpZiAoaW5kZXhQYXR0ZXJuLmZpZWxkRm9ybWF0TWFwICYmIGluZGV4UGF0dGVybi5maWVsZEZvcm1hdE1hcFtmaWVsZC5uYW1lXSkgewogICAgdmFyIEZvcm1hdFR5cGUgPSBmaWVsZEZvcm1hdHMuZ2V0VHlwZShpbmRleFBhdHRlcm4uZmllbGRGb3JtYXRNYXBbZmllbGQubmFtZV0uaWQpOwoKICAgIGlmIChGb3JtYXRUeXBlKSB7CiAgICAgIGZvcm1hdHRlciA9IG5ldyBGb3JtYXRUeXBlKGluZGV4UGF0dGVybi5maWVsZEZvcm1hdE1hcFtmaWVsZC5uYW1lXS5wYXJhbXMsIGNvcmUudWlTZXR0aW5ncy5nZXQuYmluZChjb3JlLnVpU2V0dGluZ3MpKTsKICAgIH0gZWxzZSB7CiAgICAgIGZvcm1hdHRlciA9IHsKICAgICAgICBjb252ZXJ0OiBmdW5jdGlvbiBjb252ZXJ0KGRhdGEpIHsKICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9CiAgfSBlbHNlIHsKICAgIGZvcm1hdHRlciA9IGZpZWxkRm9ybWF0cy5nZXREZWZhdWx0SW5zdGFuY2UoZmllbGQudHlwZSwgZmllbGQuZXNUeXBlcyk7CiAgfQoKICB2YXIgZXVpQnV0dG9uQ29sb3IgPSBmaWVsZC50eXBlID09PSAnc3RyaW5nJyA/ICdhY2NlbnQnIDogZmllbGQudHlwZSA9PT0gJ251bWJlcicgPyAnc2Vjb25kYXJ5JyA6ICdwcmltYXJ5JzsKICB2YXIgZXVpVGV4dENvbG9yID0gZmllbGQudHlwZSA9PT0gJ3N0cmluZycgPyAnYWNjZW50JyA6IGZpZWxkLnR5cGUgPT09ICdudW1iZXInID8gJ3NlY29uZGFyeScgOiAnZGVmYXVsdCc7CgogIHZhciBmcm9tRGF0ZSA9IF9kYXRlbWF0aC5kZWZhdWx0LnBhcnNlKGRhdGVSYW5nZS5mcm9tRGF0ZSk7CgogIHZhciB0b0RhdGUgPSBfZGF0ZW1hdGguZGVmYXVsdC5wYXJzZShkYXRlUmFuZ2UudG9EYXRlKTsKCiAgdmFyIHRpdGxlID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCk7CgogIGlmIChoaXN0b2dyYW0gJiYgaGlzdG9ncmFtLmJ1Y2tldHMubGVuZ3RoICYmIHRvcFZhbHVlcyAmJiB0b3BWYWx1ZXMuYnVja2V0cy5sZW5ndGgpIHsKICAgIHRpdGxlID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkdyb3VwLCB7CiAgICAgIGNsYXNzTmFtZTogImxuc0ZpZWxkSXRlbV9fcG9wb3ZlckJ1dHRvbkdyb3VwIiwKICAgICAgYnV0dG9uU2l6ZTogImNvbXByZXNzZWQiLAogICAgICBpc0Z1bGxXaWR0aDogdHJ1ZSwKICAgICAgbGVnZW5kOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subGVucy5pbmRleFBhdHRlcm4uZmllbGRTdGF0c0Rpc3BsYXlUb2dnbGUnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdUb2dnbGUgZWl0aGVyIHRoZScKICAgICAgfSksCiAgICAgIG9wdGlvbnM6IFt7CiAgICAgICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5maWVsZFRvcFZhbHVlc0xhYmVsJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdUb3AgdmFsdWVzJwogICAgICAgIH0pLAogICAgICAgIGlkOiAndG9wVmFsdWVzJwogICAgICB9LCB7CiAgICAgICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5maWVsZERpc3RyaWJ1dGlvbkxhYmVsJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdEaXN0cmlidXRpb24nCiAgICAgICAgfSksCiAgICAgICAgaWQ6ICdoaXN0b2dyYW0nCiAgICAgIH1dLAogICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2Uob3B0aW9uSWQpIHsKICAgICAgICBzZXRTaG93aW5nSGlzdG9ncmFtKG9wdGlvbklkID09PSAnaGlzdG9ncmFtJyk7CiAgICAgIH0sCiAgICAgIGlkU2VsZWN0ZWQ6IHNob3dpbmdIaXN0b2dyYW0gPyAnaGlzdG9ncmFtJyA6ICd0b3BWYWx1ZXMnCiAgICB9KTsKICB9IGVsc2UgaWYgKGZpZWxkLnR5cGUgPT09ICdkYXRlJykgewogICAgdGl0bGUgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subGVucy5pbmRleFBhdHRlcm4uZmllbGRUaW1lRGlzdHJpYnV0aW9uTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVGltZSBkaXN0cmlidXRpb24nCiAgICB9KSk7CiAgfSBlbHNlIGlmICh0b3BWYWx1ZXMgJiYgdG9wVmFsdWVzLmJ1Y2tldHMubGVuZ3RoKSB7CiAgICB0aXRsZSA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5maWVsZFRvcFZhbHVlc0xhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1RvcCB2YWx1ZXMnCiAgICB9KSk7CiAgfQoKICBmdW5jdGlvbiB3cmFwSW5Qb3BvdmVyKGVsKSB7CiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgdGl0bGUgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUG9wb3ZlclRpdGxlLCBudWxsLCB0aXRsZSkgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsKSwgZWwsIHByb3BzLnRvdGFsRG9jdW1lbnRzID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBvcG92ZXJGb290ZXIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCB7CiAgICAgIHNpemU6ICJ4cyIsCiAgICAgIHRleHRBbGlnbjogImNlbnRlciIKICAgIH0sIHByb3BzLnNhbXBsZWREb2N1bWVudHMgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLnBlcmNlbnRhZ2VPZkxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ3twZXJjZW50YWdlfSUgb2YnLAogICAgICB2YWx1ZXM6IHsKICAgICAgICBwZXJjZW50YWdlOiBNYXRoLnJvdW5kKHByb3BzLnNhbXBsZWREb2N1bWVudHMgLyBwcm9wcy50b3RhbERvY3VtZW50cyAqIDEwMCkKICAgICAgfQogICAgfSkpLCAnICcsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInN0cm9uZyIsIG51bGwsIGZpZWxkRm9ybWF0cy5nZXREZWZhdWx0SW5zdGFuY2UoX3B1YmxpYy5LQk5fRklFTERfVFlQRVMuTlVNQkVSLCBbX3B1YmxpYy5FU19GSUVMRF9UWVBFUy5JTlRFR0VSXSkuY29udmVydChwcm9wcy50b3RhbERvY3VtZW50cykpLCAnICcsIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5vZkRvY3VtZW50c0xhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ2RvY3VtZW50cycKICAgIH0pKSkgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsKSk7CiAgfQoKICBpZiAoaGlzdG9ncmFtICYmIGhpc3RvZ3JhbS5idWNrZXRzLmxlbmd0aCkgewogICAgdmFyIHNwZWNJZCA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5maWVsZFN0YXRzQ291bnRMYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDb3VudCcKICAgIH0pOwoKICAgIHZhciBleHBlY3RlZENvbG9yID0gKDAsIF9sZW5zX2ZpZWxkX2ljb24uZ2V0Q29sb3JGb3JEYXRhVHlwZSkoZmllbGQudHlwZSk7CiAgICB2YXIgc2VyaWVzQ29sb3JzID0gZXhwZWN0ZWRDb2xvciA/IFtleHBlY3RlZENvbG9yXSA6IHVuZGVmaW5lZDsKCiAgICBpZiAoZmllbGQudHlwZSA9PT0gJ2RhdGUnKSB7CiAgICAgIHJldHVybiB3cmFwSW5Qb3BvdmVyKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NoYXJ0cy5DaGFydCwgewogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJsbnNGaWVsZExpc3RQYW5lbC1oaXN0b2dyYW0iLAogICAgICAgIHNpemU6IHsKICAgICAgICAgIGhlaWdodDogMjAwLAogICAgICAgICAgd2lkdGg6IDMwMCAtIDMyCiAgICAgICAgfQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jaGFydHMuU2V0dGluZ3MsIHsKICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICB0eXBlOiBfY2hhcnRzLlRvb2x0aXBUeXBlLk5vbmUKICAgICAgICB9LAogICAgICAgIHRoZW1lOiBjaGFydFRoZW1lLAogICAgICAgIHhEb21haW46IGZyb21EYXRlICYmIHRvRGF0ZSA/IHsKICAgICAgICAgIG1pbjogZnJvbURhdGUudmFsdWVPZigpLAogICAgICAgICAgbWF4OiB0b0RhdGUudmFsdWVPZigpLAogICAgICAgICAgbWluSW50ZXJ2YWw6IE1hdGgucm91bmQoKHRvRGF0ZS52YWx1ZU9mKCkgLSBmcm9tRGF0ZS52YWx1ZU9mKCkpIC8gMTApCiAgICAgICAgfSA6IHVuZGVmaW5lZAogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2hhcnRzLkF4aXMsIHsKICAgICAgICBpZDogImtleSIsCiAgICAgICAgcG9zaXRpb246IF9jaGFydHMuUG9zaXRpb24uQm90dG9tLAogICAgICAgIHRpY2tGb3JtYXQ6IGZyb21EYXRlICYmIHRvRGF0ZSA/ICgwLCBfY2hhcnRzLm5pY2VUaW1lRm9ybWF0dGVyKShbZnJvbURhdGUudmFsdWVPZigpLCB0b0RhdGUudmFsdWVPZigpXSkgOiB1bmRlZmluZWQsCiAgICAgICAgc2hvd092ZXJsYXBwaW5nVGlja3M6IHRydWUKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NoYXJ0cy5CYXJTZXJpZXMsIHsKICAgICAgICBkYXRhOiBoaXN0b2dyYW0uYnVja2V0cywKICAgICAgICBpZDogc3BlY0lkLAogICAgICAgIHhBY2Nlc3NvcjogJ2tleScsCiAgICAgICAgeUFjY2Vzc29yczogWydjb3VudCddLAogICAgICAgIHhTY2FsZVR5cGU6IF9jaGFydHMuU2NhbGVUeXBlLlRpbWUsCiAgICAgICAgeVNjYWxlVHlwZTogX2NoYXJ0cy5TY2FsZVR5cGUuTGluZWFyLAogICAgICAgIGN1c3RvbVNlcmllc0NvbG9yczogc2VyaWVzQ29sb3JzLAogICAgICAgIHRpbWVab25lOiAibG9jYWwiCiAgICAgIH0pKSk7CiAgICB9IGVsc2UgaWYgKHNob3dpbmdIaXN0b2dyYW0gfHwgIXRvcFZhbHVlcyB8fCAhdG9wVmFsdWVzLmJ1Y2tldHMubGVuZ3RoKSB7CiAgICAgIHJldHVybiB3cmFwSW5Qb3BvdmVyKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NoYXJ0cy5DaGFydCwgewogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJsbnNGaWVsZExpc3RQYW5lbC1oaXN0b2dyYW0iLAogICAgICAgIHNpemU6IHsKICAgICAgICAgIGhlaWdodDogMjAwLAogICAgICAgICAgd2lkdGg6ICcxMDAlJwogICAgICAgIH0KICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2hhcnRzLlNldHRpbmdzLCB7CiAgICAgICAgcm90YXRpb246IDkwLAogICAgICAgIHRvb2x0aXA6IHsKICAgICAgICAgIHR5cGU6IF9jaGFydHMuVG9vbHRpcFR5cGUuTm9uZQogICAgICAgIH0sCiAgICAgICAgdGhlbWU6IGNoYXJ0VGhlbWUKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NoYXJ0cy5BeGlzLCB7CiAgICAgICAgaWQ6ICJrZXkiLAogICAgICAgIHBvc2l0aW9uOiBfY2hhcnRzLlBvc2l0aW9uLkxlZnQsCiAgICAgICAgc2hvd092ZXJsYXBwaW5nVGlja3M6IHRydWUsCiAgICAgICAgdGlja0Zvcm1hdDogZnVuY3Rpb24gdGlja0Zvcm1hdChkKSB7CiAgICAgICAgICByZXR1cm4gZm9ybWF0dGVyLmNvbnZlcnQoZCk7CiAgICAgICAgfQogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2hhcnRzLkJhclNlcmllcywgewogICAgICAgIGRhdGE6IGhpc3RvZ3JhbS5idWNrZXRzLAogICAgICAgIGlkOiBzcGVjSWQsCiAgICAgICAgeEFjY2Vzc29yOiAna2V5JywKICAgICAgICB5QWNjZXNzb3JzOiBbJ2NvdW50J10sCiAgICAgICAgeFNjYWxlVHlwZTogX2NoYXJ0cy5TY2FsZVR5cGUuTGluZWFyLAogICAgICAgIHlTY2FsZVR5cGU6IF9jaGFydHMuU2NhbGVUeXBlLkxpbmVhciwKICAgICAgICBjdXN0b21TZXJpZXNDb2xvcnM6IHNlcmllc0NvbG9ycwogICAgICB9KSkpOwogICAgfQogIH0KCiAgaWYgKHByb3BzLnRvcFZhbHVlcyAmJiBwcm9wcy50b3BWYWx1ZXMuYnVja2V0cy5sZW5ndGgpIHsKICAgIHJldHVybiB3cmFwSW5Qb3BvdmVyKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgImRhdGEtdGVzdC1zdWJqIjogImxuc0ZpZWxkTGlzdFBhbmVsLXRvcFZhbHVlcyIKICAgIH0sIHByb3BzLnRvcFZhbHVlcy5idWNrZXRzLm1hcChmdW5jdGlvbiAodG9wVmFsdWUpIHsKICAgICAgdmFyIGZvcm1hdHRlZCA9IGZvcm1hdHRlci5jb252ZXJ0KHRvcFZhbHVlLmtleSk7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgY2xhc3NOYW1lOiAibG5zRmllbGRJdGVtX190b3BWYWx1ZSIsCiAgICAgICAga2V5OiB0b3BWYWx1ZS5rZXkKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICAgIGFsaWduSXRlbXM6ICJzdHJldGNoIiwKICAgICAgICBrZXk6IHRvcFZhbHVlLmtleSwKICAgICAgICBndXR0ZXJTaXplOiAieHMiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IHRydWUsCiAgICAgICAgY2xhc3NOYW1lOiAiZXVpLXRleHRUcnVuY2F0ZSIKICAgICAgfSwgZm9ybWF0dGVkID09PSAnJyA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCB7CiAgICAgICAgc2l6ZTogInhzIiwKICAgICAgICBjb2xvcjogInN1YmR1ZWQiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImVtIiwgbnVsbCwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLmZpZWxkUGFuZWxFbXB0eVN0cmluZ1ZhbHVlJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRW1wdHkgc3RyaW5nJwogICAgICB9KSkpIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRvb2xUaXAsIHsKICAgICAgICBjb250ZW50OiBmb3JtYXR0ZWQsCiAgICAgICAgZGVsYXk6ICJsb25nIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgICAgIHNpemU6ICJ4cyIsCiAgICAgICAgY29sb3I6ICJzdWJkdWVkIiwKICAgICAgICBjbGFzc05hbWU6ICJldWktdGV4dFRydW5jYXRlIgogICAgICB9LCBmb3JtYXR0ZWQpKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCB7CiAgICAgICAgc2l6ZTogInhzIiwKICAgICAgICB0ZXh0QWxpZ246ICJsZWZ0IiwKICAgICAgICBjb2xvcjogZXVpVGV4dENvbG9yCiAgICAgIH0sIE1hdGgucm91bmQodG9wVmFsdWUuY291bnQgLyBwcm9wcy5zYW1wbGVkVmFsdWVzICogMTAwKSwgIiUiKSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUHJvZ3Jlc3MsIHsKICAgICAgICBjbGFzc05hbWU6ICJsbnNGaWVsZEl0ZW1fX3RvcFZhbHVlUHJvZ3Jlc3MiLAogICAgICAgIHZhbHVlOiB0b3BWYWx1ZS5jb3VudCAvIHByb3BzLnNhbXBsZWRWYWx1ZXMsCiAgICAgICAgbWF4OiAxLAogICAgICAgIHNpemU6ICJzIiwKICAgICAgICBjb2xvcjogZXVpQnV0dG9uQ29sb3IKICAgICAgfSkpOwogICAgfSksIG90aGVyQ291bnQgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgIGFsaWduSXRlbXM6ICJzdHJldGNoIiwKICAgICAgZ3V0dGVyU2l6ZTogInhzIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIGdyb3c6IHRydWUsCiAgICAgIGNsYXNzTmFtZTogImV1aS10ZXh0VHJ1bmNhdGUiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgICBzaXplOiAieHMiLAogICAgICBjbGFzc05hbWU6ICJldWktdGV4dFRydW5jYXRlIiwKICAgICAgY29sb3I6ICJzdWJkdWVkIgogICAgfSwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLm90aGVyRG9jc0xhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ090aGVyJwogICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIGdyb3c6IGZhbHNlLAogICAgICBjbGFzc05hbWU6ICJldWktdGV4dFRydW5jYXRlIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIHsKICAgICAgc2l6ZTogInMiLAogICAgICBjb2xvcjogInN1YmR1ZWQiCiAgICB9LCBNYXRoLnJvdW5kKG90aGVyQ291bnQgLyBwcm9wcy5zYW1wbGVkVmFsdWVzICogMTAwKSwgIiUiKSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUHJvZ3Jlc3MsIHsKICAgICAgY2xhc3NOYW1lOiAibG5zRmllbGRJdGVtX190b3BWYWx1ZVByb2dyZXNzIiwKICAgICAgdmFsdWU6IG90aGVyQ291bnQgLyBwcm9wcy5zYW1wbGVkVmFsdWVzLAogICAgICBtYXg6IDEsCiAgICAgIHNpemU6ICJzIiwKICAgICAgY29sb3I6ICJzdWJkdWVkIgogICAgfSkpIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCkpKTsKICB9CgogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsKTsKfQ=="},null]}