{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/apm/public/services/rest/callApi.js","dependencies":[{"path":"x-pack/legacy/plugins/apm/public/services/rest/callApi.js","mtime":1585205042994},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNsZWFyQ2FjaGUgPSBjbGVhckNhY2hlOwpleHBvcnRzLmNhbGxBcGkgPSBjYWxsQXBpOwoKdmFyIF9sb2Rhc2ggPSByZXF1aXJlKCJsb2Rhc2giKTsKCnZhciBfbHJ1Q2FjaGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxydS1jYWNoZSIpKTsKCnZhciBfb2JqZWN0SGFzaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgib2JqZWN0LWhhc2giKSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsKICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsKCiAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOwoKICB2YXIga2V5LCBpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7CgogICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsKICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsKICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsKICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsKICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsKICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsKICB2YXIgdGFyZ2V0ID0ge307CiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOwogIHZhciBrZXksIGk7CgogIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7CiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldOwogICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsKICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBmZXRjaE9wdGlvbnNXaXRoRGVidWcoZmV0Y2hPcHRpb25zKSB7CiAgdmFyIGRlYnVnRW5hYmxlZCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2FwbV9kZWJ1ZycpID09PSAndHJ1ZScgJiYgKDAsIF9sb2Rhc2guc3RhcnRzV2l0aCkoZmV0Y2hPcHRpb25zLnBhdGhuYW1lLCAnL2FwaS9hcG0nKTsKCiAgdmFyIGJvZHkgPSBmZXRjaE9wdGlvbnMuYm9keSwKICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhmZXRjaE9wdGlvbnMsIFsiYm9keSJdKTsKCiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHJlc3QsIHt9LCBib2R5ICE9PSB1bmRlZmluZWQgPyB7CiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KQogIH0gOiB7fSwgewogICAgcXVlcnk6IF9vYmplY3RTcHJlYWQoe30sIGZldGNoT3B0aW9ucy5xdWVyeSwge30sIGRlYnVnRW5hYmxlZCA/IHsKICAgICAgX2RlYnVnOiB0cnVlCiAgICB9IDoge30pCiAgfSk7Cn0KCnZhciBjYWNoZSA9IG5ldyBfbHJ1Q2FjaGUuZGVmYXVsdCh7CiAgbWF4OiAxMDAsCiAgbWF4QWdlOiAxMDAwICogNjAgKiA2MAp9KTsKCmZ1bmN0aW9uIGNsZWFyQ2FjaGUoKSB7CiAgY2FjaGUucmVzZXQoKTsKfQoKZnVuY3Rpb24gY2FsbEFwaShodHRwLCBmZXRjaE9wdGlvbnMpIHsKICB2YXIgY2FjaGVLZXksIGNhY2hlUmVzcG9uc2UsIF9mZXRjaE9wdGlvbnNXaXRoRGVidSwgcGF0aG5hbWUsIF9mZXRjaE9wdGlvbnNXaXRoRGVidTIsIG1ldGhvZCwgb3B0aW9ucywgbG93ZXJjYXNlTWV0aG9kLCByZXM7CgogIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gY2FsbEFwaSQoX2NvbnRleHQpIHsKICAgIHdoaWxlICgxKSB7CiAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICBjYXNlIDA6CiAgICAgICAgICBjYWNoZUtleSA9IGdldENhY2hlS2V5KGZldGNoT3B0aW9ucyk7CiAgICAgICAgICBjYWNoZVJlc3BvbnNlID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTsKCiAgICAgICAgICBpZiAoIWNhY2hlUmVzcG9uc2UpIHsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGNhY2hlUmVzcG9uc2UpOwoKICAgICAgICBjYXNlIDQ6CiAgICAgICAgICBfZmV0Y2hPcHRpb25zV2l0aERlYnUgPSBmZXRjaE9wdGlvbnNXaXRoRGVidWcoZmV0Y2hPcHRpb25zKSwgcGF0aG5hbWUgPSBfZmV0Y2hPcHRpb25zV2l0aERlYnUucGF0aG5hbWUsIF9mZXRjaE9wdGlvbnNXaXRoRGVidTIgPSBfZmV0Y2hPcHRpb25zV2l0aERlYnUubWV0aG9kLCBtZXRob2QgPSBfZmV0Y2hPcHRpb25zV2l0aERlYnUyID09PSB2b2lkIDAgPyAnZ2V0JyA6IF9mZXRjaE9wdGlvbnNXaXRoRGVidTIsIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX2ZldGNoT3B0aW9uc1dpdGhEZWJ1LCBbInBhdGhuYW1lIiwgIm1ldGhvZCJdKTsKICAgICAgICAgIGxvd2VyY2FzZU1ldGhvZCA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKGh0dHBbbG93ZXJjYXNlTWV0aG9kXShwYXRobmFtZSwgb3B0aW9ucykpOwoKICAgICAgICBjYXNlIDg6CiAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgIGlmIChpc0NhY2hhYmxlKGZldGNoT3B0aW9ucykpIHsKICAgICAgICAgICAgY2FjaGUuc2V0KGNhY2hlS2V5LCByZXMpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlcyk7CgogICAgICAgIGNhc2UgMTE6CiAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgIH0KICAgIH0KICB9KTsKfSAvLyBvbmx5IGNhY2hlIGl0ZW1zIHRoYXQgaGFzIGEgdGltZSByYW5nZSB3aXRoIGBzdGFydGAgYW5kIGBlbmRgIHBhcmFtcywKLy8gYW5kIHdoZXJlIGBlbmRgIGlzIG5vdCBhIHRpbWVzdGFtcCBpbiB0aGUgZnV0dXJlCgoKZnVuY3Rpb24gaXNDYWNoYWJsZShmZXRjaE9wdGlvbnMpIHsKICBpZiAoZmV0Y2hPcHRpb25zLmZvcmNlQ2FjaGUpIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgaWYgKCEoZmV0Y2hPcHRpb25zLnF1ZXJ5ICYmIGZldGNoT3B0aW9ucy5xdWVyeS5zdGFydCAmJiBmZXRjaE9wdGlvbnMucXVlcnkuZW5kKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgcmV0dXJuICgwLCBfbG9kYXNoLmlzU3RyaW5nKShmZXRjaE9wdGlvbnMucXVlcnkuZW5kKSAmJiBuZXcgRGF0ZShmZXRjaE9wdGlvbnMucXVlcnkuZW5kKS5nZXRUaW1lKCkgPCBEYXRlLm5vdygpOwp9IC8vIG9yZGVyIHRoZSBvcHRpb25zIG9iamVjdCB0byBtYWtlIHN1cmUgdGhhdCB0d28gb2JqZWN0cyB3aXRoIHRoZSBzYW1lIGFyZ3VtZW50cywgcHJvZHVjZSBwcm9kdWNlIHRoZQovLyBzYW1lIGNhY2hlIGtleSByZWdhcmRsZXNzIG9mIHRoZSBvcmRlciBvZiBwcm9wZXJ0aWVzCgoKZnVuY3Rpb24gZ2V0Q2FjaGVLZXkob3B0aW9ucykgewogIHJldHVybiAoMCwgX29iamVjdEhhc2guZGVmYXVsdCkob3B0aW9ucyk7Cn0="},null]}