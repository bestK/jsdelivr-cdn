{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/embeddables/index_patterns_missing_prompt.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/embeddables/index_patterns_missing_prompt.js","mtime":1585205047420},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkluZGV4UGF0dGVybnNNaXNzaW5nUHJvbXB0ID0gZXhwb3J0cy5JbmRleFBhdHRlcm5zTWlzc2luZ1Byb21wdENvbXBvbmVudCA9IHZvaWQgMDsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX3JlYWN0ID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2Nocm9tZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgidWkvY2hyb21lIikpOwoKdmFyIF9raWJhbmEgPSByZXF1aXJlKCIuLi8uLi9saWIva2liYW5hIik7Cgp2YXIgaTE4biA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoIi4vdHJhbnNsYXRpb25zIikpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9Ci8qCiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUKICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLgogKi8KCgp2YXIgSW5kZXhQYXR0ZXJuc01pc3NpbmdQcm9tcHRDb21wb25lbnQgPSBmdW5jdGlvbiBJbmRleFBhdHRlcm5zTWlzc2luZ1Byb21wdENvbXBvbmVudCgpIHsKICB2YXIgZG9jTGlua3MgPSAoMCwgX2tpYmFuYS51c2VLaWJhbmEpKCkuc2VydmljZXMuZG9jTGlua3M7CiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRW1wdHlQcm9tcHQsIHsKICAgIGljb25UeXBlOiAiZ2lzQXBwIiwKICAgIHRpdGxlOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDIiLCBudWxsLCBpMThuLkVSUk9SX1RJVExFKSwKICAgIHRpdGxlU2l6ZTogInhzIiwKICAgIGJvZHk6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBkZWZhdWx0TWVzc2FnZTogIlRvIGRpc3BsYXkgbWFwIGRhdGEsIHlvdSBtdXN0IGRlZmluZSBTSUVNIGluZGljZXMgKHtkZWZhdWx0SW5kZXh9KSBhbmQgS2liYW5hIGluZGV4IHBhdHRlcm5zIHdpdGggbWF0Y2hpbmcgZ2xvYiBwYXR0ZXJucy4gV2hlbiB1c2luZyB7YmVhdHN9LCB5b3UgY2FuIHJ1biB0aGUge3NldHVwfSBjb21tYW5kIG9uIHlvdXIgaG9zdHMgdG8gYXV0b21hdGljYWxseSBjcmVhdGUgdGhlIGluZGV4IHBhdHRlcm5zLiBGb3IgZXhhbXBsZToge2V4YW1wbGV9LiIsCiAgICAgIGlkOiAieHBhY2suc2llbS5jb21wb25lbnRzLmVtYmVkZGFibGVzLmluZGV4UGF0dGVybnNNaXNzaW5nUHJvbXB0LmVycm9yRGVzY3JpcHRpb24xIiwKICAgICAgdmFsdWVzOiB7CiAgICAgICAgZGVmYXVsdEluZGV4OiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiYSIsIHsKICAgICAgICAgIGhyZWY6ICIiLmNvbmNhdChfY2hyb21lLmRlZmF1bHQuZ2V0QmFzZVBhdGgoKSwgIi9hcHAva2liYW5hIy9tYW5hZ2VtZW50L2tpYmFuYS9zZXR0aW5ncyIpLAogICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgfSwgJ3NpZW06ZGVmYXVsdEluZGV4JyksCiAgICAgICAgYmVhdHM6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJhIiwgewogICAgICAgICAgaHJlZjogIiIuY29uY2F0KGRvY0xpbmtzLkVMQVNUSUNfV0VCU0lURV9VUkwsICJndWlkZS9lbi9iZWF0cy9saWJiZWF0LyIpLmNvbmNhdChkb2NMaW5rcy5ET0NfTElOS19WRVJTSU9OLCAiL2dldHRpbmctc3RhcnRlZC5odG1sIiksCiAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgIHRhcmdldDogIl9ibGFuayIKICAgICAgICB9LCAnYmVhdHMnKSwKICAgICAgICBzZXR1cDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDb2RlLCBudWxsLCAnc2V0dXAnKSwKICAgICAgICBleGFtcGxlOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvZGUsIG51bGwsICcuL3BhY2tldGJlYXQgc2V0dXAnKQogICAgICB9CiAgICB9KSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJZb3UgY2FuIGFsc28gY29uZmlndXJlIGluZGV4IHBhdHRlcm5zIG1hbnVhbGx5IGluIEtpYmFuYS4iLAogICAgICBpZDogInhwYWNrLnNpZW0uY29tcG9uZW50cy5lbWJlZGRhYmxlcy5pbmRleFBhdHRlcm5zTWlzc2luZ1Byb21wdC5lcnJvckRlc2NyaXB0aW9uMiIKICAgIH0pKSksCiAgICBhY3Rpb25zOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbiwgewogICAgICBocmVmOiAiIi5jb25jYXQoX2Nocm9tZS5kZWZhdWx0LmdldEJhc2VQYXRoKCksICIvYXBwL2tpYmFuYSMvbWFuYWdlbWVudC9raWJhbmEvaW5kZXhfcGF0dGVybnMiKSwKICAgICAgY29sb3I6ICJwcmltYXJ5IiwKICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgZmlsbDogdHJ1ZQogICAgfSwgaTE4bi5FUlJPUl9CVVRUT04pCiAgfSk7Cn07CgpleHBvcnRzLkluZGV4UGF0dGVybnNNaXNzaW5nUHJvbXB0Q29tcG9uZW50ID0gSW5kZXhQYXR0ZXJuc01pc3NpbmdQcm9tcHRDb21wb25lbnQ7CkluZGV4UGF0dGVybnNNaXNzaW5nUHJvbXB0Q29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ0luZGV4UGF0dGVybnNNaXNzaW5nUHJvbXB0Q29tcG9uZW50JzsKCnZhciBJbmRleFBhdHRlcm5zTWlzc2luZ1Byb21wdCA9IF9yZWFjdDIuZGVmYXVsdC5tZW1vKEluZGV4UGF0dGVybnNNaXNzaW5nUHJvbXB0Q29tcG9uZW50KTsKCmV4cG9ydHMuSW5kZXhQYXR0ZXJuc01pc3NpbmdQcm9tcHQgPSBJbmRleFBhdHRlcm5zTWlzc2luZ1Byb21wdDsKSW5kZXhQYXR0ZXJuc01pc3NpbmdQcm9tcHQuZGlzcGxheU5hbWUgPSAnSW5kZXhQYXR0ZXJuc01pc3NpbmdQcm9tcHQnOw=="},null]}