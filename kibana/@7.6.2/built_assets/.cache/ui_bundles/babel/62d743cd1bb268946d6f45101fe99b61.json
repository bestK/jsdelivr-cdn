{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/interpreter/public/canvas/batched_fetch.js","dependencies":[{"path":"src/legacy/core_plugins/interpreter/public/canvas/batched_fetch.js","mtime":1585205039356},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmJhdGNoZWRGZXRjaCA9IGJhdGNoZWRGZXRjaDsKCnZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJsb2Rhc2giKSk7Cgp2YXIgX29wZXJhdG9ycyA9IHJlcXVpcmUoInJ4anMvb3BlcmF0b3JzIik7Cgp2YXIgX3N0cmVhbWluZyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uL3BsdWdpbnMvYmZldGNoL3B1YmxpYy9zdHJlYW1pbmciKTsKCnZhciBfcHVibGljID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9raWJhbmFfdXRpbHMvcHVibGljIik7Cgp2YXIgX2NvbnN0cyA9IHJlcXVpcmUoIi4vY29uc3RzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9Ci8qCiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvcgogKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aAogKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodAogKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyCiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOyB5b3UgbWF5CiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLAogKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbgogKiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkKICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlCiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMKICogdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKCi8qKgogKiBDcmVhdGUgYSBmdW5jdGlvbiB3aGljaCBleGVjdXRlcyBhbiBFeHByZXNzaW9uIGZ1bmN0aW9uIG9uIHRoZQogKiBzZXJ2ZXIgYXMgcGFydCBvZiBhIGxhcmdlciBiYXRjaCBvZiBleGVjdXRpb25zLgogKi8KCgpmdW5jdGlvbiBiYXRjaGVkRmV0Y2goX3JlZikgewogIHZhciBmZXRjaFN0cmVhbWluZyA9IF9yZWYuZmV0Y2hTdHJlYW1pbmcsCiAgICAgIHNlcmlhbGl6ZSA9IF9yZWYuc2VyaWFsaXplLAogICAgICBfcmVmJG1zID0gX3JlZi5tcywKICAgICAgbXMgPSBfcmVmJG1zID09PSB2b2lkIDAgPyAxMCA6IF9yZWYkbXM7IC8vIFVuaXF1ZWx5IGlkZW50aWZpZXMgZWFjaCBmdW5jdGlvbiBjYWxsIGluIGEgYmF0Y2ggb3BlcmF0aW9uCiAgLy8gc28gdGhhdCB0aGUgYXBwcm9wcmlhdGUgcHJvbWlzZSBjYW4gYmUgcmVzb2x2ZWQgLyByZWplY3RlZCBsYXRlci4KCiAgdmFyIGlkID0gMDsgLy8gQSBtYXAgbGlrZSB7IGlkOiB7IGZ1dHVyZSwgcmVxdWVzdCB9IH0sIHdoaWNoIGlzIHVzZWQgdG8KICAvLyB0cmFjayBhbGwgb2YgdGhlIGZ1bmN0aW9uIGNhbGxzIGluIGEgYmF0Y2ggb3BlcmF0aW9uLgoKICB2YXIgYmF0Y2ggPSB7fTsKICB2YXIgdGltZW91dDsKCiAgdmFyIG5leHRJZCA9IGZ1bmN0aW9uIG5leHRJZCgpIHsKICAgIHJldHVybiArK2lkOwogIH07CgogIHZhciByZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkgewogICAgaWQgPSAwOwogICAgYmF0Y2ggPSB7fTsKICAgIHRpbWVvdXQgPSB1bmRlZmluZWQ7CiAgfTsKCiAgdmFyIHJ1bkJhdGNoID0gZnVuY3Rpb24gcnVuQmF0Y2goKSB7CiAgICBwcm9jZXNzQmF0Y2goZmV0Y2hTdHJlYW1pbmcsIGJhdGNoKTsKICAgIHJlc2V0KCk7CiAgfTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmMikgewogICAgdmFyIGZ1bmN0aW9uTmFtZSA9IF9yZWYyLmZ1bmN0aW9uTmFtZSwKICAgICAgICBjb250ZXh0ID0gX3JlZjIuY29udGV4dCwKICAgICAgICBhcmdzID0gX3JlZjIuYXJnczsKCiAgICBpZiAoIXRpbWVvdXQpIHsKICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQocnVuQmF0Y2gsIG1zKTsKICAgIH0KCiAgICB2YXIgcmVxdWVzdCA9IHsKICAgICAgZnVuY3Rpb25OYW1lOiBmdW5jdGlvbk5hbWUsCiAgICAgIGFyZ3M6IGFyZ3MsCiAgICAgIGNvbnRleHQ6IHNlcmlhbGl6ZShjb250ZXh0KQogICAgfTsgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoaXMgaXMgYSBkdXBsaWNhdGUgc2VydmVyIGZ1bmN0aW9uLgoKICAgIHZhciBkdXBsaWNhdGUgPSBPYmplY3QudmFsdWVzKGJhdGNoKS5maW5kKGZ1bmN0aW9uIChiYXRjaGVkUmVxdWVzdCkgewogICAgICByZXR1cm4gX2xvZGFzaC5kZWZhdWx0LmlzTWF0Y2goYmF0Y2hlZFJlcXVlc3QucmVxdWVzdCwgcmVxdWVzdCk7CiAgICB9KTsgLy8gSWYgaXQgaXMsIGp1c3QgcmV0dXJuIHRoZSBwcm9taXNlIG9mIHRoZSBkdXBsaWNhdGVkIHJlcXVlc3QuCgogICAgaWYgKGR1cGxpY2F0ZSkgewogICAgICByZXR1cm4gZHVwbGljYXRlLmZ1dHVyZS5wcm9taXNlOwogICAgfSAvLyBJZiBub3QsIGNyZWF0ZSBhIG5ldyBwcm9taXNlLCBpZCwgYW5kIGFkZCBpdCB0byB0aGUgYmF0Y2hlZCBjb2xsZWN0aW9uLgoKCiAgICB2YXIgZnV0dXJlID0gKDAsIF9wdWJsaWMuZGVmZXIpKCk7CiAgICB2YXIgbmV3SWQgPSBuZXh0SWQoKTsKICAgIHJlcXVlc3QuaWQgPSBuZXdJZDsKICAgIGJhdGNoW25ld0lkXSA9IHsKICAgICAgZnV0dXJlOiBmdXR1cmUsCiAgICAgIHJlcXVlc3Q6IHJlcXVlc3QKICAgIH07CiAgICByZXR1cm4gZnV0dXJlLnByb21pc2U7CiAgfTsKfQovKioKICogUnVucyB0aGUgc3BlY2lmaWVkIGJhdGNoIG9mIGZ1bmN0aW9ucyBvbiB0aGUgc2VydmVyLCB0aGVuIHJlc29sdmVzCiAqIHRoZSByZWxhdGVkIHByb21pc2VzLgogKi8KCgpmdW5jdGlvbiBwcm9jZXNzQmF0Y2goZmV0Y2hTdHJlYW1pbmcsIGJhdGNoKSB7CiAgdmFyIF9mZXRjaFN0cmVhbWluZywgc3RyZWFtLCBwcm9taXNlOwoKICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIHByb2Nlc3NCYXRjaCQoX2NvbnRleHQpIHsKICAgIHdoaWxlICgxKSB7CiAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICBjYXNlIDA6CiAgICAgICAgICBfZmV0Y2hTdHJlYW1pbmcgPSBmZXRjaFN0cmVhbWluZyh7CiAgICAgICAgICAgIHVybDogX2NvbnN0cy5GVU5DVElPTlNfVVJMLAogICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgZnVuY3Rpb25zOiBPYmplY3QudmFsdWVzKGJhdGNoKS5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IF9yZWYzLnJlcXVlc3Q7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdDsKICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9KQogICAgICAgICAgfSksIHN0cmVhbSA9IF9mZXRjaFN0cmVhbWluZy5zdHJlYW0sIHByb21pc2UgPSBfZmV0Y2hTdHJlYW1pbmcucHJvbWlzZTsKICAgICAgICAgIHN0cmVhbS5waXBlKCgwLCBfc3RyZWFtaW5nLnNwbGl0KSgnXG4nKSwgKDAsIF9vcGVyYXRvcnMuZmlsdGVyKShCb29sZWFuKSwgKDAsIF9vcGVyYXRvcnMubWFwKShmdW5jdGlvbiAoanNvbikgewogICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uKTsKICAgICAgICAgIH0pKS5zdWJzY3JpYmUoZnVuY3Rpb24gKG1lc3NhZ2UpIHsKICAgICAgICAgICAgdmFyIGlkID0gbWVzc2FnZS5pZCwKICAgICAgICAgICAgICAgIHN0YXR1c0NvZGUgPSBtZXNzYWdlLnN0YXR1c0NvZGUsCiAgICAgICAgICAgICAgICByZXN1bHQgPSBtZXNzYWdlLnJlc3VsdDsKICAgICAgICAgICAgdmFyIGZ1dHVyZSA9IGJhdGNoW2lkXS5mdXR1cmU7CgogICAgICAgICAgICBpZiAoc3RhdHVzQ29kZSA+PSA0MDApIHsKICAgICAgICAgICAgICBmdXR1cmUucmVqZWN0KHJlc3VsdCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZnV0dXJlLnJlc29sdmUocmVzdWx0KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjsKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChwcm9taXNlKTsKCiAgICAgICAgY2FzZSA1OgogICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEwOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgNzoKICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA3OwogICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgyKTsKICAgICAgICAgIE9iamVjdC52YWx1ZXMoYmF0Y2gpLmZvckVhY2goZnVuY3Rpb24gKF9yZWY0KSB7CiAgICAgICAgICAgIHZhciBmdXR1cmUgPSBfcmVmNC5mdXR1cmU7CiAgICAgICAgICAgIGZ1dHVyZS5yZWplY3QoX2NvbnRleHQudDApOwogICAgICAgICAgfSk7CgogICAgICAgIGNhc2UgMTA6CiAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgIH0KICAgIH0KICB9LCBudWxsLCBudWxsLCBbWzIsIDddXSk7Cn0="},null]}