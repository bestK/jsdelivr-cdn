{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/graph/public/services/persistence/saved_workspace.js","dependencies":[{"path":"x-pack/legacy/plugins/graph/public/services/persistence/saved_workspace.js","mtime":1585205044245},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuY3JlYXRlU2F2ZWRXb3Jrc3BhY2VDbGFzcyA9IGNyZWF0ZVNhdmVkV29ya3NwYWNlQ2xhc3M7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfc2F2ZWRfd29ya3NwYWNlX3JlZmVyZW5jZXMgPSByZXF1aXJlKCIuL3NhdmVkX3dvcmtzcGFjZV9yZWZlcmVuY2VzIik7Cgp2YXIgX2xlZ2FjeV9pbXBvcnRzID0gcmVxdWlyZSgiLi4vLi4vbGVnYWN5X2ltcG9ydHMiKTsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7CiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgewogICAgcmV0dXJuIGNhbGw7CiAgfQoKICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsKfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsKICB9OwogIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7Cn0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgewogIGlmIChzZWxmID09PSB2b2lkIDApIHsKICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7CiAgfQoKICByZXR1cm4gc2VsZjsKfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7CiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7CiAgfQoKICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsKICAgIGNvbnN0cnVjdG9yOiB7CiAgICAgIHZhbHVlOiBzdWJDbGFzcywKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgfQogIH0pOwogIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOwp9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgewogIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgewogICAgby5fX3Byb3RvX18gPSBwOwogICAgcmV0dXJuIG87CiAgfTsKCiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIGNyZWF0ZVNhdmVkV29ya3NwYWNlQ2xhc3Moc2VydmljZXMpIHsKICAvLyBTYXZlZFdvcmtzcGFjZSBjb25zdHJ1Y3Rvci4gVXN1YWxseSB5b3UnZCBpbnRlcmFjdCB3aXRoIGFuIGluc3RhbmNlIG9mIHRoaXMuCiAgLy8gSUQgaXMgb3B0aW9uLCB3aXRob3V0IGl0IG9uZSB3aWxsIGJlIGdlbmVyYXRlZCBvbiBzYXZlLgogIHZhciBTYXZlZE9iamVjdENsYXNzID0gKDAsIF9sZWdhY3lfaW1wb3J0cy5jcmVhdGVTYXZlZE9iamVjdENsYXNzKShzZXJ2aWNlcyk7CgogIHZhciBTYXZlZFdvcmtzcGFjZUNsYXNzID0KICAvKiNfX1BVUkVfXyovCiAgZnVuY3Rpb24gKF9TYXZlZE9iamVjdENsYXNzKSB7CiAgICBfaW5oZXJpdHMoU2F2ZWRXb3Jrc3BhY2VDbGFzcywgX1NhdmVkT2JqZWN0Q2xhc3MpOyAvLyBpZiB0eXBlOndvcmtzcGFjZSBoYXMgbm8gbWFwcGluZywgd2UgcHVzaCB0aGlzIG1hcHBpbmcgaW50byBFUwogICAgLy8gT3JkZXIgdGhlc2UgZmllbGRzIHRvIHRoZSB0b3AsIHRoZSByZXN0IGFyZSBhbHBoYWJldGljYWwKCgogICAgZnVuY3Rpb24gU2F2ZWRXb3Jrc3BhY2VDbGFzcyhpZCkgewogICAgICB2YXIgX3RoaXM7CgogICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2F2ZWRXb3Jrc3BhY2VDbGFzcyk7IC8vIEdpdmVzIG91ciBTYXZlZFdvcmtzcGFjZSB0aGUgcHJvcGVydGllcyBvZiBhIFNhdmVkT2JqZWN0CgoKICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2F2ZWRXb3Jrc3BhY2VDbGFzcykuY2FsbCh0aGlzLCB7CiAgICAgICAgdHlwZTogU2F2ZWRXb3Jrc3BhY2VDbGFzcy50eXBlLAogICAgICAgIG1hcHBpbmc6IFNhdmVkV29ya3NwYWNlQ2xhc3MubWFwcGluZywKICAgICAgICBzZWFyY2hTb3VyY2U6IFNhdmVkV29ya3NwYWNlQ2xhc3Muc2VhcmNoU291cmNlLAogICAgICAgIGV4dHJhY3RSZWZlcmVuY2VzOiBfc2F2ZWRfd29ya3NwYWNlX3JlZmVyZW5jZXMuZXh0cmFjdFJlZmVyZW5jZXMsCiAgICAgICAgaW5qZWN0UmVmZXJlbmNlczogX3NhdmVkX3dvcmtzcGFjZV9yZWZlcmVuY2VzLmluamVjdFJlZmVyZW5jZXMsCiAgICAgICAgLy8gaWYgdGhpcyBpcyBudWxsL3VuZGVmaW5lZCB0aGVuIHRoZSBTYXZlZE9iamVjdCB3aWxsIGJlIGFzc2lnbmVkIHRoZSBkZWZhdWx0cwogICAgICAgIGlkOiBpZCwKICAgICAgICAvLyBkZWZhdWx0IHZhbHVlcyB0aGF0IHdpbGwgZ2V0IGFzc2lnbmVkIGlmIHRoZSBkb2MgaXMgbmV3CiAgICAgICAgZGVmYXVsdHM6IHsKICAgICAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suZ3JhcGguc2F2ZWRXb3Jrc3BhY2Uud29ya3NwYWNlTmFtZVRpdGxlJywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ05ldyBHcmFwaCBXb3Jrc3BhY2UnCiAgICAgICAgICB9KSwKICAgICAgICAgIG51bUxpbmtzOiAwLAogICAgICAgICAgbnVtVmVydGljZXM6IDAsCiAgICAgICAgICB3c1N0YXRlOiAne30nLAogICAgICAgICAgdmVyc2lvbjogMQogICAgICAgIH0KICAgICAgfSkpOwoKICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAid3NTdGF0ZSIsIHZvaWQgMCk7CgogICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJnZXREaXNwbGF5TmFtZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gJ2dyYXBoIHdvcmtzcGFjZSc7CiAgICAgIH0pOwoKICAgICAgcmV0dXJuIF90aGlzOwogICAgfSAvLyBPdmVyd3JpdGUgdGhlIGRlZmF1bHQgZ2V0RGlzcGxheU5hbWUgZnVuY3Rpb24gd2hpY2ggdXNlcyB0eXBlIGFuZCB3aGljaCBpcyBub3QgdmVyeQogICAgLy8gdXNlciBmcmllbmRseSBmb3IgdGhpcyBvYmplY3QuCgoKICAgIHJldHVybiBTYXZlZFdvcmtzcGFjZUNsYXNzOwogIH0oU2F2ZWRPYmplY3RDbGFzcyk7CgogIF9kZWZpbmVQcm9wZXJ0eShTYXZlZFdvcmtzcGFjZUNsYXNzLCAidHlwZSIsICdncmFwaC13b3Jrc3BhY2UnKTsKCiAgX2RlZmluZVByb3BlcnR5KFNhdmVkV29ya3NwYWNlQ2xhc3MsICJtYXBwaW5nIiwgewogICAgdGl0bGU6ICd0ZXh0JywKICAgIGRlc2NyaXB0aW9uOiAndGV4dCcsCiAgICBudW1MaW5rczogJ2ludGVnZXInLAogICAgbnVtVmVydGljZXM6ICdpbnRlZ2VyJywKICAgIHZlcnNpb246ICdpbnRlZ2VyJywKICAgIHdzU3RhdGU6ICdqc29uJwogIH0pOwoKICBfZGVmaW5lUHJvcGVydHkoU2F2ZWRXb3Jrc3BhY2VDbGFzcywgImZpZWxkT3JkZXIiLCBbJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJ10pOwoKICBfZGVmaW5lUHJvcGVydHkoU2F2ZWRXb3Jrc3BhY2VDbGFzcywgInNlYXJjaFNvdXJjZSIsIGZhbHNlKTsKCiAgcmV0dXJuIFNhdmVkV29ya3NwYWNlQ2xhc3M7Cn0="},null]}