{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/index_lifecycle_management/public/sections/edit_policy/edit_policy.js","dependencies":[{"path":"x-pack/legacy/plugins/index_lifecycle_management/public/sections/edit_policy/edit_policy.js","mtime":1585205044309},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkVkaXRQb2xpY3kgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicHJvcC10eXBlcyIpKTsKCnZhciBfbm90aWZ5ID0gcmVxdWlyZSgidWkvbm90aWZ5Iik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi9jb25zdGFudHMiKTsKCnZhciBfbmF2aWdhdGlvbiA9IHJlcXVpcmUoIi4uLy4uL3NlcnZpY2VzL25hdmlnYXRpb24iKTsKCnZhciBfZmluZF9lcnJvcnMgPSByZXF1aXJlKCIuLi8uLi9zZXJ2aWNlcy9maW5kX2Vycm9ycyIpOwoKdmFyIF9jb21wb25lbnRzID0gcmVxdWlyZSgiLi4vY29tcG9uZW50cyIpOwoKdmFyIF9ub2RlX2F0dHJzX2RldGFpbHMgPSByZXF1aXJlKCIuL2NvbXBvbmVudHMvbm9kZV9hdHRyc19kZXRhaWxzIik7Cgp2YXIgX3BvbGljeV9qc29uX2ZseW91dCA9IHJlcXVpcmUoIi4vY29tcG9uZW50cy9wb2xpY3lfanNvbl9mbHlvdXQiKTsKCnZhciBfZm9ybV9lcnJvcnMgPSByZXF1aXJlKCIuL2Zvcm1fZXJyb3JzIik7Cgp2YXIgX2hvdF9waGFzZSA9IHJlcXVpcmUoIi4vY29tcG9uZW50cy9ob3RfcGhhc2UiKTsKCnZhciBfd2FybV9waGFzZSA9IHJlcXVpcmUoIi4vY29tcG9uZW50cy93YXJtX3BoYXNlIik7Cgp2YXIgX2RlbGV0ZV9waGFzZSA9IHJlcXVpcmUoIi4vY29tcG9uZW50cy9kZWxldGVfcGhhc2UiKTsKCnZhciBfY29sZF9waGFzZSA9IHJlcXVpcmUoIi4vY29tcG9uZW50cy9jb2xkX3BoYXNlIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCnZhciBFZGl0UG9saWN5ID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0NvbXBvbmVudCkgewogIF9pbmhlcml0cyhFZGl0UG9saWN5LCBfQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gRWRpdFBvbGljeShwcm9wcykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFZGl0UG9saWN5KTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihFZGl0UG9saWN5KS5jYWxsKHRoaXMsIHByb3BzKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic2VsZWN0UG9saWN5IiwgZnVuY3Rpb24gKHBvbGljeU5hbWUpIHsKICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsCiAgICAgICAgICBzZXRTZWxlY3RlZFBvbGljeSA9IF90aGlzJHByb3BzLnNldFNlbGVjdGVkUG9saWN5LAogICAgICAgICAgcG9saWNpZXMgPSBfdGhpcyRwcm9wcy5wb2xpY2llczsKICAgICAgdmFyIHNlbGVjdGVkUG9saWN5ID0gcG9saWNpZXMuZmluZChmdW5jdGlvbiAocG9saWN5KSB7CiAgICAgICAgcmV0dXJuIHBvbGljeS5uYW1lID09PSBwb2xpY3lOYW1lOwogICAgICB9KTsKCiAgICAgIGlmIChzZWxlY3RlZFBvbGljeSkgewogICAgICAgIHNldFNlbGVjdGVkUG9saWN5KHNlbGVjdGVkUG9saWN5KTsKICAgICAgfQogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiYmFja1RvUG9saWN5TGlzdCIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMucHJvcHMuc2V0U2VsZWN0ZWRQb2xpY3kobnVsbCk7CgogICAgICAoMCwgX25hdmlnYXRpb24uZ29Ub1BvbGljeUxpc3QpKCk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzdWJtaXQiLCBmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgX3RoaXMkcHJvcHMyLCBzYXZlTGlmZWN5Y2xlUG9saWN5LCBsaWZlY3ljbGUsIHNhdmVBc05ld1BvbGljeSwgZmlyc3RFcnJvciwgZXJyb3JSb3dJZCwgZWxlbWVudCwgc3VjY2VzczsKCiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgICAgICAgICAgaXNTaG93aW5nRXJyb3JzOiB0cnVlCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLCBzYXZlTGlmZWN5Y2xlUG9saWN5ID0gX3RoaXMkcHJvcHMyLnNhdmVMaWZlY3ljbGVQb2xpY3ksIGxpZmVjeWNsZSA9IF90aGlzJHByb3BzMi5saWZlY3ljbGUsIHNhdmVBc05ld1BvbGljeSA9IF90aGlzJHByb3BzMi5zYXZlQXNOZXdQb2xpY3ksIGZpcnN0RXJyb3IgPSBfdGhpcyRwcm9wczIuZmlyc3RFcnJvcjsKCiAgICAgICAgICAgICAgaWYgKCFmaXJzdEVycm9yKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX25vdGlmeS50b2FzdE5vdGlmaWNhdGlvbnMuYWRkRGFuZ2VyKF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pbmRleExpZmVjeWNsZU1nbXQuZWRpdFBvbGljeS5mb3JtRXJyb3JzTWVzc2FnZScsIHsKICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUGxlYXNlIGZpeCB0aGUgZXJyb3JzIG9uIHRoaXMgcGFnZS4nCiAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBlcnJvclJvd0lkID0gIiIuY29uY2F0KGZpcnN0RXJyb3IucmVwbGFjZSgnLicsICctJyksICItcm93Iik7CiAgICAgICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVycm9yUm93SWQpOwoKICAgICAgICAgICAgICBpZiAoZWxlbWVudCkgewogICAgICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxJbnRvVmlldyh7CiAgICAgICAgICAgICAgICAgIGJsb2NrOiAnY2VudGVyJywKICAgICAgICAgICAgICAgICAgaW5saW5lOiAnbmVhcmVzdCcKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEzOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHNhdmVMaWZlY3ljbGVQb2xpY3kobGlmZWN5Y2xlLCBzYXZlQXNOZXdQb2xpY3kpKTsKCiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgc3VjY2VzcyA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICBfdGhpcy5iYWNrVG9Qb2xpY3lMaXN0KCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzaG93Tm9kZURldGFpbHNGbHlvdXQiLCBmdW5jdGlvbiAoc2VsZWN0ZWROb2RlQXR0cnNGb3JEZXRhaWxzKSB7CiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBpc1Nob3dpbmdOb2RlRGV0YWlsc0ZseW91dDogdHJ1ZSwKICAgICAgICBzZWxlY3RlZE5vZGVBdHRyc0ZvckRldGFpbHM6IHNlbGVjdGVkTm9kZUF0dHJzRm9yRGV0YWlscwogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInRvZ2dsZVBvbGljeUpzb25GbHlvdXQiLCBmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgICAgdmFyIGlzU2hvd2luZ1BvbGljeUpzb25GbHlvdXQgPSBfcmVmLmlzU2hvd2luZ1BvbGljeUpzb25GbHlvdXQ7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGlzU2hvd2luZ1BvbGljeUpzb25GbHlvdXQ6ICFpc1Nob3dpbmdQb2xpY3lKc29uRmx5b3V0CiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9KTsKCiAgICBfdGhpcy5zdGF0ZSA9IHsKICAgICAgaXNTaG93aW5nRXJyb3JzOiBmYWxzZSwKICAgICAgaXNTaG93aW5nTm9kZURldGFpbHNGbHlvdXQ6IGZhbHNlLAogICAgICBzZWxlY3RlZE5vZGVBdHRyc0ZvckRldGFpbHM6IHVuZGVmaW5lZCwKICAgICAgaXNTaG93aW5nUG9saWN5SnNvbkZseW91dDogZmFsc2UKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRWRpdFBvbGljeSwgW3sKICAgIGtleTogImNvbXBvbmVudERpZE1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7CiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLAogICAgICAgICAgaXNQb2xpY3lMaXN0TG9hZGVkID0gX3RoaXMkcHJvcHMzLmlzUG9saWN5TGlzdExvYWRlZCwKICAgICAgICAgIGZldGNoUG9saWNpZXMgPSBfdGhpcyRwcm9wczMuZmV0Y2hQb2xpY2llcywKICAgICAgICAgIF90aGlzJHByb3BzMyRtYXRjaCA9IF90aGlzJHByb3BzMy5tYXRjaDsKICAgICAgX3RoaXMkcHJvcHMzJG1hdGNoID0gX3RoaXMkcHJvcHMzJG1hdGNoID09PSB2b2lkIDAgPyB7CiAgICAgICAgcGFyYW1zOiB7fQogICAgICB9IDogX3RoaXMkcHJvcHMzJG1hdGNoOwogICAgICB2YXIgcG9saWN5TmFtZSA9IF90aGlzJHByb3BzMyRtYXRjaC5wYXJhbXMucG9saWN5TmFtZTsKCiAgICAgIGlmIChwb2xpY3lOYW1lKSB7CiAgICAgICAgdmFyIGRlY29kZWRQb2xpY3lOYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KHBvbGljeU5hbWUpOwoKICAgICAgICBpZiAoaXNQb2xpY3lMaXN0TG9hZGVkKSB7CiAgICAgICAgICB0aGlzLnNlbGVjdFBvbGljeShkZWNvZGVkUG9saWN5TmFtZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGZldGNoUG9saWNpZXModHJ1ZSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBfdGhpczIuc2VsZWN0UG9saWN5KGRlY29kZWRQb2xpY3lOYW1lKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnByb3BzLnNldFNlbGVjdGVkUG9saWN5KG51bGwpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsCiAgICAgICAgICBzZWxlY3RlZFBvbGljeSA9IF90aGlzJHByb3BzNC5zZWxlY3RlZFBvbGljeSwKICAgICAgICAgIGVycm9ycyA9IF90aGlzJHByb3BzNC5lcnJvcnMsCiAgICAgICAgICBzZXRTYXZlQXNOZXdQb2xpY3kgPSBfdGhpcyRwcm9wczQuc2V0U2F2ZUFzTmV3UG9saWN5LAogICAgICAgICAgc2F2ZUFzTmV3UG9saWN5ID0gX3RoaXMkcHJvcHM0LnNhdmVBc05ld1BvbGljeSwKICAgICAgICAgIHNldFNlbGVjdGVkUG9saWN5TmFtZSA9IF90aGlzJHByb3BzNC5zZXRTZWxlY3RlZFBvbGljeU5hbWUsCiAgICAgICAgICBpc05ld1BvbGljeSA9IF90aGlzJHByb3BzNC5pc05ld1BvbGljeSwKICAgICAgICAgIGxpZmVjeWNsZSA9IF90aGlzJHByb3BzNC5saWZlY3ljbGUsCiAgICAgICAgICBvcmlnaW5hbFBvbGljeU5hbWUgPSBfdGhpcyRwcm9wczQub3JpZ2luYWxQb2xpY3lOYW1lOwogICAgICB2YXIgc2VsZWN0ZWRQb2xpY3lOYW1lID0gc2VsZWN0ZWRQb2xpY3kubmFtZTsKICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSwKICAgICAgICAgIGlzU2hvd2luZ0Vycm9ycyA9IF90aGlzJHN0YXRlLmlzU2hvd2luZ0Vycm9ycywKICAgICAgICAgIGlzU2hvd2luZ1BvbGljeUpzb25GbHlvdXQgPSBfdGhpcyRzdGF0ZS5pc1Nob3dpbmdQb2xpY3lKc29uRmx5b3V0OwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhZ2UsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYWdlQm9keSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhZ2VDb250ZW50LCB7CiAgICAgICAgY2xhc3NOYW1lOiAiaWxtRWRpdFBvbGljeVBhZ2VDb250ZW50IiwKICAgICAgICB2ZXJ0aWNhbFBvc2l0aW9uOiAiY2VudGVyIiwKICAgICAgICBob3Jpem9udGFsUG9zaXRpb246ICJjZW50ZXIiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICAgIHNpemU6ICJsIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMSIsIG51bGwsIGlzTmV3UG9saWN5ID8gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmluZGV4TGlmZWN5Y2xlTWdtdC5lZGl0UG9saWN5LmNyZWF0ZVBvbGljeU1lc3NhZ2UnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDcmVhdGUgYW4gaW5kZXggbGlmZWN5Y2xlIHBvbGljeScKICAgICAgfSkgOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suaW5kZXhMaWZlY3ljbGVNZ210LmVkaXRQb2xpY3kuZWRpdFBvbGljeU1lc3NhZ2UnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdFZGl0IGluZGV4IGxpZmVjeWNsZSBwb2xpY3kge29yaWdpbmFsUG9saWN5TmFtZX0nLAogICAgICAgIHZhbHVlczogewogICAgICAgICAgb3JpZ2luYWxQb2xpY3lOYW1lOiBvcmlnaW5hbFBvbGljeU5hbWUKICAgICAgICB9CiAgICAgIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICBjbGFzc05hbWU6ICJldWlBbmltYXRlQ29udGVudExvYWQiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAieHMiCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgICAgIGNvbG9yOiAic3ViZHVlZCIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5pbmRleExpZmVjeWNsZU1nbXQuZWRpdFBvbGljeS5saWZlY3ljbGVQb2xpY3lEZXNjcmlwdGlvblRleHQiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVXNlIGFuIGluZGV4IHBvbGljeSB0byBhdXRvbWF0ZSB0aGUgZm91ciBwaGFzZXMgb2YgdGhlIGluZGV4IGxpZmVjeWNsZSwgZnJvbSBhY3RpdmVseSB3cml0aW5nIHRvIHRoZSBpbmRleCB0byBkZWxldGluZyBpdC4iCiAgICAgIH0pLCAnICcsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudHMuTGVhcm5Nb3JlTGluaywgewogICAgICAgIGRvY1BhdGg6ICJpbmRleC1saWZlY3ljbGUtbWFuYWdlbWVudC5odG1sIiwKICAgICAgICB0ZXh0OiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ4cGFjay5pbmRleExpZmVjeWNsZU1nbXQuZWRpdFBvbGljeS5sZWFybkFib3V0SW5kZXhMaWZlY3ljbGVNYW5hZ2VtZW50TGlua1RleHQiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJMZWFybiBhYm91dCB0aGUgaW5kZXggbGlmZWN5Y2xlLiIKICAgICAgICB9KQogICAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCBudWxsKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIGlzTmV3UG9saWN5ID8gbnVsbCA6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzdHJvbmciLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suaW5kZXhMaWZlY3ljbGVNZ210LmVkaXRQb2xpY3kuZWRpdGluZ0V4aXN0aW5nUG9saWN5TWVzc2FnZSIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJZb3UgYXJlIGVkaXRpbmcgYW4gZXhpc3RpbmcgcG9saWN5IgogICAgICB9KSksICIuIiwgJyAnLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suaW5kZXhMaWZlY3ljbGVNZ210LmVkaXRQb2xpY3kuZWRpdGluZ0V4aXN0aW5nUG9saWN5RXhwbGFuYXRpb25NZXNzYWdlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkFueSBjaGFuZ2VzIHlvdSBtYWtlIHdpbGwgYWZmZWN0IHRoZSBpbmRpY2VzIHRoYXQgYXJlIGF0dGFjaGVkIHRvIHRoaXMgcG9saWN5LiBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHNhdmUgdGhlc2UgY2hhbmdlcyBpbiBhIG5ldyBwb2xpY3kuIgogICAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCBudWxsKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3dpdGNoLCB7CiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInNhdmVBc05ld1N3aXRjaCIsCiAgICAgICAgc3R5bGU6IHsKICAgICAgICAgIG1heFdpZHRoOiAnMTAwJScKICAgICAgICB9LAogICAgICAgIGNoZWNrZWQ6IHNhdmVBc05ld1BvbGljeSwKICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gX2NhbGxlZTIoZSkgewogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChzZXRTYXZlQXNOZXdQb2xpY3koZS50YXJnZXQuY2hlY2tlZCkpOwoKICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBsYWJlbDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3BhbiIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogInhwYWNrLmluZGV4TGlmZWN5Y2xlTWdtdC5lZGl0UG9saWN5LnNhdmVBc05ld1BvbGljeU1lc3NhZ2UiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJTYXZlIGFzIG5ldyBwb2xpY3kiCiAgICAgICAgfSkpCiAgICAgIH0pKSksIHNhdmVBc05ld1BvbGljeSB8fCBpc05ld1BvbGljeSA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlEZXNjcmliZWRGb3JtR3JvdXAsIHsKICAgICAgICB0aXRsZTogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3BhbiIsIHsKICAgICAgICAgIGNsYXNzTmFtZTogImV1aS1kaXNwbGF5SW5saW5lQmxvY2sgZXVpLWFsaWduTWlkZGxlIgogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogInhwYWNrLmluZGV4TGlmZWN5Y2xlTWdtdC5lZGl0UG9saWN5Lm5hbWVMYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIk5hbWUiCiAgICAgICAgfSkpKSwKICAgICAgICB0aXRsZVNpemU6ICJzIiwKICAgICAgICBmdWxsV2lkdGg6IHRydWUKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZm9ybV9lcnJvcnMuRXJyYWJsZUZvcm1Sb3csIHsKICAgICAgICBpZDogX2NvbnN0YW50cy5TVFJVQ1RVUkVfUE9MSUNZX05BTUUsCiAgICAgICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pbmRleExpZmVjeWNsZU1nbXQuZWRpdFBvbGljeS5wb2xpY3lOYW1lTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1BvbGljeSBuYW1lJwogICAgICAgIH0pLAogICAgICAgIGVycm9yS2V5OiBfY29uc3RhbnRzLlNUUlVDVFVSRV9QT0xJQ1lfTkFNRSwKICAgICAgICBpc1Nob3dpbmdFcnJvcnM6IGlzU2hvd2luZ0Vycm9ycywKICAgICAgICBlcnJvcnM6IGVycm9ycywKICAgICAgICBoZWxwVGV4dDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAieHBhY2suaW5kZXhMaWZlY3ljbGVNZ210LmVkaXRQb2xpY3kudmFsaWRQb2xpY3lOYW1lTWVzc2FnZSIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkEgcG9saWN5IG5hbWUgY2Fubm90IHN0YXJ0IHdpdGggYW4gdW5kZXJzY29yZSBhbmQgY2Fubm90IGNvbnRhaW4gYSBxdWVzdGlvbiBtYXJrIG9yIGEgc3BhY2UuIgogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFRleHQsIHsKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAicG9saWN5TmFtZUZpZWxkIiwKICAgICAgICB2YWx1ZTogc2VsZWN0ZWRQb2xpY3lOYW1lLAogICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBfY2FsbGVlMyhlKSB7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHNldFNlbGVjdGVkUG9saWN5TmFtZShlLnRhcmdldC52YWx1ZSkpOwoKICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KSkpIDogbnVsbCksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIG51bGwpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ob3RfcGhhc2UuSG90UGhhc2UsIHsKICAgICAgICBzZWxlY3RlZFBvbGljeTogc2VsZWN0ZWRQb2xpY3ksCiAgICAgICAgZXJyb3JzOiBlcnJvcnNbX2NvbnN0YW50cy5QSEFTRV9IT1RdLAogICAgICAgIGlzU2hvd2luZ0Vycm9yczogaXNTaG93aW5nRXJyb3JzICYmICEhKDAsIF9maW5kX2Vycm9ycy5maW5kRmlyc3RFcnJvcikoZXJyb3JzW19jb25zdGFudHMuUEhBU0VfSE9UXSwgZmFsc2UpCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSG9yaXpvbnRhbFJ1bGUsIG51bGwpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF93YXJtX3BoYXNlLldhcm1QaGFzZSwgewogICAgICAgIGVycm9yczogZXJyb3JzW19jb25zdGFudHMuUEhBU0VfV0FSTV0sCiAgICAgICAgc2hvd05vZGVEZXRhaWxzRmx5b3V0OiB0aGlzLnNob3dOb2RlRGV0YWlsc0ZseW91dCwKICAgICAgICBpc1Nob3dpbmdFcnJvcnM6IGlzU2hvd2luZ0Vycm9ycyAmJiAhISgwLCBfZmluZF9lcnJvcnMuZmluZEZpcnN0RXJyb3IpKGVycm9yc1tfY29uc3RhbnRzLlBIQVNFX1dBUk1dLCBmYWxzZSkKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlIb3Jpem9udGFsUnVsZSwgbnVsbCksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbGRfcGhhc2UuQ29sZFBoYXNlLCB7CiAgICAgICAgZXJyb3JzOiBlcnJvcnNbX2NvbnN0YW50cy5QSEFTRV9DT0xEXSwKICAgICAgICBzaG93Tm9kZURldGFpbHNGbHlvdXQ6IHRoaXMuc2hvd05vZGVEZXRhaWxzRmx5b3V0LAogICAgICAgIGlzU2hvd2luZ0Vycm9yczogaXNTaG93aW5nRXJyb3JzICYmICEhKDAsIF9maW5kX2Vycm9ycy5maW5kRmlyc3RFcnJvcikoZXJyb3JzW19jb25zdGFudHMuUEhBU0VfQ09MRF0sIGZhbHNlKQogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUhvcml6b250YWxSdWxlLCBudWxsKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZGVsZXRlX3BoYXNlLkRlbGV0ZVBoYXNlLCB7CiAgICAgICAgZXJyb3JzOiBlcnJvcnNbX2NvbnN0YW50cy5QSEFTRV9ERUxFVEVdLAogICAgICAgIGlzU2hvd2luZ0Vycm9yczogaXNTaG93aW5nRXJyb3JzICYmICEhKDAsIF9maW5kX2Vycm9ycy5maW5kRmlyc3RFcnJvcikoZXJyb3JzW19jb25zdGFudHMuUEhBU0VfREVMRVRFXSwgZmFsc2UpCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSG9yaXpvbnRhbFJ1bGUsIG51bGwpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICJzcGFjZUJldHdlZW4iCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAic2F2ZVBvbGljeUJ1dHRvbiIsCiAgICAgICAgZmlsbDogdHJ1ZSwKICAgICAgICBpY29uVHlwZTogImNoZWNrIiwKICAgICAgICBpY29uU2lkZTogImxlZnQiLAogICAgICAgIG9uQ2xpY2s6IHRoaXMuc3VibWl0LAogICAgICAgIGNvbG9yOiAic2Vjb25kYXJ5IgogICAgICB9LCBzYXZlQXNOZXdQb2xpY3kgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suaW5kZXhMaWZlY3ljbGVNZ210LmVkaXRQb2xpY3kuc2F2ZUFzTmV3QnV0dG9uIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlNhdmUgYXMgbmV3IHBvbGljeSIKICAgICAgfSkgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suaW5kZXhMaWZlY3ljbGVNZ210LmVkaXRQb2xpY3kuc2F2ZUJ1dHRvbiIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJTYXZlIHBvbGljeSIKICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkVtcHR5LCB7CiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogImNhbmNlbFRlc3RQb2xpY3kiLAogICAgICAgIG9uQ2xpY2s6IHRoaXMuYmFja1RvUG9saWN5TGlzdAogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suaW5kZXhMaWZlY3ljbGVNZ210LmVkaXRQb2xpY3kuY2FuY2VsQnV0dG9uIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkNhbmNlbCIKICAgICAgfSkpKSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uRW1wdHksIHsKICAgICAgICBvbkNsaWNrOiB0aGlzLnRvZ2dsZVBvbGljeUpzb25GbHlvdXQKICAgICAgfSwgaXNTaG93aW5nUG9saWN5SnNvbkZseW91dCA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5pbmRleExpZmVjeWNsZU1nbXQuZWRpdFBvbGljeS5oaWRlUG9saWN5SnNvbkJ1dHRvIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkhpZGUgcmVxdWVzdCIKICAgICAgfSkgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suaW5kZXhMaWZlY3ljbGVNZ210LmVkaXRQb2xpY3kuc2hvd1BvbGljeUpzb25CdXR0byIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJTaG93IHJlcXVlc3QiCiAgICAgIH0pKSkpLCB0aGlzLnN0YXRlLmlzU2hvd2luZ05vZGVEZXRhaWxzRmx5b3V0ID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfbm9kZV9hdHRyc19kZXRhaWxzLk5vZGVBdHRyc0RldGFpbHMsIHsKICAgICAgICBzZWxlY3RlZE5vZGVBdHRyczogdGhpcy5zdGF0ZS5zZWxlY3RlZE5vZGVBdHRyc0ZvckRldGFpbHMsCiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMy5zZXRTdGF0ZSh7CiAgICAgICAgICAgIGlzU2hvd2luZ05vZGVEZXRhaWxzRmx5b3V0OiBmYWxzZQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KSA6IG51bGwsIHRoaXMuc3RhdGUuaXNTaG93aW5nUG9saWN5SnNvbkZseW91dCA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3BvbGljeV9qc29uX2ZseW91dC5Qb2xpY3lKc29uRmx5b3V0LCB7CiAgICAgICAgcG9saWN5TmFtZTogc2VsZWN0ZWRQb2xpY3lOYW1lIHx8ICcnLAogICAgICAgIGxpZmVjeWNsZTogbGlmZWN5Y2xlLAogICAgICAgIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHsKICAgICAgICAgIHJldHVybiBfdGhpczMuc2V0U3RhdGUoewogICAgICAgICAgICBpc1Nob3dpbmdQb2xpY3lKc29uRmx5b3V0OiBmYWxzZQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KSA6IG51bGwpKSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEVkaXRQb2xpY3k7Cn0oX3JlYWN0LkNvbXBvbmVudCk7CgpleHBvcnRzLkVkaXRQb2xpY3kgPSBFZGl0UG9saWN5OwoKX2RlZmluZVByb3BlcnR5KEVkaXRQb2xpY3ksICJwcm9wVHlwZXMiLCB7CiAgc2VsZWN0ZWRQb2xpY3k6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCwKICBlcnJvcnM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZAp9KTs="},null]}