{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/timeseriesexplorer/components/timeseries_chart/timeseries_chart.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/timeseriesexplorer/components/timeseries_chart/timeseries_chart.js","mtime":1585205046000},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeseriesChart = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _useObservable = _interopRequireDefault(require("react-use/lib/useObservable"));

var _lodash = _interopRequireDefault(require("lodash"));

var _d = _interopRequireDefault(require("d3"));

var _moment = _interopRequireDefault(require("moment"));

var _chrome = _interopRequireDefault(require("ui/chrome"));

var _anomaly_utils = require("../../../../../common/util/anomaly_utils");

var _annotations_service = require("../../../services/annotations_service");

var _format_value = require("../../../formatters/format_value");

var _chart_utils = require("../../../util/chart_utils");

var _date_utils = require("../../../util/date_utils");

var _time_buckets = require("../../../util/time_buckets");

var _table_service = require("../../../services/table_service");

var _context_chart_mask = require("../context_chart_mask");

var _timeseriesexplorer_utils = require("../../timeseriesexplorer_utils");

var _string_utils = require("../../../util/string_utils");

var _field_format_service = require("../../../services/field_format_service");

var _chart_tooltip_service = require("../../../components/chart_tooltip/chart_tooltip_service");

var _timeseries_chart_annotations = require("./timeseries_chart_annotations");

var _react2 = require("@kbn/i18n/react");

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var focusZoomPanelHeight = 25;
var focusChartHeight = 310;
var focusHeight = focusZoomPanelHeight + focusChartHeight;
var contextChartHeight = 60;
var contextChartLineTopMargin = 3;
var chartSpacing = 25;
var swimlaneHeight = 30;
var margin = {
  top: 20,
  right: 10,
  bottom: 15,
  left: 40
};

var mlAnnotationsEnabled = _chrome.default.getInjected('mlAnnotationsEnabled', false);

var ZOOM_INTERVAL_OPTIONS = [{
  duration: _moment.default.duration(1, 'h'),
  label: '1h'
}, {
  duration: _moment.default.duration(12, 'h'),
  label: '12h'
}, {
  duration: _moment.default.duration(1, 'd'),
  label: '1d'
}, {
  duration: _moment.default.duration(1, 'w'),
  label: '1w'
}, {
  duration: _moment.default.duration(2, 'w'),
  label: '2w'
}, {
  duration: _moment.default.duration(1, 'M'),
  label: '1M'
}]; // Set up the color scale to use for indicating score.

var anomalyColorScale = _d.default.scale.threshold().domain([3, 25, 50, 75, 100]).range(['#d2e9f7', '#8bc8fb', '#ffdd00', '#ff7e00', '#fe5050']); // Create a gray-toned version of the color scale to use under the context chart mask.


var anomalyGrayScale = _d.default.scale.threshold().domain([3, 25, 50, 75, 100]).range(['#dce7ed', '#b0c5d6', '#b1a34e', '#b17f4e', '#c88686']);

function getSvgHeight() {
  return focusHeight + contextChartHeight + swimlaneHeight + chartSpacing + margin.top + margin.bottom;
}

var TimeseriesChartIntl = (0, _react2.injectI18n)((_temp = _class =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TimeseriesChart, _React$Component);

  function TimeseriesChart() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TimeseriesChart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TimeseriesChart)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "rowMouseenterSubscriber", null);

    _defineProperty(_assertThisInitialized(_this), "rowMouseleaveSubscriber", null);

    _defineProperty(_assertThisInitialized(_this), "contextChartInitialized", false);

    _defineProperty(_assertThisInitialized(_this), "drawContextBrush", function (contextGroup) {
      var contextChartSelected = _this.props.contextChartSelected;
      var brush = _this.brush;
      var contextXScale = _this.contextXScale;
      var mask = _this.mask; // Create the brush for zooming in to the focus area of interest.

      brush.x(contextXScale).on('brush', brushing).on('brushend', brushed);
      contextGroup.append('g').attr('class', 'x brush').call(brush).selectAll('rect').attr('y', -1).attr('height', contextChartHeight + swimlaneHeight + 1); // move the left and right resize areas over to
      // be under the handles

      contextGroup.selectAll('.w rect').attr('x', -10).attr('width', 10);
      contextGroup.selectAll('.e rect').attr('x', 0).attr('width', 10);
      var handleBrushExtent = brush.extent();
      var topBorder = contextGroup.append('rect').attr('class', 'top-border').attr('y', -2).attr('height', contextChartLineTopMargin); // Draw the brush handles using SVG foreignObject elements.
      // Note these are not supported on IE11 and below, so will not appear in IE.

      var leftHandle = contextGroup.append('foreignObject').attr('width', 10).attr('height', 90).attr('class', 'brush-handle').attr('x', contextXScale(handleBrushExtent[0]) - 10).html('<div class="brush-handle-inner brush-handle-inner-left"><i class="fa fa-caret-left"></i></div>');
      var rightHandle = contextGroup.append('foreignObject').attr('width', 10).attr('height', 90).attr('class', 'brush-handle').attr('x', contextXScale(handleBrushExtent[1]) + 0).html('<div class="brush-handle-inner brush-handle-inner-right"><i class="fa fa-caret-right"></i></div>');

      function brushing() {
        var brushExtent = brush.extent();
        mask.reveal(brushExtent);
        leftHandle.attr('x', contextXScale(brushExtent[0]) - 10);
        rightHandle.attr('x', contextXScale(brushExtent[1]) + 0);
        topBorder.attr('x', contextXScale(brushExtent[0]) + 1); // Use Math.max(0, ...) to make sure we don't end up
        // with a negative width which would cause an SVG error.

        var topBorderWidth = Math.max(0, contextXScale(brushExtent[1]) - contextXScale(brushExtent[0]) - 2);
        topBorder.attr('width', topBorderWidth);
        var isEmpty = brush.empty();

        _d.default.selectAll('.brush-handle').style('visibility', isEmpty ? 'hidden' : 'visible');
      }

      brushing();

      var that = _assertThisInitialized(_this);

      function brushed() {
        var isEmpty = brush.empty();
        var selectedBounds = isEmpty ? contextXScale.domain() : brush.extent();
        var selectionMin = selectedBounds[0].getTime();
        var selectionMax = selectedBounds[1].getTime(); // Avoid triggering an update if bounds haven't changed

        if (that.selectedBounds !== undefined && that.selectedBounds.min.valueOf() === selectionMin && that.selectedBounds.max.valueOf() === selectionMax) {
          return;
        } // Set the color of the swimlane cells according to whether they are inside the selection.


        contextGroup.selectAll('.swimlane-cell').style('fill', function (d) {
          var cellMs = d.date.getTime();

          if (cellMs < selectionMin || cellMs > selectionMax) {
            return anomalyGrayScale(d.score);
          } else {
            return anomalyColorScale(d.score);
          }
        });
        that.selectedBounds = {
          min: (0, _moment.default)(selectionMin),
          max: (0, _moment.default)(selectionMax)
        };
        contextChartSelected({
          from: selectedBounds[0],
          to: selectedBounds[1]
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "drawSwimlane", function (swlGroup, swlWidth, swlHeight) {
      var _this$props = _this.props,
          contextAggregationInterval = _this$props.contextAggregationInterval,
          swimlaneData = _this$props.swimlaneData;
      var data = swimlaneData;

      if (typeof data === 'undefined') {
        return;
      } // Calculate the x axis domain.
      // Elasticsearch aggregation returns points at start of bucket, so set the
      // x-axis min to the start of the aggregation interval.
      // Need to use the min(earliest) and max(earliest) of the context chart
      // aggregation to align the axes of the chart and swimlane elements.


      var xAxisDomain = _this.calculateContextXAxisDomain();

      var x = _d.default.time.scale().range([0, swlWidth]).domain(xAxisDomain);

      var y = _d.default.scale.linear().range([swlHeight, 0]).domain([0, swlHeight]);

      var xAxis = _d.default.svg.axis().scale(x).orient('bottom').innerTickSize(-swlHeight).outerTickSize(0);

      var yAxis = _d.default.svg.axis().scale(y).orient('left').tickValues(y.domain()).innerTickSize(-swlWidth).outerTickSize(0);

      var axes = swlGroup.append('g');
      axes.append('g').attr('class', 'x axis').attr('transform', 'translate(0,' + swlHeight + ')').call(xAxis);
      axes.append('g').attr('class', 'y axis').call(yAxis);
      var earliest = xAxisDomain[0].getTime();
      var latest = xAxisDomain[1].getTime();
      var swimlaneAggMs = contextAggregationInterval.asMilliseconds();
      var cellWidth = swlWidth / ((latest - earliest) / swimlaneAggMs);

      if (cellWidth < 1) {
        cellWidth = 1;
      }

      var cells = swlGroup.append('g').attr('class', 'swimlane-cells').selectAll('rect').data(data);
      cells.enter().append('rect').attr('x', function (d) {
        return x(d.date);
      }).attr('y', 0).attr('rx', 0).attr('ry', 0).attr('class', function (d) {
        return d.score > 0 ? 'swimlane-cell' : 'swimlane-cell-hidden';
      }).attr('width', cellWidth).attr('height', swlHeight).style('fill', function (d) {
        return anomalyColorScale(d.score);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "calculateContextXAxisDomain", function () {
      var _this$props2 = _this.props,
          bounds = _this$props2.bounds,
          contextAggregationInterval = _this$props2.contextAggregationInterval,
          swimlaneData = _this$props2.swimlaneData; // Calculates the x axis domain for the context elements.
      // Elasticsearch aggregation returns points at start of bucket,
      // so set the x-axis min to the start of the first aggregation interval,
      // and the x-axis max to the end of the last aggregation interval.
      // Context chart and swimlane use the same aggregation interval.

      var earliest = bounds.min.valueOf();

      if (swimlaneData !== undefined && swimlaneData.length > 0) {
        // Adjust the earliest back to the time of the first swimlane point
        // if this is before the time filter minimum.
        earliest = Math.min(_lodash.default.first(swimlaneData).date.getTime(), bounds.min.valueOf());
      }

      var contextAggMs = contextAggregationInterval.asMilliseconds();
      var earliestMs = Math.floor(earliest / contextAggMs) * contextAggMs;
      var latestMs = Math.ceil(bounds.max.valueOf() / contextAggMs) * contextAggMs;
      return [new Date(earliestMs), new Date(latestMs)];
    });

    _defineProperty(_assertThisInitialized(_this), "setContextBrushExtent", function (from, to) {
      var brush = _this.brush;
      var brushExtent = brush.extent();
      var newExtent = [from, to];
      brush.extent(newExtent);
      brush(_d.default.select('.brush'));

      if (newExtent[0].getTime() !== brushExtent[0].getTime() || newExtent[1].getTime() !== brushExtent[1].getTime()) {
        brush.event(_d.default.select('.brush'));
      }
    });

    return _this;
  }

  _createClass(TimeseriesChart, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var element = _d.default.select(this.rootNode);

      element.html('');

      if (this.rowMouseenterSubscriber !== null) {
        this.rowMouseenterSubscriber.unsubscribe();
      }

      if (this.rowMouseleaveSubscriber !== null) {
        this.rowMouseleaveSubscriber.unsubscribe();
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var svgWidth = this.props.svgWidth;
      this.vizWidth = svgWidth - margin.left - margin.right;
      var vizWidth = this.vizWidth;
      this.focusXScale = _d.default.time.scale().range([0, vizWidth]);
      this.focusYScale = _d.default.scale.linear().range([focusHeight, focusZoomPanelHeight]);
      var focusXScale = this.focusXScale;
      var focusYScale = this.focusYScale;
      this.focusXAxis = _d.default.svg.axis().scale(focusXScale).orient('bottom').innerTickSize(-focusChartHeight).outerTickSize(0).tickPadding(10);
      this.focusYAxis = _d.default.svg.axis().scale(focusYScale).orient('left').innerTickSize(-vizWidth).outerTickSize(0).tickPadding(10);
      this.focusValuesLine = _d.default.svg.line().x(function (d) {
        return focusXScale(d.date);
      }).y(function (d) {
        return focusYScale(d.value);
      }).defined(function (d) {
        return d.value !== null;
      });
      this.focusBoundedArea = _d.default.svg.area().x(function (d) {
        return focusXScale(d.date) || 1;
      }).y0(function (d) {
        return focusYScale(d.upper);
      }).y1(function (d) {
        return focusYScale(d.lower);
      }).defined(function (d) {
        return d.lower !== null && d.upper !== null;
      });
      this.contextXScale = _d.default.time.scale().range([0, vizWidth]);
      this.contextYScale = _d.default.scale.linear().range([contextChartHeight, contextChartLineTopMargin]);
      this.fieldFormat = undefined; // Annotations Brush

      if (mlAnnotationsEnabled) {
        this.annotateBrush = _timeseries_chart_annotations.getAnnotationBrush.call(this);
      } // brush for focus brushing


      this.brush = _d.default.svg.brush();
      this.mask = undefined; // Listeners for mouseenter/leave events for rows in the table
      // to highlight the corresponding anomaly mark in the focus chart.

      var highlightFocusChartAnomaly = this.highlightFocusChartAnomaly.bind(this);

      var boundHighlightFocusChartAnnotation = _timeseries_chart_annotations.highlightFocusChartAnnotation.bind(this);

      function tableRecordMousenterListener(_ref) {
        var record = _ref.record,
            _ref$type = _ref.type,
            type = _ref$type === void 0 ? 'anomaly' : _ref$type;

        if (type === 'anomaly') {
          highlightFocusChartAnomaly(record);
        } else if (type === 'annotation') {
          boundHighlightFocusChartAnnotation(record);
        }
      }

      var unhighlightFocusChartAnomaly = this.unhighlightFocusChartAnomaly.bind(this);

      var boundUnhighlightFocusChartAnnotation = _timeseries_chart_annotations.unhighlightFocusChartAnnotation.bind(this);

      function tableRecordMouseleaveListener(_ref2) {
        var record = _ref2.record,
            _ref2$type = _ref2.type,
            type = _ref2$type === void 0 ? 'anomaly' : _ref2$type;

        if (type === 'anomaly') {
          unhighlightFocusChartAnomaly(record);
        } else {
          boundUnhighlightFocusChartAnnotation(record);
        }
      }

      this.rowMouseenterSubscriber = _table_service.mlTableService.rowMouseenter$.subscribe(tableRecordMousenterListener);
      this.rowMouseleaveSubscriber = _table_service.mlTableService.rowMouseleave$.subscribe(tableRecordMouseleaveListener);
      this.renderChart();
      this.drawContextChartSelection();
      this.renderFocusChart();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.renderFocusChartOnly === false || prevProps.svgWidth !== this.props.svgWidth) {
        this.renderChart();
        this.drawContextChartSelection();
      }

      this.renderFocusChart();

      if (mlAnnotationsEnabled && this.props.annotation === null) {
        var chartElement = _d.default.select(this.rootNode);

        chartElement.select('g.mlAnnotationBrush').call(this.annotateBrush.extent([0, 0]));
      }
    }
  }, {
    key: "renderChart",
    value: function renderChart() {
      var _this$props3 = this.props,
          contextChartData = _this$props3.contextChartData,
          contextForecastData = _this$props3.contextForecastData,
          detectorIndex = _this$props3.detectorIndex,
          modelPlotEnabled = _this$props3.modelPlotEnabled,
          selectedJob = _this$props3.selectedJob,
          svgWidth = _this$props3.svgWidth;
      var createFocusChart = this.createFocusChart.bind(this);
      var drawContextElements = this.drawContextElements.bind(this);
      var focusXScale = this.focusXScale;
      var focusYAxis = this.focusYAxis;
      var focusYScale = this.focusYScale;
      var svgHeight = getSvgHeight(); // Clear any existing elements from the visualization,
      // then build the svg elements for the bubble chart.

      var chartElement = _d.default.select(this.rootNode);

      chartElement.selectAll('*').remove();

      if (typeof selectedJob !== 'undefined') {
        this.fieldFormat = _field_format_service.mlFieldFormatService.getFieldFormat(selectedJob.job_id, detectorIndex);
      } else {
        return;
      }

      if (contextChartData === undefined) {
        return;
      }

      var fieldFormat = this.fieldFormat;
      var svg = chartElement.append('svg').attr('width', svgWidth).attr('height', svgHeight);
      var contextDataMin;
      var contextDataMax;

      if (modelPlotEnabled === true || contextForecastData !== undefined && contextForecastData.length > 0) {
        var combinedData = contextForecastData === undefined ? contextChartData : contextChartData.concat(contextForecastData);
        contextDataMin = _d.default.min(combinedData, function (d) {
          return Math.min(d.value, d.lower);
        });
        contextDataMax = _d.default.max(combinedData, function (d) {
          return Math.max(d.value, d.upper);
        });
      } else {
        contextDataMin = _d.default.min(contextChartData, function (d) {
          return d.value;
        });
        contextDataMax = _d.default.max(contextChartData, function (d) {
          return d.value;
        });
      } // Set the size of the left margin according to the width of the largest y axis tick label.
      // The min / max of the aggregated context chart data may be less than the min / max of the
      // data which is displayed in the focus chart which is likely to be plotted at a lower
      // aggregation interval. Therefore ceil the min / max with the higher absolute value to allow
      // for extra space for chart labels which may have higher values than the context data
      // e.g. aggregated max may be 9500, whereas focus plot max may be 11234.


      var ceiledMax = contextDataMax > 0 ? Math.pow(10, Math.ceil(Math.log10(Math.abs(contextDataMax)))) : contextDataMax;
      var flooredMin = contextDataMin >= 0 ? contextDataMin : -1 * Math.pow(10, Math.ceil(Math.log10(Math.abs(contextDataMin)))); // Temporarily set the domain of the focus y axis to the min / max of the full context chart
      // data range so that we can measure the maximum tick label width on temporary text elements.

      focusYScale.domain([flooredMin, ceiledMax]);
      var maxYAxisLabelWidth = 0;
      var tempLabelText = svg.append('g').attr('class', 'temp-axis-label tick');
      tempLabelText.selectAll('text.temp.axis').data(focusYScale.ticks()).enter().append('text').text(function (d) {
        if (fieldFormat !== undefined) {
          return fieldFormat.convert(d, 'text');
        } else {
          return focusYScale.tickFormat()(d);
        }
      }).each(function () {
        maxYAxisLabelWidth = Math.max(this.getBBox().width + focusYAxis.tickPadding(), maxYAxisLabelWidth);
      }).remove();

      _d.default.select('.temp-axis-label').remove();

      margin.left = Math.max(maxYAxisLabelWidth, 40);
      this.vizWidth = Math.max(svgWidth - margin.left - margin.right, 0);
      focusXScale.range([0, this.vizWidth]);
      focusYAxis.innerTickSize(-this.vizWidth);
      var focus = svg.append('g').attr('class', 'focus-chart').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
      var context = svg.append('g').attr('class', 'context-chart').attr('transform', 'translate(' + margin.left + ',' + (focusHeight + margin.top + chartSpacing) + ')'); // Mask to hide annotations overflow

      if (mlAnnotationsEnabled) {
        var annotationsMask = svg.append('defs').append('mask').attr('id', _timeseries_chart_annotations.ANNOTATION_MASK_ID);
        annotationsMask.append('rect').attr('x', 0).attr('y', 0).attr('width', this.vizWidth).attr('height', focusHeight).style('fill', 'white');
      } // Draw each of the component elements.


      createFocusChart(focus, this.vizWidth, focusHeight);
      drawContextElements(context, this.vizWidth, contextChartHeight, swimlaneHeight);
    }
  }, {
    key: "drawContextChartSelection",
    value: function drawContextChartSelection() {
      var _this$props4 = this.props,
          contextChartData = _this$props4.contextChartData,
          contextChartSelected = _this$props4.contextChartSelected,
          contextForecastData = _this$props4.contextForecastData,
          zoomFrom = _this$props4.zoomFrom,
          zoomTo = _this$props4.zoomTo;

      if (contextChartData === undefined) {
        return;
      } // Make appropriate selection in the context chart to trigger loading of the focus chart.


      var focusLoadFrom;
      var focusLoadTo;
      var contextXMin = this.contextXScale.domain()[0].getTime();
      var contextXMax = this.contextXScale.domain()[1].getTime();
      var combinedData = contextChartData;

      if (contextForecastData !== undefined) {
        combinedData = combinedData.concat(contextForecastData);
      }

      if (zoomFrom) {
        focusLoadFrom = zoomFrom.getTime();
      } else {
        focusLoadFrom = _lodash.default.reduce(combinedData, function (memo, point) {
          return Math.min(memo, point.date.getTime());
        }, new Date(2099, 12, 31).getTime());
      }

      focusLoadFrom = Math.max(focusLoadFrom, contextXMin);

      if (zoomTo) {
        focusLoadTo = zoomTo.getTime();
      } else {
        focusLoadTo = _lodash.default.reduce(combinedData, function (memo, point) {
          return Math.max(memo, point.date.getTime());
        }, 0);
      }

      focusLoadTo = Math.min(focusLoadTo, contextXMax);

      if (focusLoadFrom !== contextXMin || focusLoadTo !== contextXMax) {
        this.setContextBrushExtent(new Date(focusLoadFrom), new Date(focusLoadTo));
        var newSelectedBounds = {
          min: (0, _moment.default)(new Date(focusLoadFrom)),
          max: (0, _moment.default)(focusLoadFrom)
        };
        this.selectedBounds = newSelectedBounds;
      } else {
        var contextXScaleDomain = this.contextXScale.domain();
        var _newSelectedBounds = {
          min: (0, _moment.default)(new Date(contextXScaleDomain[0])),
          max: (0, _moment.default)(contextXScaleDomain[1])
        };

        if (!_lodash.default.isEqual(_newSelectedBounds, this.selectedBounds)) {
          this.selectedBounds = _newSelectedBounds;
          this.setContextBrushExtent(new Date(contextXScaleDomain[0]), new Date(contextXScaleDomain[1]));

          if (this.contextChartInitialized === false) {
            this.contextChartInitialized = true;
            contextChartSelected({
              from: contextXScaleDomain[0],
              to: contextXScaleDomain[1]
            });
          }
        }
      }
    }
  }, {
    key: "createFocusChart",
    value: function createFocusChart(fcsGroup, fcsWidth, fcsHeight) {
      // Split out creation of the focus chart from the rendering,
      // as we want to re-render the paths and points when the zoom area changes.
      var contextForecastData = this.props.contextForecastData; // Add a group at the top to display info on the chart aggregation interval
      // and links to set the brush span to 1h, 1d, 1w etc.

      var zoomGroup = fcsGroup.append('g').attr('class', 'focus-zoom');
      zoomGroup.append('rect').attr('x', 0).attr('y', 0).attr('width', fcsWidth).attr('height', focusZoomPanelHeight).attr('class', 'chart-border');
      this.createZoomInfoElements(zoomGroup, fcsWidth); // Create the elements for annotations

      if (mlAnnotationsEnabled) {
        var annotateBrush = this.annotateBrush.bind(this);
        var brushX = 0;
        var brushWidth = 0;

        if (this.props.annotation !== null) {
          // If the annotation brush is showing, set it to the same position
          brushX = this.focusXScale(this.props.annotation.timestamp);
          brushWidth = (0, _timeseries_chart_annotations.getAnnotationWidth)(this.props.annotation, this.focusXScale);
        }

        fcsGroup.append('g').attr('class', 'mlAnnotationBrush').call(annotateBrush).selectAll('rect').attr('x', brushX).attr('y', focusZoomPanelHeight).attr('width', brushWidth).attr('height', focusChartHeight);
        fcsGroup.append('g').classed('mlAnnotations', true);
      } // Add border round plot area.


      fcsGroup.append('rect').attr('x', 0).attr('y', focusZoomPanelHeight).attr('width', fcsWidth).attr('height', focusChartHeight).attr('class', 'chart-border'); // Add background for x axis.

      var xAxisBg = fcsGroup.append('g').attr('class', 'x-axis-background');
      xAxisBg.append('rect').attr('x', 0).attr('y', fcsHeight).attr('width', fcsWidth).attr('height', chartSpacing);
      xAxisBg.append('line').attr('x1', 0).attr('y1', fcsHeight).attr('x2', 0).attr('y2', fcsHeight + chartSpacing);
      xAxisBg.append('line').attr('x1', fcsWidth).attr('y1', fcsHeight).attr('x2', fcsWidth).attr('y2', fcsHeight + chartSpacing);
      xAxisBg.append('line').attr('x1', 0).attr('y1', fcsHeight + chartSpacing).attr('x2', fcsWidth).attr('y2', fcsHeight + chartSpacing);
      var axes = fcsGroup.append('g');
      axes.append('g').attr('class', 'x axis').attr('transform', 'translate(0,' + fcsHeight + ')');
      axes.append('g').attr('class', 'y axis'); // Create the elements for the metric value line and model bounds area.

      fcsGroup.append('path').attr('class', 'area bounds');
      fcsGroup.append('path').attr('class', 'values-line');
      fcsGroup.append('g').attr('class', 'focus-chart-markers'); // Create the path elements for the forecast value line and bounds area.

      if (contextForecastData) {
        fcsGroup.append('path').attr('class', 'area forecast');
        fcsGroup.append('path').attr('class', 'values-line forecast');
        fcsGroup.append('g').attr('class', 'focus-chart-markers forecast');
      }

      fcsGroup.append('rect').attr('x', 0).attr('y', 0).attr('width', fcsWidth).attr('height', fcsHeight + 24).attr('class', 'chart-border chart-border-highlight');
    }
  }, {
    key: "renderFocusChart",
    value: function renderFocusChart() {
      var _this2 = this;

      var _this$props5 = this.props,
          focusAggregationInterval = _this$props5.focusAggregationInterval,
          focusAnnotationData = _this$props5.focusAnnotationData,
          focusChartData = _this$props5.focusChartData,
          focusForecastData = _this$props5.focusForecastData,
          modelPlotEnabled = _this$props5.modelPlotEnabled,
          selectedJob = _this$props5.selectedJob,
          showAnnotations = _this$props5.showAnnotations,
          showForecast = _this$props5.showForecast,
          showModelBounds = _this$props5.showModelBounds,
          intl = _this$props5.intl,
          zoomFromFocusLoaded = _this$props5.zoomFromFocusLoaded,
          zoomToFocusLoaded = _this$props5.zoomToFocusLoaded;

      if (focusChartData === undefined) {
        return;
      }

      var data = focusChartData;
      var contextYScale = this.contextYScale;
      var showFocusChartTooltip = this.showFocusChartTooltip.bind(this);

      var focusChart = _d.default.select('.focus-chart'); // Update the plot interval labels.


      var focusAggInt = focusAggregationInterval.expression;
      var bucketSpan = selectedJob.analysis_config.bucket_span;

      var chartElement = _d.default.select(this.rootNode);

      chartElement.select('.zoom-aggregation-interval').text(intl.formatMessage({
        id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.zoomAggregationIntervalLabel',
        defaultMessage: '(aggregation interval: {focusAggInt}, bucket span: {bucketSpan})'
      }, {
        focusAggInt: focusAggInt,
        bucketSpan: bucketSpan
      })); // Render the axes.
      // Calculate the x axis domain.
      // Elasticsearch aggregation returns points at start of bucket,
      // so set the x-axis min to the start of the first aggregation interval,
      // and the x-axis max to the end of the last aggregation interval.

      if (zoomFromFocusLoaded === undefined || zoomToFocusLoaded === undefined) {
        return;
      }

      var bounds = {
        min: (0, _moment.default)(zoomFromFocusLoaded.getTime()),
        max: (0, _moment.default)(zoomToFocusLoaded.getTime())
      };
      var aggMs = focusAggregationInterval.asMilliseconds();
      var earliest = (0, _moment.default)(Math.floor(bounds.min.valueOf() / aggMs) * aggMs);
      var latest = (0, _moment.default)(Math.ceil(bounds.max.valueOf() / aggMs) * aggMs);
      this.focusXScale.domain([earliest.toDate(), latest.toDate()]); // Calculate the y-axis domain.

      if (focusChartData.length > 0 || focusForecastData !== undefined && focusForecastData.length > 0) {
        if (this.fieldFormat !== undefined) {
          this.focusYAxis.tickFormat(function (d) {
            return _this2.fieldFormat.convert(d, 'text');
          });
        } else {
          // Use default tick formatter.
          this.focusYAxis.tickFormat(null);
        } // Calculate the min/max of the metric data and the forecast data.


        var yMin = 0;
        var yMax = 0;
        var combinedData = data;

        if (focusForecastData !== undefined && focusForecastData.length > 0) {
          combinedData = data.concat(focusForecastData);
        }

        yMin = _d.default.min(combinedData, function (d) {
          var metricValue = d.value;

          if (metricValue === null && d.anomalyScore !== undefined && d.actual !== undefined) {
            // If an anomaly coincides with a gap in the data, use the anomaly actual value.
            metricValue = Array.isArray(d.actual) ? d.actual[0] : d.actual;
          }

          if (d.lower !== undefined) {
            if (metricValue !== null && metricValue !== undefined) {
              return Math.min(metricValue, d.lower);
            } else {
              // Set according to the minimum of the lower of the model plot results.
              return d.lower;
            }
          }

          return metricValue;
        });
        yMax = _d.default.max(combinedData, function (d) {
          var metricValue = d.value;

          if (metricValue === null && d.anomalyScore !== undefined && d.actual !== undefined) {
            // If an anomaly coincides with a gap in the data, use the anomaly actual value.
            metricValue = Array.isArray(d.actual) ? d.actual[0] : d.actual;
          }

          return d.upper !== undefined ? Math.max(metricValue, d.upper) : metricValue;
        });

        if (yMax === yMin) {
          if (this.contextYScale.domain()[0] !== contextYScale.domain()[1] && yMin >= contextYScale.domain()[0] && yMax <= contextYScale.domain()[1]) {
            // Set the focus chart limits to be the same as the context chart.
            yMin = contextYScale.domain()[0];
            yMax = contextYScale.domain()[1];
          } else {
            yMin -= yMin * 0.05;
            yMax += yMax * 0.05;
          }
        } // if annotations are present, we extend yMax to avoid overlap
        // between annotation labels, chart lines and anomalies.


        if (mlAnnotationsEnabled && focusAnnotationData && focusAnnotationData.length > 0) {
          var levels = (0, _timeseries_chart_annotations.getAnnotationLevels)(focusAnnotationData);

          var maxLevel = _d.default.max(Object.keys(levels).map(function (key) {
            return levels[key];
          })); // TODO needs revisiting to be a more robust normalization


          yMax = yMax * (1 + (maxLevel + 1) / 5);
        }

        this.focusYScale.domain([yMin, yMax]);
      } else {
        // Display 10 unlabelled ticks.
        this.focusYScale.domain([0, 10]);
        this.focusYAxis.tickFormat('');
      } // Get the scaled date format to use for x axis tick labels.


      var timeBuckets = new _time_buckets.TimeBuckets();
      timeBuckets.setInterval('auto');
      timeBuckets.setBounds(bounds);
      var xAxisTickFormat = timeBuckets.getScaledDateFormat();
      focusChart.select('.x.axis').call(this.focusXAxis.ticks((0, _chart_utils.numTicksForDateFormat)(this.vizWidth), xAxisTickFormat).tickFormat(function (d) {
        return (0, _moment.default)(d).format(xAxisTickFormat);
      }));
      focusChart.select('.y.axis').call(this.focusYAxis);
      (0, _chart_utils.filterAxisLabels)(focusChart.select('.x.axis'), this.vizWidth); // Render the bounds area and values line.

      if (modelPlotEnabled === true) {
        focusChart.select('.area.bounds').attr('d', this.focusBoundedArea(data)).classed('hidden', !showModelBounds);
      }

      if (mlAnnotationsEnabled) {
        (0, _timeseries_chart_annotations.renderAnnotations)(focusChart, focusAnnotationData, focusZoomPanelHeight, focusChartHeight, this.focusXScale, showAnnotations, showFocusChartTooltip); // disable brushing (creation of annotations) when annotations aren't shown

        focusChart.select('.mlAnnotationBrush').style('display', showAnnotations ? null : 'none');
      }

      focusChart.select('.values-line').attr('d', this.focusValuesLine(data));
      (0, _chart_utils.drawLineChartDots)(data, focusChart, this.focusValuesLine); // Render circle markers for the points.
      // These are used for displaying tooltips on mouseover.
      // Don't render dots where value=null (data gaps, with no anomalies)
      // or for multi-bucket anomalies.

      var dots = _d.default.select('.focus-chart-markers').selectAll('.metric-value').data(data.filter(function (d) {
        return (d.value !== null || typeof d.anomalyScore === 'number') && !(0, _chart_utils.showMultiBucketAnomalyMarker)(d);
      })); // Remove dots that are no longer needed i.e. if number of chart points has decreased.


      dots.exit().remove(); // Create any new dots that are needed i.e. if number of chart points has increased.

      dots.enter().append('circle').attr('r', _chart_utils.LINE_CHART_ANOMALY_RADIUS).on('mouseover', function (d) {
        showFocusChartTooltip(d, this);
      }).on('mouseout', function () {
        return _chart_tooltip_service.mlChartTooltipService.hide();
      }); // Update all dots to new positions.

      dots.attr('cx', function (d) {
        return _this2.focusXScale(d.date);
      }).attr('cy', function (d) {
        return _this2.focusYScale(d.value);
      }).attr('class', function (d) {
        var markerClass = 'metric-value';

        if (_lodash.default.has(d, 'anomalyScore')) {
          markerClass += " anomaly-marker ".concat((0, _anomaly_utils.getSeverityWithLow)(d.anomalyScore).id);
        }

        return markerClass;
      }); // Render cross symbols for any multi-bucket anomalies.

      var multiBucketMarkers = _d.default.select('.focus-chart-markers').selectAll('.multi-bucket').data(data.filter(function (d) {
        return d.anomalyScore !== null && (0, _chart_utils.showMultiBucketAnomalyMarker)(d) === true;
      })); // Remove multi-bucket markers that are no longer needed.


      multiBucketMarkers.exit().remove(); // Add any new markers that are needed i.e. if number of multi-bucket points has increased.

      multiBucketMarkers.enter().append('path').attr('d', _d.default.svg.symbol().size(_chart_utils.MULTI_BUCKET_SYMBOL_SIZE).type('cross')).on('mouseover', function (d) {
        showFocusChartTooltip(d, this);
      }).on('mouseout', function () {
        return _chart_tooltip_service.mlChartTooltipService.hide();
      }); // Update all markers to new positions.

      multiBucketMarkers.attr('transform', function (d) {
        return "translate(".concat(_this2.focusXScale(d.date), ", ").concat(_this2.focusYScale(d.value), ")");
      }).attr('class', function (d) {
        return "anomaly-marker multi-bucket ".concat((0, _anomaly_utils.getSeverityWithLow)(d.anomalyScore).id);
      }); // Add rectangular markers for any scheduled events.

      var scheduledEventMarkers = _d.default.select('.focus-chart-markers').selectAll('.scheduled-event-marker').data(data.filter(function (d) {
        return d.scheduledEvents !== undefined;
      })); // Remove markers that are no longer needed i.e. if number of chart points has decreased.


      scheduledEventMarkers.exit().remove(); // Create any new markers that are needed i.e. if number of chart points has increased.

      scheduledEventMarkers.enter().append('rect').attr('width', _chart_utils.LINE_CHART_ANOMALY_RADIUS * 2).attr('height', _chart_utils.SCHEDULED_EVENT_SYMBOL_HEIGHT).attr('class', 'scheduled-event-marker').attr('rx', 1).attr('ry', 1); // Update all markers to new positions.

      scheduledEventMarkers.attr('x', function (d) {
        return _this2.focusXScale(d.date) - _chart_utils.LINE_CHART_ANOMALY_RADIUS;
      }).attr('y', function (d) {
        return _this2.focusYScale(d.value) - 3;
      }); // Plot any forecast data in scope.

      if (focusForecastData !== undefined) {
        focusChart.select('.area.forecast').attr('d', this.focusBoundedArea(focusForecastData)).classed('hidden', !showForecast);
        focusChart.select('.values-line.forecast').attr('d', this.focusValuesLine(focusForecastData)).classed('hidden', !showForecast);

        var forecastDots = _d.default.select('.focus-chart-markers.forecast').selectAll('.metric-value').data(focusForecastData); // Remove dots that are no longer needed i.e. if number of forecast points has decreased.


        forecastDots.exit().remove(); // Create any new dots that are needed i.e. if number of forecast points has increased.

        forecastDots.enter().append('circle').attr('r', _chart_utils.LINE_CHART_ANOMALY_RADIUS).on('mouseover', function (d) {
          showFocusChartTooltip(d, this);
        }).on('mouseout', function () {
          return _chart_tooltip_service.mlChartTooltipService.hide();
        }); // Update all dots to new positions.

        forecastDots.attr('cx', function (d) {
          return _this2.focusXScale(d.date);
        }).attr('cy', function (d) {
          return _this2.focusYScale(d.value);
        }).attr('class', 'metric-value').classed('hidden', !showForecast);
      }
    }
  }, {
    key: "createZoomInfoElements",
    value: function createZoomInfoElements(zoomGroup, fcsWidth) {
      var _this$props6 = this.props,
          autoZoomDuration = _this$props6.autoZoomDuration,
          bounds = _this$props6.bounds,
          modelPlotEnabled = _this$props6.modelPlotEnabled,
          intl = _this$props6.intl;
      var setZoomInterval = this.setZoomInterval.bind(this); // Create zoom duration links applicable for the current time span.
      // Don't add links for any durations which would give a brush extent less than 10px.

      var boundsSecs = bounds.max.unix() - bounds.min.unix();
      var minSecs = 10 / this.vizWidth * boundsSecs;
      var xPos = 10;
      var zoomLabel = zoomGroup.append('text').attr('x', xPos).attr('y', 17).attr('class', 'zoom-info-text').text(intl.formatMessage({
        id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.zoomLabel',
        defaultMessage: 'Zoom:'
      }));
      var zoomOptions = [{
        durationMs: autoZoomDuration,
        label: 'auto'
      }];

      _lodash.default.each(ZOOM_INTERVAL_OPTIONS, function (option) {
        if (option.duration.asSeconds() > minSecs && option.duration.asSeconds() < boundsSecs) {
          zoomOptions.push({
            durationMs: option.duration.asMilliseconds(),
            label: option.label
          });
        }
      });

      xPos += zoomLabel.node().getBBox().width + 4;

      _lodash.default.each(zoomOptions, function (option) {
        var text = zoomGroup.append('a').attr('data-ms', option.durationMs).attr('href', '').append('text').attr('x', xPos).attr('y', 17).attr('class', 'zoom-info-text').text(option.label);
        xPos += text.node().getBBox().width + 4;
      });

      zoomGroup.append('text').attr('x', xPos + 6).attr('y', 17).attr('class', 'zoom-info-text zoom-aggregation-interval').text(intl.formatMessage({
        id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.zoomGroupAggregationIntervalLabel',
        defaultMessage: '(aggregation interval: , bucket span: )'
      }));

      if (modelPlotEnabled === false) {
        var modelPlotLabel = zoomGroup.append('text').attr('x', 300).attr('y', 17).attr('class', 'zoom-info-text').text(intl.formatMessage({
          id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.modelBoundsNotAvailableLabel',
          defaultMessage: 'Model bounds are not available'
        }));
        modelPlotLabel.attr('x', fcsWidth - (modelPlotLabel.node().getBBox().width + 10));
      }

      var chartElement = _d.default.select(this.rootNode);

      chartElement.selectAll('.focus-zoom a').on('click', function () {
        _d.default.event.preventDefault();

        setZoomInterval(_d.default.select(this).attr('data-ms'));
      });
    }
  }, {
    key: "drawContextElements",
    value: function drawContextElements(cxtGroup, cxtWidth, cxtChartHeight, swlHeight) {
      var _this3 = this;

      var _this$props7 = this.props,
          bounds = _this$props7.bounds,
          contextChartData = _this$props7.contextChartData,
          contextForecastData = _this$props7.contextForecastData,
          modelPlotEnabled = _this$props7.modelPlotEnabled;
      var data = contextChartData;
      this.contextXScale = _d.default.time.scale().range([0, cxtWidth]).domain(this.calculateContextXAxisDomain());
      var combinedData = contextForecastData === undefined ? data : data.concat(contextForecastData);
      var valuesRange = {
        min: Number.MAX_VALUE,
        max: Number.MIN_VALUE
      };

      _lodash.default.each(combinedData, function (item) {
        valuesRange.min = Math.min(item.value, valuesRange.min);
        valuesRange.max = Math.max(item.value, valuesRange.max);
      });

      var dataMin = valuesRange.min;
      var dataMax = valuesRange.max;
      var chartLimits = {
        min: dataMin,
        max: dataMax
      };

      if (modelPlotEnabled === true || contextForecastData !== undefined && contextForecastData.length > 0) {
        var boundsRange = {
          min: Number.MAX_VALUE,
          max: Number.MIN_VALUE
        };

        _lodash.default.each(combinedData, function (item) {
          boundsRange.min = Math.min(item.lower, boundsRange.min);
          boundsRange.max = Math.max(item.upper, boundsRange.max);
        });

        dataMin = Math.min(dataMin, boundsRange.min);
        dataMax = Math.max(dataMax, boundsRange.max); // Set the y axis domain so that the range of actual values takes up at least 50% of the full range.

        if (valuesRange.max - valuesRange.min < 0.5 * (dataMax - dataMin)) {
          if (valuesRange.min > dataMin) {
            chartLimits.min = valuesRange.min - 0.5 * (valuesRange.max - valuesRange.min);
          }

          if (valuesRange.max < dataMax) {
            chartLimits.max = valuesRange.max + 0.5 * (valuesRange.max - valuesRange.min);
          }
        }
      }

      this.contextYScale = _d.default.scale.linear().range([cxtChartHeight, contextChartLineTopMargin]).domain([chartLimits.min, chartLimits.max]);
      var borders = cxtGroup.append('g').attr('class', 'axis'); // Add borders left and right.

      borders.append('line').attr('x1', 0).attr('y1', 0).attr('x2', 0).attr('y2', cxtChartHeight + swlHeight);
      borders.append('line').attr('x1', cxtWidth).attr('y1', 0).attr('x2', cxtWidth).attr('y2', cxtChartHeight + swlHeight); // Add x axis.

      var timeBuckets = new _time_buckets.TimeBuckets();
      timeBuckets.setInterval('auto');
      timeBuckets.setBounds(bounds);
      var xAxisTickFormat = timeBuckets.getScaledDateFormat();

      var xAxis = _d.default.svg.axis().scale(this.contextXScale).orient('top').innerTickSize(-cxtChartHeight).outerTickSize(0).tickPadding(0).ticks((0, _chart_utils.numTicksForDateFormat)(cxtWidth, xAxisTickFormat)).tickFormat(function (d) {
        return (0, _moment.default)(d).format(xAxisTickFormat);
      });

      cxtGroup.datum(data);

      var contextBoundsArea = _d.default.svg.area().x(function (d) {
        return _this3.contextXScale(d.date);
      }).y0(function (d) {
        return _this3.contextYScale(Math.min(chartLimits.max, Math.max(d.lower, chartLimits.min)));
      }).y1(function (d) {
        return _this3.contextYScale(Math.max(chartLimits.min, Math.min(d.upper, chartLimits.max)));
      }).defined(function (d) {
        return d.lower !== null && d.upper !== null;
      });

      if (modelPlotEnabled === true) {
        cxtGroup.append('path').datum(data).attr('class', 'area context').attr('d', contextBoundsArea);
      }

      var contextValuesLine = _d.default.svg.line().x(function (d) {
        return _this3.contextXScale(d.date);
      }).y(function (d) {
        return _this3.contextYScale(d.value);
      }).defined(function (d) {
        return d.value !== null;
      });

      cxtGroup.append('path').datum(data).attr('class', 'values-line').attr('d', contextValuesLine);
      (0, _chart_utils.drawLineChartDots)(data, cxtGroup, contextValuesLine, 1); // Create the path elements for the forecast value line and bounds area.

      if (contextForecastData !== undefined) {
        cxtGroup.append('path').datum(contextForecastData).attr('class', 'area forecast').attr('d', contextBoundsArea);
        cxtGroup.append('path').datum(contextForecastData).attr('class', 'values-line forecast').attr('d', contextValuesLine);
      } // Create and draw the anomaly swimlane.


      var swimlane = cxtGroup.append('g').attr('class', 'swimlane').attr('transform', 'translate(0,' + cxtChartHeight + ')');
      this.drawSwimlane(swimlane, cxtWidth, swlHeight); // Draw a mask over the sections of the context chart and swimlane
      // which fall outside of the zoom brush selection area.

      this.mask = new _context_chart_mask.ContextChartMask(cxtGroup, contextChartData, modelPlotEnabled, swlHeight).x(this.contextXScale).y(this.contextYScale); // Draw the x axis on top of the mask so that the labels are visible.

      cxtGroup.append('g').attr('class', 'x axis context-chart-axis').call(xAxis); // Move the x axis labels up so that they are inside the contact chart area.

      cxtGroup.selectAll('.x.context-chart-axis text').attr('dy', cxtChartHeight - 5);
      (0, _chart_utils.filterAxisLabels)(cxtGroup.selectAll('.x.context-chart-axis'), cxtWidth);
      this.drawContextBrush(cxtGroup);
    }
  }, {
    key: "setZoomInterval",
    value: function setZoomInterval(ms) {
      var _this$props8 = this.props,
          bounds = _this$props8.bounds,
          zoomTo = _this$props8.zoomTo;
      var minBoundsMs = bounds.min.valueOf();
      var maxBoundsMs = bounds.max.valueOf(); // Attempt to retain the same zoom end time.
      // If not, go back to the bounds start and add on the required millis.

      var millis = +ms;
      var to = zoomTo.getTime();
      var from = to - millis;

      if (from < minBoundsMs) {
        from = minBoundsMs;
        to = Math.min(minBoundsMs + millis, maxBoundsMs);
      }

      this.setContextBrushExtent(new Date(from), new Date(to));
    }
  }, {
    key: "showFocusChartTooltip",
    value: function showFocusChartTooltip(marker, circle) {
      var _this$props9 = this.props,
          modelPlotEnabled = _this$props9.modelPlotEnabled,
          intl = _this$props9.intl;
      var fieldFormat = this.fieldFormat;
      var seriesKey = 'single_metric_viewer'; // Show the time and metric values in the tooltip.
      // Uses date, value, upper, lower and anomalyScore (optional) marker properties.

      var formattedDate = (0, _date_utils.formatHumanReadableDateTimeSeconds)(marker.date);
      var tooltipData = [{
        name: formattedDate
      }];

      if (_lodash.default.has(marker, 'anomalyScore')) {
        var score = parseInt(marker.anomalyScore);
        var displayScore = score > 0 ? score : '< 1';
        tooltipData.push({
          name: intl.formatMessage({
            id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.anomalyScoreLabel',
            defaultMessage: 'anomaly score'
          }),
          value: displayScore,
          color: anomalyColorScale(score),
          seriesKey: seriesKey,
          yAccessor: 'anomaly_score'
        });

        if ((0, _chart_utils.showMultiBucketAnomalyTooltip)(marker) === true) {
          tooltipData.push({
            name: intl.formatMessage({
              id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.multiBucketImpactLabel',
              defaultMessage: 'multi-bucket impact'
            }),
            value: (0, _anomaly_utils.getMultiBucketImpactLabel)(marker.multiBucketImpact),
            seriesKey: seriesKey,
            yAccessor: 'multi_bucket_impact'
          });
        }

        if (modelPlotEnabled === false) {
          // Show actual/typical when available except for rare detectors.
          // Rare detectors always have 1 as actual and the probability as typical.
          // Exposing those values in the tooltip with actual/typical labels might irritate users.
          if (_lodash.default.has(marker, 'actual') && marker.function !== 'rare') {
            // Display the record actual in preference to the chart value, which may be
            // different depending on the aggregation interval of the chart.
            tooltipData.push({
              name: intl.formatMessage({
                id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.actualLabel',
                defaultMessage: 'actual'
              }),
              value: (0, _format_value.formatValue)(marker.actual, marker.function, fieldFormat),
              seriesKey: seriesKey,
              yAccessor: 'actual'
            });
            tooltipData.push({
              name: intl.formatMessage({
                id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.typicalLabel',
                defaultMessage: 'typical'
              }),
              value: (0, _format_value.formatValue)(marker.typical, marker.function, fieldFormat),
              seriesKey: seriesKey,
              yAccessor: 'typical'
            });
          } else {
            tooltipData.push({
              name: intl.formatMessage({
                id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.valueLabel',
                defaultMessage: 'value'
              }),
              value: (0, _format_value.formatValue)(marker.value, marker.function, fieldFormat),
              seriesKey: seriesKey,
              yAccessor: 'value'
            });

            if (_lodash.default.has(marker, 'byFieldName') && _lodash.default.has(marker, 'numberOfCauses')) {
              var numberOfCauses = marker.numberOfCauses; // If numberOfCauses === 1, won't go into this block as actual/typical copied to top level fields.

              var byFieldName = (0, _string_utils.mlEscape)(marker.byFieldName);
              tooltipData.push({
                name: intl.formatMessage({
                  id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.moreThanOneUnusualByFieldValuesLabel',
                  defaultMessage: '{numberOfCauses}{plusSign} unusual {byFieldName} values'
                }, {
                  numberOfCauses: numberOfCauses,
                  byFieldName: byFieldName,
                  // Maximum of 10 causes are stored in the record, so '10' may mean more than 10.
                  plusSign: numberOfCauses < 10 ? '' : '+'
                }),
                seriesKey: seriesKey,
                yAccessor: 'numberOfCauses'
              });
            }
          }
        } else {
          tooltipData.push({
            name: intl.formatMessage({
              id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.modelPlotEnabled.actualLabel',
              defaultMessage: 'actual'
            }),
            value: (0, _format_value.formatValue)(marker.actual, marker.function, fieldFormat),
            seriesKey: seriesKey,
            yAccessor: 'actual'
          });
          tooltipData.push({
            name: intl.formatMessage({
              id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.modelPlotEnabled.upperBoundsLabel',
              defaultMessage: 'upper bounds'
            }),
            value: (0, _format_value.formatValue)(marker.upper, marker.function, fieldFormat),
            seriesKey: seriesKey,
            yAccessor: 'upper_bounds'
          });
          tooltipData.push({
            name: intl.formatMessage({
              id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.modelPlotEnabled.lowerBoundsLabel',
              defaultMessage: 'lower bounds'
            }),
            value: (0, _format_value.formatValue)(marker.lower, marker.function, fieldFormat),
            seriesKey: seriesKey,
            yAccessor: 'lower_bounds'
          });
        }
      } else {
        // TODO - need better formatting for small decimals.
        if (_lodash.default.get(marker, 'isForecast', false) === true) {
          tooltipData.push({
            name: intl.formatMessage({
              id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.withoutAnomalyScore.predictionLabel',
              defaultMessage: 'prediction'
            }),
            value: (0, _format_value.formatValue)(marker.value, marker.function, fieldFormat),
            seriesKey: seriesKey,
            yAccessor: 'prediction'
          });
        } else {
          tooltipData.push({
            name: intl.formatMessage({
              id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.withoutAnomalyScore.valueLabel',
              defaultMessage: 'value'
            }),
            value: (0, _format_value.formatValue)(marker.value, marker.function, fieldFormat),
            seriesKey: seriesKey,
            yAccessor: 'value'
          });
        }

        if (modelPlotEnabled === true) {
          tooltipData.push({
            name: intl.formatMessage({
              id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.withoutAnomalyScoreAndModelPlotEnabled.upperBoundsLabel',
              defaultMessage: 'upper bounds'
            }),
            value: (0, _format_value.formatValue)(marker.upper, marker.function, fieldFormat),
            seriesKey: seriesKey,
            yAccessor: 'upper_bounds'
          });
          tooltipData.push({
            name: intl.formatMessage({
              id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.withoutAnomalyScoreAndModelPlotEnabled.lowerBoundsLabel',
              defaultMessage: 'lower bounds'
            }),
            value: (0, _format_value.formatValue)(marker.lower, marker.function, fieldFormat),
            seriesKey: seriesKey,
            yAccessor: 'lower_bounds'
          });
        }
      }

      if (_lodash.default.has(marker, 'scheduledEvents')) {
        marker.scheduledEvents.forEach(function (scheduledEvent, i) {
          tooltipData.push({
            name: intl.formatMessage({
              id: 'xpack.ml.timeSeriesExplorer.timeSeriesChart.scheduledEventsLabel',
              defaultMessage: 'scheduled event{counter}'
            }, {
              counter: marker.scheduledEvents.length > 1 ? " #".concat(i + 1) : ''
            }),
            value: scheduledEvent,
            seriesKey: seriesKey,
            yAccessor: "scheduled_events_".concat(i + 1)
          });
        });
      }

      if (mlAnnotationsEnabled && _lodash.default.has(marker, 'annotation')) {
        tooltipData.length = 0;
        tooltipData.push({
          name: marker.annotation
        });
        var timespan = (0, _moment.default)(marker.timestamp).format('MMMM Do YYYY, HH:mm');

        if (typeof marker.end_timestamp !== 'undefined') {
          timespan += " - ".concat((0, _moment.default)(marker.end_timestamp).format('MMMM Do YYYY, HH:mm'));
        }

        tooltipData.push({
          name: timespan
        });
      }

      var xOffset = _chart_utils.LINE_CHART_ANOMALY_RADIUS * 2; // When the annotation area is hovered

      if (circle.tagName.toLowerCase() === 'rect') {
        var x = Number(circle.getAttribute('x'));

        if (x < 0) {
          // The beginning of the annotation area is outside of the focus chart,
          // hence we need to adjust the x offset of a tooltip.
          xOffset = Math.abs(x);
        }
      }

      _chart_tooltip_service.mlChartTooltipService.show(tooltipData, circle, {
        x: xOffset,
        y: 0
      });
    }
  }, {
    key: "highlightFocusChartAnomaly",
    value: function highlightFocusChartAnomaly(record) {
      // Highlights the anomaly marker in the focus chart corresponding to the specified record.
      var _this$props10 = this.props,
          focusChartData = _this$props10.focusChartData,
          focusAggregationInterval = _this$props10.focusAggregationInterval;
      var focusXScale = this.focusXScale;
      var focusYScale = this.focusYScale;
      var showFocusChartTooltip = this.showFocusChartTooltip.bind(this); // Find the anomaly marker which corresponds to the time of the anomaly record.
      // Depending on the way the chart is aggregated, there may not be
      // a point at exactly the same time as the record being highlighted.

      var anomalyTime = record.source.timestamp;
      var markerToSelect = (0, _timeseriesexplorer_utils.findChartPointForAnomalyTime)(focusChartData, anomalyTime, focusAggregationInterval); // Render an additional highlighted anomaly marker on the focus chart.
      // TODO - plot anomaly markers for cases where there is an anomaly due
      // to the absence of data and model plot is enabled.

      if (markerToSelect !== undefined) {
        var selectedMarker = _d.default.select('.focus-chart-markers').selectAll('.focus-chart-highlighted-marker').data([markerToSelect]);

        if ((0, _chart_utils.showMultiBucketAnomalyMarker)(markerToSelect) === true) {
          selectedMarker.enter().append('path').attr('d', _d.default.svg.symbol().size(_chart_utils.MULTI_BUCKET_SYMBOL_SIZE).type('cross')).attr('transform', function (d) {
            return "translate(".concat(focusXScale(d.date), ", ").concat(focusYScale(d.value), ")");
          }).attr('class', function (d) {
            return "anomaly-marker multi-bucket ".concat((0, _anomaly_utils.getSeverityWithLow)(d.anomalyScore).id, " highlighted");
          });
        } else {
          selectedMarker.enter().append('circle').attr('r', _chart_utils.LINE_CHART_ANOMALY_RADIUS).attr('cx', function (d) {
            return focusXScale(d.date);
          }).attr('cy', function (d) {
            return focusYScale(d.value);
          }).attr('class', function (d) {
            return "anomaly-marker metric-value ".concat((0, _anomaly_utils.getSeverityWithLow)(d.anomalyScore).id, " highlighted");
          });
        } // Display the chart tooltip for this marker.
        // Note the values of the record and marker may differ depending on the levels of aggregation.


        var chartElement = _d.default.select(this.rootNode);

        var anomalyMarker = chartElement.selectAll('.focus-chart-markers .anomaly-marker.highlighted');

        if (anomalyMarker.length) {
          showFocusChartTooltip(markerToSelect, anomalyMarker[0][0]);
        }
      }
    }
  }, {
    key: "unhighlightFocusChartAnomaly",
    value: function unhighlightFocusChartAnomaly() {
      _d.default.select('.focus-chart-markers').selectAll('.anomaly-marker.highlighted').remove();

      _chart_tooltip_service.mlChartTooltipService.hide();
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate() {
      return true;
    }
  }, {
    key: "setRef",
    value: function setRef(componentNode) {
      this.rootNode = componentNode;
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement("div", {
        className: "ml-timeseries-chart-react",
        ref: this.setRef.bind(this)
      });
    }
  }]);

  return TimeseriesChart;
}(_react.default.Component), _defineProperty(_class, "propTypes", {
  annotation: _propTypes.default.object,
  autoZoomDuration: _propTypes.default.number,
  bounds: _propTypes.default.object,
  contextAggregationInterval: _propTypes.default.object,
  contextChartData: _propTypes.default.array,
  contextForecastData: _propTypes.default.array,
  contextChartSelected: _propTypes.default.func.isRequired,
  detectorIndex: _propTypes.default.number,
  focusAggregationInterval: _propTypes.default.object,
  focusAnnotationData: _propTypes.default.array,
  focusChartData: _propTypes.default.array,
  focusForecastData: _propTypes.default.array,
  modelPlotEnabled: _propTypes.default.bool.isRequired,
  renderFocusChartOnly: _propTypes.default.bool.isRequired,
  selectedJob: _propTypes.default.object,
  showForecast: _propTypes.default.bool.isRequired,
  showModelBounds: _propTypes.default.bool.isRequired,
  svgWidth: _propTypes.default.number.isRequired,
  swimlaneData: _propTypes.default.array,
  zoomFrom: _propTypes.default.object,
  zoomTo: _propTypes.default.object,
  zoomFromFocusLoaded: _propTypes.default.object,
  zoomToFocusLoaded: _propTypes.default.object
}), _temp));

var TimeseriesChart = function TimeseriesChart(props) {
  var annotationProp = (0, _useObservable.default)(_annotations_service.annotation$);

  if (annotationProp === undefined) {
    return null;
  }

  return _react.default.createElement(TimeseriesChartIntl, _extends({
    annotation: annotationProp
  }, props));
};

exports.TimeseriesChart = TimeseriesChart;"},null]}