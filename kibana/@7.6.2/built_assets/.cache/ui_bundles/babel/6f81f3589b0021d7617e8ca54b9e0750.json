{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/saved_objects/helpers/apply_es_resp.js","dependencies":[{"path":"src/legacy/ui/public/saved_objects/helpers/apply_es_resp.js","mtime":1585205041139},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmFwcGx5RVNSZXNwID0gYXBwbHlFU1Jlc3A7Cgp2YXIgX2xvZGFzaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgibG9kYXNoIikpOwoKdmFyIF9wYXJzZV9zZWFyY2hfc291cmNlID0gcmVxdWlyZSgidWkvc2F2ZWRfb2JqZWN0cy9oZWxwZXJzL3BhcnNlX3NlYXJjaF9zb3VyY2UiKTsKCnZhciBfcHVibGljID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9raWJhbmFfdXRpbHMvcHVibGljIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9Ci8qCiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvcgogKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aAogKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodAogKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyCiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOyB5b3UgbWF5CiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLAogKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbgogKiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkKICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlCiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMKICogdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwoKLyoqCiAqIEEgZ2l2ZW4gcmVzcG9uc2Ugb2YgYW5kIEVsYXN0aWNTZWFyY2ggY29udGFpbmluZyBhIHBsYWluIHNhdmVkIG9iamVjdCBpcyBhcHBsaWVkIHRvIHRoZSBnaXZlbgogKiBzYXZlZE9iamVjdAogKi8KCgpmdW5jdGlvbiBhcHBseUVTUmVzcChyZXNwLCBzYXZlZE9iamVjdCwgY29uZmlnKSB7CiAgdmFyIG1hcHBpbmcsIGVzVHlwZSwgaW5qZWN0UmVmZXJlbmNlcywgaHlkcmF0ZUluZGV4UGF0dGVybiwgbWV0YTsKICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGFwcGx5RVNSZXNwJChfY29udGV4dCkgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIG1hcHBpbmcgPSAoMCwgX3B1YmxpYy5leHBhbmRTaG9ydGhhbmQpKGNvbmZpZy5tYXBwaW5nKTsKICAgICAgICAgIGVzVHlwZSA9IGNvbmZpZy50eXBlIHx8ICcnOwogICAgICAgICAgc2F2ZWRPYmplY3QuX3NvdXJjZSA9IF9sb2Rhc2guZGVmYXVsdC5jbG9uZURlZXAocmVzcC5fc291cmNlKTsKICAgICAgICAgIGluamVjdFJlZmVyZW5jZXMgPSBjb25maWcuaW5qZWN0UmVmZXJlbmNlczsKICAgICAgICAgIGh5ZHJhdGVJbmRleFBhdHRlcm4gPSBzYXZlZE9iamVjdC5oeWRyYXRlSW5kZXhQYXR0ZXJuOwoKICAgICAgICAgIGlmICghKHR5cGVvZiByZXNwLmZvdW5kID09PSAnYm9vbGVhbicgJiYgIXJlc3AuZm91bmQpKSB7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICB0aHJvdyBuZXcgX3B1YmxpYy5TYXZlZE9iamVjdE5vdEZvdW5kKGVzVHlwZSwgc2F2ZWRPYmplY3QuaWQgfHwgJycpOwoKICAgICAgICBjYXNlIDc6CiAgICAgICAgICBtZXRhID0gcmVzcC5fc291cmNlLmtpYmFuYVNhdmVkT2JqZWN0TWV0YSB8fCB7fTsKICAgICAgICAgIGRlbGV0ZSByZXNwLl9zb3VyY2Uua2liYW5hU2F2ZWRPYmplY3RNZXRhOwoKICAgICAgICAgIGlmICghY29uZmlnLmluZGV4UGF0dGVybiAmJiBzYXZlZE9iamVjdC5fc291cmNlLmluZGV4UGF0dGVybikgewogICAgICAgICAgICBjb25maWcuaW5kZXhQYXR0ZXJuID0gc2F2ZWRPYmplY3QuX3NvdXJjZS5pbmRleFBhdHRlcm47CiAgICAgICAgICAgIGRlbGV0ZSBzYXZlZE9iamVjdC5fc291cmNlLmluZGV4UGF0dGVybjsKICAgICAgICAgIH0gLy8gYXNzaWduIHRoZSBkZWZhdWx0cyB0byB0aGUgcmVzcG9uc2UKCgogICAgICAgICAgX2xvZGFzaC5kZWZhdWx0LmRlZmF1bHRzKHNhdmVkT2JqZWN0Ll9zb3VyY2UsIHNhdmVkT2JqZWN0LmRlZmF1bHRzKTsgLy8gdHJhbnNmb3JtIHRoZSBzb3VyY2UgdXNpbmcgX2Rlc2VyaWFsaXplcnMKCgogICAgICAgICAgX2xvZGFzaC5kZWZhdWx0LmZvck93bihtYXBwaW5nLCBmdW5jdGlvbiAoZmllbGRNYXBwaW5nLCBmaWVsZE5hbWUpIHsKICAgICAgICAgICAgaWYgKGZpZWxkTWFwcGluZy5fZGVzZXJpYWxpemUgJiYgdHlwZW9mIGZpZWxkTmFtZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICBzYXZlZE9iamVjdC5fc291cmNlW2ZpZWxkTmFtZV0gPSBmaWVsZE1hcHBpbmcuX2Rlc2VyaWFsaXplKHNhdmVkT2JqZWN0Ll9zb3VyY2VbZmllbGROYW1lXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOyAvLyBHaXZlIG9iaiBhbGwgb2YgdGhlIHZhbHVlcyBpbiBfc291cmNlLmZpZWxkcwoKCiAgICAgICAgICBfbG9kYXNoLmRlZmF1bHQuYXNzaWduKHNhdmVkT2JqZWN0LCBzYXZlZE9iamVjdC5fc291cmNlKTsKCiAgICAgICAgICBzYXZlZE9iamVjdC5sYXN0U2F2ZWRUaXRsZSA9IHNhdmVkT2JqZWN0LnRpdGxlOwogICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE2OwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCgoMCwgX3BhcnNlX3NlYXJjaF9zb3VyY2UucGFyc2VTZWFyY2hTb3VyY2UpKHNhdmVkT2JqZWN0LCBlc1R5cGUsIG1ldGEuc2VhcmNoU291cmNlSlNPTiwgcmVzcC5yZWZlcmVuY2VzKSk7CgogICAgICAgIGNhc2UgMTY6CiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTg7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKGh5ZHJhdGVJbmRleFBhdHRlcm4oKSk7CgogICAgICAgIGNhc2UgMTg6CiAgICAgICAgICBpZiAoaW5qZWN0UmVmZXJlbmNlcyAmJiByZXNwLnJlZmVyZW5jZXMgJiYgcmVzcC5yZWZlcmVuY2VzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgaW5qZWN0UmVmZXJlbmNlcyhzYXZlZE9iamVjdCwgcmVzcC5yZWZlcmVuY2VzKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoISh0eXBlb2YgY29uZmlnLmFmdGVyRVNSZXNwID09PSAnZnVuY3Rpb24nKSkgewogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjM7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQoKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMjsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoY29uZmlnLmFmdGVyRVNSZXNwKHNhdmVkT2JqZWN0KSk7CgogICAgICAgIGNhc2UgMjI6CiAgICAgICAgICBzYXZlZE9iamVjdCA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgIGNhc2UgMjM6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBzYXZlZE9iamVjdCk7CgogICAgICAgIGNhc2UgMjQ6CiAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgIH0KICAgIH0KICB9KTsKfQ=="},null]}