{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/monitoring/public/components/renderers/setup_mode.js","dependencies":[{"path":"x-pack/legacy/plugins/monitoring/public/components/renderers/setup_mode.js","mtime":1585205046300},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlNldHVwTW9kZVJlbmRlcmVyID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9zZXR1cF9tb2RlID0gcmVxdWlyZSgiLi4vLi4vbGliL3NldHVwX21vZGUiKTsKCnZhciBfZmx5b3V0ID0gcmVxdWlyZSgiLi4vbWV0cmljYmVhdF9taWdyYXRpb24vZmx5b3V0Iik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9maW5kX25ld191dWlkID0gcmVxdWlyZSgiLi9saWIvZmluZF9uZXdfdXVpZCIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCnZhciBTZXR1cE1vZGVSZW5kZXJlciA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHsKICBfaW5oZXJpdHMoU2V0dXBNb2RlUmVuZGVyZXIsIF9SZWFjdCRDb21wb25lbnQpOwoKICBmdW5jdGlvbiBTZXR1cE1vZGVSZW5kZXJlcigpIHsKICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyOwoKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2V0dXBNb2RlUmVuZGVyZXIpOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgfQoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoU2V0dXBNb2RlUmVuZGVyZXIpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzdGF0ZSIsIHsKICAgICAgcmVuZGVyU3RhdGU6IGZhbHNlLAogICAgICBpc0ZseW91dE9wZW46IGZhbHNlLAogICAgICBpbnN0YW5jZTogbnVsbCwKICAgICAgbmV3UHJvZHVjdDogbnVsbCwKICAgICAgaXNTZXR0aW5nVXBOZXc6IGZhbHNlCiAgICB9KTsKCiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU2V0dXBNb2RlUmVuZGVyZXIsIFt7CiAgICBrZXk6ICJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsCiAgICAgICAgICBzY29wZSA9IF90aGlzJHByb3BzLnNjb3BlLAogICAgICAgICAgaW5qZWN0b3IgPSBfdGhpcyRwcm9wcy5pbmplY3RvcjsKICAgICAgKDAsIF9zZXR1cF9tb2RlLmluaXRTZXR1cE1vZGVTdGF0ZSkoc2NvcGUsIGluamVjdG9yLCBmdW5jdGlvbiAoX29sZERhdGEpIHsKICAgICAgICB2YXIgbmV3U3RhdGUgPSB7CiAgICAgICAgICByZW5kZXJTdGF0ZTogdHJ1ZQogICAgICAgIH07CiAgICAgICAgdmFyIHByb2R1Y3ROYW1lID0gX3RoaXMyLnByb3BzLnByb2R1Y3ROYW1lOwoKICAgICAgICBpZiAoIXByb2R1Y3ROYW1lKSB7CiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUobmV3U3RhdGUpOwoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBzZXR1cE1vZGVTdGF0ZSA9ICgwLCBfc2V0dXBfbW9kZS5nZXRTZXR1cE1vZGVTdGF0ZSkoKTsKCiAgICAgICAgaWYgKCFzZXR1cE1vZGVTdGF0ZS5lbmFibGVkIHx8ICFzZXR1cE1vZGVTdGF0ZS5kYXRhKSB7CiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUobmV3U3RhdGUpOwoKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBkYXRhID0gc2V0dXBNb2RlU3RhdGUuZGF0YVtwcm9kdWN0TmFtZV07CiAgICAgICAgdmFyIG9sZERhdGEgPSBfb2xkRGF0YSA/IF9vbGREYXRhW3Byb2R1Y3ROYW1lXSA6IG51bGw7CgogICAgICAgIGlmIChkYXRhICYmIG9sZERhdGEpIHsKICAgICAgICAgIHZhciBuZXdVdWlkID0gKDAsIF9maW5kX25ld191dWlkLmZpbmROZXdVdWlkKShPYmplY3Qua2V5cyhvbGREYXRhLmJ5VXVpZCksIE9iamVjdC5rZXlzKGRhdGEuYnlVdWlkKSk7CgogICAgICAgICAgaWYgKG5ld1V1aWQpIHsKICAgICAgICAgICAgbmV3U3RhdGUubmV3UHJvZHVjdCA9IGRhdGEuYnlVdWlkW25ld1V1aWRdOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgX3RoaXMyLnNldFN0YXRlKG5ld1N0YXRlKTsKICAgICAgfSk7CiAgICAgICgwLCBfc2V0dXBfbW9kZS5zZXRTZXR1cE1vZGVNZW51SXRlbSkoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZXNldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7CiAgICAgIHRoaXMuc2V0U3RhdGUoewogICAgICAgIHJlbmRlclN0YXRlOiBmYWxzZSwKICAgICAgICBpc0ZseW91dE9wZW46IGZhbHNlLAogICAgICAgIGluc3RhbmNlOiBudWxsLAogICAgICAgIG5ld1Byb2R1Y3Q6IG51bGwsCiAgICAgICAgaXNTZXR0aW5nVXBOZXc6IGZhbHNlCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEZseW91dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rmx5b3V0KGRhdGEsIG1ldGEpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgcHJvZHVjdE5hbWUgPSB0aGlzLnByb3BzLnByb2R1Y3ROYW1lOwogICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLAogICAgICAgICAgaXNGbHlvdXRPcGVuID0gX3RoaXMkc3RhdGUuaXNGbHlvdXRPcGVuLAogICAgICAgICAgaW5zdGFuY2UgPSBfdGhpcyRzdGF0ZS5pbnN0YW5jZSwKICAgICAgICAgIGlzU2V0dGluZ1VwTmV3ID0gX3RoaXMkc3RhdGUuaXNTZXR0aW5nVXBOZXcsCiAgICAgICAgICBuZXdQcm9kdWN0ID0gX3RoaXMkc3RhdGUubmV3UHJvZHVjdDsKCiAgICAgIGlmICghZGF0YSB8fCAhaXNGbHlvdXRPcGVuKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHZhciBwcm9kdWN0ID0gbnVsbDsKCiAgICAgIGlmIChuZXdQcm9kdWN0KSB7CiAgICAgICAgcHJvZHVjdCA9IG5ld1Byb2R1Y3Q7CiAgICAgIH0gLy8gRm9yIG5ldyBpbnN0YW5jZSBkaXNjb3ZlcnkgZmxvdywgd2UgcGFzcyBpbiBlbXB0eSBpbnN0YW5jZSBvYmplY3QKICAgICAgZWxzZSBpZiAoaW5zdGFuY2UgJiYgT2JqZWN0LmtleXMoaW5zdGFuY2UpLmxlbmd0aCkgewogICAgICAgICAgcHJvZHVjdCA9IGRhdGEuYnlVdWlkW2luc3RhbmNlLnV1aWRdOwogICAgICAgIH0KCiAgICAgIGlmICghcHJvZHVjdCkgewogICAgICAgIHZhciB1dWlkcyA9IE9iamVjdC52YWx1ZXMoZGF0YS5ieVV1aWQpOwoKICAgICAgICBpZiAodXVpZHMubGVuZ3RoICYmICFpc1NldHRpbmdVcE5ldykgewogICAgICAgICAgcHJvZHVjdCA9IHV1aWRzWzBdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwcm9kdWN0ID0gewogICAgICAgICAgICBpc05ldE5ld1VzZXI6IHRydWUKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZmx5b3V0LkZseW91dCwgewogICAgICAgIG9uQ2xvc2U6IGZ1bmN0aW9uIG9uQ2xvc2UoKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMzLnJlc2V0KCk7CiAgICAgICAgfSwKICAgICAgICBwcm9kdWN0TmFtZTogcHJvZHVjdE5hbWUsCiAgICAgICAgcHJvZHVjdDogcHJvZHVjdCwKICAgICAgICBtZXRhOiBtZXRhLAogICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSwKICAgICAgICB1cGRhdGVQcm9kdWN0OiBfc2V0dXBfbW9kZS51cGRhdGVTZXR1cE1vZGVEYXRhLAogICAgICAgIGlzU2V0dGluZ1VwTmV3OiBpc1NldHRpbmdVcE5ldwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRCb3R0b21CYXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJvdHRvbUJhcihzZXR1cE1vZGVTdGF0ZSkgewogICAgICBpZiAoIXNldHVwTW9kZVN0YXRlLmVuYWJsZWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgICAgc2l6ZTogInh4bCIKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCb3R0b21CYXIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgICBqdXN0aWZ5Q29udGVudDogInNwYWNlQmV0d2VlbiIsCiAgICAgICAgYWxpZ25JdGVtczogImNlbnRlciIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICAgIGd1dHRlclNpemU6ICJzIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dENvbG9yLCB7CiAgICAgICAgY29sb3I6ICJnaG9zdCIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLm1vbml0b3Jpbmcuc2V0dXBNb2RlLmRlc2NyaXB0aW9uIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIllvdSBhcmUgaW4gc2V0dXAgbW9kZS4gVGhlICh7ZmxhZ0ljb259KSBpY29uIGluZGljYXRlcyBjb25maWd1cmF0aW9uIG9wdGlvbnMuIiwKICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgIGZsYWdJY29uOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSWNvbiwgewogICAgICAgICAgICB0eXBlOiAiZmxhZyIKICAgICAgICAgIH0pCiAgICAgICAgfQogICAgICB9KSkpKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgICBndXR0ZXJTaXplOiAicyIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbiwgewogICAgICAgIGNvbG9yOiAiZGFuZ2VyIiwKICAgICAgICBmaWxsOiB0cnVlLAogICAgICAgIGljb25UeXBlOiAiZmxhZyIsCiAgICAgICAgaWNvblNpZGU6ICJyaWdodCIsCiAgICAgICAgc2l6ZTogInMiLAogICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICByZXR1cm4gKDAsIF9zZXR1cF9tb2RlLnRvZ2dsZVNldHVwTW9kZSkoZmFsc2UpOwogICAgICAgIH0KICAgICAgfSwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3Jpbmcuc2V0dXBNb2RlLmV4aXQnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJFeGl0IHNldHVwIG1vZGUiCiAgICAgIH0pKSkpKSkpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzaG9ydGN1dFRvRmluaXNoTWlncmF0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzaG9ydGN1dFRvRmluaXNoTWlncmF0aW9uKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIHNob3J0Y3V0VG9GaW5pc2hNaWdyYXRpb24kKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoKDAsIF9zZXR1cF9tb2RlLmRpc2FibGVFbGFzdGljc2VhcmNoSW50ZXJuYWxDb2xsZWN0aW9uKSgpKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKCgwLCBfc2V0dXBfbW9kZS51cGRhdGVTZXR1cE1vZGVEYXRhKSgpKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsCiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wczIucmVuZGVyLAogICAgICAgICAgcHJvZHVjdE5hbWUgPSBfdGhpcyRwcm9wczIucHJvZHVjdE5hbWU7CiAgICAgIHZhciBzZXR1cE1vZGVTdGF0ZSA9ICgwLCBfc2V0dXBfbW9kZS5nZXRTZXR1cE1vZGVTdGF0ZSkoKTsKICAgICAgdmFyIGRhdGEgPSBudWxsOwoKICAgICAgaWYgKHNldHVwTW9kZVN0YXRlLmRhdGEpIHsKICAgICAgICBpZiAocHJvZHVjdE5hbWUpIHsKICAgICAgICAgIGRhdGEgPSBzZXR1cE1vZGVTdGF0ZS5kYXRhW3Byb2R1Y3ROYW1lXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGF0YSA9IHNldHVwTW9kZVN0YXRlLmRhdGE7CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgbWV0YSA9IHNldHVwTW9kZVN0YXRlLmRhdGEgPyBzZXR1cE1vZGVTdGF0ZS5kYXRhLl9tZXRhIDogbnVsbDsKICAgICAgcmV0dXJuIHJlbmRlcih7CiAgICAgICAgc2V0dXBNb2RlOiB7CiAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgbWV0YTogbWV0YSwKICAgICAgICAgIGVuYWJsZWQ6IHNldHVwTW9kZVN0YXRlLmVuYWJsZWQsCiAgICAgICAgICBwcm9kdWN0TmFtZTogcHJvZHVjdE5hbWUsCiAgICAgICAgICB1cGRhdGVTZXR1cE1vZGVEYXRhOiBfc2V0dXBfbW9kZS51cGRhdGVTZXR1cE1vZGVEYXRhLAogICAgICAgICAgc2hvcnRjdXRUb0ZpbmlzaE1pZ3JhdGlvbjogZnVuY3Rpb24gc2hvcnRjdXRUb0ZpbmlzaE1pZ3JhdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5zaG9ydGN1dFRvRmluaXNoTWlncmF0aW9uKCk7CiAgICAgICAgICB9LAogICAgICAgICAgb3BlbkZseW91dDogZnVuY3Rpb24gb3BlbkZseW91dChpbnN0YW5jZSwgaXNTZXR0aW5nVXBOZXcpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5zZXRTdGF0ZSh7CiAgICAgICAgICAgICAgaXNGbHlvdXRPcGVuOiB0cnVlLAogICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSwKICAgICAgICAgICAgICBpc1NldHRpbmdVcE5ldzogaXNTZXR0aW5nVXBOZXcKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LAogICAgICAgICAgY2xvc2VGbHlvdXQ6IGZ1bmN0aW9uIGNsb3NlRmx5b3V0KCkgewogICAgICAgICAgICByZXR1cm4gX3RoaXM0LnNldFN0YXRlKHsKICAgICAgICAgICAgICBpc0ZseW91dE9wZW46IGZhbHNlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZmx5b3V0Q29tcG9uZW50OiB0aGlzLmdldEZseW91dChkYXRhLCBtZXRhKSwKICAgICAgICBib3R0b21CYXJDb21wb25lbnQ6IHRoaXMuZ2V0Qm90dG9tQmFyKHNldHVwTW9kZVN0YXRlKQogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBTZXR1cE1vZGVSZW5kZXJlcjsKfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpOwoKZXhwb3J0cy5TZXR1cE1vZGVSZW5kZXJlciA9IFNldHVwTW9kZVJlbmRlcmVyOw=="},null]}