{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/management/sections/index_patterns/create_index_pattern_wizard/components/step_index_pattern/components/indices_list/indices_list.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/management/sections/index_patterns/create_index_pattern_wizard/components/step_index_pattern/components/indices_list/indices_list.js","mtime":1585205039787},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkluZGljZXNMaXN0ID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInByb3AtdHlwZXMiKSk7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2NvbnN0YW50cyIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfc2VydmljZXMgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkvbGliL3NlcnZpY2VzIik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9CgpmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCnZhciBJbmRpY2VzTGlzdCA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9Db21wb25lbnQpIHsKICBfaW5oZXJpdHMoSW5kaWNlc0xpc3QsIF9Db21wb25lbnQpOwoKICBmdW5jdGlvbiBJbmRpY2VzTGlzdChwcm9wcykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmRpY2VzTGlzdCk7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoSW5kaWNlc0xpc3QpLmNhbGwodGhpcywgcHJvcHMpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJyZXNldFBhZ2VUbzAiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfdGhpcy5vbkNoYW5nZVBhZ2UoMCk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbkNoYW5nZVBhZ2UiLCBmdW5jdGlvbiAocGFnZSkgewogICAgICBfdGhpcy5wYWdlci5nb1RvUGFnZUluZGV4KHBhZ2UpOwoKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIHBhZ2U6IHBhZ2UKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbkNoYW5nZVBlclBhZ2UiLCBmdW5jdGlvbiAocGVyUGFnZSkgewogICAgICBfdGhpcy5wYWdlci5zZXRJdGVtc1BlclBhZ2UocGVyUGFnZSk7CgogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgcGVyUGFnZTogcGVyUGFnZQogICAgICB9KTsKCiAgICAgIF90aGlzLnJlc2V0UGFnZVRvMCgpOwoKICAgICAgX3RoaXMuY2xvc2VQZXJQYWdlQ29udHJvbCgpOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib3BlblBlclBhZ2VDb250cm9sIiwgZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgaXNQZXJQYWdlQ29udHJvbE9wZW46IHRydWUKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJjbG9zZVBlclBhZ2VDb250cm9sIiwgZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgaXNQZXJQYWdlQ29udHJvbE9wZW46IGZhbHNlCiAgICAgIH0pOwogICAgfSk7CgogICAgX3RoaXMuc3RhdGUgPSB7CiAgICAgIHBhZ2U6IDAsCiAgICAgIHBlclBhZ2U6IF9jb25zdGFudHMuUEVSX1BBR0VfSU5DUkVNRU5UU1sxXSwKICAgICAgaXNQZXJQYWdlQ29udHJvbE9wZW46IGZhbHNlCiAgICB9OwogICAgX3RoaXMucGFnZXIgPSBuZXcgX3NlcnZpY2VzLlBhZ2VyKHByb3BzLmluZGljZXMubGVuZ3RoLCBfdGhpcy5zdGF0ZS5wZXJQYWdlLCBfdGhpcy5zdGF0ZS5wYWdlKTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhJbmRpY2VzTGlzdCwgW3sKICAgIGtleTogIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHsKICAgICAgaWYgKG5leHRQcm9wcy5pbmRpY2VzLmxlbmd0aCAhPT0gdGhpcy5wcm9wcy5pbmRpY2VzLmxlbmd0aCkgewogICAgICAgIHRoaXMucGFnZXIuc2V0VG90YWxJdGVtcyhuZXh0UHJvcHMuaW5kaWNlcy5sZW5ndGgpOwogICAgICAgIHRoaXMucmVzZXRQYWdlVG8wKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXJQYWdpbmF0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJQYWdpbmF0aW9uKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsCiAgICAgICAgICBwZXJQYWdlID0gX3RoaXMkc3RhdGUucGVyUGFnZSwKICAgICAgICAgIHBhZ2UgPSBfdGhpcyRzdGF0ZS5wYWdlLAogICAgICAgICAgaXNQZXJQYWdlQ29udHJvbE9wZW4gPSBfdGhpcyRzdGF0ZS5pc1BlclBhZ2VDb250cm9sT3BlbjsKCiAgICAgIHZhciBidXR0b24gPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uRW1wdHksIHsKICAgICAgICBzaXplOiAicyIsCiAgICAgICAgY29sb3I6ICJ0ZXh0IiwKICAgICAgICBpY29uVHlwZTogImFycm93RG93biIsCiAgICAgICAgaWNvblNpZGU6ICJyaWdodCIsCiAgICAgICAgb25DbGljazogdGhpcy5vcGVuUGVyUGFnZUNvbnRyb2wKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogImtibi5tYW5hZ2VtZW50LmNyZWF0ZUluZGV4UGF0dGVybi5zdGVwLnBhZ2luZ0xhYmVsIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlJvd3MgcGVyIHBhZ2U6IHtwZXJQYWdlfSIsCiAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICBwZXJQYWdlOiBwZXJQYWdlCiAgICAgICAgfQogICAgICB9KSk7CgogICAgICB2YXIgaXRlbXMgPSBfY29uc3RhbnRzLlBFUl9QQUdFX0lOQ1JFTUVOVFMubWFwKGZ1bmN0aW9uIChpbmNyZW1lbnQpIHsKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbnRleHRNZW51SXRlbSwgewogICAgICAgICAga2V5OiBpbmNyZW1lbnQsCiAgICAgICAgICBpY29uOiAiZW1wdHkiLAogICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5vbkNoYW5nZVBlclBhZ2UoaW5jcmVtZW50KTsKICAgICAgICAgIH0KICAgICAgICB9LCBpbmNyZW1lbnQpOwogICAgICB9KTsKCiAgICAgIHZhciBwYWdlQ291bnQgPSB0aGlzLnBhZ2VyLmdldFRvdGFsUGFnZXMoKTsKICAgICAgdmFyIHBhZ2luYXRpb25Db250cm9scyA9IHBhZ2VDb3VudCA+IDEgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUGFnaW5hdGlvbiwgewogICAgICAgIHBhZ2VDb3VudDogcGFnZUNvdW50LAogICAgICAgIGFjdGl2ZVBhZ2U6IHBhZ2UsCiAgICAgICAgb25QYWdlQ2xpY2s6IHRoaXMub25DaGFuZ2VQYWdlCiAgICAgIH0pKSA6IG51bGw7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICJzcGFjZUJldHdlZW4iLAogICAgICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQb3BvdmVyLCB7CiAgICAgICAgaWQ6ICJjdXN0b21pemFibGVQYWdpbmF0aW9uIiwKICAgICAgICBidXR0b246IGJ1dHRvbiwKICAgICAgICBpc09wZW46IGlzUGVyUGFnZUNvbnRyb2xPcGVuLAogICAgICAgIGNsb3NlUG9wb3ZlcjogdGhpcy5jbG9zZVBlclBhZ2VDb250cm9sLAogICAgICAgIHBhbmVsUGFkZGluZ1NpemU6ICJub25lIiwKICAgICAgICB3aXRoVGl0bGU6IHRydWUKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbnRleHRNZW51UGFuZWwsIHsKICAgICAgICBpdGVtczogaXRlbXMKICAgICAgfSkpKSwgcGFnaW5hdGlvbkNvbnRyb2xzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJoaWdobGlnaHRJbmRleE5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhpZ2hsaWdodEluZGV4TmFtZShpbmRleE5hbWUsIHF1ZXJ5KSB7CiAgICAgIHZhciBxdWVyeUlkeCA9IGluZGV4TmFtZS5pbmRleE9mKHF1ZXJ5KTsKCiAgICAgIGlmICghcXVlcnkgfHwgcXVlcnlJZHggPT09IC0xKSB7CiAgICAgICAgcmV0dXJuIGluZGV4TmFtZTsKICAgICAgfQoKICAgICAgdmFyIHByZVN0ciA9IGluZGV4TmFtZS5zdWJzdHIoMCwgcXVlcnlJZHgpOwogICAgICB2YXIgcG9zdFN0ciA9IGluZGV4TmFtZS5zdWJzdHIocXVlcnlJZHggKyBxdWVyeS5sZW5ndGgpOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3BhbiIsIG51bGwsIHByZVN0ciwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3Ryb25nIiwgbnVsbCwgcXVlcnkpLCBwb3N0U3RyKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLAogICAgICAgICAgaW5kaWNlcyA9IF90aGlzJHByb3BzLmluZGljZXMsCiAgICAgICAgICBxdWVyeSA9IF90aGlzJHByb3BzLnF1ZXJ5LAogICAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wcywgWyJpbmRpY2VzIiwgInF1ZXJ5Il0pOwoKICAgICAgdmFyIHF1ZXJ5V2l0aG91dFdpbGRjYXJkID0gcXVlcnkuZW5kc1dpdGgoJyonKSA/IHF1ZXJ5LnN1YnN0cigwLCBxdWVyeS5sZW5ndGggLSAxKSA6IHF1ZXJ5OwogICAgICB2YXIgcGFnaW5hdGVkSW5kaWNlcyA9IGluZGljZXMuc2xpY2UodGhpcy5wYWdlci5maXJzdEl0ZW1JbmRleCwgdGhpcy5wYWdlci5sYXN0SXRlbUluZGV4ICsgMSk7CiAgICAgIHZhciByb3dzID0gcGFnaW5hdGVkSW5kaWNlcy5tYXAoZnVuY3Rpb24gKGluZGV4LCBrZXkpIHsKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRhYmxlUm93LCB7CiAgICAgICAgICBrZXk6IGtleQogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUYWJsZVJvd0NlbGwsIG51bGwsIF90aGlzMy5oaWdobGlnaHRJbmRleE5hbWUoaW5kZXgubmFtZSwgcXVlcnlXaXRob3V0V2lsZGNhcmQpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRhYmxlUm93Q2VsbCwgbnVsbCwgaW5kZXgudGFncy5tYXAoZnVuY3Rpb24gKHRhZykgewogICAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCYWRnZSwgewogICAgICAgICAgICBrZXk6ICJpbmRleF8iLmNvbmNhdChrZXksICJfdGFnXyIpLmNvbmNhdCh0YWcua2V5KSwKICAgICAgICAgICAgY29sb3I6ICJwcmltYXJ5IgogICAgICAgICAgfSwgdGFnLm5hbWUpOwogICAgICAgIH0pKSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgcmVzdCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRhYmxlLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGFibGVCb2R5LCBudWxsLCByb3dzKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibSIKICAgICAgfSksIHRoaXMucmVuZGVyUGFnaW5hdGlvbigpKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBJbmRpY2VzTGlzdDsKfShfcmVhY3QuQ29tcG9uZW50KTsKCmV4cG9ydHMuSW5kaWNlc0xpc3QgPSBJbmRpY2VzTGlzdDsKCl9kZWZpbmVQcm9wZXJ0eShJbmRpY2VzTGlzdCwgInByb3BUeXBlcyIsIHsKICBpbmRpY2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXkuaXNSZXF1aXJlZCwKICBxdWVyeTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkCn0pOw=="},null]}