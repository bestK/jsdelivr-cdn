{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/vis_type_metric/public/components/metric_vis_options.js","dependencies":[{"path":"src/legacy/core_plugins/vis_type_metric/public/components/metric_vis_options.js","mtime":1585205040271},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk1ldHJpY1Zpc09wdGlvbnMgPSBNZXRyaWNWaXNPcHRpb25zOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfY29tcG9uZW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uL2tibl92aXNsaWJfdmlzX3R5cGVzL3B1YmxpYy9jb21wb25lbnRzIik7Cgp2YXIgX2NvbGxlY3Rpb25zID0gcmVxdWlyZSgiLi4vLi4vLi4va2JuX3Zpc2xpYl92aXNfdHlwZXMvcHVibGljL3V0aWxzL2NvbGxlY3Rpb25zIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBNZXRyaWNWaXNPcHRpb25zKF9yZWYpIHsKICB2YXIgc3RhdGVQYXJhbXMgPSBfcmVmLnN0YXRlUGFyYW1zLAogICAgICBzZXRWYWx1ZSA9IF9yZWYuc2V0VmFsdWUsCiAgICAgIHNldFZhbGlkaXR5ID0gX3JlZi5zZXRWYWxpZGl0eSwKICAgICAgc2V0VG91Y2hlZCA9IF9yZWYuc2V0VG91Y2hlZCwKICAgICAgdmlzID0gX3JlZi52aXMsCiAgICAgIHVpU3RhdGUgPSBfcmVmLnVpU3RhdGU7CiAgdmFyIHNldE1ldHJpY1ZhbHVlID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKHBhcmFtTmFtZSwgdmFsdWUpIHsKICAgIHJldHVybiBzZXRWYWx1ZSgnbWV0cmljJywgX29iamVjdFNwcmVhZCh7fSwgc3RhdGVQYXJhbXMubWV0cmljLCBfZGVmaW5lUHJvcGVydHkoe30sIHBhcmFtTmFtZSwgdmFsdWUpKSk7CiAgfSwgW3NldFZhbHVlLCBzdGF0ZVBhcmFtcy5tZXRyaWNdKTsKICB2YXIgc2V0TWV0cmljTGFiZWxzID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKHBhcmFtTmFtZSwgdmFsdWUpIHsKICAgIHJldHVybiBzZXRNZXRyaWNWYWx1ZSgnbGFiZWxzJywgX29iamVjdFNwcmVhZCh7fSwgc3RhdGVQYXJhbXMubWV0cmljLmxhYmVscywgX2RlZmluZVByb3BlcnR5KHt9LCBwYXJhbU5hbWUsIHZhbHVlKSkpOwogIH0sIFtzZXRNZXRyaWNWYWx1ZSwgc3RhdGVQYXJhbXMubWV0cmljLmxhYmVsc10pOwogIHZhciBzZXRNZXRyaWNTdHlsZSA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChwYXJhbU5hbWUsIHZhbHVlKSB7CiAgICByZXR1cm4gc2V0TWV0cmljVmFsdWUoJ3N0eWxlJywgX29iamVjdFNwcmVhZCh7fSwgc3RhdGVQYXJhbXMubWV0cmljLnN0eWxlLCBfZGVmaW5lUHJvcGVydHkoe30sIHBhcmFtTmFtZSwgdmFsdWUpKSk7CiAgfSwgW3NldE1ldHJpY1ZhbHVlLCBzdGF0ZVBhcmFtcy5tZXRyaWMuc3R5bGVdKTsKICB2YXIgc2V0Q29sb3JNb2RlID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKGlkKSB7CiAgICByZXR1cm4gc2V0TWV0cmljVmFsdWUoJ21ldHJpY0NvbG9yTW9kZScsIGlkKTsKICB9LCBbc2V0TWV0cmljVmFsdWVdKTsKCiAgdmFyIG1ldHJpY0NvbG9yTW9kZUxhYmVsID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVNZXRyaWMucGFyYW1zLmNvbG9yLnVzZUZvckxhYmVsJywgewogICAgZGVmYXVsdE1lc3NhZ2U6ICdVc2UgY29sb3IgZm9yJwogIH0pOwoKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhbmVsLCB7CiAgICBwYWRkaW5nU2l6ZTogInMiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICBzaXplOiAieHMiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDMiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgaWQ6ICJ2aXNUeXBlTWV0cmljLnBhcmFtcy5zZXR0aW5nc1RpdGxlIiwKICAgIGRlZmF1bHRNZXNzYWdlOiAiU2V0dGluZ3MiCiAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogInMiCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudHMuU3dpdGNoT3B0aW9uLCB7CiAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVNZXRyaWMucGFyYW1zLnBlcmNlbnRhZ2VNb2RlTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUGVyY2VudGFnZSBtb2RlJwogICAgfSksCiAgICBwYXJhbU5hbWU6ICJwZXJjZW50YWdlTW9kZSIsCiAgICB2YWx1ZTogc3RhdGVQYXJhbXMubWV0cmljLnBlcmNlbnRhZ2VNb2RlLAogICAgc2V0VmFsdWU6IHNldE1ldHJpY1ZhbHVlCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudHMuU3dpdGNoT3B0aW9uLCB7CiAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVNZXRyaWMucGFyYW1zLnNob3dUaXRsZUxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1Nob3cgdGl0bGUnCiAgICB9KSwKICAgIHBhcmFtTmFtZTogInNob3ciLAogICAgdmFsdWU6IHN0YXRlUGFyYW1zLm1ldHJpYy5sYWJlbHMuc2hvdywKICAgIHNldFZhbHVlOiBzZXRNZXRyaWNMYWJlbHMKICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgIHNpemU6ICJzIgogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUGFuZWwsIHsKICAgIHBhZGRpbmdTaXplOiAicyIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgIHNpemU6ICJ4cyIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMyIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICBpZDogInZpc1R5cGVNZXRyaWMucGFyYW1zLnJhbmdlc1RpdGxlIiwKICAgIGRlZmF1bHRNZXNzYWdlOiAiUmFuZ2VzIgogIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgIHNpemU6ICJzIgogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnRzLkNvbG9yUmFuZ2VzLCB7CiAgICAiZGF0YS10ZXN0LXN1YmoiOiAibWV0cmljQ29sb3JSYW5nZSIsCiAgICBjb2xvcnNSYW5nZTogc3RhdGVQYXJhbXMubWV0cmljLmNvbG9yc1JhbmdlLAogICAgc2V0VmFsdWU6IHNldE1ldHJpY1ZhbHVlLAogICAgc2V0VG91Y2hlZDogc2V0VG91Y2hlZCwKICAgIHNldFZhbGlkaXR5OiBzZXRWYWxpZGl0eQogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgZnVsbFdpZHRoOiB0cnVlLAogICAgZGlzcGxheTogInJvd0NvbXByZXNzZWQiLAogICAgbGFiZWw6IG1ldHJpY0NvbG9yTW9kZUxhYmVsCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkdyb3VwLCB7CiAgICBidXR0b25TaXplOiAiY29tcHJlc3NlZCIsCiAgICBpZFNlbGVjdGVkOiBzdGF0ZVBhcmFtcy5tZXRyaWMubWV0cmljQ29sb3JNb2RlLAogICAgaXNEaXNhYmxlZDogc3RhdGVQYXJhbXMubWV0cmljLmNvbG9yc1JhbmdlLmxlbmd0aCA9PT0gMSwKICAgIGlzRnVsbFdpZHRoOiB0cnVlLAogICAgbGVnZW5kOiBtZXRyaWNDb2xvck1vZGVMYWJlbCwKICAgIG9wdGlvbnM6IHZpcy50eXBlLmVkaXRvckNvbmZpZy5jb2xsZWN0aW9ucy5tZXRyaWNDb2xvck1vZGUsCiAgICBvbkNoYW5nZTogc2V0Q29sb3JNb2RlCiAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnRzLkNvbG9yU2NoZW1hT3B0aW9ucywgewogICAgY29sb3JTY2hlbWE6IHN0YXRlUGFyYW1zLm1ldHJpYy5jb2xvclNjaGVtYSwKICAgIGNvbG9yU2NoZW1hczogdmlzLnR5cGUuZWRpdG9yQ29uZmlnLmNvbGxlY3Rpb25zLmNvbG9yU2NoZW1hcywKICAgIGRpc2FibGVkOiBzdGF0ZVBhcmFtcy5tZXRyaWMuY29sb3JzUmFuZ2UubGVuZ3RoID09PSAxIHx8IHN0YXRlUGFyYW1zLm1ldHJpYy5tZXRyaWNDb2xvck1vZGUgPT09IF9jb2xsZWN0aW9ucy5Db2xvck1vZGVzLk5PTkUsCiAgICBpbnZlcnRDb2xvcnM6IHN0YXRlUGFyYW1zLm1ldHJpYy5pbnZlcnRDb2xvcnMsCiAgICBzZXRWYWx1ZTogc2V0TWV0cmljVmFsdWUsCiAgICBzaG93SGVscFRleHQ6IGZhbHNlLAogICAgdWlTdGF0ZTogdWlTdGF0ZQogIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogInMiCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYW5lbCwgewogICAgcGFkZGluZ1NpemU6ICJzIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgc2l6ZTogInhzIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgzIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgIGlkOiAidmlzVHlwZU1ldHJpYy5wYXJhbXMuc3R5bGUuc3R5bGVUaXRsZSIsCiAgICBkZWZhdWx0TWVzc2FnZTogIlN0eWxlIgogIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgIHNpemU6ICJzIgogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnRzLlJhbmdlT3B0aW9uLCB7CiAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVNZXRyaWMucGFyYW1zLnN0eWxlLmZvbnRTaXplTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTWV0cmljIGZvbnQgc2l6ZSBpbiBwb2ludHMnCiAgICB9KSwKICAgIG1pbjogMTIsCiAgICBtYXg6IDEyMCwKICAgIHBhcmFtTmFtZTogImZvbnRTaXplIiwKICAgIHZhbHVlOiBzdGF0ZVBhcmFtcy5tZXRyaWMuc3R5bGUuZm9udFNpemUsCiAgICBzZXRWYWx1ZTogc2V0TWV0cmljU3R5bGUsCiAgICBzaG93SW5wdXQ6IHRydWUsCiAgICBzaG93TGFiZWxzOiB0cnVlLAogICAgc2hvd1ZhbHVlOiBmYWxzZQogIH0pKSk7Cn0="},null]}