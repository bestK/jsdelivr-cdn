{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/uptime/public/components/functional/kuery_bar/typeahead/index.js","dependencies":[{"path":"x-pack/legacy/plugins/uptime/public/components/functional/kuery_bar/typeahead/index.js","mtime":1585205048727},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlR5cGVhaGVhZCA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJwcm9wLXR5cGVzIikpOwoKdmFyIF9zdWdnZXN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi9zdWdnZXN0aW9ucyIpKTsKCnZhciBfY2xpY2tfb3V0c2lkZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi9jbGlja19vdXRzaWRlIikpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgS0VZX0NPREVTID0gewogIExFRlQ6IDM3LAogIFVQOiAzOCwKICBSSUdIVDogMzksCiAgRE9XTjogNDAsCiAgRU5URVI6IDEzLAogIEVTQzogMjcsCiAgVEFCOiA5Cn07Cgp2YXIgVHlwZWFoZWFkID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0NvbXBvbmVudCkgewogIF9pbmhlcml0cyhUeXBlYWhlYWQsIF9Db21wb25lbnQpOwoKICBmdW5jdGlvbiBUeXBlYWhlYWQoKSB7CiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjsKCiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFR5cGVhaGVhZCk7CgogICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07CiAgICB9CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihUeXBlYWhlYWQpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzdGF0ZSIsIHsKICAgICAgaXNTdWdnZXN0aW9uc1Zpc2libGU6IGZhbHNlLAogICAgICBpbmRleDogbnVsbCwKICAgICAgdmFsdWU6ICcnLAogICAgICBpbnB1dElzUHJpc3RpbmU6IHRydWUKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImluY3JlbWVudEluZGV4IiwgZnVuY3Rpb24gKGN1cnJlbnRJbmRleCkgewogICAgICB2YXIgbmV4dEluZGV4ID0gY3VycmVudEluZGV4ICsgMTsKCiAgICAgIGlmIChjdXJyZW50SW5kZXggPT09IG51bGwgfHwgbmV4dEluZGV4ID49IF90aGlzLnByb3BzLnN1Z2dlc3Rpb25zLmxlbmd0aCkgewogICAgICAgIG5leHRJbmRleCA9IDA7CiAgICAgIH0KCiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBpbmRleDogbmV4dEluZGV4CiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiZGVjcmVtZW50SW5kZXgiLCBmdW5jdGlvbiAoY3VycmVudEluZGV4KSB7CiAgICAgIHZhciBwcmV2aW91c0luZGV4ID0gY3VycmVudEluZGV4IC0gMTsKCiAgICAgIGlmIChwcmV2aW91c0luZGV4IDwgMCkgewogICAgICAgIHByZXZpb3VzSW5kZXggPSBudWxsOwogICAgICB9CgogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgaW5kZXg6IHByZXZpb3VzSW5kZXgKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbktleVVwIiwgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIHZhciBzZWxlY3Rpb25TdGFydCA9IGV2ZW50LnRhcmdldC5zZWxlY3Rpb25TdGFydDsKICAgICAgdmFyIHZhbHVlID0gX3RoaXMuc3RhdGUudmFsdWU7CgogICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHsKICAgICAgICBjYXNlIEtFWV9DT0RFUy5MRUZUOgogICAgICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgICAgICBpc1N1Z2dlc3Rpb25zVmlzaWJsZTogdHJ1ZQogICAgICAgICAgfSk7CgogICAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UodmFsdWUsIHNlbGVjdGlvblN0YXJ0KTsKCiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBLRVlfQ09ERVMuUklHSFQ6CiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICAgIGlzU3VnZ2VzdGlvbnNWaXNpYmxlOiB0cnVlCiAgICAgICAgICB9KTsKCiAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZSh2YWx1ZSwgc2VsZWN0aW9uU3RhcnQpOwoKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbktleURvd24iLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgdmFyIF90aGlzJHN0YXRlID0gX3RoaXMuc3RhdGUsCiAgICAgICAgICBpc1N1Z2dlc3Rpb25zVmlzaWJsZSA9IF90aGlzJHN0YXRlLmlzU3VnZ2VzdGlvbnNWaXNpYmxlLAogICAgICAgICAgaW5kZXggPSBfdGhpcyRzdGF0ZS5pbmRleCwKICAgICAgICAgIHZhbHVlID0gX3RoaXMkc3RhdGUudmFsdWU7CgogICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHsKICAgICAgICBjYXNlIEtFWV9DT0RFUy5ET1dOOgogICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICBpZiAoaXNTdWdnZXN0aW9uc1Zpc2libGUpIHsKICAgICAgICAgICAgX3RoaXMuaW5jcmVtZW50SW5kZXgoaW5kZXgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgICAgICAgIGlzU3VnZ2VzdGlvbnNWaXNpYmxlOiB0cnVlLAogICAgICAgICAgICAgIGluZGV4OiAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIEtFWV9DT0RFUy5VUDoKICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgaWYgKGlzU3VnZ2VzdGlvbnNWaXNpYmxlKSB7CiAgICAgICAgICAgIF90aGlzLmRlY3JlbWVudEluZGV4KGluZGV4KTsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBLRVlfQ09ERVMuRU5URVI6CiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgICAgIGlmIChpc1N1Z2dlc3Rpb25zVmlzaWJsZSAmJiBfdGhpcy5wcm9wcy5zdWdnZXN0aW9uc1tpbmRleF0pIHsKICAgICAgICAgICAgX3RoaXMuc2VsZWN0U3VnZ2VzdGlvbihfdGhpcy5wcm9wcy5zdWdnZXN0aW9uc1tpbmRleF0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgICAgICAgIGlzU3VnZ2VzdGlvbnNWaXNpYmxlOiBmYWxzZQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIF90aGlzLnByb3BzLm9uU3VibWl0KHZhbHVlKTsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBLRVlfQ09ERVMuRVNDOgogICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICAgIGlzU3VnZ2VzdGlvbnNWaXNpYmxlOiBmYWxzZQogICAgICAgICAgfSk7CgogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgS0VZX0NPREVTLlRBQjoKICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICAgICAgaXNTdWdnZXN0aW9uc1Zpc2libGU6IGZhbHNlCiAgICAgICAgICB9KTsKCiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic2VsZWN0U3VnZ2VzdGlvbiIsIGZ1bmN0aW9uIChzdWdnZXN0aW9uKSB7CiAgICAgIHZhciBuZXh0SW5wdXRWYWx1ZSA9IF90aGlzLnN0YXRlLnZhbHVlLnN1YnN0cigwLCBzdWdnZXN0aW9uLnN0YXJ0KSArIHN1Z2dlc3Rpb24udGV4dCArIF90aGlzLnN0YXRlLnZhbHVlLnN1YnN0cihzdWdnZXN0aW9uLmVuZCk7CgogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgdmFsdWU6IG5leHRJbnB1dFZhbHVlLAogICAgICAgIGluZGV4OiBudWxsCiAgICAgIH0pOwoKICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UobmV4dElucHV0VmFsdWUsIG5leHRJbnB1dFZhbHVlLmxlbmd0aCk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbkNsaWNrT3V0c2lkZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIGlzU3VnZ2VzdGlvbnNWaXNpYmxlOiBmYWxzZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uQ2hhbmdlSW5wdXRWYWx1ZSIsIGZ1bmN0aW9uIChldmVudCkgewogICAgICB2YXIgX2V2ZW50JHRhcmdldCA9IGV2ZW50LnRhcmdldCwKICAgICAgICAgIHZhbHVlID0gX2V2ZW50JHRhcmdldC52YWx1ZSwKICAgICAgICAgIHNlbGVjdGlvblN0YXJ0ID0gX2V2ZW50JHRhcmdldC5zZWxlY3Rpb25TdGFydDsKICAgICAgdmFyIGhhc1ZhbHVlID0gQm9vbGVhbih2YWx1ZS50cmltKCkpOwoKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICBpbnB1dElzUHJpc3RpbmU6IGZhbHNlLAogICAgICAgIGlzU3VnZ2VzdGlvbnNWaXNpYmxlOiBoYXNWYWx1ZSwKICAgICAgICBpbmRleDogbnVsbAogICAgICB9KTsKCiAgICAgIGlmICghaGFzVmFsdWUpIHsKICAgICAgICBfdGhpcy5wcm9wcy5vblN1Ym1pdCh2YWx1ZSk7CiAgICAgIH0KCiAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKHZhbHVlLCBzZWxlY3Rpb25TdGFydCk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbkNsaWNrSW5wdXQiLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgdmFyIHNlbGVjdGlvblN0YXJ0ID0gZXZlbnQudGFyZ2V0LnNlbGVjdGlvblN0YXJ0OwoKICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoX3RoaXMuc3RhdGUudmFsdWUsIHNlbGVjdGlvblN0YXJ0KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uQ2xpY2tTdWdnZXN0aW9uIiwgZnVuY3Rpb24gKHN1Z2dlc3Rpb24pIHsKICAgICAgX3RoaXMuc2VsZWN0U3VnZ2VzdGlvbihzdWdnZXN0aW9uKTsKCiAgICAgIF90aGlzLmlucHV0UmVmLmZvY3VzKCk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbk1vdXNlRW50ZXJTdWdnZXN0aW9uIiwgZnVuY3Rpb24gKGluZGV4KSB7CiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBpbmRleDogaW5kZXgKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvblN1Ym1pdCIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMucHJvcHMub25TdWJtaXQoX3RoaXMuc3RhdGUudmFsdWUpOwoKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIGlzU3VnZ2VzdGlvbnNWaXNpYmxlOiBmYWxzZQogICAgICB9KTsKICAgIH0pOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhUeXBlYWhlYWQsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2xpY2tfb3V0c2lkZS5kZWZhdWx0LCB7CiAgICAgICAgb25DbGlja091dHNpZGU6IHRoaXMub25DbGlja091dHNpZGUsCiAgICAgICAgc3R5bGU6IHsKICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnCiAgICAgICAgfQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInhwYWNrLnVwdGltZS5maWx0ZXJCYXIiLAogICAgICAgIHN0eWxlOiB7CiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJwogICAgICAgIH0KICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZpZWxkU2VhcmNoLCB7CiAgICAgICAgZnVsbFdpZHRoOiB0cnVlLAogICAgICAgIHN0eWxlOiB7CiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6ICdub25lJwogICAgICAgIH0sCiAgICAgICAgcGxhY2Vob2xkZXI6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay51cHRpbWUua3VlcnlCYXIuc2VhcmNoUGxhY2Vob2xkZXInLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1NlYXJjaCBtb25pdG9yIElEcywgbmFtZXMsIGFuZCBwcm90b2NvbCB0eXBlcy4uLicKICAgICAgICB9KSwKICAgICAgICBpbnB1dFJlZjogZnVuY3Rpb24gaW5wdXRSZWYobm9kZSkgewogICAgICAgICAgaWYgKG5vZGUpIHsKICAgICAgICAgICAgX3RoaXMyLmlucHV0UmVmID0gbm9kZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLAogICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlLAogICAgICAgIG9uS2V5RG93bjogdGhpcy5vbktleURvd24sCiAgICAgICAgb25LZXlVcDogdGhpcy5vbktleVVwLAogICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlSW5wdXRWYWx1ZSwKICAgICAgICBvbkNsaWNrOiB0aGlzLm9uQ2xpY2tJbnB1dCwKICAgICAgICBhdXRvQ29tcGxldGU6ICJvZmYiLAogICAgICAgIHNwZWxsQ2hlY2s6IGZhbHNlCiAgICAgIH0pLCB0aGlzLnByb3BzLmlzTG9hZGluZyAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUHJvZ3Jlc3MsIHsKICAgICAgICBzaXplOiAieHMiLAogICAgICAgIGNvbG9yOiAiYWNjZW50IiwKICAgICAgICBwb3NpdGlvbjogImFic29sdXRlIiwKICAgICAgICBzdHlsZTogewogICAgICAgICAgYm90dG9tOiAwLAogICAgICAgICAgdG9wOiAnaW5pdGlhbCcKICAgICAgICB9CiAgICAgIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc3VnZ2VzdGlvbnMuZGVmYXVsdCwgewogICAgICAgIHNob3c6IHRoaXMuc3RhdGUuaXNTdWdnZXN0aW9uc1Zpc2libGUsCiAgICAgICAgc3VnZ2VzdGlvbnM6IHRoaXMucHJvcHMuc3VnZ2VzdGlvbnMsCiAgICAgICAgaW5kZXg6IHRoaXMuc3RhdGUuaW5kZXgsCiAgICAgICAgb25DbGljazogdGhpcy5vbkNsaWNrU3VnZ2VzdGlvbiwKICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMub25Nb3VzZUVudGVyU3VnZ2VzdGlvbgogICAgICB9KSk7CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHsKICAgICAgaWYgKHN0YXRlLmlucHV0SXNQcmlzdGluZSAmJiBwcm9wcy5pbml0aWFsVmFsdWUpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgdmFsdWU6IHByb3BzLmluaXRpYWxWYWx1ZQogICAgICAgIH07CiAgICAgIH0KCiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFR5cGVhaGVhZDsKfShfcmVhY3QuQ29tcG9uZW50KTsKCmV4cG9ydHMuVHlwZWFoZWFkID0gVHlwZWFoZWFkOwpUeXBlYWhlYWQucHJvcFR5cGVzID0gewogIGluaXRpYWxWYWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywKICBpc0xvYWRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLAogIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCwKICBvbkNoYW5nZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBvblN1Ym1pdDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBzdWdnZXN0aW9uczogX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5LmlzUmVxdWlyZWQsCiAgcXVlcnlFeGFtcGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQKfTsKVHlwZWFoZWFkLmRlZmF1bHRQcm9wcyA9IHsKICBpc0xvYWRpbmc6IGZhbHNlLAogIGRpc2FibGVkOiBmYWxzZSwKICBzdWdnZXN0aW9uczogW10KfTs="},null]}