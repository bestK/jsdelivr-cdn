{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/discover/plugin.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/discover/plugin.js","mtime":1585205039452},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkRpc2NvdmVyUGx1Z2luID0gdm9pZCAwOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX2FuZ3VsYXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImFuZ3VsYXIiKSk7Cgp2YXIgX3JlZ2lzdGVyX2ZlYXR1cmUgPSByZXF1aXJlKCIuL25wX3JlYWR5L3JlZ2lzdGVyX2ZlYXR1cmUiKTsKCnZhciBfa2liYW5hX3NlcnZpY2VzID0gcmVxdWlyZSgiLi9raWJhbmFfc2VydmljZXMiKTsKCnZhciBfZ2V0X2lubmVyX2FuZ3VsYXIgPSByZXF1aXJlKCIuL2dldF9pbm5lcl9hbmd1bGFyIik7Cgp2YXIgX2J1aWxkX3NlcnZpY2VzID0gcmVxdWlyZSgiLi9idWlsZF9zZXJ2aWNlcyIpOwoKdmFyIF9kb2Nfdmlld3NfcmVnaXN0cnkgPSByZXF1aXJlKCIuL25wX3JlYWR5L2RvY192aWV3cy9kb2Nfdmlld3NfcmVnaXN0cnkiKTsKCnZhciBfdGFibGUgPSByZXF1aXJlKCIuL25wX3JlYWR5L2NvbXBvbmVudHMvdGFibGUvdGFibGUiKTsKCnZhciBfanNvbl9jb2RlX2Jsb2NrID0gcmVxdWlyZSgiLi9ucF9yZWFkeS9jb21wb25lbnRzL2pzb25fY29kZV9ibG9jay9qc29uX2NvZGVfYmxvY2siKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgaW5uZXJBbmd1bGFyTmFtZSA9ICdhcHAvZGlzY292ZXInOwp2YXIgZW1iZWRkYWJsZUFuZ3VsYXJOYW1lID0gJ2FwcC9kaXNjb3ZlckVtYmVkZGFibGUnOwovKioKICogQ29udGFpbnMgRGlzY292ZXIsIG9uZSBvZiB0aGUgb2xkZXN0IHBhcnRzIG9mIEtpYmFuYQogKiBUaGVyZSBhcmUgMiBraW5kcyBvZiBBbmd1bGFyIGJvb3RzdHJhcHBlZCBmb3IgcmVuZGVyaW5nLCBhZGRpdGlvbmFsbHkgdG8gdGhlIG1haW4gQW5ndWxhcgogKiBEaXNjb3ZlciBwcm92aWRlcyBlbWJlZGRhYmxlcywgdGhvc2UgY29udGFpbiBhIHNsaW1tZXIgQW5ndWxhcgogKi8KCnZhciBEaXNjb3ZlclBsdWdpbiA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIERpc2NvdmVyUGx1Z2luKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERpc2NvdmVyUGx1Z2luKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInNlcnZpY2VzSW5pdGlhbGl6ZWQiLCBmYWxzZSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJpbm5lckFuZ3VsYXJJbml0aWFsaXplZCIsIGZhbHNlKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImRvY1ZpZXdzUmVnaXN0cnkiLCBudWxsKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImluaXRpYWxpemVJbm5lckFuZ3VsYXIiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiaW5pdGlhbGl6ZVNlcnZpY2VzIiwgdm9pZCAwKTsKICB9CgogIF9jcmVhdGVDbGFzcyhEaXNjb3ZlclBsdWdpbiwgW3sKICAgIGtleTogInNldHVwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cChjb3JlLCBwbHVnaW5zKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB0aGlzLmRvY1ZpZXdzUmVnaXN0cnkgPSBuZXcgX2RvY192aWV3c19yZWdpc3RyeS5Eb2NWaWV3c1JlZ2lzdHJ5KHBsdWdpbnMuX19MRUdBQ1kuY2hyb21lKTsKICAgICAgdGhpcy5kb2NWaWV3c1JlZ2lzdHJ5LmFkZERvY1ZpZXcoewogICAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLmRpc2NvdmVyLmRvY1ZpZXdzLnRhYmxlLnRhYmxlVGl0bGUnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1RhYmxlJwogICAgICAgIH0pLAogICAgICAgIG9yZGVyOiAxMCwKICAgICAgICBjb21wb25lbnQ6IF90YWJsZS5Eb2NWaWV3VGFibGUKICAgICAgfSk7CiAgICAgIHRoaXMuZG9jVmlld3NSZWdpc3RyeS5hZGREb2NWaWV3KHsKICAgICAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5kaXNjb3Zlci5kb2NWaWV3cy5qc29uLmpzb25UaXRsZScsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnSlNPTicKICAgICAgICB9KSwKICAgICAgICBvcmRlcjogMjAsCiAgICAgICAgY29tcG9uZW50OiBfanNvbl9jb2RlX2Jsb2NrLkpzb25Db2RlQmxvY2sKICAgICAgfSk7CiAgICAgIHBsdWdpbnMua2liYW5hX2xlZ2FjeS5yZWdpc3RlckxlZ2FjeUFwcCh7CiAgICAgICAgaWQ6ICdkaXNjb3ZlcicsCiAgICAgICAgdGl0bGU6ICdEaXNjb3ZlcicsCiAgICAgICAgb3JkZXI6IC0xMDA0LAogICAgICAgIGV1aUljb25UeXBlOiAnZGlzY292ZXJBcHAnLAogICAgICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudChwYXJhbXMpIHsKICAgICAgICAgIHZhciBfcmVmLCByZW5kZXJBcHA7CgogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBtb3VudCQoX2NvbnRleHQpIHsKICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pbml0aWFsaXplU2VydmljZXMpIHsKICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0Rpc2NvdmVyIHBsdWdpbiBtZXRob2QgaW5pdGlhbGl6ZVNlcnZpY2VzIGlzIHVuZGVmaW5lZCcpOwoKICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmluaXRpYWxpemVJbm5lckFuZ3VsYXIpIHsKICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0Rpc2NvdmVyIHBsdWdpbiBtZXRob2QgaW5pdGlhbGl6ZUlubmVyQW5ndWxhciBpcyB1bmRlZmluZWQnKTsKCiAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKF90aGlzLmluaXRpYWxpemVTZXJ2aWNlcygpKTsKCiAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKF90aGlzLmluaXRpYWxpemVJbm5lckFuZ3VsYXIoKSk7CgogICAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoaW1wb3J0KCcuL25wX3JlYWR5L2FwcGxpY2F0aW9uJykpOwoKICAgICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICAgIF9yZWYgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICByZW5kZXJBcHAgPSBfcmVmLnJlbmRlckFwcDsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVuZGVyQXBwKGlubmVyQW5ndWxhck5hbWUsIHBhcmFtcy5lbGVtZW50KSk7CgogICAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICAoMCwgX3JlZ2lzdGVyX2ZlYXR1cmUucmVnaXN0ZXJGZWF0dXJlKShwbHVnaW5zLmhvbWUpOwogICAgICByZXR1cm4gewogICAgICAgIGFkZERvY1ZpZXc6IHRoaXMuZG9jVmlld3NSZWdpc3RyeS5hZGREb2NWaWV3LmJpbmQodGhpcy5kb2NWaWV3c1JlZ2lzdHJ5KQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInN0YXJ0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydChjb3JlLCBwbHVnaW5zKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOyAvLyB3ZSBuZWVkIHRvIHJlZ2lzdGVyIHRoZSBhcHBsaWNhdGlvbiBzZXJ2aWNlIGF0IHNldHVwLCBidXQgdG8gcmVuZGVyIGl0CiAgICAgIC8vIHRoZXJlIGFyZSBzb21lIHN0YXJ0IGRlcGVuZGVuY2llcyBuZWNlc3NhcnksIGZvciB0aGlzIHJlYXNvbgogICAgICAvLyBpbml0aWFsaXplSW5uZXJBbmd1bGFyICsgaW5pdGlhbGl6ZVNlcnZpY2VzIGFyZSBhc3NpZ25lZCBhdCBzdGFydCBhbmQgdXNlZAogICAgICAvLyB3aGVuIHRoZSBhcHBsaWNhdGlvbi9lbWJlZGRhYmxlIGlzIG1vdW50ZWQKCgogICAgICB0aGlzLmluaXRpYWxpemVJbm5lckFuZ3VsYXIgPSBmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBtb2R1bGU7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghX3RoaXMyLmlubmVyQW5ndWxhckluaXRpYWxpemVkKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIHVzZWQgYnkgYXBwbGljYXRpb24gbW91bnQgYW5kIHRlc3RzCiAgICAgICAgICAgICAgICBtb2R1bGUgPSAoMCwgX2dldF9pbm5lcl9hbmd1bGFyLmdldElubmVyQW5ndWxhck1vZHVsZSkoaW5uZXJBbmd1bGFyTmFtZSwgY29yZSwgcGx1Z2lucyk7CiAgICAgICAgICAgICAgICAoMCwgX2tpYmFuYV9zZXJ2aWNlcy5zZXRBbmd1bGFyTW9kdWxlKShtb2R1bGUpOwogICAgICAgICAgICAgICAgX3RoaXMyLmlubmVyQW5ndWxhckluaXRpYWxpemVkID0gdHJ1ZTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9OwoKICAgICAgdGhpcy5pbml0aWFsaXplU2VydmljZXMgPSBmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgc2VydmljZXM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoIV90aGlzMi5zZXJ2aWNlc0luaXRpYWxpemVkKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKCgwLCBfYnVpbGRfc2VydmljZXMuYnVpbGRTZXJ2aWNlcykoY29yZSwgcGx1Z2lucywgX3RoaXMyLmRvY1ZpZXdzUmVnaXN0cnkpKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgc2VydmljZXMgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgICgwLCBfa2liYW5hX3NlcnZpY2VzLnNldFNlcnZpY2VzKShzZXJ2aWNlcyk7CiAgICAgICAgICAgICAgICBfdGhpczIuc2VydmljZXNJbml0aWFsaXplZCA9IHRydWU7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfTsKCiAgICAgIHRoaXMucmVnaXN0ZXJFbWJlZGRhYmxlKGNvcmUsIHBsdWdpbnMpOwogICAgfQogICAgLyoqCiAgICAgKiByZWdpc3RlciBlbWJlZGRhYmxlIHdpdGggYSBzbGltbWVyIGVtYmVkZGFibGUgdmVyc2lvbiBvZiBpbm5lciBhbmd1bGFyCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicmVnaXN0ZXJFbWJlZGRhYmxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlckVtYmVkZGFibGUoY29yZSwgcGx1Z2lucykgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHZhciBfcmVmMiwgU2VhcmNoRW1iZWRkYWJsZUZhY3RvcnksIGdldEluamVjdG9yLCBpc0VkaXRhYmxlLCBmYWN0b3J5OwoKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiByZWdpc3RlckVtYmVkZGFibGUkKF9jb250ZXh0NSkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKGltcG9ydCgnLi9ucF9yZWFkeS9lbWJlZGRhYmxlJykpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIF9yZWYyID0gX2NvbnRleHQ1LnNlbnQ7CiAgICAgICAgICAgICAgU2VhcmNoRW1iZWRkYWJsZUZhY3RvcnkgPSBfcmVmMi5TZWFyY2hFbWJlZGRhYmxlRmFjdG9yeTsKCiAgICAgICAgICAgICAgZ2V0SW5qZWN0b3IgPSBmdW5jdGlvbiBnZXRJbmplY3RvcigpIHsKICAgICAgICAgICAgICAgIHZhciBtb3VudHBvaW50OwogICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBnZXRJbmplY3RvciQoX2NvbnRleHQ0KSB7CiAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczMuaW5pdGlhbGl6ZVNlcnZpY2VzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignRGlzY292ZXIgcGx1Z2luIHJlZ2lzdGVyRW1iZWRkYWJsZTogIGluaXRpYWxpemVTZXJ2aWNlcyBpcyB1bmRlZmluZWQnKTsKCiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNDsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChfdGhpczMuaW5pdGlhbGl6ZVNlcnZpY2VzKCkpOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9nZXRfaW5uZXJfYW5ndWxhci5nZXRJbm5lckFuZ3VsYXJNb2R1bGVFbWJlZGRhYmxlKShlbWJlZGRhYmxlQW5ndWxhck5hbWUsIGNvcmUsIHBsdWdpbnMpOwogICAgICAgICAgICAgICAgICAgICAgICBtb3VudHBvaW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBfYW5ndWxhci5kZWZhdWx0LmJvb3RzdHJhcChtb3VudHBvaW50LCBbZW1iZWRkYWJsZUFuZ3VsYXJOYW1lXSkpOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgaXNFZGl0YWJsZSA9IGZ1bmN0aW9uIGlzRWRpdGFibGUoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY29yZS5hcHBsaWNhdGlvbi5jYXBhYmlsaXRpZXMuZGlzY292ZXIuc2F2ZTsKICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICBmYWN0b3J5ID0gbmV3IFNlYXJjaEVtYmVkZGFibGVGYWN0b3J5KHBsdWdpbnMudWlBY3Rpb25zLmV4ZWN1dGVUcmlnZ2VyQWN0aW9ucywgZ2V0SW5qZWN0b3IsIGlzRWRpdGFibGUpOwogICAgICAgICAgICAgIHBsdWdpbnMuZW1iZWRkYWJsZS5yZWdpc3RlckVtYmVkZGFibGVGYWN0b3J5KGZhY3RvcnkudHlwZSwgZmFjdG9yeSk7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBEaXNjb3ZlclBsdWdpbjsKfSgpOwoKZXhwb3J0cy5EaXNjb3ZlclBsdWdpbiA9IERpc2NvdmVyUGx1Z2luOw=="},null]}