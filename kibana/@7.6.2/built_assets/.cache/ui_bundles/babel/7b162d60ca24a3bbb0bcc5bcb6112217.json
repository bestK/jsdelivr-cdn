{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/persisted_state/persisted_state.js","dependencies":[{"path":"src/legacy/ui/public/persisted_state/persisted_state.js","mtime":1585205041127},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlBlcnNpc3RlZFN0YXRlID0gdm9pZCAwOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfdG9QYXRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJsb2Rhc2gvaW50ZXJuYWwvdG9QYXRoIikpOwoKdmFyIF9lcnJvcnMgPSByZXF1aXJlKCIuL2Vycm9ycyIpOwoKdmFyIF9zaW1wbGVfZW1pdHRlciA9IHJlcXVpcmUoIi4uL3V0aWxzL3NpbXBsZV9lbWl0dGVyIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIHByZXBTZXRQYXJhbXMoa2V5LCB2YWx1ZSwgcGF0aCkgewogIC8vIGtleSBtdXN0IGJlIHRoZSB2YWx1ZSwgc2V0IHRoZSBlbnRpcmUgc3RhdGUgdXNpbmcgaXQKICBpZiAoX2xvZGFzaC5kZWZhdWx0LmlzVW5kZWZpbmVkKHZhbHVlKSAmJiAoX2xvZGFzaC5kZWZhdWx0LmlzUGxhaW5PYmplY3Qoa2V5KSB8fCBwYXRoLmxlbmd0aCA+IDApKSB7CiAgICAvLyBzZXR0aW5nIGVudGlyZSB0cmVlLCBzd2FwIHRoZSBrZXkgYW5kIHZhbHVlIHRvIHdyaXRlIHRvIHRoZSBzdGF0ZQogICAgdmFsdWUgPSBrZXk7CiAgICBrZXkgPSB1bmRlZmluZWQ7CiAgfSAvLyBlbnN1cmUgdGhlIHZhbHVlIGJlaW5nIHBhc3NlZCBpbiBpcyBuZXZlciBtdXRhdGVkCgoKICByZXR1cm4gewogICAgdmFsdWU6IF9sb2Rhc2guZGVmYXVsdC5jbG9uZURlZXAodmFsdWUpLAogICAga2V5OiBrZXkKICB9Owp9Cgp2YXIgUGVyc2lzdGVkU3RhdGUgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICAvKioKICAgKgogICAqIEBwYXJhbSB2YWx1ZQogICAqIEBwYXJhbSBwYXRoCiAgICogQHBhcmFtIEVtaXR0ZXJDbGFzcyB7U2ltcGxlRW1pdHRlcn0gLSBhIFNpbXBsZUVtaXR0ZXIgY2xhc3MgdGhhdCB0aGlzIGNsYXNzIHdpbGwgZXh0ZW5kLiBDYW4gYmUgdXNlZCB0bwogICAqIGluaGVyaXQgYSBjdXN0b20gZXZlbnQgZW1pdHRlci4gRm9yIGV4YW1wbGUsIHRoZSBFdmVudEVtaXR0ZXIgaXMgYW4gImFuZ3VsYXItaXplZCIgdmVyc2lvbgogICAqIGZvciBhbmd1bGFyIGNvbXBvbmVudHMgd2hpY2ggYXV0b21hdGljYWxseSB0cmlnZ2VycyBhIGRpZ2VzdCBsb29wIGZvciBldmVyeSByZWdpc3RlcmVkCiAgICogaGFuZGxlci4gVE9ETzogcmVwbGFjZSBhbmd1bGFyaXplZCBTaW1wbGVFbWl0dGVyIGFuZCBmb3JjZSBhbmd1bGFyIGNhbGxlcnMgdG8gaGFuZGxlIGRpZ2VzdCBsb29wcyBtYW51YWxseSBhbGEKICAgKiBodHRwczovL2dpdGh1Yi5jb20vZWxhc3RpYy9raWJhbmEvaXNzdWVzLzEzODU1CiAgICovCiAgZnVuY3Rpb24gUGVyc2lzdGVkU3RhdGUodmFsdWUsIHBhdGgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgdmFyIEVtaXR0ZXJDbGFzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogX3NpbXBsZV9lbWl0dGVyLlNpbXBsZUVtaXR0ZXI7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBlcnNpc3RlZFN0YXRlKTsKCiAgICBFbWl0dGVyQ2xhc3MuY2FsbCh0aGlzKTsKICAgIHRoaXMuX3BhdGggPSB0aGlzLl9zZXRQYXRoKHBhdGgpOwoKICAgIF9sb2Rhc2guZGVmYXVsdC5mb3JPd24oRW1pdHRlckNsYXNzLnByb3RvdHlwZSwgZnVuY3Rpb24gKG1ldGhvZCwgbWV0aG9kTmFtZSkgewogICAgICBfdGhpc1ttZXRob2ROYW1lXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gRW1pdHRlckNsYXNzLnByb3RvdHlwZVttZXRob2ROYW1lXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSk7IC8vIFNvbWUgdmFsaWRhdGlvbnMKCgogICAgaWYgKCF0aGlzLl9wYXRoLmxlbmd0aCAmJiB2YWx1ZSAmJiAhX2xvZGFzaC5kZWZhdWx0LmlzUGxhaW5PYmplY3QodmFsdWUpKSB7CiAgICAgIHRocm93IG5ldyBfZXJyb3JzLlBlcnNpc3RlZFN0YXRlRXJyb3IoJ1N0YXRlIHZhbHVlIG11c3QgYmUgYSBwbGFpbiBvYmplY3QnKTsKICAgIH0KCiAgICB2YWx1ZSA9IHZhbHVlIHx8IHRoaXMuX2dldERlZmF1bHQoKTsgLy8gY29weSBwYXNzZWQgc3RhdGUgdmFsdWVzIGFuZCBjcmVhdGUgaW50ZXJuYWwgdHJhY2tlcnMKCiAgICB0aGlzLnNldCh2YWx1ZSk7CiAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7IC8vIHVzZWQgdG8gdHJhY2sgc3RhdGUgY2hhbmdlcwogIH0KCiAgX2NyZWF0ZUNsYXNzKFBlcnNpc3RlZFN0YXRlLCBbewogICAga2V5OiAiZ2V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoa2V5LCBkZWYpIHsKICAgICAgcmV0dXJuIF9sb2Rhc2guZGVmYXVsdC5jbG9uZURlZXAodGhpcy5fZ2V0KGtleSwgZGVmKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkgewogICAgICB2YXIgcGFyYW1zID0gcHJlcFNldFBhcmFtcyhrZXksIHZhbHVlLCB0aGlzLl9wYXRoKTsKCiAgICAgIHZhciB2YWwgPSB0aGlzLl9zZXQocGFyYW1zLmtleSwgcGFyYW1zLnZhbHVlKTsKCiAgICAgIHRoaXMuZW1pdCgnc2V0Jyk7CiAgICAgIHJldHVybiB2YWw7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0U2lsZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTaWxlbnQoa2V5LCB2YWx1ZSkgewogICAgICB2YXIgcGFyYW1zID0gcHJlcFNldFBhcmFtcyhrZXksIHZhbHVlLCB0aGlzLl9wYXRoKTsKICAgICAgcmV0dXJuIHRoaXMuX3NldChwYXJhbXMua2V5LCBwYXJhbXMudmFsdWUsIHRydWUpOwogICAgfQogIH0sIHsKICAgIGtleTogImNsZWFyQWxsS2V5cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJBbGxLZXlzKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX2NoYW5nZWRTdGF0ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX3RoaXMyLnNldChrZXksIG51bGwpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZXNldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQocGF0aCkgewogICAgICB2YXIga2V5UGF0aCA9IHRoaXMuX2dldEluZGV4KHBhdGgpOwoKICAgICAgdmFyIG9yaWdWYWx1ZSA9IF9sb2Rhc2guZGVmYXVsdC5nZXQodGhpcy5fZGVmYXVsdFN0YXRlLCBrZXlQYXRoKTsKCiAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBfbG9kYXNoLmRlZmF1bHQuZ2V0KHRoaXMuX21lcmdlZFN0YXRlLCBrZXlQYXRoKTsKCiAgICAgIGlmIChfbG9kYXNoLmRlZmF1bHQuaXNVbmRlZmluZWQob3JpZ1ZhbHVlKSkgewogICAgICAgIHRoaXMuX2NsZWFuUGF0aChwYXRoLCB0aGlzLl9tZXJnZWRTdGF0ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgX2xvZGFzaC5kZWZhdWx0LnNldCh0aGlzLl9tZXJnZWRTdGF0ZSwga2V5UGF0aCwgb3JpZ1ZhbHVlKTsKICAgICAgfSAvLyBjbGVhbiB1cCB0aGUgY2hhbmdlZFN0YXRlIHRyZWUKCgogICAgICB0aGlzLl9jbGVhblBhdGgocGF0aCwgdGhpcy5fY2hhbmdlZFN0YXRlKTsKCiAgICAgIGlmICghX2xvZGFzaC5kZWZhdWx0LmlzRXF1YWwoY3VycmVudFZhbHVlLCBvcmlnVmFsdWUpKSB0aGlzLmVtaXQoJ2NoYW5nZScpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldENoYW5nZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoYW5nZXMoKSB7CiAgICAgIHJldHVybiBfbG9kYXNoLmRlZmF1bHQuY2xvbmVEZWVwKHRoaXMuX2NoYW5nZWRTdGF0ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9KU09OIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7CiAgICAgIHJldHVybiB0aGlzLmdldCgpOwogICAgfQogIH0sIHsKICAgIGtleTogInRvU3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpOwogICAgfQogIH0sIHsKICAgIGtleTogImZyb21TdHJpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21TdHJpbmcoaW5wdXQpIHsKICAgICAgcmV0dXJuIHRoaXMuc2V0KEpTT04ucGFyc2UoaW5wdXQpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZ2V0SW5kZXgiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRJbmRleChrZXkpIHsKICAgICAgaWYgKF9sb2Rhc2guZGVmYXVsdC5pc1VuZGVmaW5lZChrZXkpKSByZXR1cm4gdGhpcy5fcGF0aDsKICAgICAgcmV0dXJuICh0aGlzLl9wYXRoIHx8IFtdKS5jb25jYXQoKDAsIF90b1BhdGguZGVmYXVsdCkoa2V5KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2dldFBhcnRpYWxJbmRleCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFBhcnRpYWxJbmRleChrZXkpIHsKICAgICAgdmFyIGtleVBhdGggPSB0aGlzLl9nZXRJbmRleChrZXkpOwoKICAgICAgcmV0dXJuIGtleVBhdGguc2xpY2UodGhpcy5fcGF0aC5sZW5ndGgpOwogICAgfQogIH0sIHsKICAgIGtleTogIl9jbGVhblBhdGgiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9jbGVhblBhdGgocGF0aCwgc3RhdGVUcmVlKSB7CiAgICAgIHZhciBwYXJ0aWFsUGF0aCA9IHRoaXMuX2dldFBhcnRpYWxJbmRleChwYXRoKTsKCiAgICAgIHZhciByZW1vdmUgPSB0cnVlOyAvLyByZWN1cnNpdmVseSBkZWxldGUgdmFsdWUgdHJlZSwgd2hlbiBubyBvdGhlciBrZXlzIGV4aXN0CgogICAgICB3aGlsZSAocGFydGlhbFBhdGgubGVuZ3RoID4gMCkgewogICAgICAgIHZhciBsYXN0S2V5ID0gcGFydGlhbFBhdGguc3BsaWNlKHBhcnRpYWxQYXRoLmxlbmd0aCAtIDEsIDEpWzBdOwoKICAgICAgICB2YXIgc3RhdGVQYXRoID0gdGhpcy5fcGF0aC5jb25jYXQocGFydGlhbFBhdGgpOwoKICAgICAgICB2YXIgc3RhdGVWYWwgPSBzdGF0ZVBhdGgubGVuZ3RoID4gMCA/IF9sb2Rhc2guZGVmYXVsdC5nZXQoc3RhdGVUcmVlLCBzdGF0ZVBhdGgpIDogc3RhdGVUcmVlOyAvLyBpZiBzdGF0ZVZhbCBpc24ndCBhbiBvYmplY3QsIGRvIG5vdGhpbmcKCiAgICAgICAgaWYgKCFfbG9kYXNoLmRlZmF1bHQuaXNQbGFpbk9iamVjdChzdGF0ZVZhbCkpIHJldHVybjsKICAgICAgICBpZiAocmVtb3ZlKSBkZWxldGUgc3RhdGVWYWxbbGFzdEtleV07CiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHN0YXRlVmFsKS5sZW5ndGggPiAwKSByZW1vdmUgPSBmYWxzZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogIl9nZXREZWZhdWx0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RGVmYXVsdCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2hhc1BhdGgoKSA/IHVuZGVmaW5lZCA6IHt9OwogICAgfQogIH0sIHsKICAgIGtleTogIl9zZXRQYXRoIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0UGF0aChwYXRoKSB7CiAgICAgIHZhciBpc1N0cmluZyA9IF9sb2Rhc2guZGVmYXVsdC5pc1N0cmluZyhwYXRoKTsKCiAgICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShwYXRoKTsKICAgICAgaWYgKCFpc1N0cmluZyAmJiAhaXNBcnJheSkgcmV0dXJuIFtdOwogICAgICByZXR1cm4gaXNTdHJpbmcgPyBbdGhpcy5fZ2V0SW5kZXgocGF0aCldIDogcGF0aDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfaGFzUGF0aCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhc1BhdGgoKSB7CiAgICAgIHJldHVybiB0aGlzLl9wYXRoLmxlbmd0aCA+IDA7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2dldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldChrZXksIGRlZikgewogICAgICAvLyBubyBwYXRoIGFuZCBubyBrZXksIGdldCB0aGUgd2hvbGUgc3RhdGUKICAgICAgaWYgKCF0aGlzLl9oYXNQYXRoKCkgJiYgX2xvZGFzaC5kZWZhdWx0LmlzVW5kZWZpbmVkKGtleSkpIHsKICAgICAgICByZXR1cm4gdGhpcy5fbWVyZ2VkU3RhdGU7CiAgICAgIH0KCiAgICAgIHJldHVybiBfbG9kYXNoLmRlZmF1bHQuZ2V0KHRoaXMuX21lcmdlZFN0YXRlLCB0aGlzLl9nZXRJbmRleChrZXkpLCBkZWYpOwogICAgfQogIH0sIHsKICAgIGtleTogIl9zZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXQoa2V5LCB2YWx1ZSwgc2lsZW50KSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgdmFyIHN0YXRlQ2hhbmdlZCA9IGZhbHNlOwogICAgICB2YXIgaW5pdGlhbFN0YXRlID0gIXRoaXMuX2luaXRpYWxpemVkOwoKICAgICAgdmFyIGtleVBhdGggPSB0aGlzLl9nZXRJbmRleChrZXkpOwoKICAgICAgdmFyIGhhc0tleVBhdGggPSBrZXlQYXRoLmxlbmd0aCA+IDA7IC8vIGlmIHRoaXMgaXMgdGhlIGluaXRpYWwgc3RhdGUgdmFsdWUsIHNhdmUgdmFsdWUgYXMgdGhlIGRlZmF1bHQKCiAgICAgIGlmIChpbml0aWFsU3RhdGUpIHsKICAgICAgICB0aGlzLl9jaGFuZ2VkU3RhdGUgPSB7fTsKICAgICAgICBpZiAoIXRoaXMuX2hhc1BhdGgoKSAmJiBfbG9kYXNoLmRlZmF1bHQuaXNVbmRlZmluZWQoa2V5KSkgdGhpcy5fZGVmYXVsdFN0YXRlID0gdmFsdWU7ZWxzZSB0aGlzLl9kZWZhdWx0U3RhdGUgPSBfbG9kYXNoLmRlZmF1bHQuc2V0KHt9LCBrZXlQYXRoLCB2YWx1ZSk7CiAgICAgIH0KCiAgICAgIGlmICghaW5pdGlhbFN0YXRlKSB7CiAgICAgICAgLy8gbm8gcGF0aCBhbmQgbm8ga2V5LCBzZXQgdGhlIHdob2xlIHN0YXRlCiAgICAgICAgaWYgKCF0aGlzLl9oYXNQYXRoKCkgJiYgX2xvZGFzaC5kZWZhdWx0LmlzVW5kZWZpbmVkKGtleSkpIHsKICAgICAgICAgIC8vIGNvbXBhcmUgY2hhbmdlZFN0YXRlIGFuZCBuZXcgc3RhdGUsIGVtaXQgYW4gZXZlbnQgd2hlbiBkaWZmZXJlbnQKICAgICAgICAgIHN0YXRlQ2hhbmdlZCA9ICFfbG9kYXNoLmRlZmF1bHQuaXNFcXVhbCh0aGlzLl9jaGFuZ2VkU3RhdGUsIHZhbHVlKTsKICAgICAgICAgIHRoaXMuX2NoYW5nZWRTdGF0ZSA9IHZhbHVlOwogICAgICAgICAgdGhpcy5fbWVyZ2VkU3RhdGUgPSBfbG9kYXNoLmRlZmF1bHQuY2xvbmVEZWVwKHZhbHVlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gY2hlY2sgZm9yIGNoYW5nZXMgYXQgcGF0aCwgZW1pdCBhbiBldmVudCB3aGVuIGRpZmZlcmVudAogICAgICAgICAgdmFyIGN1clZhbCA9IGhhc0tleVBhdGggPyB0aGlzLmdldChrZXlQYXRoKSA6IHRoaXMuX21lcmdlZFN0YXRlOwogICAgICAgICAgc3RhdGVDaGFuZ2VkID0gIV9sb2Rhc2guZGVmYXVsdC5pc0VxdWFsKGN1clZhbCwgdmFsdWUpOyAvLyBhcnJheXMgYXJlIG1lcmdlIGJ5IGluZGV4LCBub3QgZGVzaXJlZCAtIGVuc3VyZSB0aGV5IGFyZSByZXBsYWNlZAoKICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KF9sb2Rhc2guZGVmYXVsdC5nZXQodGhpcy5fbWVyZ2VkU3RhdGUsIGtleVBhdGgpKSkgewogICAgICAgICAgICBpZiAoaGFzS2V5UGF0aCkgX2xvZGFzaC5kZWZhdWx0LnNldCh0aGlzLl9tZXJnZWRTdGF0ZSwga2V5UGF0aCwgdW5kZWZpbmVkKTtlbHNlIHRoaXMuX21lcmdlZFN0YXRlID0gdW5kZWZpbmVkOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChoYXNLZXlQYXRoKSB7CiAgICAgICAgICAgIF9sb2Rhc2guZGVmYXVsdC5zZXQodGhpcy5fY2hhbmdlZFN0YXRlLCBrZXlQYXRoLCB2YWx1ZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLl9jaGFuZ2VkU3RhdGUgPSBfbG9kYXNoLmRlZmF1bHQuaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IHt9OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSAvLyB1cGRhdGUgdGhlIG1lcmdlZCBzdGF0ZSB2YWx1ZQoKCiAgICAgIHZhciB0YXJnZXRPYmogPSB0aGlzLl9tZXJnZWRTdGF0ZSB8fCBfbG9kYXNoLmRlZmF1bHQuY2xvbmVEZWVwKHRoaXMuX2RlZmF1bHRTdGF0ZSk7CgogICAgICB2YXIgc291cmNlT2JqID0gX2xvZGFzaC5kZWZhdWx0Lm1lcmdlKHt9LCB0aGlzLl9jaGFuZ2VkU3RhdGUpOyAvLyBoYW5kbGVyIGFyZ3VtZW50cyBhcmUgKHRhcmdldFZhbHVlLCBzb3VyY2VWYWx1ZSwga2V5LCB0YXJnZXQsIHNvdXJjZSkKCgogICAgICB2YXIgbWVyZ2VNZXRob2QgPSBmdW5jdGlvbiBtZXJnZU1ldGhvZCh0YXJnZXRWYWx1ZSwgc291cmNlVmFsdWUsIG1lcmdlS2V5KSB7CiAgICAgICAgLy8gaWYgbm90IGluaXRpYWwgc3RhdGUsIHNraXAgZGVmYXVsdCBtZXJnZSBtZXRob2QgKGllLiByZXR1cm4gdmFsdWUsIHNlZSBub3RlIGJlbG93KQogICAgICAgIGlmICghaW5pdGlhbFN0YXRlICYmIF9sb2Rhc2guZGVmYXVsdC5pc0VxdWFsKGtleVBhdGgsIHNlbGYuX2dldEluZGV4KG1lcmdlS2V5KSkpIHsKICAgICAgICAgIC8vIHVzZSB0aGUgc291cmNlVmFsdWUgb3IgZmFsbCBiYWNrIHRvIHRhcmdldFZhbHVlCiAgICAgICAgICByZXR1cm4gIV9sb2Rhc2guZGVmYXVsdC5pc1VuZGVmaW5lZChzb3VyY2VWYWx1ZSkgPyBzb3VyY2VWYWx1ZSA6IHRhcmdldFZhbHVlOwogICAgICAgIH0KICAgICAgfTsgLy8gSWYgYG1lcmdlTWV0aG9kYCBpcyBwcm92aWRlZCBpdCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG1lcmdlZCB2YWx1ZXMgb2YgdGhlCiAgICAgIC8vIGRlc3RpbmF0aW9uIGFuZCBzb3VyY2UgcHJvcGVydGllcy4KICAgICAgLy8gSWYgYG1lcmdlTWV0aG9kYCByZXR1cm5zIGB1bmRlZmluZWRgIHRoZSBkZWZhdWx0IG1lcmdpbmcgbWV0aG9kIGlzIHVzZWQKCgogICAgICB0aGlzLl9tZXJnZWRTdGF0ZSA9IF9sb2Rhc2guZGVmYXVsdC5tZXJnZSh0YXJnZXRPYmosIHNvdXJjZU9iaiwgbWVyZ2VNZXRob2QpOyAvLyBzYW5pdHkgY2hlY2s7IHZlcmlmeSB0aGF0IHRoZXJlIGFyZSBhY3R1YWxseSBjaGFuZ2VzCgogICAgICBpZiAoX2xvZGFzaC5kZWZhdWx0LmlzRXF1YWwodGhpcy5fbWVyZ2VkU3RhdGUsIHRoaXMuX2RlZmF1bHRTdGF0ZSkpIHRoaXMuX2NoYW5nZWRTdGF0ZSA9IHt9OwogICAgICBpZiAoIXNpbGVudCAmJiBzdGF0ZUNoYW5nZWQpIHRoaXMuZW1pdCgnY2hhbmdlJywga2V5KTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUGVyc2lzdGVkU3RhdGU7Cn0oKTsKCmV4cG9ydHMuUGVyc2lzdGVkU3RhdGUgPSBQZXJzaXN0ZWRTdGF0ZTs="},null]}