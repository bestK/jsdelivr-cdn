{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/lens/public/editor_frame_plugin/editor_frame/config_panel_wrapper.js","dependencies":[{"path":"x-pack/legacy/plugins/lens/public/editor_frame_plugin/editor_frame/config_panel_wrapper.js","mtime":1585205044989},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}