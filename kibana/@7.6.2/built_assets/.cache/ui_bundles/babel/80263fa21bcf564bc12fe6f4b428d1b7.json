{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/actions/map_actions.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/actions/map_actions.js","mtime":1585205045221},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cancelAllInFlightRequests = cancelAllInFlightRequests;
exports.setMapInitError = setMapInitError;
exports.trackCurrentLayerState = trackCurrentLayerState;
exports.rollbackToTrackedLayerStateForSelectedLayer = rollbackToTrackedLayerStateForSelectedLayer;
exports.removeTrackedLayerStateForSelectedLayer = removeTrackedLayerStateForSelectedLayer;
exports.replaceLayerList = replaceLayerList;
exports.cloneLayer = cloneLayer;
exports.addLayer = addLayer;
exports.addLayerWithoutDataSync = addLayerWithoutDataSync;
exports.cleanTooltipStateForLayer = cleanTooltipStateForLayer;
exports.setLayerVisibility = setLayerVisibility;
exports.toggleLayerVisible = toggleLayerVisible;
exports.setSelectedLayer = setSelectedLayer;
exports.removeTransientLayer = removeTransientLayer;
exports.setTransientLayer = setTransientLayer;
exports.clearTransientLayerStateAndCloseFlyout = clearTransientLayerStateAndCloseFlyout;
exports.updateLayerOrder = updateLayerOrder;
exports.mapReady = mapReady;
exports.mapDestroyed = mapDestroyed;
exports.mapExtentChanged = mapExtentChanged;
exports.setTooltipState = setTooltipState;
exports.setMouseCoordinates = setMouseCoordinates;
exports.clearMouseCoordinates = clearMouseCoordinates;
exports.disableScrollZoom = disableScrollZoom;
exports.fitToLayerExtent = fitToLayerExtent;
exports.setGotoWithBounds = setGotoWithBounds;
exports.setGotoWithCenter = setGotoWithCenter;
exports.clearGoto = clearGoto;
exports.startDataLoad = startDataLoad;
exports.updateSourceDataRequest = updateSourceDataRequest;
exports.endDataLoad = endDataLoad;
exports.onDataLoadError = onDataLoadError;
exports.updateSourceProp = updateSourceProp;
exports.syncDataForLayer = syncDataForLayer;
exports.updateLayerLabel = updateLayerLabel;
exports.updateLayerMinZoom = updateLayerMinZoom;
exports.updateLayerMaxZoom = updateLayerMaxZoom;
exports.updateLayerAlpha = updateLayerAlpha;
exports.setLayerQuery = setLayerQuery;
exports.removeSelectedLayer = removeSelectedLayer;
exports.removeLayer = removeLayer;
exports.setQuery = setQuery;
exports.setRefreshConfig = setRefreshConfig;
exports.triggerRefreshTimer = triggerRefreshTimer;
exports.clearMissingStyleProperties = clearMissingStyleProperties;
exports.updateLayerStyle = updateLayerStyle;
exports.updateStyleMeta = updateStyleMeta;
exports.updateLayerStyleForSelectedLayer = updateLayerStyleForSelectedLayer;
exports.setJoinsForLayer = setJoinsForLayer;
exports.updateDrawState = updateDrawState;
exports.disableInteractive = disableInteractive;
exports.disableTooltipControl = disableTooltipControl;
exports.hideToolbarOverlay = hideToolbarOverlay;
exports.hideLayerControl = hideLayerControl;
exports.hideViewControl = hideViewControl;
exports.setHiddenLayers = setHiddenLayers;
exports.SET_WAITING_FOR_READY_HIDDEN_LAYERS = exports.HIDE_VIEW_CONTROL = exports.HIDE_LAYER_CONTROL = exports.HIDE_TOOLBAR_OVERLAY = exports.DISABLE_TOOLTIP_CONTROL = exports.SET_INTERACTIVE = exports.SET_MAP_INIT_ERROR = exports.SET_SCROLL_ZOOM = exports.UPDATE_DRAW_STATE = exports.SET_TOOLTIP_STATE = exports.REMOVE_TRACKED_LAYER_STATE = exports.ROLLBACK_TO_TRACKED_LAYER_STATE = exports.TRACK_CURRENT_LAYER_STATE = exports.CLEAR_GOTO = exports.SET_GOTO = exports.CLEAR_MOUSE_COORDINATES = exports.SET_MOUSE_COORDINATES = exports.SET_REFRESH_CONFIG = exports.UPDATE_SOURCE_PROP = exports.TOUCH_LAYER = exports.SET_LAYER_STYLE_META = exports.UPDATE_LAYER_STYLE = exports.UPDATE_LAYER_PROP = exports.TRIGGER_REFRESH_TIMER = exports.SET_QUERY = exports.SET_JOINS = exports.UPDATE_SOURCE_DATA_REQUEST = exports.LAYER_DATA_LOAD_ERROR = exports.LAYER_DATA_LOAD_ENDED = exports.LAYER_DATA_LOAD_STARTED = exports.MAP_DESTROYED = exports.MAP_READY = exports.MAP_EXTENT_CHANGED = exports.SET_LAYER_VISIBILITY = exports.REMOVE_LAYER = exports.CLEAR_WAITING_FOR_MAP_READY_LAYER_LIST = exports.ADD_WAITING_FOR_MAP_READY_LAYER = exports.SET_LAYER_ERROR_STATUS = exports.ADD_LAYER = exports.UPDATE_LAYER_ORDER = exports.SET_TRANSIENT_LAYER = exports.SET_SELECTED_LAYER = void 0;

var _turf = _interopRequireDefault(require("turf"));

var _booleanContains = _interopRequireDefault(require("@turf/boolean-contains"));

var _map_selectors = require("../selectors/map_selectors");

var _ui = require("../reducers/ui");

var _non_serializable_instances = require("../reducers/non_serializable_instances");

var _ui_actions = require("../actions/ui_actions");

var _constants = require("../../common/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SET_SELECTED_LAYER = 'SET_SELECTED_LAYER';
exports.SET_SELECTED_LAYER = SET_SELECTED_LAYER;
var SET_TRANSIENT_LAYER = 'SET_TRANSIENT_LAYER';
exports.SET_TRANSIENT_LAYER = SET_TRANSIENT_LAYER;
var UPDATE_LAYER_ORDER = 'UPDATE_LAYER_ORDER';
exports.UPDATE_LAYER_ORDER = UPDATE_LAYER_ORDER;
var ADD_LAYER = 'ADD_LAYER';
exports.ADD_LAYER = ADD_LAYER;
var SET_LAYER_ERROR_STATUS = 'SET_LAYER_ERROR_STATUS';
exports.SET_LAYER_ERROR_STATUS = SET_LAYER_ERROR_STATUS;
var ADD_WAITING_FOR_MAP_READY_LAYER = 'ADD_WAITING_FOR_MAP_READY_LAYER';
exports.ADD_WAITING_FOR_MAP_READY_LAYER = ADD_WAITING_FOR_MAP_READY_LAYER;
var CLEAR_WAITING_FOR_MAP_READY_LAYER_LIST = 'CLEAR_WAITING_FOR_MAP_READY_LAYER_LIST';
exports.CLEAR_WAITING_FOR_MAP_READY_LAYER_LIST = CLEAR_WAITING_FOR_MAP_READY_LAYER_LIST;
var REMOVE_LAYER = 'REMOVE_LAYER';
exports.REMOVE_LAYER = REMOVE_LAYER;
var SET_LAYER_VISIBILITY = 'SET_LAYER_VISIBILITY';
exports.SET_LAYER_VISIBILITY = SET_LAYER_VISIBILITY;
var MAP_EXTENT_CHANGED = 'MAP_EXTENT_CHANGED';
exports.MAP_EXTENT_CHANGED = MAP_EXTENT_CHANGED;
var MAP_READY = 'MAP_READY';
exports.MAP_READY = MAP_READY;
var MAP_DESTROYED = 'MAP_DESTROYED';
exports.MAP_DESTROYED = MAP_DESTROYED;
var LAYER_DATA_LOAD_STARTED = 'LAYER_DATA_LOAD_STARTED';
exports.LAYER_DATA_LOAD_STARTED = LAYER_DATA_LOAD_STARTED;
var LAYER_DATA_LOAD_ENDED = 'LAYER_DATA_LOAD_ENDED';
exports.LAYER_DATA_LOAD_ENDED = LAYER_DATA_LOAD_ENDED;
var LAYER_DATA_LOAD_ERROR = 'LAYER_DATA_LOAD_ERROR';
exports.LAYER_DATA_LOAD_ERROR = LAYER_DATA_LOAD_ERROR;
var UPDATE_SOURCE_DATA_REQUEST = 'UPDATE_SOURCE_DATA_REQUEST';
exports.UPDATE_SOURCE_DATA_REQUEST = UPDATE_SOURCE_DATA_REQUEST;
var SET_JOINS = 'SET_JOINS';
exports.SET_JOINS = SET_JOINS;
var SET_QUERY = 'SET_QUERY';
exports.SET_QUERY = SET_QUERY;
var TRIGGER_REFRESH_TIMER = 'TRIGGER_REFRESH_TIMER';
exports.TRIGGER_REFRESH_TIMER = TRIGGER_REFRESH_TIMER;
var UPDATE_LAYER_PROP = 'UPDATE_LAYER_PROP';
exports.UPDATE_LAYER_PROP = UPDATE_LAYER_PROP;
var UPDATE_LAYER_STYLE = 'UPDATE_LAYER_STYLE';
exports.UPDATE_LAYER_STYLE = UPDATE_LAYER_STYLE;
var SET_LAYER_STYLE_META = 'SET_LAYER_STYLE_META';
exports.SET_LAYER_STYLE_META = SET_LAYER_STYLE_META;
var TOUCH_LAYER = 'TOUCH_LAYER';
exports.TOUCH_LAYER = TOUCH_LAYER;
var UPDATE_SOURCE_PROP = 'UPDATE_SOURCE_PROP';
exports.UPDATE_SOURCE_PROP = UPDATE_SOURCE_PROP;
var SET_REFRESH_CONFIG = 'SET_REFRESH_CONFIG';
exports.SET_REFRESH_CONFIG = SET_REFRESH_CONFIG;
var SET_MOUSE_COORDINATES = 'SET_MOUSE_COORDINATES';
exports.SET_MOUSE_COORDINATES = SET_MOUSE_COORDINATES;
var CLEAR_MOUSE_COORDINATES = 'CLEAR_MOUSE_COORDINATES';
exports.CLEAR_MOUSE_COORDINATES = CLEAR_MOUSE_COORDINATES;
var SET_GOTO = 'SET_GOTO';
exports.SET_GOTO = SET_GOTO;
var CLEAR_GOTO = 'CLEAR_GOTO';
exports.CLEAR_GOTO = CLEAR_GOTO;
var TRACK_CURRENT_LAYER_STATE = 'TRACK_CURRENT_LAYER_STATE';
exports.TRACK_CURRENT_LAYER_STATE = TRACK_CURRENT_LAYER_STATE;
var ROLLBACK_TO_TRACKED_LAYER_STATE = 'ROLLBACK_TO_TRACKED_LAYER_STATE';
exports.ROLLBACK_TO_TRACKED_LAYER_STATE = ROLLBACK_TO_TRACKED_LAYER_STATE;
var REMOVE_TRACKED_LAYER_STATE = 'REMOVE_TRACKED_LAYER_STATE';
exports.REMOVE_TRACKED_LAYER_STATE = REMOVE_TRACKED_LAYER_STATE;
var SET_TOOLTIP_STATE = 'SET_TOOLTIP_STATE';
exports.SET_TOOLTIP_STATE = SET_TOOLTIP_STATE;
var UPDATE_DRAW_STATE = 'UPDATE_DRAW_STATE';
exports.UPDATE_DRAW_STATE = UPDATE_DRAW_STATE;
var SET_SCROLL_ZOOM = 'SET_SCROLL_ZOOM';
exports.SET_SCROLL_ZOOM = SET_SCROLL_ZOOM;
var SET_MAP_INIT_ERROR = 'SET_MAP_INIT_ERROR';
exports.SET_MAP_INIT_ERROR = SET_MAP_INIT_ERROR;
var SET_INTERACTIVE = 'SET_INTERACTIVE';
exports.SET_INTERACTIVE = SET_INTERACTIVE;
var DISABLE_TOOLTIP_CONTROL = 'DISABLE_TOOLTIP_CONTROL';
exports.DISABLE_TOOLTIP_CONTROL = DISABLE_TOOLTIP_CONTROL;
var HIDE_TOOLBAR_OVERLAY = 'HIDE_TOOLBAR_OVERLAY';
exports.HIDE_TOOLBAR_OVERLAY = HIDE_TOOLBAR_OVERLAY;
var HIDE_LAYER_CONTROL = 'HIDE_LAYER_CONTROL';
exports.HIDE_LAYER_CONTROL = HIDE_LAYER_CONTROL;
var HIDE_VIEW_CONTROL = 'HIDE_VIEW_CONTROL';
exports.HIDE_VIEW_CONTROL = HIDE_VIEW_CONTROL;
var SET_WAITING_FOR_READY_HIDDEN_LAYERS = 'SET_WAITING_FOR_READY_HIDDEN_LAYERS';
exports.SET_WAITING_FOR_READY_HIDDEN_LAYERS = SET_WAITING_FOR_READY_HIDDEN_LAYERS;

function getLayerLoadingCallbacks(dispatch, layerId) {
  return {
    startLoading: function startLoading(dataId, requestToken, meta) {
      return dispatch(startDataLoad(layerId, dataId, requestToken, meta));
    },
    stopLoading: function stopLoading(dataId, requestToken, data, meta) {
      return dispatch(endDataLoad(layerId, dataId, requestToken, data, meta));
    },
    onLoadError: function onLoadError(dataId, requestToken, errorMessage) {
      return dispatch(onDataLoadError(layerId, dataId, requestToken, errorMessage));
    },
    updateSourceData: function updateSourceData(newData) {
      dispatch(updateSourceDataRequest(layerId, newData));
    },
    registerCancelCallback: function registerCancelCallback(requestToken, callback) {
      return dispatch((0, _non_serializable_instances.registerCancelCallback)(requestToken, callback));
    }
  };
}

function getLayerById(layerId, state) {
  return (0, _map_selectors.getLayerList)(state).find(function (layer) {
    return layerId === layer.getId();
  });
}

function syncDataForAllLayers(getState, dispatch, dataFilters) {
  var state, layerList, syncs;
  return regeneratorRuntime.async(function syncDataForAllLayers$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          state = getState();
          layerList = (0, _map_selectors.getLayerList)(state);
          syncs = layerList.map(function (layer) {
            var loadingFunctions = getLayerLoadingCallbacks(dispatch, layer.getId());
            return layer.syncData(_objectSpread({}, loadingFunctions, {
              dataFilters: dataFilters
            }));
          });
          _context.next = 5;
          return regeneratorRuntime.awrap(Promise.all(syncs));

        case 5:
        case "end":
          return _context.stop();
      }
    }
  });
}

function cancelAllInFlightRequests() {
  return function (dispatch, getState) {
    (0, _map_selectors.getLayerList)(getState()).forEach(function (layer) {
      layer.getInFlightRequestTokens().forEach(function (requestToken) {
        dispatch((0, _non_serializable_instances.cancelRequest)(requestToken));
      });
    });
  };
}

function setMapInitError(errorMessage) {
  return {
    type: SET_MAP_INIT_ERROR,
    errorMessage: errorMessage
  };
}

function trackCurrentLayerState(layerId) {
  return {
    type: TRACK_CURRENT_LAYER_STATE,
    layerId: layerId
  };
}

function rollbackToTrackedLayerStateForSelectedLayer() {
  return function _callee(dispatch, getState) {
    var layerId;
    return regeneratorRuntime.async(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            layerId = (0, _map_selectors.getSelectedLayerId)(getState());
            _context2.next = 3;
            return regeneratorRuntime.awrap(dispatch({
              type: ROLLBACK_TO_TRACKED_LAYER_STATE,
              layerId: layerId
            }));

          case 3:
            // Ensure updateStyleMeta is triggered
            // syncDataForLayer may not trigger endDataLoad if no re-fetch is required
            dispatch(updateStyleMeta(layerId));
            dispatch(syncDataForLayer(layerId));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    });
  };
}

function removeTrackedLayerStateForSelectedLayer() {
  return function (dispatch, getState) {
    var layerId = (0, _map_selectors.getSelectedLayerId)(getState());
    dispatch({
      type: REMOVE_TRACKED_LAYER_STATE,
      layerId: layerId
    });
  };
}

function replaceLayerList(newLayerList) {
  return function (dispatch, getState) {
    (0, _map_selectors.getLayerListRaw)(getState()).forEach(function (_ref) {
      var id = _ref.id;
      dispatch(removeLayerFromLayerList(id));
    });
    newLayerList.forEach(function (layerDescriptor) {
      dispatch(addLayer(layerDescriptor));
    });
  };
}

function cloneLayer(layerId) {
  return function _callee2(dispatch, getState) {
    var layer, clonedDescriptor;
    return regeneratorRuntime.async(function _callee2$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            layer = getLayerById(layerId, getState());

            if (layer) {
              _context3.next = 3;
              break;
            }

            return _context3.abrupt("return");

          case 3:
            _context3.next = 5;
            return regeneratorRuntime.awrap(layer.cloneDescriptor());

          case 5:
            clonedDescriptor = _context3.sent;
            dispatch(addLayer(clonedDescriptor));

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    });
  };
}

function addLayer(layerDescriptor) {
  return function (dispatch, getState) {
    var isMapReady = (0, _map_selectors.getMapReady)(getState());

    if (!isMapReady) {
      dispatch({
        type: ADD_WAITING_FOR_MAP_READY_LAYER,
        layer: layerDescriptor
      });
      return;
    }

    dispatch({
      type: ADD_LAYER,
      layer: layerDescriptor
    });
    dispatch(syncDataForLayer(layerDescriptor.id));
  };
} // Do not use when rendering a map. Method exists to enable selectors for getLayerList when
// rendering is not needed.


function addLayerWithoutDataSync(layerDescriptor) {
  return {
    type: ADD_LAYER,
    layer: layerDescriptor
  };
}

function setLayerDataLoadErrorStatus(layerId, errorMessage) {
  return function (dispatch) {
    dispatch({
      type: SET_LAYER_ERROR_STATUS,
      isInErrorState: errorMessage !== null,
      layerId: layerId,
      errorMessage: errorMessage
    });
  };
}

function cleanTooltipStateForLayer(layerId) {
  var layerFeatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return function (dispatch, getState) {
    var tooltipState = (0, _map_selectors.getTooltipState)(getState());

    if (!tooltipState) {
      return;
    }

    var nextTooltipFeatures = tooltipState.features.filter(function (tooltipFeature) {
      if (tooltipFeature.layerId !== layerId) {
        // feature from another layer, keep it
        return true;
      } // Keep feature if it is still in layer


      return layerFeatures.some(function (layerFeature) {
        return layerFeature.properties[_constants.FEATURE_ID_PROPERTY_NAME] === tooltipFeature.id;
      });
    });

    if (tooltipState.features.length === nextTooltipFeatures.length) {
      // no features got removed, nothing to update
      return;
    }

    if (nextTooltipFeatures.length === 0) {
      // all features removed from tooltip, close tooltip
      dispatch(setTooltipState(null));
    } else {
      dispatch(setTooltipState(_objectSpread({}, tooltipState, {
        features: nextTooltipFeatures
      })));
    }
  };
}

function setLayerVisibility(layerId, makeVisible) {
  return function _callee3(dispatch, getState) {
    var layer;
    return regeneratorRuntime.async(function _callee3$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            //if the current-state is invisible, we also want to sync data
            //e.g. if a layer was invisible at start-up, it won't have any data loaded
            layer = getLayerById(layerId, getState()); // If the layer visibility is already what we want it to be, do nothing

            if (!(!layer || layer.isVisible() === makeVisible)) {
              _context4.next = 3;
              break;
            }

            return _context4.abrupt("return");

          case 3:
            if (!makeVisible) {
              dispatch(cleanTooltipStateForLayer(layerId));
            }

            _context4.next = 6;
            return regeneratorRuntime.awrap(dispatch({
              type: SET_LAYER_VISIBILITY,
              layerId: layerId,
              visibility: makeVisible
            }));

          case 6:
            if (makeVisible) {
              dispatch(syncDataForLayer(layerId));
            }

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    });
  };
}

function toggleLayerVisible(layerId) {
  return function _callee4(dispatch, getState) {
    var layer, makeVisible;
    return regeneratorRuntime.async(function _callee4$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            layer = getLayerById(layerId, getState());

            if (layer) {
              _context5.next = 3;
              break;
            }

            return _context5.abrupt("return");

          case 3:
            makeVisible = !layer.isVisible();
            dispatch(setLayerVisibility(layerId, makeVisible));

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    });
  };
}

function setSelectedLayer(layerId) {
  return function _callee5(dispatch, getState) {
    var oldSelectedLayer;
    return regeneratorRuntime.async(function _callee5$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            oldSelectedLayer = (0, _map_selectors.getSelectedLayerId)(getState());

            if (!oldSelectedLayer) {
              _context6.next = 4;
              break;
            }

            _context6.next = 4;
            return regeneratorRuntime.awrap(dispatch(rollbackToTrackedLayerStateForSelectedLayer()));

          case 4:
            if (layerId) {
              dispatch(trackCurrentLayerState(layerId));
            }

            dispatch({
              type: SET_SELECTED_LAYER,
              selectedLayerId: layerId
            });

          case 6:
          case "end":
            return _context6.stop();
        }
      }
    });
  };
}

function removeTransientLayer() {
  return function _callee6(dispatch, getState) {
    var transientLayerId;
    return regeneratorRuntime.async(function _callee6$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            transientLayerId = (0, _map_selectors.getTransientLayerId)(getState());

            if (!transientLayerId) {
              _context7.next = 6;
              break;
            }

            _context7.next = 4;
            return regeneratorRuntime.awrap(dispatch(removeLayerFromLayerList(transientLayerId)));

          case 4:
            _context7.next = 6;
            return regeneratorRuntime.awrap(dispatch(setTransientLayer(null)));

          case 6:
          case "end":
            return _context7.stop();
        }
      }
    });
  };
}

function setTransientLayer(layerId) {
  return {
    type: SET_TRANSIENT_LAYER,
    transientLayerId: layerId
  };
}

function clearTransientLayerStateAndCloseFlyout() {
  return function _callee7(dispatch) {
    return regeneratorRuntime.async(function _callee7$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return regeneratorRuntime.awrap(dispatch((0, _ui_actions.updateFlyout)(_ui.FLYOUT_STATE.NONE)));

          case 2:
            _context8.next = 4;
            return regeneratorRuntime.awrap(dispatch(setSelectedLayer(null)));

          case 4:
            _context8.next = 6;
            return regeneratorRuntime.awrap(dispatch(removeTransientLayer()));

          case 6:
          case "end":
            return _context8.stop();
        }
      }
    });
  };
}

function updateLayerOrder(newLayerOrder) {
  return {
    type: UPDATE_LAYER_ORDER,
    newLayerOrder: newLayerOrder
  };
}

function mapReady() {
  return function (dispatch, getState) {
    dispatch({
      type: MAP_READY
    });
    (0, _map_selectors.getWaitingForMapReadyLayerListRaw)(getState()).forEach(function (layerDescriptor) {
      dispatch(addLayer(layerDescriptor));
    });
    dispatch({
      type: CLEAR_WAITING_FOR_MAP_READY_LAYER_LIST
    });
  };
}

function mapDestroyed() {
  return {
    type: MAP_DESTROYED
  };
}

function mapExtentChanged(newMapConstants) {
  return function _callee8(dispatch, getState) {
    var state, dataFilters, extent, newZoom, buffer, currentZoom, doesBufferContainExtent, bufferGeometry, extentGeometry, scaleFactor, width, height, newDataFilters;
    return regeneratorRuntime.async(function _callee8$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            state = getState();
            dataFilters = (0, _map_selectors.getDataFilters)(state);
            extent = newMapConstants.extent, newZoom = newMapConstants.zoom;
            buffer = dataFilters.buffer, currentZoom = dataFilters.zoom;

            if (extent) {
              doesBufferContainExtent = false;

              if (buffer) {
                bufferGeometry = _turf.default.bboxPolygon([buffer.minLon, buffer.minLat, buffer.maxLon, buffer.maxLat]);
                extentGeometry = _turf.default.bboxPolygon([extent.minLon, extent.minLat, extent.maxLon, extent.maxLat]);
                doesBufferContainExtent = (0, _booleanContains.default)(bufferGeometry, extentGeometry);
              }

              if (!doesBufferContainExtent || currentZoom !== newZoom) {
                scaleFactor = 0.5; // TODO put scale factor in store and fetch with selector

                width = extent.maxLon - extent.minLon;
                height = extent.maxLat - extent.minLat;
                dataFilters.buffer = {
                  minLon: extent.minLon - width * scaleFactor,
                  minLat: extent.minLat - height * scaleFactor,
                  maxLon: extent.maxLon + width * scaleFactor,
                  maxLat: extent.maxLat + height * scaleFactor
                };
              }
            }

            dispatch({
              type: MAP_EXTENT_CHANGED,
              mapState: _objectSpread({}, dataFilters, {}, newMapConstants)
            });
            newDataFilters = _objectSpread({}, dataFilters, {}, newMapConstants);
            _context9.next = 9;
            return regeneratorRuntime.awrap(syncDataForAllLayers(getState, dispatch, newDataFilters));

          case 9:
          case "end":
            return _context9.stop();
        }
      }
    });
  };
}

function setTooltipState(tooltipState) {
  return {
    type: 'SET_TOOLTIP_STATE',
    tooltipState: tooltipState
  };
}

function setMouseCoordinates(_ref2) {
  var lat = _ref2.lat,
      lon = _ref2.lon;
  var safeLon = lon;

  if (lon > 180) {
    var overlapWestOfDateLine = lon - 180;
    safeLon = -180 + overlapWestOfDateLine;
  } else if (lon < -180) {
    var overlapEastOfDateLine = Math.abs(lon) - 180;
    safeLon = 180 - overlapEastOfDateLine;
  }

  return {
    type: SET_MOUSE_COORDINATES,
    lat: lat,
    lon: safeLon
  };
}

function clearMouseCoordinates() {
  return {
    type: CLEAR_MOUSE_COORDINATES
  };
}

function disableScrollZoom() {
  return {
    type: SET_SCROLL_ZOOM,
    scrollZoom: false
  };
}

function fitToLayerExtent(layerId) {
  return function _callee9(dispatch, getState) {
    var targetLayer, _dataFilters, bounds;

    return regeneratorRuntime.async(function _callee9$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            targetLayer = getLayerById(layerId, getState());

            if (!targetLayer) {
              _context10.next = 9;
              break;
            }

            _dataFilters = (0, _map_selectors.getDataFilters)(getState());
            _context10.next = 5;
            return regeneratorRuntime.awrap(targetLayer.getBounds(_dataFilters));

          case 5:
            bounds = _context10.sent;

            if (!bounds) {
              _context10.next = 9;
              break;
            }

            _context10.next = 9;
            return regeneratorRuntime.awrap(dispatch(setGotoWithBounds(bounds)));

          case 9:
          case "end":
            return _context10.stop();
        }
      }
    });
  };
}

function setGotoWithBounds(bounds) {
  return {
    type: SET_GOTO,
    bounds: bounds
  };
}

function setGotoWithCenter(_ref3) {
  var lat = _ref3.lat,
      lon = _ref3.lon,
      zoom = _ref3.zoom;
  return {
    type: SET_GOTO,
    center: {
      lat: lat,
      lon: lon,
      zoom: zoom
    }
  };
}

function clearGoto() {
  return {
    type: CLEAR_GOTO
  };
}

function startDataLoad(layerId, dataId, requestToken) {
  var meta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  return function (dispatch, getState) {
    var layer = getLayerById(layerId, getState());

    if (layer) {
      dispatch((0, _non_serializable_instances.cancelRequest)(layer.getPrevRequestToken(dataId)));
    }

    var eventHandlers = (0, _non_serializable_instances.getEventHandlers)(getState());

    if (eventHandlers && eventHandlers.onDataLoad) {
      eventHandlers.onDataLoad({
        layerId: layerId,
        dataId: dataId
      });
    }

    dispatch({
      meta: meta,
      type: LAYER_DATA_LOAD_STARTED,
      layerId: layerId,
      dataId: dataId,
      requestToken: requestToken
    });
  };
}

function updateSourceDataRequest(layerId, newData) {
  return function (dispatch) {
    dispatch({
      type: UPDATE_SOURCE_DATA_REQUEST,
      dataId: _constants.SOURCE_DATA_ID_ORIGIN,
      layerId: layerId,
      newData: newData
    });
    dispatch(updateStyleMeta(layerId));
  };
}

function endDataLoad(layerId, dataId, requestToken, data, meta) {
  return function _callee10(dispatch, getState) {
    var features, eventHandlers, _layer, resultMeta;

    return regeneratorRuntime.async(function _callee10$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            dispatch((0, _non_serializable_instances.unregisterCancelCallback)(requestToken));
            features = data && data.features ? data.features : [];
            eventHandlers = (0, _non_serializable_instances.getEventHandlers)(getState());

            if (eventHandlers && eventHandlers.onDataLoadEnd) {
              _layer = getLayerById(layerId, getState());
              resultMeta = {};

              if (_layer && _layer.getType() === _constants.LAYER_TYPE.VECTOR) {
                resultMeta.featuresCount = features.length;
              }

              eventHandlers.onDataLoadEnd({
                layerId: layerId,
                dataId: dataId,
                resultMeta: resultMeta
              });
            }

            dispatch(cleanTooltipStateForLayer(layerId, features));
            dispatch({
              type: LAYER_DATA_LOAD_ENDED,
              layerId: layerId,
              dataId: dataId,
              data: data,
              meta: meta,
              requestToken: requestToken
            }); //Clear any data-load errors when there is a succesful data return.
            //Co this on end-data-load iso at start-data-load to avoid blipping the error status between true/false.
            //This avoids jitter in the warning icon of the TOC when the requests continues to return errors.

            dispatch(setLayerDataLoadErrorStatus(layerId, null));
            dispatch(updateStyleMeta(layerId));

          case 8:
          case "end":
            return _context11.stop();
        }
      }
    });
  };
}

function onDataLoadError(layerId, dataId, requestToken, errorMessage) {
  return function _callee11(dispatch, getState) {
    var eventHandlers;
    return regeneratorRuntime.async(function _callee11$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            dispatch((0, _non_serializable_instances.unregisterCancelCallback)(requestToken));
            eventHandlers = (0, _non_serializable_instances.getEventHandlers)(getState());

            if (eventHandlers && eventHandlers.onDataLoadError) {
              eventHandlers.onDataLoadError({
                layerId: layerId,
                dataId: dataId,
                errorMessage: errorMessage
              });
            }

            dispatch(cleanTooltipStateForLayer(layerId));
            dispatch({
              type: LAYER_DATA_LOAD_ERROR,
              data: null,
              layerId: layerId,
              dataId: dataId,
              requestToken: requestToken
            });
            dispatch(setLayerDataLoadErrorStatus(layerId, errorMessage));

          case 6:
          case "end":
            return _context12.stop();
        }
      }
    });
  };
}

function updateSourceProp(layerId, propName, value) {
  return function _callee12(dispatch) {
    return regeneratorRuntime.async(function _callee12$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            dispatch({
              type: UPDATE_SOURCE_PROP,
              layerId: layerId,
              propName: propName,
              value: value
            });
            _context13.next = 3;
            return regeneratorRuntime.awrap(dispatch(clearMissingStyleProperties(layerId)));

          case 3:
            dispatch(syncDataForLayer(layerId));

          case 4:
          case "end":
            return _context13.stop();
        }
      }
    });
  };
}

function syncDataForLayer(layerId) {
  return function _callee13(dispatch, getState) {
    var targetLayer, _dataFilters2, loadingFunctions;

    return regeneratorRuntime.async(function _callee13$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            targetLayer = getLayerById(layerId, getState());

            if (!targetLayer) {
              _context14.next = 6;
              break;
            }

            _dataFilters2 = (0, _map_selectors.getDataFilters)(getState());
            loadingFunctions = getLayerLoadingCallbacks(dispatch, layerId);
            _context14.next = 6;
            return regeneratorRuntime.awrap(targetLayer.syncData(_objectSpread({}, loadingFunctions, {
              dataFilters: _dataFilters2
            })));

          case 6:
          case "end":
            return _context14.stop();
        }
      }
    });
  };
}

function updateLayerLabel(id, newLabel) {
  return {
    type: UPDATE_LAYER_PROP,
    id: id,
    propName: 'label',
    newValue: newLabel
  };
}

function updateLayerMinZoom(id, minZoom) {
  return {
    type: UPDATE_LAYER_PROP,
    id: id,
    propName: 'minZoom',
    newValue: minZoom
  };
}

function updateLayerMaxZoom(id, maxZoom) {
  return {
    type: UPDATE_LAYER_PROP,
    id: id,
    propName: 'maxZoom',
    newValue: maxZoom
  };
}

function updateLayerAlpha(id, alpha) {
  return {
    type: UPDATE_LAYER_PROP,
    id: id,
    propName: 'alpha',
    newValue: alpha
  };
}

function setLayerQuery(id, query) {
  return function (dispatch) {
    dispatch({
      type: UPDATE_LAYER_PROP,
      id: id,
      propName: 'query',
      newValue: query
    });
    dispatch(syncDataForLayer(id));
  };
}

function removeSelectedLayer() {
  return function (dispatch, getState) {
    var state = getState();
    var layerId = (0, _map_selectors.getSelectedLayerId)(state);
    dispatch(removeLayer(layerId));
  };
}

function removeLayer(layerId) {
  return function _callee14(dispatch, getState) {
    var state, selectedLayerId;
    return regeneratorRuntime.async(function _callee14$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            state = getState();
            selectedLayerId = (0, _map_selectors.getSelectedLayerId)(state);

            if (!(layerId === selectedLayerId)) {
              _context15.next = 6;
              break;
            }

            dispatch((0, _ui_actions.updateFlyout)(_ui.FLYOUT_STATE.NONE));
            _context15.next = 6;
            return regeneratorRuntime.awrap(dispatch(setSelectedLayer(null)));

          case 6:
            dispatch(removeLayerFromLayerList(layerId));

          case 7:
          case "end":
            return _context15.stop();
        }
      }
    });
  };
}

function removeLayerFromLayerList(layerId) {
  return function (dispatch, getState) {
    var layerGettingRemoved = getLayerById(layerId, getState());

    if (!layerGettingRemoved) {
      return;
    }

    layerGettingRemoved.getInFlightRequestTokens().forEach(function (requestToken) {
      dispatch((0, _non_serializable_instances.cancelRequest)(requestToken));
    });
    dispatch(cleanTooltipStateForLayer(layerId));
    layerGettingRemoved.destroy();
    dispatch({
      type: REMOVE_LAYER,
      id: layerId
    });
  };
}

function setQuery(_ref4) {
  var query = _ref4.query,
      timeFilters = _ref4.timeFilters,
      _ref4$filters = _ref4.filters,
      filters = _ref4$filters === void 0 ? [] : _ref4$filters,
      _ref4$refresh = _ref4.refresh,
      refresh = _ref4$refresh === void 0 ? false : _ref4$refresh;

  function generateQueryTimestamp() {
    return new Date().toISOString();
  }

  return function _callee15(dispatch, getState) {
    var prevQuery, prevTriggeredAt, dataFilters;
    return regeneratorRuntime.async(function _callee15$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            prevQuery = (0, _map_selectors.getQuery)(getState());
            prevTriggeredAt = prevQuery && prevQuery.queryLastTriggeredAt ? prevQuery.queryLastTriggeredAt : generateQueryTimestamp();
            dispatch({
              type: SET_QUERY,
              timeFilters: timeFilters,
              query: _objectSpread({}, query, {
                // ensure query changes to trigger re-fetch when "Refresh" clicked
                queryLastTriggeredAt: refresh ? generateQueryTimestamp() : prevTriggeredAt
              }),
              filters: filters
            });
            dataFilters = (0, _map_selectors.getDataFilters)(getState());
            _context16.next = 6;
            return regeneratorRuntime.awrap(syncDataForAllLayers(getState, dispatch, dataFilters));

          case 6:
          case "end":
            return _context16.stop();
        }
      }
    });
  };
}

function setRefreshConfig(_ref5) {
  var isPaused = _ref5.isPaused,
      interval = _ref5.interval;
  return {
    type: SET_REFRESH_CONFIG,
    isPaused: isPaused,
    interval: interval
  };
}

function triggerRefreshTimer() {
  return function _callee16(dispatch, getState) {
    var dataFilters;
    return regeneratorRuntime.async(function _callee16$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            dispatch({
              type: TRIGGER_REFRESH_TIMER
            });
            dataFilters = (0, _map_selectors.getDataFilters)(getState());
            _context17.next = 4;
            return regeneratorRuntime.awrap(syncDataForAllLayers(getState, dispatch, dataFilters));

          case 4:
          case "end":
            return _context17.stop();
        }
      }
    });
  };
}

function clearMissingStyleProperties(layerId) {
  return function _callee17(dispatch, getState) {
    var targetLayer, style, nextFields, _style$getDescriptorW, hasChanges, nextStyleDescriptor;

    return regeneratorRuntime.async(function _callee17$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            targetLayer = getLayerById(layerId, getState());

            if (targetLayer) {
              _context18.next = 3;
              break;
            }

            return _context18.abrupt("return");

          case 3:
            style = targetLayer.getCurrentStyle();

            if (style) {
              _context18.next = 6;
              break;
            }

            return _context18.abrupt("return");

          case 6:
            _context18.next = 8;
            return regeneratorRuntime.awrap(targetLayer.getFields());

          case 8:
            nextFields = _context18.sent;
            //take into account all fields, since labels can be driven by any field (source or join)
            _style$getDescriptorW = style.getDescriptorWithMissingStylePropsRemoved(nextFields), hasChanges = _style$getDescriptorW.hasChanges, nextStyleDescriptor = _style$getDescriptorW.nextStyleDescriptor;

            if (hasChanges) {
              dispatch(updateLayerStyle(layerId, nextStyleDescriptor));
            }

          case 11:
          case "end":
            return _context18.stop();
        }
      }
    });
  };
}

function updateLayerStyle(layerId, styleDescriptor) {
  return function (dispatch) {
    dispatch({
      type: UPDATE_LAYER_STYLE,
      layerId: layerId,
      style: _objectSpread({}, styleDescriptor)
    }); // Ensure updateStyleMeta is triggered
    // syncDataForLayer may not trigger endDataLoad if no re-fetch is required

    dispatch(updateStyleMeta(layerId)); // Style update may require re-fetch, for example ES search may need to retrieve field used for dynamic styling

    dispatch(syncDataForLayer(layerId));
  };
}

function updateStyleMeta(layerId) {
  return function _callee18(dispatch, getState) {
    var layer, sourceDataRequest, style, styleMeta;
    return regeneratorRuntime.async(function _callee18$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            layer = getLayerById(layerId, getState());

            if (layer) {
              _context19.next = 3;
              break;
            }

            return _context19.abrupt("return");

          case 3:
            sourceDataRequest = layer.getSourceDataRequest();
            style = layer.getCurrentStyle();

            if (!(!style || !sourceDataRequest)) {
              _context19.next = 7;
              break;
            }

            return _context19.abrupt("return");

          case 7:
            _context19.next = 9;
            return regeneratorRuntime.awrap(style.pluckStyleMetaFromSourceDataRequest(sourceDataRequest));

          case 9:
            styleMeta = _context19.sent;
            dispatch({
              type: SET_LAYER_STYLE_META,
              layerId: layerId,
              styleMeta: styleMeta
            });

          case 11:
          case "end":
            return _context19.stop();
        }
      }
    });
  };
}

function updateLayerStyleForSelectedLayer(styleDescriptor) {
  return function (dispatch, getState) {
    var selectedLayerId = (0, _map_selectors.getSelectedLayerId)(getState());

    if (!selectedLayerId) {
      return;
    }

    dispatch(updateLayerStyle(selectedLayerId, styleDescriptor));
  };
}

function setJoinsForLayer(layer, joins) {
  return function _callee19(dispatch) {
    return regeneratorRuntime.async(function _callee19$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            _context20.next = 2;
            return regeneratorRuntime.awrap(dispatch({
              type: SET_JOINS,
              layer: layer,
              joins: joins
            }));

          case 2:
            _context20.next = 4;
            return regeneratorRuntime.awrap(dispatch(clearMissingStyleProperties(layer.getId())));

          case 4:
            dispatch(syncDataForLayer(layer.getId()));

          case 5:
          case "end":
            return _context20.stop();
        }
      }
    });
  };
}

function updateDrawState(drawState) {
  return function _callee20(dispatch) {
    return regeneratorRuntime.async(function _callee20$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            if (!(drawState !== null)) {
              _context21.next = 3;
              break;
            }

            _context21.next = 3;
            return regeneratorRuntime.awrap(dispatch(setTooltipState(null)));

          case 3:
            dispatch({
              type: UPDATE_DRAW_STATE,
              drawState: drawState
            });

          case 4:
          case "end":
            return _context21.stop();
        }
      }
    });
  };
}

function disableInteractive() {
  return {
    type: SET_INTERACTIVE,
    disableInteractive: true
  };
}

function disableTooltipControl() {
  return {
    type: DISABLE_TOOLTIP_CONTROL,
    disableTooltipControl: true
  };
}

function hideToolbarOverlay() {
  return {
    type: HIDE_TOOLBAR_OVERLAY,
    hideToolbarOverlay: true
  };
}

function hideLayerControl() {
  return {
    type: HIDE_LAYER_CONTROL,
    hideLayerControl: true
  };
}

function hideViewControl() {
  return {
    type: HIDE_VIEW_CONTROL,
    hideViewControl: true
  };
}

function setHiddenLayers(hiddenLayerIds) {
  return function (dispatch, getState) {
    var isMapReady = (0, _map_selectors.getMapReady)(getState());

    if (!isMapReady) {
      dispatch({
        type: SET_WAITING_FOR_READY_HIDDEN_LAYERS,
        hiddenLayerIds: hiddenLayerIds
      });
    } else {
      (0, _map_selectors.getLayerListRaw)(getState()).forEach(function (layer) {
        return dispatch(setLayerVisibility(layer.id, !hiddenLayerIds.includes(layer.id)));
      });
    }
  };
}"},null]}