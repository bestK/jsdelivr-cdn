{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/datavisualizer/file_based/components/import_errors/errors.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/datavisualizer/file_based/components/import_errors/errors.js","mtime":1585205045628},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkltcG9ydEVycm9ycyA9IEltcG9ydEVycm9yczsKCnZhciBfcmVhY3QgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2ltcG9ydF9wcm9ncmVzcyA9IHJlcXVpcmUoIi4uL2ltcG9ydF9wcm9ncmVzcyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gSW1wb3J0RXJyb3JzKF9yZWYpIHsKICB2YXIgZXJyb3JzID0gX3JlZi5lcnJvcnMsCiAgICAgIHN0YXR1c2VzID0gX3JlZi5zdGF0dXNlczsKICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDYWxsT3V0LCB7CiAgICB0aXRsZTogdGl0bGUoc3RhdHVzZXMpLAogICAgY29sb3I6ICJkYW5nZXIiLAogICAgaWNvblR5cGU6ICJjcm9zcyIKICB9LCBlcnJvcnMubWFwKGZ1bmN0aW9uIChlLCBpKSB7CiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSW1wb3J0RXJyb3IsIHsKICAgICAgZXJyb3I6IGUsCiAgICAgIGtleTogaQogICAgfSk7CiAgfSkpOwp9CgpmdW5jdGlvbiB0aXRsZShzdGF0dXNlcykgewogIHN3aXRjaCAoX2ltcG9ydF9wcm9ncmVzcy5JTVBPUlRfU1RBVFVTLkZBSUxFRCkgewogICAgY2FzZSBzdGF0dXNlcy5yZWFkU3RhdHVzOgogICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLm1sLmZpbGVEYXRhdmlzdWFsaXplci5pbXBvcnRFcnJvcnMucmVhZGluZ0ZpbGVFcnJvck1lc3NhZ2UiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRXJyb3IgcmVhZGluZyBmaWxlIgogICAgICB9KTsKCiAgICBjYXNlIHN0YXR1c2VzLnBhcnNlSlNPTlN0YXR1czoKICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5tbC5maWxlRGF0YXZpc3VhbGl6ZXIuaW1wb3J0RXJyb3JzLnBhcnNpbmdKU09ORXJyb3JNZXNzYWdlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkVycm9yIHBhcnNpbmcgSlNPTiIKICAgICAgfSk7CgogICAgY2FzZSBzdGF0dXNlcy5pbmRleENyZWF0ZWRTdGF0dXM6CiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2subWwuZmlsZURhdGF2aXN1YWxpemVyLmltcG9ydEVycm9ycy5jcmVhdGluZ0luZGV4RXJyb3JNZXNzYWdlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkVycm9yIGNyZWF0aW5nIGluZGV4IgogICAgICB9KTsKCiAgICBjYXNlIHN0YXR1c2VzLmluZ2VzdFBpcGVsaW5lQ3JlYXRlZFN0YXR1czoKICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5tbC5maWxlRGF0YXZpc3VhbGl6ZXIuaW1wb3J0RXJyb3JzLmNyZWF0aW5nSW5nZXN0UGlwZWxpbmVFcnJvck1lc3NhZ2UiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRXJyb3IgY3JlYXRpbmcgaW5nZXN0IHBpcGVsaW5lIgogICAgICB9KTsKCiAgICBjYXNlIHN0YXR1c2VzLnVwbG9hZFN0YXR1czoKICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5tbC5maWxlRGF0YXZpc3VhbGl6ZXIuaW1wb3J0RXJyb3JzLnVwbG9hZGluZ0RhdGFFcnJvck1lc3NhZ2UiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRXJyb3IgdXBsb2FkaW5nIGRhdGEiCiAgICAgIH0pOwoKICAgIGNhc2Ugc3RhdHVzZXMuaW5kZXhQYXR0ZXJuQ3JlYXRlZFN0YXR1czoKICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5tbC5maWxlRGF0YXZpc3VhbGl6ZXIuaW1wb3J0RXJyb3JzLmNyZWF0aW5nSW5kZXhQYXR0ZXJuRXJyb3JNZXNzYWdlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkVycm9yIGNyZWF0aW5nIGluZGV4IHBhdHRlcm4iCiAgICAgIH0pOwoKICAgIGNhc2Ugc3RhdHVzZXMucGVybWlzc2lvbkNoZWNrU3RhdHVzOgogICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLm1sLmZpbGVEYXRhdmlzdWFsaXplci5pbXBvcnRFcnJvcnMuY2hlY2tpbmdQZXJtaXNzaW9uRXJyb3JNZXNzYWdlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkltcG9ydCBwZXJtaXNzaW9ucyBlcnJvciIKICAgICAgfSk7CgogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5tbC5maWxlRGF0YXZpc3VhbGl6ZXIuaW1wb3J0RXJyb3JzLmRlZmF1bHRFcnJvck1lc3NhZ2UiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRXJyb3IiCiAgICAgIH0pOwogIH0KfQoKZnVuY3Rpb24gSW1wb3J0RXJyb3IoZXJyb3IsIGtleSkgewogIHZhciBlcnJvck9iaiA9IHRvU3RyaW5nKGVycm9yKTsKICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIHsKICAgIGtleToga2V5CiAgfSwgZXJyb3JPYmoubXNnKSwgZXJyb3JPYmoubW9yZSAhPT0gdW5kZWZpbmVkICYmIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQWNjb3JkaW9uLCB7CiAgICBpZDogIm1vcmUiLAogICAgYnV0dG9uQ29udGVudDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay5tbC5maWxlRGF0YXZpc3VhbGl6ZXIuaW1wb3J0RXJyb3JzLm1vcmVCdXR0b25MYWJlbCIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTW9yZSIKICAgIH0pLAogICAgcGFkZGluZ1NpemU6ICJtIgogIH0sIGVycm9yT2JqLm1vcmUpKTsKfQoKZnVuY3Rpb24gdG9TdHJpbmcoZXJyb3IpIHsKICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykgewogICAgcmV0dXJuIHsKICAgICAgbXNnOiBlcnJvcgogICAgfTsKICB9CgogIGlmIChfdHlwZW9mKGVycm9yKSA9PT0gJ29iamVjdCcpIHsKICAgIGlmIChlcnJvci5tc2cgIT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm4gewogICAgICAgIG1zZzogZXJyb3IubXNnCiAgICAgIH07CiAgICB9IGVsc2UgaWYgKGVycm9yLmVycm9yICE9PSB1bmRlZmluZWQpIHsKICAgICAgaWYgKF90eXBlb2YoZXJyb3IuZXJyb3IpID09PSAnb2JqZWN0JykgewogICAgICAgIGlmIChlcnJvci5lcnJvci5tc2cgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgLy8gdGhpcyB3aWxsIGNhdGNoIGEgYnVsayBpbmdlc3QgZmFpbHVyZQogICAgICAgICAgdmFyIGVycm9yT2JqID0gewogICAgICAgICAgICBtc2c6IGVycm9yLmVycm9yLm1zZwogICAgICAgICAgfTsKCiAgICAgICAgICBpZiAoZXJyb3IuZXJyb3IuYm9keSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGVycm9yT2JqLm1vcmUgPSBlcnJvci5lcnJvci5yZXNwb25zZTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gZXJyb3JPYmo7CiAgICAgICAgfQoKICAgICAgICBpZiAoZXJyb3IuZXJyb3IubWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAvLyB0aGlzIHdpbGwgY2F0Y2ggamF2YXNjcmlwdCBlcnJvcnMgc3VjaCBhcyBKU09OIHBhcnNpbmcgaXNzdWVzCiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICBtc2c6IGVycm9yLmVycm9yLm1lc3NhZ2UKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBtc2c6IGVycm9yLmVycm9yCiAgICAgICAgfTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgLy8gbGFzdCByZXNvcnQsIGp1c3QgZGlzcGxheSB0aGUgd2hvbGUgb2JqZWN0CiAgICAgIHJldHVybiB7CiAgICAgICAgbXNnOiBKU09OLnN0cmluZ2lmeShlcnJvcikKICAgICAgfTsKICAgIH0KICB9CgogIHJldHVybiB7CiAgICBtc2c6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2subWwuZmlsZURhdGF2aXN1YWxpemVyLmltcG9ydEVycm9ycy51bmtub3duRXJyb3JNZXNzYWdlIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJVbmtub3duIGVycm9yIgogICAgfSkKICB9Owp9"},null]}