{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/newsfeed/public/plugin.js","dependencies":[{"path":"src/plugins/newsfeed/public/plugin.js","mtime":1585205041894},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk5ld3NmZWVkUHVibGljUGx1Z2luID0gdm9pZCAwOwoKdmFyIFJ4ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicnhqcyIpKTsKCnZhciBfb3BlcmF0b3JzID0gcmVxdWlyZSgicnhqcy9vcGVyYXRvcnMiKTsKCnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0LWRvbSIpKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfbmV3c2ZlZWRfaGVhZGVyX25hdl9idXR0b24gPSByZXF1aXJlKCIuL2NvbXBvbmVudHMvbmV3c2ZlZWRfaGVhZGVyX25hdl9idXR0b24iKTsKCnZhciBfYXBpID0gcmVxdWlyZSgiLi9saWIvYXBpIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgTmV3c2ZlZWRQdWJsaWNQbHVnaW4gPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBOZXdzZmVlZFB1YmxpY1BsdWdpbihpbml0aWFsaXplckNvbnRleHQpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOZXdzZmVlZFB1YmxpY1BsdWdpbik7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJraWJhbmFWZXJzaW9uIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInN0b3AkIiwgbmV3IFJ4LlJlcGxheVN1YmplY3QoMSkpOwoKICAgIHRoaXMua2liYW5hVmVyc2lvbiA9IGluaXRpYWxpemVyQ29udGV4dC5lbnYucGFja2FnZUluZm8udmVyc2lvbjsKICB9CgogIF9jcmVhdGVDbGFzcyhOZXdzZmVlZFB1YmxpY1BsdWdpbiwgW3sKICAgIGtleTogInNldHVwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cChjb3JlKSB7CiAgICAgIHJldHVybiB7fTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdGFydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoY29yZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGFwaSQgPSB0aGlzLmZldGNoTmV3c2ZlZWQoY29yZSk7CiAgICAgIGNvcmUuY2hyb21lLm5hdkNvbnRyb2xzLnJlZ2lzdGVyUmlnaHQoewogICAgICAgIG9yZGVyOiAxMDAwLAogICAgICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCh0YXJnZXQpIHsKICAgICAgICAgIHJldHVybiBfdGhpcy5tb3VudChhcGkkLCB0YXJnZXQpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiB7fTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdG9wIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkgewogICAgICB0aGlzLnN0b3AkLm5leHQoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmZXRjaE5ld3NmZWVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaE5ld3NmZWVkKGNvcmUpIHsKICAgICAgdmFyIGh0dHAgPSBjb3JlLmh0dHAsCiAgICAgICAgICBpbmplY3RlZE1ldGFkYXRhID0gY29yZS5pbmplY3RlZE1ldGFkYXRhOwogICAgICB2YXIgY29uZmlnID0gaW5qZWN0ZWRNZXRhZGF0YS5nZXRJbmplY3RlZFZhcignbmV3c2ZlZWQnKTsKICAgICAgcmV0dXJuICgwLCBfYXBpLmdldEFwaSkoaHR0cCwgY29uZmlnLCB0aGlzLmtpYmFuYVZlcnNpb24pLnBpcGUoKDAsIF9vcGVyYXRvcnMudGFrZVVudGlsKSh0aGlzLnN0b3AkKSwgLy8gc3RvcCB0aGUgaW50ZXJ2YWwgd2hlbiBzdG9wIG1ldGhvZCBpcyBjYWxsZWQKICAgICAgKDAsIF9vcGVyYXRvcnMuY2F0Y2hFcnJvcikoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBSeC5vZihudWxsKTsKICAgICAgfSkgLy8gZG8gbm90IHRocm93IGVycm9yCiAgICAgICk7CiAgICB9CiAgfSwgewogICAga2V5OiAibW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG1vdW50KGFwaSQsIHRhcmdldERvbUVsZW1lbnQpIHsKICAgICAgX3JlYWN0RG9tLmRlZmF1bHQucmVuZGVyKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5JMThuUHJvdmlkZXIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX25ld3NmZWVkX2hlYWRlcl9uYXZfYnV0dG9uLk5ld3NmZWVkTmF2QnV0dG9uLCB7CiAgICAgICAgYXBpRmV0Y2hSZXN1bHQ6IGFwaSQKICAgICAgfSkpLCB0YXJnZXREb21FbGVtZW50KTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF9yZWFjdERvbS5kZWZhdWx0LnVubW91bnRDb21wb25lbnRBdE5vZGUodGFyZ2V0RG9tRWxlbWVudCk7CiAgICAgIH07CiAgICB9CiAgfV0pOwoKICByZXR1cm4gTmV3c2ZlZWRQdWJsaWNQbHVnaW47Cn0oKTsKCmV4cG9ydHMuTmV3c2ZlZWRQdWJsaWNQbHVnaW4gPSBOZXdzZmVlZFB1YmxpY1BsdWdpbjs="},null]}