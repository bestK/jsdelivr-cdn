{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/watcher/public/np_ready/application/sections/watch_edit/components/json_watch_edit/json_watch_edit.js","dependencies":[{"path":"x-pack/legacy/plugins/watcher/public/np_ready/application/sections/watch_edit/components/json_watch_edit/json_watch_edit.js","mtime":1585205048899},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkpzb25XYXRjaEVkaXQgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX2V4ZWN1dGVfZGV0YWlscyA9IHJlcXVpcmUoInBsdWdpbnMvd2F0Y2hlci9ucF9yZWFkeS9hcHBsaWNhdGlvbi9tb2RlbHMvZXhlY3V0ZV9kZXRhaWxzL2V4ZWN1dGVfZGV0YWlscyIpOwoKdmFyIF9nZXRfYWN0aW9uX3R5cGUgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9jb21tb24vbGliL2dldF9hY3Rpb25fdHlwZSIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX2pzb25fd2F0Y2hfZWRpdF9mb3JtID0gcmVxdWlyZSgiLi9qc29uX3dhdGNoX2VkaXRfZm9ybSIpOwoKdmFyIF9qc29uX3dhdGNoX2VkaXRfc2ltdWxhdGUgPSByZXF1aXJlKCIuL2pzb25fd2F0Y2hfZWRpdF9zaW11bGF0ZSIpOwoKdmFyIF93YXRjaF9jb250ZXh0ID0gcmVxdWlyZSgiLi4vLi4vd2F0Y2hfY29udGV4dCIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKdmFyIFdBVENIX0VESVRfVEFCID0gJ3dhdGNoRWRpdFRhYic7CnZhciBXQVRDSF9TSU1VTEFURV9UQUIgPSAnd2F0Y2hTaW11bGF0ZVRhYic7CnZhciBXQVRDSF9UQUJTID0gW3sKICBpZDogV0FUQ0hfRURJVF9UQUIsCiAgbmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLndhdGNoZXIuc2VjdGlvbnMud2F0Y2hFZGl0Lmpzb24uZWRpdFRhYkxhYmVsJywgewogICAgZGVmYXVsdE1lc3NhZ2U6ICdFZGl0JwogIH0pCn0sIHsKICBpZDogV0FUQ0hfU0lNVUxBVEVfVEFCLAogIG5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay53YXRjaGVyLnNlY3Rpb25zLndhdGNoRWRpdC5qc29uLnNpbXVsYXRlVGFiTGFiZWwnLCB7CiAgICBkZWZhdWx0TWVzc2FnZTogJ1NpbXVsYXRlJwogIH0pCn1dOwp2YXIgRVhFQ1VURV9ERVRBSUxTX0lOSVRJQUxfU1RBVEUgPSB7CiAgdHJpZ2dlcmVkVGltZVZhbHVlOiAwLAogIHRyaWdnZXJlZFRpbWVVbml0OiBfY29uc3RhbnRzLlRJTUVfVU5JVFMuU0VDT05ELAogIHNjaGVkdWxlZFRpbWVWYWx1ZTogMCwKICBzY2hlZHVsZWRUaW1lVW5pdDogX2NvbnN0YW50cy5USU1FX1VOSVRTLlNFQ09ORCwKICBpZ25vcmVDb25kaXRpb246IGZhbHNlCn07CgpmdW5jdGlvbiBnZXRBY3Rpb25zKHdhdGNoKSB7CiAgdmFyIGFjdGlvbnMgPSB3YXRjaC53YXRjaCAmJiB3YXRjaC53YXRjaC5hY3Rpb25zIHx8IHt9OwogIHJldHVybiBPYmplY3Qua2V5cyhhY3Rpb25zKS5tYXAoZnVuY3Rpb24gKGFjdGlvbktleSkgewogICAgcmV0dXJuIHsKICAgICAgYWN0aW9uSWQ6IGFjdGlvbktleSwKICAgICAgdHlwZTogKDAsIF9nZXRfYWN0aW9uX3R5cGUuZ2V0QWN0aW9uVHlwZSkoYWN0aW9uc1thY3Rpb25LZXldKSwKICAgICAgYWN0aW9uTW9kZTogX2NvbnN0YW50cy5BQ1RJT05fTU9ERVMuU0lNVUxBVEUKICAgIH07CiAgfSk7Cn0KCmZ1bmN0aW9uIGdldEFjdGlvbk1vZGVzKGl0ZW1zKSB7CiAgdmFyIHJlc3VsdCA9IGl0ZW1zLnJlZHVjZShmdW5jdGlvbiAoaXRlbXNBY2N1bSwgaXRlbSkgewogICAgaWYgKGl0ZW0uYWN0aW9uSWQpIHsKICAgICAgaXRlbXNBY2N1bVtpdGVtICYmIGl0ZW0uYWN0aW9uSWRdID0gaXRlbS5hY3Rpb25Nb2RlOwogICAgfQoKICAgIHJldHVybiBpdGVtc0FjY3VtOwogIH0sIHt9KTsKICByZXR1cm4gcmVzdWx0Owp9Cgp2YXIgSnNvbldhdGNoRWRpdCA9IGZ1bmN0aW9uIEpzb25XYXRjaEVkaXQoX3JlZikgewogIHZhciBwYWdlVGl0bGUgPSBfcmVmLnBhZ2VUaXRsZTsKCiAgdmFyIF91c2VDb250ZXh0ID0gKDAsIF9yZWFjdC51c2VDb250ZXh0KShfd2F0Y2hfY29udGV4dC5XYXRjaENvbnRleHQpLAogICAgICB3YXRjaCA9IF91c2VDb250ZXh0LndhdGNoOwoKICB2YXIgd2F0Y2hBY3Rpb25zID0gZ2V0QWN0aW9ucyh3YXRjaCk7IC8vIGhvb2tzCgogIHZhciBfdXNlU3RhdGUgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShXQVRDSF9FRElUX1RBQiksCiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLAogICAgICBzZWxlY3RlZFRhYiA9IF91c2VTdGF0ZTJbMF0sCiAgICAgIHNldFNlbGVjdGVkVGFiID0gX3VzZVN0YXRlMlsxXTsKCiAgdmFyIF91c2VTdGF0ZTMgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShuZXcgX2V4ZWN1dGVfZGV0YWlscy5FeGVjdXRlRGV0YWlscyhfb2JqZWN0U3ByZWFkKHt9LCBFWEVDVVRFX0RFVEFJTFNfSU5JVElBTF9TVEFURSwgewogICAgYWN0aW9uTW9kZXM6IGdldEFjdGlvbk1vZGVzKHdhdGNoQWN0aW9ucykKICB9KSkpLAogICAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksCiAgICAgIGV4ZWN1dGVEZXRhaWxzID0gX3VzZVN0YXRlNFswXSwKICAgICAgX3NldEV4ZWN1dGVEZXRhaWxzID0gX3VzZVN0YXRlNFsxXTsKCiAgdmFyIGV4ZWN1dGVXYXRjaEVycm9ycyA9IGV4ZWN1dGVEZXRhaWxzLnZhbGlkYXRlKCk7CiAgdmFyIGhhc0V4ZWN1dGVXYXRjaEVycm9ycyA9ICEhT2JqZWN0LmtleXMoZXhlY3V0ZVdhdGNoRXJyb3JzKS5maW5kKGZ1bmN0aW9uIChlcnJvcktleSkgewogICAgcmV0dXJuIGV4ZWN1dGVXYXRjaEVycm9yc1tlcnJvcktleV0ubGVuZ3RoID49IDE7CiAgfSk7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYWdlQ29udGVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICBncm93OiBmYWxzZQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgc2l6ZTogIm0iCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDEiLCB7CiAgICAiZGF0YS10ZXN0LXN1YmoiOiAicGFnZVRpdGxlIgogIH0sIHBhZ2VUaXRsZSkpKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUYWJzLCBudWxsLCBXQVRDSF9UQUJTLm1hcChmdW5jdGlvbiAodGFiLCBpbmRleCkgewogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUYWIsIHsKICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICBzZXRTZWxlY3RlZFRhYih0YWIuaWQpOwoKICAgICAgICBfc2V0RXhlY3V0ZURldGFpbHMobmV3IF9leGVjdXRlX2RldGFpbHMuRXhlY3V0ZURldGFpbHMoX29iamVjdFNwcmVhZCh7fSwgZXhlY3V0ZURldGFpbHMsIHsKICAgICAgICAgIGFjdGlvbk1vZGVzOiBnZXRBY3Rpb25Nb2Rlcyh3YXRjaEFjdGlvbnMpCiAgICAgICAgfSkpKTsKICAgICAgfSwKICAgICAgaXNTZWxlY3RlZDogdGFiLmlkID09PSBzZWxlY3RlZFRhYiwKICAgICAga2V5OiBpbmRleCwKICAgICAgImRhdGEtdGVzdC1zdWJqIjogInRhYiIKICAgIH0sIHRhYi5uYW1lKTsKICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgIHNpemU6ICJsIgogIH0pLCBzZWxlY3RlZFRhYiA9PT0gV0FUQ0hfU0lNVUxBVEVfVEFCICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2pzb25fd2F0Y2hfZWRpdF9zaW11bGF0ZS5Kc29uV2F0Y2hFZGl0U2ltdWxhdGUsIHsKICAgIGV4ZWN1dGVEZXRhaWxzOiBleGVjdXRlRGV0YWlscywKICAgIHNldEV4ZWN1dGVEZXRhaWxzOiBmdW5jdGlvbiBzZXRFeGVjdXRlRGV0YWlscyhkZXRhaWxzKSB7CiAgICAgIHJldHVybiBfc2V0RXhlY3V0ZURldGFpbHMoZGV0YWlscyk7CiAgICB9LAogICAgZXhlY3V0ZVdhdGNoRXJyb3JzOiBleGVjdXRlV2F0Y2hFcnJvcnMsCiAgICBoYXNFeGVjdXRlV2F0Y2hFcnJvcnM6IGhhc0V4ZWN1dGVXYXRjaEVycm9ycywKICAgIHdhdGNoQWN0aW9uczogd2F0Y2hBY3Rpb25zCiAgfSksIHNlbGVjdGVkVGFiID09PSBXQVRDSF9FRElUX1RBQiAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9qc29uX3dhdGNoX2VkaXRfZm9ybS5Kc29uV2F0Y2hFZGl0Rm9ybSwgbnVsbCkpOwp9OwoKZXhwb3J0cy5Kc29uV2F0Y2hFZGl0ID0gSnNvbldhdGNoRWRpdDs="},null]}