{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/components/rule_downloader/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/components/rule_downloader/index.js","mtime":1585205047879},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlJ1bGVEb3dubG9hZGVyID0gZXhwb3J0cy5SdWxlRG93bmxvYWRlckNvbXBvbmVudCA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfc3R5bGVkQ29tcG9uZW50cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgic3R5bGVkLWNvbXBvbmVudHMiKSk7Cgp2YXIgX2ZwID0gcmVxdWlyZSgibG9kYXNoL2ZwIik7Cgp2YXIgX3J1bGVzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vY29udGFpbmVycy9kZXRlY3Rpb25fZW5naW5lL3J1bGVzIik7Cgp2YXIgX3RvYXN0ZXJzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50cy90b2FzdGVycyIpOwoKdmFyIGkxOG4gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCIuL3RyYW5zbGF0aW9ucyIpKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKdmFyIEludmlzaWJsZUFuY2hvciA9IF9zdHlsZWRDb21wb25lbnRzLmRlZmF1bHQuYS53aXRoQ29uZmlnKHsKICBkaXNwbGF5TmFtZTogIkludmlzaWJsZUFuY2hvciIsCiAgY29tcG9uZW50SWQ6ICJ2YmQ1bTgtMCIKfSkoWyJkaXNwbGF5Om5vbmU7Il0pOwovKioKICogQ29tcG9uZW50IGZvciBkb3dubG9hZGluZyBSdWxlcyBhcyBhbiBleHBvcnRlZCAubmRqc29uIGZpbGUuIERvd25sb2FkIHdpbGwgb2NjdXIgb24gZWFjaCB1cGRhdGUgdG8gYHJ1bGVzYCBwYXJhbQogKgogKiBAcGFyYW0gZmlsZW5hbWUgb2YgZmlsZSB0byBiZSBkb3dubG9hZGVkCiAqIEBwYXJhbSBwYXlsb2FkIFJ1bGVbXQogKgogKi8KCgp2YXIgUnVsZURvd25sb2FkZXJDb21wb25lbnQgPSBmdW5jdGlvbiBSdWxlRG93bmxvYWRlckNvbXBvbmVudChfcmVmKSB7CiAgdmFyIGZpbGVuYW1lID0gX3JlZi5maWxlbmFtZSwKICAgICAgcnVsZUlkcyA9IF9yZWYucnVsZUlkcywKICAgICAgb25FeHBvcnRDb21wbGV0ZSA9IF9yZWYub25FeHBvcnRDb21wbGV0ZTsKICB2YXIgYW5jaG9yUmVmID0gKDAsIF9yZWFjdC51c2VSZWYpKG51bGwpOwoKICB2YXIgX3VzZVN0YXRlVG9hc3RlciA9ICgwLCBfdG9hc3RlcnMudXNlU3RhdGVUb2FzdGVyKSgpLAogICAgICBfdXNlU3RhdGVUb2FzdGVyMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZVRvYXN0ZXIsIDIpLAogICAgICBkaXNwYXRjaFRvYXN0ZXIgPSBfdXNlU3RhdGVUb2FzdGVyMlsxXTsKCiAgKDAsIF9yZWFjdC51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHsKICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlOwogICAgdmFyIGFib3J0Q3RybCA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTsKCiAgICBmdW5jdGlvbiBleHBvcnREYXRhKCkgewogICAgICB2YXIgZXhwb3J0UmVzcG9uc2UsIG9iamVjdFVSTDsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBleHBvcnREYXRhJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBpZiAoIShhbmNob3JSZWYgJiYgYW5jaG9yUmVmLmN1cnJlbnQgJiYgcnVsZUlkcyAhPSBudWxsICYmIHJ1bGVJZHMubGVuZ3RoID4gMCkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCgoMCwgX3J1bGVzLmV4cG9ydFJ1bGVzKSh7CiAgICAgICAgICAgICAgICBydWxlSWRzOiBydWxlSWRzLAogICAgICAgICAgICAgICAgc2lnbmFsOiBhYm9ydEN0cmwuc2lnbmFsCiAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGV4cG9ydFJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgaWYgKGlzU3Vic2NyaWJlZCkgewogICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBmb3Igc3VwcG9ydGluZyBJRQogICAgICAgICAgICAgICAgaWYgKCgwLCBfZnAuaXNGdW5jdGlvbikod2luZG93Lm5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKSkgewogICAgICAgICAgICAgICAgICB3aW5kb3cubmF2aWdhdG9yLm1zU2F2ZUJsb2IoZXhwb3J0UmVzcG9uc2UpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgb2JqZWN0VVJMID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoZXhwb3J0UmVzcG9uc2UpOyAvLyBUaGVzZSBhcmUgc2FmZS1hc3NpZ25tZW50cyBhcyB3cml0ZXMgdG8gYW5jaG9yUmVmIGFyZSBpc29sYXRlZCB0byBleHBvcnREYXRhCgogICAgICAgICAgICAgICAgICBhbmNob3JSZWYuY3VycmVudC5ocmVmID0gb2JqZWN0VVJMOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXRvbWljLXVwZGF0ZXMKCiAgICAgICAgICAgICAgICAgIGFuY2hvclJlZi5jdXJyZW50LmRvd25sb2FkID0gZmlsZW5hbWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hdG9taWMtdXBkYXRlcwoKICAgICAgICAgICAgICAgICAgYW5jaG9yUmVmLmN1cnJlbnQuY2xpY2soKTsKICAgICAgICAgICAgICAgICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwob2JqZWN0VVJMKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBvbkV4cG9ydENvbXBsZXRlKHJ1bGVJZHMubGVuZ3RoKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gODsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDEpOwoKICAgICAgICAgICAgICBpZiAoaXNTdWJzY3JpYmVkKSB7CiAgICAgICAgICAgICAgICAoMCwgX3RvYXN0ZXJzLmRpc3BsYXlFcnJvclRvYXN0KShpMThuLkVYUE9SVF9GQUlMVVJFLCBbX2NvbnRleHQudDAubWVzc2FnZV0sIGRpc3BhdGNoVG9hc3Rlcik7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgbnVsbCwgbnVsbCwgW1sxLCA4XV0pOwogICAgfQoKICAgIGV4cG9ydERhdGEoKTsKICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlOwogICAgICBhYm9ydEN0cmwuYWJvcnQoKTsKICAgIH07CiAgfSwgW3J1bGVJZHNdKTsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChJbnZpc2libGVBbmNob3IsIHsKICAgIHJlZjogYW5jaG9yUmVmCiAgfSk7Cn07CgpleHBvcnRzLlJ1bGVEb3dubG9hZGVyQ29tcG9uZW50ID0gUnVsZURvd25sb2FkZXJDb21wb25lbnQ7ClJ1bGVEb3dubG9hZGVyQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ1J1bGVEb3dubG9hZGVyQ29tcG9uZW50JzsKCnZhciBSdWxlRG93bmxvYWRlciA9IF9yZWFjdC5kZWZhdWx0Lm1lbW8oUnVsZURvd25sb2FkZXJDb21wb25lbnQpOwoKZXhwb3J0cy5SdWxlRG93bmxvYWRlciA9IFJ1bGVEb3dubG9hZGVyOwpSdWxlRG93bmxvYWRlci5kaXNwbGF5TmFtZSA9ICdSdWxlRG93bmxvYWRlcic7"},null]}