{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/lens/public/drag_drop/drag_drop.js","dependencies":[{"path":"x-pack/legacy/plugins/lens/public/drag_drop/drag_drop.js","mtime":1585205044989},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkRyYWdEcm9wID0gRHJhZ0Ryb3A7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImNsYXNzbmFtZXMiKSk7Cgp2YXIgX3Byb3ZpZGVycyA9IHJlcXVpcmUoIi4vcHJvdmlkZXJzIik7Cgp2YXIgX2xlbnNfdWlfdGVsZW1ldHJ5ID0gcmVxdWlyZSgiLi4vbGVuc191aV90ZWxlbWV0cnkiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KLyoqCiAqIEEgZHJhZ2dhYmxlIC8gZHJvcHBhYmxlIGl0ZW0uIEl0ZW1zIGNhbiBiZSBib3RoIGRyYWdnYWJsZSBhbmQgZHJvcHBhYmxlIGF0CiAqIHRoZSBzYW1lIHRpbWUuCiAqCiAqIEBwYXJhbSBwcm9wcwogKi8KCgpmdW5jdGlvbiBEcmFnRHJvcChwcm9wcykgewogIHZhciBfdXNlQ29udGV4dCA9ICgwLCBfcmVhY3QudXNlQ29udGV4dCkoX3Byb3ZpZGVycy5EcmFnQ29udGV4dCksCiAgICAgIGRyYWdnaW5nID0gX3VzZUNvbnRleHQuZHJhZ2dpbmcsCiAgICAgIHNldERyYWdnaW5nID0gX3VzZUNvbnRleHQuc2V0RHJhZ2dpbmc7CgogIHZhciBfdXNlU3RhdGUgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKSh7CiAgICBpc0FjdGl2ZTogZmFsc2UKICB9KSwKICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksCiAgICAgIHN0YXRlID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0U3RhdGUgPSBfdXNlU3RhdGUyWzFdOwoKICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLAogICAgICBvbkRyb3AgPSBwcm9wcy5vbkRyb3AsCiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsCiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sCiAgICAgIGRyb3BwYWJsZSA9IHByb3BzLmRyb3BwYWJsZSwKICAgICAgZHJhZ2dhYmxlID0gcHJvcHMuZHJhZ2dhYmxlOwogIHZhciBpc0RyYWdnaW5nID0gZHJhZ2dhYmxlICYmIHZhbHVlID09PSBkcmFnZ2luZzsKICB2YXIgY2xhc3NlcyA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KSgnbG5zRHJhZ0Ryb3AnLCBjbGFzc05hbWUsIHsKICAgICdsbnNEcmFnRHJvcC1pc0Ryb3BUYXJnZXQnOiBkcm9wcGFibGUsCiAgICAnbG5zRHJhZ0Ryb3AtaXNBY3RpdmVEcm9wVGFyZ2V0JzogZHJvcHBhYmxlICYmIHN0YXRlLmlzQWN0aXZlLAogICAgJ2xuc0RyYWdEcm9wLWlzRHJhZ2dpbmcnOiBpc0RyYWdnaW5nCiAgfSk7CgogIHZhciBkcmFnU3RhcnQgPSBmdW5jdGlvbiBkcmFnU3RhcnQoZSkgewogICAgLy8gU2V0dGluZyBzdG9wUHJvcGdhZ2F0aW9uIGNhdXNlcyBDaHJvbWUgZmFpbHVyZXMsIHNvCiAgICAvLyB3ZSBhcmUgbWFudWFsbHkgY2hlY2tpbmcgaWYgd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoaXMKICAgIC8vIGluIGEgbmVzdGVkIGNoaWxkLCBhbmQgZG9pbmcgbm90aGluZyBpZiBzby4uLgogICAgaWYgKGUuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3RleHQnKSkgewogICAgICByZXR1cm47CiAgICB9CgogICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dCcsICdkcmFnZ2luZycpOyAvLyBDaHJvbWUgY2F1c2VzIGlzc3VlcyBpZiB5b3UgdHJ5IHRvIHJlbmRlciBmcm9tIHdpdGhpbiBhCiAgICAvLyBkcmFnU3RhcnQgZXZlbnQsIHNvIHdlIGRyb3AgYSBzZXRUaW1lb3V0IHRvIGF2b2lkIHRoYXQuCgogICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBzZXREcmFnZ2luZyh2YWx1ZSk7CiAgICB9KTsKICB9OwoKICB2YXIgZHJhZ0VuZCA9IGZ1bmN0aW9uIGRyYWdFbmQoZSkgewogICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgIHNldERyYWdnaW5nKHVuZGVmaW5lZCk7CiAgfTsKCiAgdmFyIGRyYWdPdmVyID0gZnVuY3Rpb24gZHJhZ092ZXIoZSkgewogICAgaWYgKCFkcm9wcGFibGUpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gQW4gb3B0aW1pemF0aW9uIHRvIHByZXZlbnQgYSBidW5jaCBvZiBSZWFjdCBjaHVybi4KCiAgICBpZiAoIXN0YXRlLmlzQWN0aXZlKSB7CiAgICAgIHNldFN0YXRlKF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICAgICAgaXNBY3RpdmU6IHRydWUKICAgICAgfSkpOwogICAgfQogIH07CgogIHZhciBkcmFnTGVhdmUgPSBmdW5jdGlvbiBkcmFnTGVhdmUoKSB7CiAgICBzZXRTdGF0ZShfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICBpc0FjdGl2ZTogZmFsc2UKICAgIH0pKTsKICB9OwoKICB2YXIgZHJvcCA9IGZ1bmN0aW9uIGRyb3AoZSkgewogICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgIHNldFN0YXRlKF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICAgIGlzQWN0aXZlOiBmYWxzZQogICAgfSkpOwogICAgc2V0RHJhZ2dpbmcodW5kZWZpbmVkKTsKCiAgICBpZiAob25Ecm9wICYmIGRyb3BwYWJsZSkgewogICAgICAoMCwgX2xlbnNfdWlfdGVsZW1ldHJ5LnRyYWNrVWlFdmVudCkoJ2Ryb3BfdG90YWwnKTsKICAgICAgb25Ecm9wKGRyYWdnaW5nKTsKICAgIH0KICB9OwoKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgImRhdGEtdGVzdC1zdWJqIjogcHJvcHNbJ2RhdGEtdGVzdC1zdWJqJ10gfHwgJ2xuc0RyYWdEcm9wJywKICAgIGNsYXNzTmFtZTogY2xhc3NlcywKICAgIG9uRHJhZ092ZXI6IGRyYWdPdmVyLAogICAgb25EcmFnTGVhdmU6IGRyYWdMZWF2ZSwKICAgIG9uRHJvcDogZHJvcCwKICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLAogICAgb25EcmFnRW5kOiBkcmFnRW5kLAogICAgb25EcmFnU3RhcnQ6IGRyYWdTdGFydAogIH0sIGNoaWxkcmVuKTsKfQ=="},null]}