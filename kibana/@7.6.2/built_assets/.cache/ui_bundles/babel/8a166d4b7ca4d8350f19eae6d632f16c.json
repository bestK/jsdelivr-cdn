{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/helpers.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/helpers.js","mtime":1585205047855},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnJlZGlyZWN0VG9EZXRlY3Rpb25zID0gZXhwb3J0cy5zZXRGaWVsZFZhbHVlID0gZXhwb3J0cy5nZXRQcmVQYWNrYWdlZFJ1bGVTdGF0dXMgPSBleHBvcnRzLnVzZVF1ZXJ5ID0gZXhwb3J0cy5nZXRTdGVwc0RhdGEgPSB2b2lkIDA7Cgp2YXIgX2RhdGVtYXRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJAZWxhc3RpYy9kYXRlbWF0aCIpKTsKCnZhciBfZnAgPSByZXF1aXJlKCJsb2Rhc2gvZnAiKTsKCnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJtb21lbnQiKSk7Cgp2YXIgX3JlYWN0Um91dGVyRG9tID0gcmVxdWlyZSgicmVhY3Qtcm91dGVyLWRvbSIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBnZXRTdGVwc0RhdGEgPSBmdW5jdGlvbiBnZXRTdGVwc0RhdGEoX3JlZikgewogIHZhciBfcnVsZSRzYXZlZF9pZCwgX3J1bGUkdGltZWxpbmVfaWQsIF9ydWxlJHRpbWVsaW5lX3RpdGxlLCBfZGF0ZU1hdGgkcGFyc2UsIF9kYXRlTWF0aCRwYXJzZTI7CgogIHZhciBydWxlID0gX3JlZi5ydWxlLAogICAgICBfcmVmJGRldGFpbHNWaWV3ID0gX3JlZi5kZXRhaWxzVmlldywKICAgICAgZGV0YWlsc1ZpZXcgPSBfcmVmJGRldGFpbHNWaWV3ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkZGV0YWlsc1ZpZXc7CiAgdmFyIGRlZmluZVJ1bGVEYXRhID0gcnVsZSAhPSBudWxsID8gewogICAgaXNOZXc6IGZhbHNlLAogICAgaW5kZXg6IHJ1bGUuaW5kZXgsCiAgICBxdWVyeUJhcjogewogICAgICBxdWVyeTogewogICAgICAgIHF1ZXJ5OiBydWxlLnF1ZXJ5LAogICAgICAgIGxhbmd1YWdlOiBydWxlLmxhbmd1YWdlCiAgICAgIH0sCiAgICAgIGZpbHRlcnM6IHJ1bGUuZmlsdGVycywKICAgICAgc2F2ZWRfaWQ6IChfcnVsZSRzYXZlZF9pZCA9IHJ1bGUuc2F2ZWRfaWQpICE9PSBudWxsICYmIF9ydWxlJHNhdmVkX2lkICE9PSB2b2lkIDAgPyBfcnVsZSRzYXZlZF9pZCA6IG51bGwKICAgIH0KICB9IDogbnVsbDsKICB2YXIgYWJvdXRSdWxlRGF0YSA9IHJ1bGUgIT0gbnVsbCA/IF9vYmplY3RTcHJlYWQoewogICAgaXNOZXc6IGZhbHNlCiAgfSwgKDAsIF9mcC5waWNrKShbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAncmVmZXJlbmNlcycsICdzZXZlcml0eScsICd0YWdzJywgJ3RocmVhdCddLCBydWxlKSwge30sIGRldGFpbHNWaWV3ID8gewogICAgbmFtZTogJycKICB9IDoge30sIHsKICAgIHRocmVhdDogcnVsZS50aHJlYXQsCiAgICBmYWxzZVBvc2l0aXZlczogcnVsZS5mYWxzZV9wb3NpdGl2ZXMsCiAgICByaXNrU2NvcmU6IHJ1bGUucmlza19zY29yZSwKICAgIHRpbWVsaW5lOiB7CiAgICAgIGlkOiAoX3J1bGUkdGltZWxpbmVfaWQgPSBydWxlLnRpbWVsaW5lX2lkKSAhPT0gbnVsbCAmJiBfcnVsZSR0aW1lbGluZV9pZCAhPT0gdm9pZCAwID8gX3J1bGUkdGltZWxpbmVfaWQgOiBudWxsLAogICAgICB0aXRsZTogKF9ydWxlJHRpbWVsaW5lX3RpdGxlID0gcnVsZS50aW1lbGluZV90aXRsZSkgIT09IG51bGwgJiYgX3J1bGUkdGltZWxpbmVfdGl0bGUgIT09IHZvaWQgMCA/IF9ydWxlJHRpbWVsaW5lX3RpdGxlIDogbnVsbAogICAgfQogIH0pIDogbnVsbDsKICB2YXIgZnJvbSA9IChfZGF0ZU1hdGgkcGFyc2UgPSBfZGF0ZW1hdGguZGVmYXVsdC5wYXJzZShydWxlLmZyb20pKSAhPT0gbnVsbCAmJiBfZGF0ZU1hdGgkcGFyc2UgIT09IHZvaWQgMCA/IF9kYXRlTWF0aCRwYXJzZSA6ICgwLCBfbW9tZW50LmRlZmF1bHQpKCk7CiAgdmFyIGludGVydmFsID0gKF9kYXRlTWF0aCRwYXJzZTIgPSBfZGF0ZW1hdGguZGVmYXVsdC5wYXJzZSgibm93LSIuY29uY2F0KHJ1bGUuaW50ZXJ2YWwpKSkgIT09IG51bGwgJiYgX2RhdGVNYXRoJHBhcnNlMiAhPT0gdm9pZCAwID8gX2RhdGVNYXRoJHBhcnNlMiA6ICgwLCBfbW9tZW50LmRlZmF1bHQpKCk7CgogIHZhciBmcm9tRHVyYXRpb24gPSBfbW9tZW50LmRlZmF1bHQuZHVyYXRpb24oaW50ZXJ2YWwuZGlmZihmcm9tKSk7CgogIHZhciBmcm9tSHVtYW5pemUgPSAiIi5jb25jYXQoTWF0aC5mbG9vcihmcm9tRHVyYXRpb24uYXNIb3VycygpKSwgImgiKTsKCiAgaWYgKGZyb21EdXJhdGlvbi5hc1NlY29uZHMoKSA8IDYwKSB7CiAgICBmcm9tSHVtYW5pemUgPSAiIi5jb25jYXQoTWF0aC5mbG9vcihmcm9tRHVyYXRpb24uYXNTZWNvbmRzKCkpLCAicyIpOwogIH0gZWxzZSBpZiAoZnJvbUR1cmF0aW9uLmFzTWludXRlcygpIDwgNjApIHsKICAgIGZyb21IdW1hbml6ZSA9ICIiLmNvbmNhdChNYXRoLmZsb29yKGZyb21EdXJhdGlvbi5hc01pbnV0ZXMoKSksICJtIik7CiAgfQoKICB2YXIgc2NoZWR1bGVSdWxlRGF0YSA9IHJ1bGUgIT0gbnVsbCA/IF9vYmplY3RTcHJlYWQoewogICAgaXNOZXc6IGZhbHNlCiAgfSwgKDAsIF9mcC5waWNrKShbJ2VuYWJsZWQnLCAnaW50ZXJ2YWwnXSwgcnVsZSksIHsKICAgIGZyb206IGZyb21IdW1hbml6ZQogIH0pIDogbnVsbDsKICByZXR1cm4gewogICAgYWJvdXRSdWxlRGF0YTogYWJvdXRSdWxlRGF0YSwKICAgIGRlZmluZVJ1bGVEYXRhOiBkZWZpbmVSdWxlRGF0YSwKICAgIHNjaGVkdWxlUnVsZURhdGE6IHNjaGVkdWxlUnVsZURhdGEKICB9Owp9OwoKZXhwb3J0cy5nZXRTdGVwc0RhdGEgPSBnZXRTdGVwc0RhdGE7Cgp2YXIgdXNlUXVlcnkgPSBmdW5jdGlvbiB1c2VRdWVyeSgpIHsKICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcygoMCwgX3JlYWN0Um91dGVyRG9tLnVzZUxvY2F0aW9uKSgpLnNlYXJjaCk7Cn07CgpleHBvcnRzLnVzZVF1ZXJ5ID0gdXNlUXVlcnk7Cgp2YXIgZ2V0UHJlUGFja2FnZWRSdWxlU3RhdHVzID0gZnVuY3Rpb24gZ2V0UHJlUGFja2FnZWRSdWxlU3RhdHVzKHJ1bGVzSW5zdGFsbGVkLCBydWxlc05vdEluc3RhbGxlZCwgcnVsZXNOb3RVcGRhdGVkKSB7CiAgaWYgKHJ1bGVzTm90SW5zdGFsbGVkICE9IG51bGwgJiYgcnVsZXNJbnN0YWxsZWQgPT09IDAgJiYgcnVsZXNOb3RJbnN0YWxsZWQgPiAwICYmIHJ1bGVzTm90VXBkYXRlZCA9PT0gMCkgewogICAgcmV0dXJuICdydWxlTm90SW5zdGFsbGVkJzsKICB9IGVsc2UgaWYgKHJ1bGVzSW5zdGFsbGVkICE9IG51bGwgJiYgcnVsZXNJbnN0YWxsZWQgPiAwICYmIHJ1bGVzTm90SW5zdGFsbGVkID09PSAwICYmIHJ1bGVzTm90VXBkYXRlZCA9PT0gMCkgewogICAgcmV0dXJuICdydWxlSW5zdGFsbGVkJzsKICB9IGVsc2UgaWYgKHJ1bGVzSW5zdGFsbGVkICE9IG51bGwgJiYgcnVsZXNOb3RJbnN0YWxsZWQgIT0gbnVsbCAmJiBydWxlc0luc3RhbGxlZCA+IDAgJiYgcnVsZXNOb3RJbnN0YWxsZWQgPiAwICYmIHJ1bGVzTm90VXBkYXRlZCA9PT0gMCkgewogICAgcmV0dXJuICdzb21lUnVsZVVuaW5zdGFsbCc7CiAgfSBlbHNlIGlmIChydWxlc0luc3RhbGxlZCAhPSBudWxsICYmIHJ1bGVzTm90SW5zdGFsbGVkICE9IG51bGwgJiYgcnVsZXNOb3RVcGRhdGVkICE9IG51bGwgJiYgcnVsZXNJbnN0YWxsZWQgPiAwICYmIHJ1bGVzTm90SW5zdGFsbGVkID49IDAgJiYgcnVsZXNOb3RVcGRhdGVkID4gMCkgewogICAgcmV0dXJuICdydWxlTmVlZFVwZGF0ZSc7CiAgfQoKICByZXR1cm4gJ3Vua25vd24nOwp9OwoKZXhwb3J0cy5nZXRQcmVQYWNrYWdlZFJ1bGVTdGF0dXMgPSBnZXRQcmVQYWNrYWdlZFJ1bGVTdGF0dXM7Cgp2YXIgc2V0RmllbGRWYWx1ZSA9IGZ1bmN0aW9uIHNldEZpZWxkVmFsdWUoZm9ybSwgc2NoZW1hLCBkZWZhdWx0VmFsdWVzKSB7CiAgcmV0dXJuIE9iamVjdC5rZXlzKHNjaGVtYSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICB2YXIgdmFsID0gKDAsIF9mcC5nZXQpKGtleSwgZGVmYXVsdFZhbHVlcyk7CgogICAgaWYgKHZhbCAhPSBudWxsKSB7CiAgICAgIGZvcm0uc2V0RmllbGRWYWx1ZShrZXksIHZhbCk7CiAgICB9CiAgfSk7Cn07CgpleHBvcnRzLnNldEZpZWxkVmFsdWUgPSBzZXRGaWVsZFZhbHVlOwoKdmFyIHJlZGlyZWN0VG9EZXRlY3Rpb25zID0gZnVuY3Rpb24gcmVkaXJlY3RUb0RldGVjdGlvbnMoaXNTaWduYWxJbmRleEV4aXN0cywgaXNBdXRoZW50aWNhdGVkLCBoYXNFbmNyeXB0aW9uS2V5KSB7CiAgcmV0dXJuIGlzU2lnbmFsSW5kZXhFeGlzdHMgIT0gbnVsbCAmJiBpc0F1dGhlbnRpY2F0ZWQgIT0gbnVsbCAmJiBoYXNFbmNyeXB0aW9uS2V5ICE9IG51bGwgJiYgKCFpc1NpZ25hbEluZGV4RXhpc3RzIHx8ICFpc0F1dGhlbnRpY2F0ZWQgfHwgIWhhc0VuY3J5cHRpb25LZXkpOwp9OwoKZXhwb3J0cy5yZWRpcmVjdFRvRGV0ZWN0aW9ucyA9IHJlZGlyZWN0VG9EZXRlY3Rpb25zOw=="},null]}