{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/canvas/public/components/workpad_page/workpad_interactive_page/index.js","dependencies":[{"path":"x-pack/legacy/plugins/canvas/public/components/workpad_page/workpad_interactive_page/index.js","mtime":1585205043729},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkludGVyYWN0aXZlUGFnZSA9IHZvaWQgMDsKCnZhciBfcmVjb21wb3NlID0gcmVxdWlyZSgicmVjb21wb3NlIik7Cgp2YXIgX3JlYWN0UmVkdXggPSByZXF1aXJlKCJyZWFjdC1yZWR1eCIpOwoKdmFyIF9zdG9yZSA9IHJlcXVpcmUoIi4uLy4uLy4uL2xpYi9hZXJvZWxhc3RpYy9zdG9yZSIpOwoKdmFyIF9sYXlvdXQgPSByZXF1aXJlKCIuLi8uLi8uLi9saWIvYWVyb2VsYXN0aWMvbGF5b3V0Iik7Cgp2YXIgX3dvcmtwYWQgPSByZXF1aXJlKCIuLi8uLi8uLi9zdGF0ZS9zZWxlY3RvcnMvd29ya3BhZCIpOwoKdmFyIF9mdW5jdGlvbmFsID0gcmVxdWlyZSgiLi4vLi4vLi4vbGliL2Flcm9lbGFzdGljL2Z1bmN0aW9uYWwiKTsKCnZhciBfYXBwID0gcmVxdWlyZSgiLi4vLi4vLi4vc3RhdGUvc2VsZWN0b3JzL2FwcCIpOwoKdmFyIF9lbGVtZW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uL3N0YXRlL2FjdGlvbnMvZWxlbWVudHMiKTsKCnZhciBfdHJhbnNpZW50ID0gcmVxdWlyZSgiLi4vLi4vLi4vc3RhdGUvYWN0aW9ucy90cmFuc2llbnQiKTsKCnZhciBfaW50ZWdyYXRpb25fdXRpbHMgPSByZXF1aXJlKCIuLi9pbnRlZ3JhdGlvbl91dGlscyIpOwoKdmFyIF9pbnRlcmFjdGl2ZV93b3JrcGFkX3BhZ2UgPSByZXF1aXJlKCIuL2ludGVyYWN0aXZlX3dvcmtwYWRfcGFnZSIpOwoKdmFyIF9ldmVudF9oYW5kbGVycyA9IHJlcXVpcmUoIi4vZXZlbnRfaGFuZGxlcnMiKTsKCmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKdmFyIGNvbmZpZ3VyYXRpb24gPSB7CiAgZ2V0QWRIb2NDaGlsZEFubm90YXRpb25OYW1lOiAnYWRIb2NDaGlsZEFubm90YXRpb24nLAogIGFkSG9jR3JvdXBOYW1lOiAnYWRIb2NHcm91cCcsCiAgYWxpZ25tZW50R3VpZGVOYW1lOiAnYWxpZ25tZW50R3VpZGUnLAogIGF0b3BaOiAxMDAwLAogIGRlcHRoU2VsZWN0OiB0cnVlLAogIGRldkNvbG9yOiAnbWFnZW50YScsCiAgZHJhZ0JveEFubm90YXRpb25OYW1lOiAnZHJhZ0JveEFubm90YXRpb24nLAogIGRyYWdCb3haOiAxMDUwLAogIC8vIGFib3ZlIGFsaWdubWVudCBndWlkZXMgYnV0IGJlbG93IHRoZSB1cGNvbWluZyBob3ZlciB0b29sdGlwCiAgZ3JvdXBOYW1lOiAnZ3JvdXAnLAogIGdyb3VwUmVzaXplOiB0cnVlLAogIGd1aWRlRGlzdGFuY2U6IDMsCiAgaG92ZXJBbm5vdGF0aW9uTmFtZTogJ2hvdmVyQW5ub3RhdGlvbicsCiAgaG92ZXJMaWZ0OiAxMDAsCiAgaW50cmFHcm91cE1hbmlwdWxhdGlvbjogZmFsc2UsCiAgaW50cmFHcm91cFNuYXBPbmx5OiBmYWxzZSwKICBtaW5pbXVtRWxlbWVudFNpemU6IDIsCiAgcGVyc2lzdGVudEdyb3VwTmFtZTogJ3BlcnNpc3RlbnRHcm91cCcsCiAgcmVzaXplQW5ub3RhdGlvbkNvbm5lY3Rvck9mZnNldDogMCwKICByZXNpemVBbm5vdGF0aW9uT2Zmc2V0OiAwLAogIHJlc2l6ZUFubm90YXRpb25PZmZzZXRaOiAwLjEsCiAgLy8gY2F1c2VzIHJlc2l6ZSBtYXJrZXJzIHRvIGJlIHNsaWdodGx5IGFib3ZlIHRoZSBzaGFwZSBwbGFuZQogIHJlc2l6ZUFubm90YXRpb25TaXplOiAxMCwKICByZXNpemVDb25uZWN0b3JOYW1lOiAncmVzaXplQ29ubmVjdG9yJywKICByZXNpemVIYW5kbGVOYW1lOiAncmVzaXplSGFuZGxlJywKICByb3RhdGVBbm5vdGF0aW9uT2Zmc2V0OiAxMiwKICByb3RhdGVTbmFwSW5QaXhlbHM6IDEwLAogIHJvdGF0aW9uRXBzaWxvbjogMC4wMDEsCiAgcm90YXRpb25IYW5kbGVOYW1lOiAncm90YXRpb25IYW5kbGUnLAogIHJvdGF0aW9uSGFuZGxlU2l6ZTogMTQsCiAgcm90YXRpb25Ub29sdGlwTmFtZTogJ3JvdGF0aW9uVG9vbHRpcCcsCiAgc2hvcnRjdXRzOiBmYWxzZSwKICBzaW5nbGVTZWxlY3Q6IGZhbHNlLAogIHNuYXBDb25zdHJhaW50OiB0cnVlLAogIHRvb2x0aXBaOiAxMTAwCn07IC8vIFBvbHlmaWxsIGZvciBicm93c2VycyAoSUUxMSkgdGhhdCBkb24ndCBoYXZlIGVsZW1lbnQuY2xvc2VzdAovLyBGcm9tOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudC9jbG9zZXN0CgpmdW5jdGlvbiBjbG9zZXN0KHMpIHsKICB2YXIgZWwgPSB0aGlzOwogIHZhciBtYXRjaEZuID0gZWwubWF0Y2hlcyA/ICdtYXRjaGVzJyA6ICdtc01hdGNoZXNTZWxlY3Rvcic7CgogIGRvIHsKICAgIGlmIChlbFttYXRjaEZuXShzKSkgewogICAgICByZXR1cm4gZWw7CiAgICB9CgogICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50IHx8IGVsLnBhcmVudE5vZGU7CiAgfSB3aGlsZSAoZWwgIT09IG51bGwgJiYgZWwubm9kZVR5cGUgPT09IDEpOwoKICByZXR1cm4gbnVsbDsKfSAvLyBJZiB5b3UgaW50ZXJhY3Qgd2l0aCBhbiBlbWJlZGRhYmxlIHBhbmVsLCBvbmx5IHRoZSBoZWFkZXIgc2hvdWxkIGJlIGRyYWdnYWJsZQovLyBUaGlzIGZ1bmN0aW9uIHdpbGwgZGV0ZXJtaW5lIGlmIGFuIGVsZW1lbnQgaXMgYW4gZW1iZWRkYWJsZSBib2R5IG9yIG5vdAoKCnZhciBpc0VtYmVkZGFibGVCb2R5ID0gZnVuY3Rpb24gaXNFbWJlZGRhYmxlQm9keShlbGVtZW50KSB7CiAgdmFyIGhhc0Nsb3Nlc3QgPSB0eXBlb2YgZWxlbWVudC5jbG9zZXN0ID09PSAnZnVuY3Rpb24nOwoKICBpZiAoaGFzQ2xvc2VzdCkgewogICAgcmV0dXJuIGVsZW1lbnQuY2xvc2VzdCgnLmVtYmVkZGFibGUnKSAmJiAhZWxlbWVudC5jbG9zZXN0KCcuZW1iUGFuZWxfX2hlYWRlcicpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gY2xvc2VzdC5jYWxsKGVsZW1lbnQsICcuZW1iZWRkYWJsZScpICYmICFjbG9zZXN0LmNhbGwoZWxlbWVudCwgJy5lbWJQYW5lbF9faGVhZGVyJyk7CiAgfQp9OyAvLyBTb21lIGVsZW1lbnRzIGluIGFuIGVtYmVkZGFibGUgbWF5IGJlIHBvcnRhbGVkIG91dCBvZiB0aGUgZW1iZWRkYWJsZSBjb250YWluZXIuCi8vIFdlIGRvIG5vdCB3YW50IGNsaWNrcyBvbiB0aG9zZSB0byB0cmlnZ2VyIGRyYWdzLCBldGMsIGluIHRoZSB3b3JrcGFkLiBUaGlzIGZ1bmN0aW9uCi8vIHdpbGwgY2hlY2sgdG8gbWFrZSBzdXJlIHRoZSBjbGlja2VkIGl0ZW0gaXMgYWN0dWFsbHkgaW4gdGhlIGNvbnRhaW5lcgoKCnZhciBpc0luV29ya3BhZCA9IGZ1bmN0aW9uIGlzSW5Xb3JrcGFkKGVsZW1lbnQpIHsKICB2YXIgaGFzQ2xvc2VzdCA9IHR5cGVvZiBlbGVtZW50LmNsb3Nlc3QgPT09ICdmdW5jdGlvbic7CiAgdmFyIHdvcmtwYWRDb250YWluZXJTZWxlY3RvciA9ICcuY2FudmFzV29ya3BhZENvbnRhaW5lcic7CgogIGlmIChoYXNDbG9zZXN0KSB7CiAgICByZXR1cm4gISFlbGVtZW50LmNsb3Nlc3Qod29ya3BhZENvbnRhaW5lclNlbGVjdG9yKTsKICB9IGVsc2UgewogICAgcmV0dXJuICEhY2xvc2VzdC5jYWxsKGVsZW1lbnQsIHdvcmtwYWRDb250YWluZXJTZWxlY3Rvcik7CiAgfQp9OwoKdmFyIGNvbXBvbmVudExheW91dFN0YXRlID0gZnVuY3Rpb24gY29tcG9uZW50TGF5b3V0U3RhdGUoX3JlZikgewogIHZhciBhZXJvU3RvcmUgPSBfcmVmLmFlcm9TdG9yZSwKICAgICAgc2V0QWVyb1N0b3JlID0gX3JlZi5zZXRBZXJvU3RvcmUsCiAgICAgIGVsZW1lbnRzID0gX3JlZi5lbGVtZW50cywKICAgICAgc2VsZWN0ZWRUb3BsZXZlbE5vZGVzID0gX3JlZi5zZWxlY3RlZFRvcGxldmVsTm9kZXMsCiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0LAogICAgICB3aWR0aCA9IF9yZWYud2lkdGg7CiAgdmFyIHNoYXBlcyA9ICgwLCBfaW50ZWdyYXRpb25fdXRpbHMuc2hhcGVzRm9yTm9kZXMpKGVsZW1lbnRzKTsKICB2YXIgc2VsZWN0ZWRTaGFwZXMgPSBzZWxlY3RlZFRvcGxldmVsTm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gc2hhcGVzLmZpbmQoZnVuY3Rpb24gKHMpIHsKICAgICAgcmV0dXJuIHMuaWQgPT09IGU7CiAgICB9KTsKICB9KTsKICB2YXIgbmV3U3RhdGUgPSB7CiAgICBwcmltYXJ5VXBkYXRlOiBudWxsLAogICAgY3VycmVudFNjZW5lOiB7CiAgICAgIHNoYXBlczogc2hhcGVzLAogICAgICBjb25maWd1cmF0aW9uOiBfb2JqZWN0U3ByZWFkKHt9LCBjb25maWd1cmF0aW9uLCB7CiAgICAgICAgcGFnZUhlaWdodDogaGVpZ2h0LAogICAgICAgIHBhZ2VXaWR0aDogd2lkdGgKICAgICAgfSksCiAgICAgIHNlbGVjdGVkU2hhcGVzOiBzZWxlY3RlZFNoYXBlcywKICAgICAgc2VsZWN0aW9uU3RhdGU6IGFlcm9TdG9yZSA/IGFlcm9TdG9yZS5nZXRDdXJyZW50U3RhdGUoKS5jdXJyZW50U2NlbmUuc2VsZWN0aW9uU3RhdGUgOiB7CiAgICAgICAgdWlkOiAwLAogICAgICAgIGRlcHRoSW5kZXg6IDAsCiAgICAgICAgZG93bjogZmFsc2UKICAgICAgfSwKICAgICAgZ2VzdHVyZVN0YXRlOiBhZXJvU3RvcmUgPyBhZXJvU3RvcmUuZ2V0Q3VycmVudFN0YXRlKCkuY3VycmVudFNjZW5lLmdlc3R1cmVTdGF0ZSA6IHsKICAgICAgICBjdXJzb3I6IHsKICAgICAgICAgIHg6IDAsCiAgICAgICAgICB5OiAwCiAgICAgICAgfSwKICAgICAgICBtb3VzZUlzRG93bjogZmFsc2UsCiAgICAgICAgbW91c2VCdXR0b25TdGF0ZTogewogICAgICAgICAgYnV0dG9uU3RhdGU6ICd1cCcsCiAgICAgICAgICBkb3duWDogbnVsbCwKICAgICAgICAgIGRvd25ZOiBudWxsCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKCiAgaWYgKGFlcm9TdG9yZSkgewogICAgYWVyb1N0b3JlLnNldEN1cnJlbnRTdGF0ZShuZXdTdGF0ZSk7CiAgfSBlbHNlIHsKICAgIHNldEFlcm9TdG9yZShhZXJvU3RvcmUgPSAoMCwgX3N0b3JlLmNyZWF0ZVN0b3JlKShuZXdTdGF0ZSwgX2xheW91dC51cGRhdGVyKSk7CiAgfQoKICByZXR1cm4gewogICAgYWVyb1N0b3JlOiBhZXJvU3RvcmUKICB9Owp9OwoKdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpIHsKICB2YXIgc2VsZWN0ZWRUb3BsZXZlbE5vZGVzID0gc3RhdGUudHJhbnNpZW50LnNlbGVjdGVkVG9wbGV2ZWxOb2RlczsKICB2YXIgbm9kZXMgPSAoMCwgX3dvcmtwYWQuZ2V0Tm9kZXMpKHN0YXRlLCBvd25Qcm9wcy5wYWdlSWQpOwogIHZhciBzZWxlY3RlZFByaW1hcnlTaGFwZU9iamVjdHMgPSBzZWxlY3RlZFRvcGxldmVsTm9kZXMubWFwKGZ1bmN0aW9uIChpZCkgewogICAgcmV0dXJuIG5vZGVzLmZpbmQoZnVuY3Rpb24gKHMpIHsKICAgICAgcmV0dXJuIHMuaWQgPT09IGlkOwogICAgfSk7CiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChzaGFwZSkgewogICAgcmV0dXJuIHNoYXBlOwogIH0pOwogIHZhciBzZWxlY3RlZFBlcnNpc3RlbnRQcmltYXJ5Tm9kZXMgPSAoMCwgX2Z1bmN0aW9uYWwuZmxhdHRlbikoc2VsZWN0ZWRQcmltYXJ5U2hhcGVPYmplY3RzLm1hcChmdW5jdGlvbiAoc2hhcGUpIHsKICAgIHJldHVybiBub2Rlcy5maW5kKGZ1bmN0aW9uIChuKSB7CiAgICAgIHJldHVybiBuLmlkID09PSBzaGFwZS5pZDsKICAgIH0pIC8vIGlzIGl0IGEgbGVhZiBvciBhIHBlcnNpc3RlZCBncm91cD8KICAgID8gW3NoYXBlLmlkXSA6IG5vZGVzLmZpbHRlcihmdW5jdGlvbiAocykgewogICAgICByZXR1cm4gcy5wYXJlbnQgPT09IHNoYXBlLmlkOwogICAgfSkubWFwKGZ1bmN0aW9uIChzKSB7CiAgICAgIHJldHVybiBzLmlkOwogICAgfSk7CiAgfSkpOwogIHZhciBzZWxlY3RlZE5vZGVJZHMgPSAoMCwgX2Z1bmN0aW9uYWwuZmxhdHRlbikoc2VsZWN0ZWRQZXJzaXN0ZW50UHJpbWFyeU5vZGVzLm1hcCgoMCwgX2ludGVncmF0aW9uX3V0aWxzLmNyYXdsVHJlZSkobm9kZXMpKSk7CiAgcmV0dXJuIHsKICAgIHN0YXRlOiBzdGF0ZSwKICAgIGlzRWRpdGFibGU6ICEoMCwgX2FwcC5nZXRGdWxsc2NyZWVuKShzdGF0ZSkgJiYgKDAsIF93b3JrcGFkLmlzV3JpdGVhYmxlKShzdGF0ZSkgJiYgKDAsIF9hcHAuY2FuVXNlcldyaXRlKShzdGF0ZSksCiAgICBlbGVtZW50czogbm9kZXMsCiAgICBzZWxlY3RlZFRvcGxldmVsTm9kZXM6IHNlbGVjdGVkVG9wbGV2ZWxOb2RlcywKICAgIHNlbGVjdGVkTm9kZXM6IHNlbGVjdGVkTm9kZUlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7CiAgICAgIHJldHVybiBub2Rlcy5maW5kKGZ1bmN0aW9uIChzKSB7CiAgICAgICAgcmV0dXJuIHMuaWQgPT09IGlkOwogICAgICB9KTsKICAgIH0pLAogICAgcGFnZVN0eWxlOiAoMCwgX3dvcmtwYWQuZ2V0UGFnZUJ5SWQpKHN0YXRlLCBvd25Qcm9wcy5wYWdlSWQpLnN0eWxlLAogICAgem9vbVNjYWxlOiAoMCwgX2FwcC5nZXRab29tU2NhbGUpKHN0YXRlKQogIH07Cn07Cgp2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7CiAgcmV0dXJuIHsKICAgIGRpc3BhdGNoOiBkaXNwYXRjaCwKICAgIGluc2VydE5vZGVzOiBmdW5jdGlvbiBpbnNlcnROb2RlcyhzZWxlY3RlZE5vZGVzLCBwYWdlSWQpIHsKICAgICAgcmV0dXJuIGRpc3BhdGNoKCgwLCBfZWxlbWVudHMuaW5zZXJ0Tm9kZXMpKHNlbGVjdGVkTm9kZXMsIHBhZ2VJZCkpOwogICAgfSwKICAgIHJlbW92ZU5vZGVzOiBmdW5jdGlvbiByZW1vdmVOb2Rlcyhub2RlSWRzLCBwYWdlSWQpIHsKICAgICAgcmV0dXJuIGRpc3BhdGNoKCgwLCBfZWxlbWVudHMucmVtb3ZlRWxlbWVudHMpKG5vZGVJZHMsIHBhZ2VJZCkpOwogICAgfSwKICAgIHNlbGVjdFRvcGxldmVsTm9kZXM6IGZ1bmN0aW9uIHNlbGVjdFRvcGxldmVsTm9kZXMobm9kZXMpIHsKICAgICAgcmV0dXJuIGRpc3BhdGNoKCgwLCBfdHJhbnNpZW50LnNlbGVjdFRvcGxldmVsTm9kZXMpKG5vZGVzLmZpbHRlcihmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiAhZS5wb3NpdGlvbi5wYXJlbnQ7CiAgICAgIH0pLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBlLmlkOwogICAgICB9KSkpOwogICAgfSwKICAgIGVsZW1lbnRMYXllcjogZnVuY3Rpb24gZWxlbWVudExheWVyKHBhZ2VJZCwgZWxlbWVudElkLCBtb3ZlbWVudCkgewogICAgICByZXR1cm4gZGlzcGF0Y2goKDAsIF9lbGVtZW50cy5lbGVtZW50TGF5ZXIpKHsKICAgICAgICBwYWdlSWQ6IHBhZ2VJZCwKICAgICAgICBlbGVtZW50SWQ6IGVsZW1lbnRJZCwKICAgICAgICBtb3ZlbWVudDogbW92ZW1lbnQKICAgICAgfSkpOwogICAgfSwKICAgIHNldE11bHRpcGxlUG9zaXRpb25zOiBmdW5jdGlvbiBzZXRNdWx0aXBsZVBvc2l0aW9ucyhwYWdlSWQpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyZXBvc2l0aW9uZWROb2RlcykgewogICAgICAgIHJldHVybiBkaXNwYXRjaCgoMCwgX2VsZW1lbnRzLnNldE11bHRpcGxlUG9zaXRpb25zKShyZXBvc2l0aW9uZWROb2Rlcy5tYXAoZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBub2RlLCB7CiAgICAgICAgICAgIHBhZ2VJZDogcGFnZUlkLAogICAgICAgICAgICBlbGVtZW50SWQ6IG5vZGUuaWQKICAgICAgICAgIH0pOwogICAgICAgIH0pKSk7CiAgICAgIH07CiAgICB9CiAgfTsKfTsKCnZhciBtZXJnZVByb3BzID0gZnVuY3Rpb24gbWVyZ2VQcm9wcyhfcmVmMiwgX3JlZjMsIG93blByb3BzKSB7CiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsCiAgICAgIHJlc3RTdGF0ZVByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbInN0YXRlIl0pOwoKICB2YXIgZGlzcGF0Y2ggPSBfcmVmMy5kaXNwYXRjaCwKICAgICAgcmVzdERpc3BhdGNoUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjMsIFsiZGlzcGF0Y2giXSk7CgogIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBvd25Qcm9wcywge30sIHJlc3REaXNwYXRjaFByb3BzLCB7fSwgcmVzdFN0YXRlUHJvcHMsIHsKICAgIHVwZGF0ZUdsb2JhbFN0YXRlOiAoMCwgX2ludGVncmF0aW9uX3V0aWxzLmdsb2JhbFN0YXRlVXBkYXRlcikoZGlzcGF0Y2gsIHN0YXRlKSwKICAgIHNldE11bHRpcGxlUG9zaXRpb25zOiByZXN0RGlzcGF0Y2hQcm9wcy5zZXRNdWx0aXBsZVBvc2l0aW9ucyhvd25Qcm9wcy5wYWdlSWQpCiAgfSk7Cn07Cgp2YXIgSW50ZXJhY3RpdmVQYWdlID0gKDAsIF9yZWNvbXBvc2UuY29tcG9zZSkoKDAsIF9yZWFjdFJlZHV4LmNvbm5lY3QpKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKSwgKDAsIF9yZWNvbXBvc2Uud2l0aFN0YXRlKSgnYWVyb1N0b3JlJywgJ3NldEFlcm9TdG9yZScpLCAoMCwgX3JlY29tcG9zZS53aXRoUHJvcHMpKGNvbXBvbmVudExheW91dFN0YXRlKSwgKDAsIF9yZWNvbXBvc2Uud2l0aFByb3BzKShmdW5jdGlvbiAoX3JlZjQpIHsKICB2YXIgYWVyb1N0b3JlID0gX3JlZjQuYWVyb1N0b3JlLAogICAgICB1cGRhdGVHbG9iYWxTdGF0ZSA9IF9yZWY0LnVwZGF0ZUdsb2JhbFN0YXRlOwogIHJldHVybiB7CiAgICBjb21taXQ6IGZ1bmN0aW9uIGNvbW1pdCh0eXBlLCBwYXlsb2FkKSB7CiAgICAgIHZhciBuZXdMYXlvdXRTdGF0ZSA9IGFlcm9TdG9yZS5jb21taXQodHlwZSwgcGF5bG9hZCk7CgogICAgICBpZiAobmV3TGF5b3V0U3RhdGUuY3VycmVudFNjZW5lLmdlc3R1cmVFbmQpIHsKICAgICAgICB1cGRhdGVHbG9iYWxTdGF0ZShuZXdMYXlvdXRTdGF0ZSk7CiAgICAgIH0KICAgIH0KICB9Owp9KSwgKDAsIF9yZWNvbXBvc2UubGlmZWN5Y2xlKSh7CiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkgewogICAgdGhpcy5wcm9wcy51bnJlZ2lzdGVyTGF5b3V0KHRoaXMucHJvcHMuYWVyb1N0b3JlKTsKICB9Cn0pLCAoMCwgX3JlY29tcG9zZS53aXRoU3RhdGUpKCdjYW52YXNPcmlnaW4nLCAnc2F2ZUNhbnZhc09yaWdpbicpLCAoMCwgX3JlY29tcG9zZS53aXRoU3RhdGUpKCdfZm9yY2VSZXJlbmRlcicsICdmb3JjZVJlcmVuZGVyJyksICgwLCBfcmVjb21wb3NlLndpdGhQcm9wcykoZnVuY3Rpb24gKF9yZWY1KSB7CiAgdmFyIHJlZ2lzdGVyTGF5b3V0ID0gX3JlZjUucmVnaXN0ZXJMYXlvdXQsCiAgICAgIGFlcm9TdG9yZSA9IF9yZWY1LmFlcm9TdG9yZSwKICAgICAgdXBkYXRlR2xvYmFsU3RhdGUgPSBfcmVmNS51cGRhdGVHbG9iYWxTdGF0ZSwKICAgICAgZm9yY2VSZXJlbmRlciA9IF9yZWY1LmZvcmNlUmVyZW5kZXI7CiAgcmVnaXN0ZXJMYXlvdXQoZnVuY3Rpb24gKHR5cGUsIHBheWxvYWQpIHsKICAgIHZhciBuZXdMYXlvdXRTdGF0ZSA9IGFlcm9TdG9yZS5jb21taXQodHlwZSwgcGF5bG9hZCk7CgogICAgaWYgKG5ld0xheW91dFN0YXRlLmN1cnJlbnRTY2VuZS5nZXN0dXJlRW5kKSB7CiAgICAgIC8vIGNvbmRpdGlvbmFsaXppbmcgdGhlIGdsb2JhbCB1cGRhdGUgc28gYXMgdG8gZW5hYmxlIHBlcnNpc3QtZnJlZSBudWRnZSBzZXJpZXMKICAgICAgdXBkYXRlR2xvYmFsU3RhdGUobmV3TGF5b3V0U3RhdGUpOwogICAgfQoKICAgIGZvcmNlUmVyZW5kZXIobmV3TGF5b3V0U3RhdGUpOwogICAgcmV0dXJuIG5ld0xheW91dFN0YXRlOwogIH0pOwogIHJldHVybiB7CiAgICBjdXJzb3I6IGFlcm9TdG9yZS5nZXRDdXJyZW50U3RhdGUoKS5jdXJyZW50U2NlbmUuY3Vyc29yCiAgfTsKfSksICgwLCBfcmVjb21wb3NlLndpdGhQcm9wcykoZnVuY3Rpb24gKF9yZWY2KSB7CiAgdmFyIGFlcm9TdG9yZSA9IF9yZWY2LmFlcm9TdG9yZSwKICAgICAgZWxlbWVudHMgPSBfcmVmNi5lbGVtZW50czsKICB2YXIgZWxlbWVudExvb2t1cCA9IG5ldyBNYXAoZWxlbWVudHMubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICByZXR1cm4gW2VsZW1lbnQuaWQsIGVsZW1lbnRdOwogIH0pKTsKICB2YXIgZWxlbWVudHNUb1JlbmRlciA9IGFlcm9TdG9yZS5nZXRDdXJyZW50U3RhdGUoKS5jdXJyZW50U2NlbmUuc2hhcGVzLm1hcChmdW5jdGlvbiAoc2hhcGUpIHsKICAgIHZhciBlbGVtZW50ID0gZWxlbWVudExvb2t1cC5nZXQoc2hhcGUuaWQpOwogICAgcmV0dXJuIGVsZW1lbnQgPyBfb2JqZWN0U3ByZWFkKHt9LCBzaGFwZSwgewogICAgICB3aWR0aDogc2hhcGUuYSAqIDIsCiAgICAgIGhlaWdodDogc2hhcGUuYiAqIDIsCiAgICAgIGZpbHRlcjogZWxlbWVudC5maWx0ZXIKICAgIH0pIDogc2hhcGU7CiAgfSk7CiAgcmV0dXJuIHsKICAgIGVsZW1lbnRzOiBlbGVtZW50c1RvUmVuZGVyCiAgfTsKfSksICgwLCBfcmVjb21wb3NlLndpdGhQcm9wcykoZnVuY3Rpb24gKF9yZWY3KSB7CiAgdmFyIF9jb21taXQgPSBfcmVmNy5jb21taXQsCiAgICAgIGZvcmNlUmVyZW5kZXIgPSBfcmVmNy5mb3JjZVJlcmVuZGVyOwogIHJldHVybiB7CiAgICBjb21taXQ6IGZ1bmN0aW9uIGNvbW1pdCgpIHsKICAgICAgcmV0dXJuIGZvcmNlUmVyZW5kZXIoX2NvbW1pdC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpOwogICAgfQogIH07Cn0pLCAoMCwgX3JlY29tcG9zZS53aXRoUHJvcHMpKGZ1bmN0aW9uICgpIHsKICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcHJvcHMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICBwcm9wc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICB9CgogIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBwcm9wcywgewogICAgY2FuRHJhZ0VsZW1lbnQ6IGZ1bmN0aW9uIGNhbkRyYWdFbGVtZW50KGVsZW1lbnQpIHsKICAgICAgcmV0dXJuICFpc0VtYmVkZGFibGVCb2R5KGVsZW1lbnQpICYmIGlzSW5Xb3JrcGFkKGVsZW1lbnQpOwogICAgICB2YXIgaGFzQ2xvc2VzdCA9IHR5cGVvZiBlbGVtZW50LmNsb3Nlc3QgPT09ICdmdW5jdGlvbic7CgogICAgICBpZiAoaGFzQ2xvc2VzdCkgewogICAgICAgIHJldHVybiAhZWxlbWVudC5jbG9zZXN0KCcuZW1iZWRkYWJsZScpIHx8IGVsZW1lbnQuY2xvc2VzdCgnLmVtYlBhbmVsX19oZWFkZXInKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gIWNsb3Nlc3QuY2FsbChlbGVtZW50LCAnLmVtYmVkZGFibGUnKSB8fCBjbG9zZXN0LmNhbGwoZWxlbWVudCwgJy5lbWJQYW5lbF9faGVhZGVyJyk7CiAgICAgIH0KICAgIH0KICB9KTsKfSksICgwLCBfcmVjb21wb3NlLndpdGhIYW5kbGVycykoX2V2ZW50X2hhbmRsZXJzLmV2ZW50SGFuZGxlcnMpLCAvLyBDYXB0dXJlcyB1c2VyIGludGVudCwgbmVlZHMgdG8gaGF2ZSByZWNvbmNpbGVkIHN0YXRlCmZ1bmN0aW9uICgpIHsKICByZXR1cm4gX2ludGVyYWN0aXZlX3dvcmtwYWRfcGFnZS5JbnRlcmFjdGl2ZVdvcmtwYWRQYWdlOwp9KTsKZXhwb3J0cy5JbnRlcmFjdGl2ZVBhZ2UgPSBJbnRlcmFjdGl2ZVBhZ2U7"},null]}