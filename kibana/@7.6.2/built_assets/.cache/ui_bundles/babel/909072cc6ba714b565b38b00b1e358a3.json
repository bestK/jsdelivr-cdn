{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/infra/public/containers/logs/log_analysis/log_analysis_module.js","dependencies":[{"path":"x-pack/legacy/plugins/infra/public/containers/logs/log_analysis/log_analysis_module.js","mtime":1585205044665},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnVzZUxvZ0FuYWx5c2lzTW9kdWxlID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IHJlcXVpcmUoInJlYWN0Iik7Cgp2YXIgX3VzZV90cmFja2VkX3Byb21pc2UgPSByZXF1aXJlKCIuLi8uLi8uLi91dGlscy91c2VfdHJhY2tlZF9wcm9taXNlIik7Cgp2YXIgX2xvZ19hbmFseXNpc19tb2R1bGVfc3RhdHVzID0gcmVxdWlyZSgiLi9sb2dfYW5hbHlzaXNfbW9kdWxlX3N0YXR1cyIpOwoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKdmFyIHVzZUxvZ0FuYWx5c2lzTW9kdWxlID0gZnVuY3Rpb24gdXNlTG9nQW5hbHlzaXNNb2R1bGUoX3JlZikgewogIHZhciBzb3VyY2VDb25maWd1cmF0aW9uID0gX3JlZi5zb3VyY2VDb25maWd1cmF0aW9uLAogICAgICBtb2R1bGVEZXNjcmlwdG9yID0gX3JlZi5tb2R1bGVEZXNjcmlwdG9yOwogIHZhciBzcGFjZUlkID0gc291cmNlQ29uZmlndXJhdGlvbi5zcGFjZUlkLAogICAgICBzb3VyY2VJZCA9IHNvdXJjZUNvbmZpZ3VyYXRpb24uc291cmNlSWQsCiAgICAgIHRpbWVzdGFtcEZpZWxkID0gc291cmNlQ29uZmlndXJhdGlvbi50aW1lc3RhbXBGaWVsZCwKICAgICAgaW5kaWNlcyA9IHNvdXJjZUNvbmZpZ3VyYXRpb24uaW5kaWNlczsKCiAgdmFyIF91c2VNb2R1bGVTdGF0dXMgPSAoMCwgX2xvZ19hbmFseXNpc19tb2R1bGVfc3RhdHVzLnVzZU1vZHVsZVN0YXR1cykobW9kdWxlRGVzY3JpcHRvci5qb2JUeXBlcywgewogICAgYnVja2V0U3BhbjogbW9kdWxlRGVzY3JpcHRvci5idWNrZXRTcGFuLAogICAgaW5kZXhQYXR0ZXJuOiBpbmRpY2VzLmpvaW4oJywnKSwKICAgIHRpbWVzdGFtcEZpZWxkOiB0aW1lc3RhbXBGaWVsZAogIH0pLAogICAgICBfdXNlTW9kdWxlU3RhdHVzMiA9IF9zbGljZWRUb0FycmF5KF91c2VNb2R1bGVTdGF0dXMsIDIpLAogICAgICBtb2R1bGVTdGF0dXMgPSBfdXNlTW9kdWxlU3RhdHVzMlswXSwKICAgICAgZGlzcGF0Y2hNb2R1bGVTdGF0dXMgPSBfdXNlTW9kdWxlU3RhdHVzMlsxXTsKCiAgdmFyIF91c2VUcmFja2VkUHJvbWlzZSA9ICgwLCBfdXNlX3RyYWNrZWRfcHJvbWlzZS51c2VUcmFja2VkUHJvbWlzZSkoewogICAgY2FuY2VsUHJldmlvdXNPbjogJ3Jlc29sdXRpb24nLAogICAgY3JlYXRlUHJvbWlzZTogZnVuY3Rpb24gY3JlYXRlUHJvbWlzZSgpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBjcmVhdGVQcm9taXNlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBkaXNwYXRjaE1vZHVsZVN0YXR1cyh7CiAgICAgICAgICAgICAgICB0eXBlOiAnZmV0Y2hpbmdNb2R1bGVEZWZpbml0aW9uJwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAobW9kdWxlRGVzY3JpcHRvci5nZXRNb2R1bGVEZWZpbml0aW9uKCkpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0LnNlbnQpOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBvblJlc29sdmU6IGZ1bmN0aW9uIG9uUmVzb2x2ZShyZXNwb25zZSkgewogICAgICBkaXNwYXRjaE1vZHVsZVN0YXR1cyh7CiAgICAgICAgdHlwZTogJ2ZldGNoZWRNb2R1bGVEZWZpbml0aW9uJywKICAgICAgICBzcGFjZUlkOiBzcGFjZUlkLAogICAgICAgIHNvdXJjZUlkOiBzb3VyY2VJZCwKICAgICAgICBtb2R1bGVEZWZpbml0aW9uOiByZXNwb25zZQogICAgICB9KTsKICAgIH0sCiAgICBvblJlamVjdDogZnVuY3Rpb24gb25SZWplY3QoKSB7CiAgICAgIGRpc3BhdGNoTW9kdWxlU3RhdHVzKHsKICAgICAgICB0eXBlOiAnZmFpbGVkRmV0Y2hpbmdNb2R1bGVEZWZpbml0aW9uJwogICAgICB9KTsKICAgIH0KICB9LCBbbW9kdWxlRGVzY3JpcHRvci5nZXRNb2R1bGVEZWZpbml0aW9uLCBzcGFjZUlkLCBzb3VyY2VJZF0pLAogICAgICBfdXNlVHJhY2tlZFByb21pc2UyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVRyYWNrZWRQcm9taXNlLCAyKSwKICAgICAgZmV0Y2hNb2R1bGVEZWZpbml0aW9uUmVxdWVzdCA9IF91c2VUcmFja2VkUHJvbWlzZTJbMF0sCiAgICAgIGZldGNoTW9kdWxlRGVmaW5pdGlvbiA9IF91c2VUcmFja2VkUHJvbWlzZTJbMV07CgogIHZhciBfdXNlVHJhY2tlZFByb21pc2UzID0gKDAsIF91c2VfdHJhY2tlZF9wcm9taXNlLnVzZVRyYWNrZWRQcm9taXNlKSh7CiAgICBjYW5jZWxQcmV2aW91c09uOiAncmVzb2x1dGlvbicsCiAgICBjcmVhdGVQcm9taXNlOiBmdW5jdGlvbiBjcmVhdGVQcm9taXNlKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGNyZWF0ZVByb21pc2UkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGRpc3BhdGNoTW9kdWxlU3RhdHVzKHsKICAgICAgICAgICAgICAgIHR5cGU6ICdmZXRjaGluZ0pvYlN0YXR1c2VzJwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKG1vZHVsZURlc2NyaXB0b3IuZ2V0Sm9iU3VtbWFyeShzcGFjZUlkLCBzb3VyY2VJZCkpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDIuc2VudCk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBvblJlc29sdmU6IGZ1bmN0aW9uIG9uUmVzb2x2ZShqb2JSZXNwb25zZSkgewogICAgICBkaXNwYXRjaE1vZHVsZVN0YXR1cyh7CiAgICAgICAgdHlwZTogJ2ZldGNoZWRKb2JTdGF0dXNlcycsCiAgICAgICAgcGF5bG9hZDogam9iUmVzcG9uc2UsCiAgICAgICAgc3BhY2VJZDogc3BhY2VJZCwKICAgICAgICBzb3VyY2VJZDogc291cmNlSWQKICAgICAgfSk7CiAgICB9LAogICAgb25SZWplY3Q6IGZ1bmN0aW9uIG9uUmVqZWN0KCkgewogICAgICBkaXNwYXRjaE1vZHVsZVN0YXR1cyh7CiAgICAgICAgdHlwZTogJ2ZhaWxlZEZldGNoaW5nSm9iU3RhdHVzZXMnCiAgICAgIH0pOwogICAgfQogIH0sIFtzcGFjZUlkLCBzb3VyY2VJZF0pLAogICAgICBfdXNlVHJhY2tlZFByb21pc2U0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVRyYWNrZWRQcm9taXNlMywgMiksCiAgICAgIGZldGNoSm9iU3RhdHVzUmVxdWVzdCA9IF91c2VUcmFja2VkUHJvbWlzZTRbMF0sCiAgICAgIGZldGNoSm9iU3RhdHVzID0gX3VzZVRyYWNrZWRQcm9taXNlNFsxXTsKCiAgdmFyIGlzTG9hZGluZ01vZHVsZVN0YXR1cyA9ICgwLCBfcmVhY3QudXNlTWVtbykoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGZldGNoSm9iU3RhdHVzUmVxdWVzdC5zdGF0ZSA9PT0gJ3BlbmRpbmcnIHx8IGZldGNoTW9kdWxlRGVmaW5pdGlvblJlcXVlc3Quc3RhdGUgPT09ICdwZW5kaW5nJzsKICB9LCBbZmV0Y2hKb2JTdGF0dXNSZXF1ZXN0LnN0YXRlLCBmZXRjaE1vZHVsZURlZmluaXRpb25SZXF1ZXN0LnN0YXRlXSk7CgogIHZhciBfdXNlVHJhY2tlZFByb21pc2U1ID0gKDAsIF91c2VfdHJhY2tlZF9wcm9taXNlLnVzZVRyYWNrZWRQcm9taXNlKSh7CiAgICBjYW5jZWxQcmV2aW91c09uOiAncmVzb2x1dGlvbicsCiAgICBjcmVhdGVQcm9taXNlOiBmdW5jdGlvbiBjcmVhdGVQcm9taXNlKHNlbGVjdGVkSW5kaWNlcywgc3RhcnQsIGVuZCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGNyZWF0ZVByb21pc2UkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGRpc3BhdGNoTW9kdWxlU3RhdHVzKHsKICAgICAgICAgICAgICAgIHR5cGU6ICdzdGFydGVkU2V0dXAnCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAobW9kdWxlRGVzY3JpcHRvci5zZXRVcE1vZHVsZShzdGFydCwgZW5kLCB7CiAgICAgICAgICAgICAgICBpbmRpY2VzOiBzZWxlY3RlZEluZGljZXMsCiAgICAgICAgICAgICAgICBzb3VyY2VJZDogc291cmNlSWQsCiAgICAgICAgICAgICAgICBzcGFjZUlkOiBzcGFjZUlkLAogICAgICAgICAgICAgICAgdGltZXN0YW1wRmllbGQ6IHRpbWVzdGFtcEZpZWxkCiAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDMuc2VudCk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBvblJlc29sdmU6IGZ1bmN0aW9uIG9uUmVzb2x2ZShfcmVmMikgewogICAgICB2YXIgZGF0YWZlZWRzID0gX3JlZjIuZGF0YWZlZWRzLAogICAgICAgICAgam9icyA9IF9yZWYyLmpvYnM7CiAgICAgIGRpc3BhdGNoTW9kdWxlU3RhdHVzKHsKICAgICAgICB0eXBlOiAnZmluaXNoZWRTZXR1cCcsCiAgICAgICAgZGF0YWZlZWRzOiBkYXRhZmVlZHMsCiAgICAgICAgam9iczogam9icywKICAgICAgICBzcGFjZUlkOiBzcGFjZUlkLAogICAgICAgIHNvdXJjZUlkOiBzb3VyY2VJZAogICAgICB9KTsKICAgIH0sCiAgICBvblJlamVjdDogZnVuY3Rpb24gb25SZWplY3QoKSB7CiAgICAgIGRpc3BhdGNoTW9kdWxlU3RhdHVzKHsKICAgICAgICB0eXBlOiAnZmFpbGVkU2V0dXAnCiAgICAgIH0pOwogICAgfQogIH0sIFttb2R1bGVEZXNjcmlwdG9yLnNldFVwTW9kdWxlLCBzcGFjZUlkLCBzb3VyY2VJZCwgdGltZXN0YW1wRmllbGRdKSwKICAgICAgX3VzZVRyYWNrZWRQcm9taXNlNiA9IF9zbGljZWRUb0FycmF5KF91c2VUcmFja2VkUHJvbWlzZTUsIDIpLAogICAgICBzZXRVcE1vZHVsZSA9IF91c2VUcmFja2VkUHJvbWlzZTZbMV07CgogIHZhciBfdXNlVHJhY2tlZFByb21pc2U3ID0gKDAsIF91c2VfdHJhY2tlZF9wcm9taXNlLnVzZVRyYWNrZWRQcm9taXNlKSh7CiAgICBjYW5jZWxQcmV2aW91c09uOiAncmVzb2x1dGlvbicsCiAgICBjcmVhdGVQcm9taXNlOiBmdW5jdGlvbiBjcmVhdGVQcm9taXNlKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGNyZWF0ZVByb21pc2UkKF9jb250ZXh0NCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKG1vZHVsZURlc2NyaXB0b3IuY2xlYW5VcE1vZHVsZShzcGFjZUlkLCBzb3VyY2VJZCkpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDQuc2VudCk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCBbc3BhY2VJZCwgc291cmNlSWRdKSwKICAgICAgX3VzZVRyYWNrZWRQcm9taXNlOCA9IF9zbGljZWRUb0FycmF5KF91c2VUcmFja2VkUHJvbWlzZTcsIDIpLAogICAgICBjbGVhblVwTW9kdWxlUmVxdWVzdCA9IF91c2VUcmFja2VkUHJvbWlzZThbMF0sCiAgICAgIGNsZWFuVXBNb2R1bGUgPSBfdXNlVHJhY2tlZFByb21pc2U4WzFdOwoKICB2YXIgaXNDbGVhbmluZ1VwID0gKDAsIF9yZWFjdC51c2VNZW1vKShmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY2xlYW5VcE1vZHVsZVJlcXVlc3Quc3RhdGUgPT09ICdwZW5kaW5nJzsKICB9LCBbY2xlYW5VcE1vZHVsZVJlcXVlc3Quc3RhdGVdKTsKICB2YXIgY2xlYW5VcEFuZFNldFVwTW9kdWxlID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKHNlbGVjdGVkSW5kaWNlcywgc3RhcnQsIGVuZCkgewogICAgZGlzcGF0Y2hNb2R1bGVTdGF0dXMoewogICAgICB0eXBlOiAnc3RhcnRlZFNldHVwJwogICAgfSk7CiAgICBjbGVhblVwTW9kdWxlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgIHNldFVwTW9kdWxlKHNlbGVjdGVkSW5kaWNlcywgc3RhcnQsIGVuZCk7CiAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7CiAgICAgIGRpc3BhdGNoTW9kdWxlU3RhdHVzKHsKICAgICAgICB0eXBlOiAnZmFpbGVkU2V0dXAnCiAgICAgIH0pOwogICAgfSk7CiAgfSwgW2NsZWFuVXBNb2R1bGUsIGRpc3BhdGNoTW9kdWxlU3RhdHVzLCBzZXRVcE1vZHVsZV0pOwogIHZhciB2aWV3U2V0dXBGb3JSZWNvbmZpZ3VyYXRpb24gPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoKSB7CiAgICBkaXNwYXRjaE1vZHVsZVN0YXR1cyh7CiAgICAgIHR5cGU6ICdyZXF1ZXN0ZWRKb2JDb25maWd1cmF0aW9uVXBkYXRlJwogICAgfSk7CiAgfSwgW2Rpc3BhdGNoTW9kdWxlU3RhdHVzXSk7CiAgdmFyIHZpZXdTZXR1cEZvclVwZGF0ZSA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uICgpIHsKICAgIGRpc3BhdGNoTW9kdWxlU3RhdHVzKHsKICAgICAgdHlwZTogJ3JlcXVlc3RlZEpvYkRlZmluaXRpb25VcGRhdGUnCiAgICB9KTsKICB9LCBbZGlzcGF0Y2hNb2R1bGVTdGF0dXNdKTsKICB2YXIgdmlld1Jlc3VsdHMgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoKSB7CiAgICBkaXNwYXRjaE1vZHVsZVN0YXR1cyh7CiAgICAgIHR5cGU6ICd2aWV3ZWRSZXN1bHRzJwogICAgfSk7CiAgfSwgW2Rpc3BhdGNoTW9kdWxlU3RhdHVzXSk7CiAgdmFyIGpvYklkcyA9ICgwLCBfcmVhY3QudXNlTWVtbykoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIG1vZHVsZURlc2NyaXB0b3IuZ2V0Sm9iSWRzKHNwYWNlSWQsIHNvdXJjZUlkKTsKICB9LCBbbW9kdWxlRGVzY3JpcHRvciwgc3BhY2VJZCwgc291cmNlSWRdKTsKICByZXR1cm4gewogICAgY2xlYW5VcEFuZFNldFVwTW9kdWxlOiBjbGVhblVwQW5kU2V0VXBNb2R1bGUsCiAgICBjbGVhblVwTW9kdWxlOiBjbGVhblVwTW9kdWxlLAogICAgZmV0Y2hKb2JTdGF0dXM6IGZldGNoSm9iU3RhdHVzLAogICAgZmV0Y2hNb2R1bGVEZWZpbml0aW9uOiBmZXRjaE1vZHVsZURlZmluaXRpb24sCiAgICBpc0NsZWFuaW5nVXA6IGlzQ2xlYW5pbmdVcCwKICAgIGlzTG9hZGluZ01vZHVsZVN0YXR1czogaXNMb2FkaW5nTW9kdWxlU3RhdHVzLAogICAgam9iSWRzOiBqb2JJZHMsCiAgICBqb2JTdGF0dXM6IG1vZHVsZVN0YXR1cy5qb2JTdGF0dXMsCiAgICBsYXN0U2V0dXBFcnJvck1lc3NhZ2VzOiBtb2R1bGVTdGF0dXMubGFzdFNldHVwRXJyb3JNZXNzYWdlcywKICAgIG1vZHVsZURlc2NyaXB0b3I6IG1vZHVsZURlc2NyaXB0b3IsCiAgICBzZXRVcE1vZHVsZTogc2V0VXBNb2R1bGUsCiAgICBzZXR1cFN0YXR1czogbW9kdWxlU3RhdHVzLnNldHVwU3RhdHVzLAogICAgc291cmNlQ29uZmlndXJhdGlvbjogc291cmNlQ29uZmlndXJhdGlvbiwKICAgIHZpZXdSZXN1bHRzOiB2aWV3UmVzdWx0cywKICAgIHZpZXdTZXR1cEZvclJlY29uZmlndXJhdGlvbjogdmlld1NldHVwRm9yUmVjb25maWd1cmF0aW9uLAogICAgdmlld1NldHVwRm9yVXBkYXRlOiB2aWV3U2V0dXBGb3JVcGRhdGUKICB9Owp9OwoKZXhwb3J0cy51c2VMb2dBbmFseXNpc01vZHVsZSA9IHVzZUxvZ0FuYWx5c2lzTW9kdWxlOw=="},null]}