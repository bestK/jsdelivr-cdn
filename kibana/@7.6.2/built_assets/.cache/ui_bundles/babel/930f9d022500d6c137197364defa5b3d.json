{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/layers/styles/heatmap/components/legend/heatmap_legend.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/layers/styles/heatmap/components/legend/heatmap_legend.js","mtime":1585205045357},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkhlYXRtYXBMZWdlbmQgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9jb2xvcl9ncmFkaWVudCA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbXBvbmVudHMvY29sb3JfZ3JhZGllbnQiKTsKCnZhciBfcmFuZ2VkX3N0eWxlX2xlZ2VuZF9yb3cgPSByZXF1aXJlKCIuLi8uLi8uLi9jb21wb25lbnRzL3JhbmdlZF9zdHlsZV9sZWdlbmRfcm93Iik7Cgp2YXIgX2hlYXRtYXBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vaGVhdG1hcF9jb25zdGFudHMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9Cgp2YXIgSGVhdG1hcExlZ2VuZCA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHsKICBfaW5oZXJpdHMoSGVhdG1hcExlZ2VuZCwgX1JlYWN0JENvbXBvbmVudCk7CgogIGZ1bmN0aW9uIEhlYXRtYXBMZWdlbmQoKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhlYXRtYXBMZWdlbmQpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEhlYXRtYXBMZWdlbmQpLmNhbGwodGhpcykpOwogICAgX3RoaXMuc3RhdGUgPSB7CiAgICAgIGxhYmVsOiAnJwogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhIZWF0bWFwTGVnZW5kLCBbewogICAga2V5OiAiY29tcG9uZW50RGlkVXBkYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7CiAgICAgIHRoaXMuX2xvYWRMYWJlbCgpOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbXBvbmVudERpZE1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHsKICAgICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTsKCiAgICAgIHRoaXMuX2xvYWRMYWJlbCgpOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbXBvbmVudFdpbGxVbm1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHsKICAgICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2xvYWRMYWJlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2xvYWRMYWJlbCgpIHsKICAgICAgdmFyIGxhYmVsOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIF9sb2FkTGFiZWwkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAodGhpcy5wcm9wcy5maWVsZC5nZXRMYWJlbCgpKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBsYWJlbCA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIGlmICh0aGlzLl9pc01vdW50ZWQgJiYgdGhpcy5zdGF0ZS5sYWJlbCAhPT0gbGFiZWwpIHsKICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoewogICAgICAgICAgICAgICAgICBsYWJlbDogbGFiZWwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgbnVsbCwgdGhpcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBjb2xvclJhbXBOYW1lID0gdGhpcy5wcm9wcy5jb2xvclJhbXBOYW1lOwogICAgICB2YXIgaGVhZGVyID0gY29sb3JSYW1wTmFtZSA9PT0gX2hlYXRtYXBfY29uc3RhbnRzLkRFRkFVTFRfSEVBVE1BUF9DT0xPUl9SQU1QX05BTUUgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb2xvcl9ncmFkaWVudC5Db2xvckdyYWRpZW50LCB7CiAgICAgICAgY29sb3JSYW1wOiBfaGVhdG1hcF9jb25zdGFudHMuREVGQVVMVF9SR0JfSEVBVE1BUF9DT0xPUl9SQU1QCiAgICAgIH0pIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29sb3JfZ3JhZGllbnQuQ29sb3JHcmFkaWVudCwgewogICAgICAgIGNvbG9yUmFtcE5hbWU6IGNvbG9yUmFtcE5hbWUKICAgICAgfSk7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yYW5nZWRfc3R5bGVfbGVnZW5kX3Jvdy5SYW5nZWRTdHlsZUxlZ2VuZFJvdywgewogICAgICAgIGhlYWRlcjogaGVhZGVyLAogICAgICAgIG1pbkxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5oZWF0bWFwTGVnZW5kLmNvbGRMYWJlbCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnY29sZCcKICAgICAgICB9KSwKICAgICAgICBtYXhMYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMuaGVhdG1hcExlZ2VuZC5ob3RMYWJlbCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnaG90JwogICAgICAgIH0pLAogICAgICAgIHByb3BlcnR5TGFiZWw6IF9oZWF0bWFwX2NvbnN0YW50cy5IRUFUTUFQX0NPTE9SX1JBTVBfTEFCRUwsCiAgICAgICAgZmllbGRMYWJlbDogdGhpcy5zdGF0ZS5sYWJlbAogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBIZWF0bWFwTGVnZW5kOwp9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7CgpleHBvcnRzLkhlYXRtYXBMZWdlbmQgPSBIZWF0bWFwTGVnZW5kOw=="},null]}