{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/pages/detection_engine/components/signals/signals_utility_bar/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/pages/detection_engine/components/signals/signals_utility_bar/index.js","mtime":1585205047851},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlNpZ25hbHNVdGlsaXR5QmFyID0gdm9pZCAwOwoKdmFyIF9mcCA9IHJlcXVpcmUoImxvZGFzaC9mcCIpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9udW1lcmFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJAZWxhc3RpYy9udW1lcmFsIikpOwoKdmFyIF91dGlsaXR5X2JhciA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvZGV0ZWN0aW9uX2VuZ2luZS91dGlsaXR5X2JhciIpOwoKdmFyIGkxOG4gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCIuL3RyYW5zbGF0aW9ucyIpKTsKCnZhciBfa2liYW5hID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vbGliL2tpYmFuYSIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX3NpZ25hbHNfZmlsdGVyX2dyb3VwID0gcmVxdWlyZSgiLi4vc2lnbmFsc19maWx0ZXJfZ3JvdXAiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKdmFyIFNpZ25hbHNVdGlsaXR5QmFyQ29tcG9uZW50ID0gZnVuY3Rpb24gU2lnbmFsc1V0aWxpdHlCYXJDb21wb25lbnQoX3JlZikgewogIHZhciBjYW5Vc2VyQ1JVRCA9IF9yZWYuY2FuVXNlckNSVUQsCiAgICAgIGhhc0luZGV4V3JpdGUgPSBfcmVmLmhhc0luZGV4V3JpdGUsCiAgICAgIGFyZUV2ZW50c0xvYWRpbmcgPSBfcmVmLmFyZUV2ZW50c0xvYWRpbmcsCiAgICAgIGNsZWFyU2VsZWN0aW9uID0gX3JlZi5jbGVhclNlbGVjdGlvbiwKICAgICAgdG90YWxDb3VudCA9IF9yZWYudG90YWxDb3VudCwKICAgICAgc2VsZWN0ZWRFdmVudElkcyA9IF9yZWYuc2VsZWN0ZWRFdmVudElkcywKICAgICAgaXNGaWx0ZXJlZFRvT3BlbiA9IF9yZWYuaXNGaWx0ZXJlZFRvT3BlbiwKICAgICAgc2VsZWN0QWxsID0gX3JlZi5zZWxlY3RBbGwsCiAgICAgIHNob3dDbGVhclNlbGVjdGlvbiA9IF9yZWYuc2hvd0NsZWFyU2VsZWN0aW9uLAogICAgICB1cGRhdGVTaWduYWxzU3RhdHVzID0gX3JlZi51cGRhdGVTaWduYWxzU3RhdHVzOwoKICB2YXIgX3VzZVVpU2V0dGluZyQgPSAoMCwgX2tpYmFuYS51c2VVaVNldHRpbmckKShfY29uc3RhbnRzLkRFRkFVTFRfTlVNQkVSX0ZPUk1BVCksCiAgICAgIF91c2VVaVNldHRpbmckMiA9IF9zbGljZWRUb0FycmF5KF91c2VVaVNldHRpbmckLCAxKSwKICAgICAgZGVmYXVsdE51bWJlckZvcm1hdCA9IF91c2VVaVNldHRpbmckMlswXTsKCiAgdmFyIGhhbmRsZVVwZGF0ZVN0YXR1cyA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh1cGRhdGVTaWduYWxzU3RhdHVzKHsKICAgICAgICAgICAgICBzaWduYWxJZHM6IE9iamVjdC5rZXlzKHNlbGVjdGVkRXZlbnRJZHMpLAogICAgICAgICAgICAgIHN0YXR1czogaXNGaWx0ZXJlZFRvT3BlbiA/IF9zaWduYWxzX2ZpbHRlcl9ncm91cC5GSUxURVJfQ0xPU0VEIDogX3NpZ25hbHNfZmlsdGVyX2dyb3VwLkZJTFRFUl9PUEVOCiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfSwgW3NlbGVjdGVkRXZlbnRJZHMsIHVwZGF0ZVNpZ25hbHNTdGF0dXMsIGlzRmlsdGVyZWRUb09wZW5dKTsKICB2YXIgZm9ybWF0dGVkVG90YWxDb3VudCA9ICgwLCBfbnVtZXJhbC5kZWZhdWx0KSh0b3RhbENvdW50KS5mb3JtYXQoZGVmYXVsdE51bWJlckZvcm1hdCk7CiAgdmFyIGZvcm1hdHRlZFNlbGVjdGVkRXZlbnRzQ291bnQgPSAoMCwgX251bWVyYWwuZGVmYXVsdCkoT2JqZWN0LmtleXMoc2VsZWN0ZWRFdmVudElkcykubGVuZ3RoKS5mb3JtYXQoZGVmYXVsdE51bWJlckZvcm1hdCk7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3V0aWxpdHlfYmFyLlV0aWxpdHlCYXIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3V0aWxpdHlfYmFyLlV0aWxpdHlCYXJTZWN0aW9uLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF91dGlsaXR5X2Jhci5VdGlsaXR5QmFyR3JvdXAsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3V0aWxpdHlfYmFyLlV0aWxpdHlCYXJUZXh0LCBudWxsLCBpMThuLlNIT1dJTkdfU0lHTkFMUyhmb3JtYXR0ZWRUb3RhbENvdW50LCB0b3RhbENvdW50KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF91dGlsaXR5X2Jhci5VdGlsaXR5QmFyR3JvdXAsIG51bGwsIGNhblVzZXJDUlVEICYmIGhhc0luZGV4V3JpdGUgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfdXRpbGl0eV9iYXIuVXRpbGl0eUJhclRleHQsIG51bGwsIGkxOG4uU0VMRUNURURfU0lHTkFMUyhzaG93Q2xlYXJTZWxlY3Rpb24gPyBmb3JtYXR0ZWRUb3RhbENvdW50IDogZm9ybWF0dGVkU2VsZWN0ZWRFdmVudHNDb3VudCwgc2hvd0NsZWFyU2VsZWN0aW9uID8gdG90YWxDb3VudCA6IE9iamVjdC5rZXlzKHNlbGVjdGVkRXZlbnRJZHMpLmxlbmd0aCkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF91dGlsaXR5X2Jhci5VdGlsaXR5QmFyQWN0aW9uLCB7CiAgICBkaXNhYmxlZDogYXJlRXZlbnRzTG9hZGluZyB8fCAoMCwgX2ZwLmlzRW1wdHkpKHNlbGVjdGVkRXZlbnRJZHMpLAogICAgaWNvblR5cGU6IGlzRmlsdGVyZWRUb09wZW4gPyAnc2VjdXJpdHlTaWduYWxSZXNvbHZlZCcgOiAnc2VjdXJpdHlTaWduYWxEZXRlY3RlZCcsCiAgICBvbkNsaWNrOiBoYW5kbGVVcGRhdGVTdGF0dXMKICB9LCBpc0ZpbHRlcmVkVG9PcGVuID8gaTE4bi5CQVRDSF9BQ1RJT05fQ0xPU0VfU0VMRUNURUQgOiBpMThuLkJBVENIX0FDVElPTl9PUEVOX1NFTEVDVEVEKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfdXRpbGl0eV9iYXIuVXRpbGl0eUJhckFjdGlvbiwgewogICAgaWNvblR5cGU6IHNob3dDbGVhclNlbGVjdGlvbiA/ICdjcm9zcycgOiAncGFnZXNTZWxlY3QnLAogICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgaWYgKCFzaG93Q2xlYXJTZWxlY3Rpb24pIHsKICAgICAgICBzZWxlY3RBbGwoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjbGVhclNlbGVjdGlvbigpOwogICAgICB9CiAgICB9CiAgfSwgc2hvd0NsZWFyU2VsZWN0aW9uID8gaTE4bi5DTEVBUl9TRUxFQ1RJT04gOiBpMThuLlNFTEVDVF9BTExfU0lHTkFMUyhmb3JtYXR0ZWRUb3RhbENvdW50LCB0b3RhbENvdW50KSkpKSkpKTsKfTsKCnZhciBTaWduYWxzVXRpbGl0eUJhciA9IF9yZWFjdC5kZWZhdWx0Lm1lbW8oU2lnbmFsc1V0aWxpdHlCYXJDb21wb25lbnQsIGZ1bmN0aW9uIChwcmV2UHJvcHMsIG5leHRQcm9wcykgewogIHJldHVybiBwcmV2UHJvcHMuYXJlRXZlbnRzTG9hZGluZyA9PT0gbmV4dFByb3BzLmFyZUV2ZW50c0xvYWRpbmcgJiYgcHJldlByb3BzLnNlbGVjdGVkRXZlbnRJZHMgPT09IG5leHRQcm9wcy5zZWxlY3RlZEV2ZW50SWRzICYmIHByZXZQcm9wcy50b3RhbENvdW50ID09PSBuZXh0UHJvcHMudG90YWxDb3VudCAmJiBwcmV2UHJvcHMuc2hvd0NsZWFyU2VsZWN0aW9uID09PSBuZXh0UHJvcHMuc2hvd0NsZWFyU2VsZWN0aW9uOwp9KTsKCmV4cG9ydHMuU2lnbmFsc1V0aWxpdHlCYXIgPSBTaWduYWxzVXRpbGl0eUJhcjs="},null]}