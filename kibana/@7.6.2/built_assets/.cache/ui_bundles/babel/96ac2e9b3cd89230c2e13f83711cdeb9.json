{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/security/public/views/management/role_mappings/edit_role_mapping/components/rule_editor_panel/rule_group_editor.js","dependencies":[{"path":"x-pack/legacy/plugins/security/public/views/management/role_mappings/edit_role_mapping/components/rule_editor_panel/rule_group_editor.js","mtime":1585205047244},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuUnVsZUdyb3VwRWRpdG9yID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2FkZF9ydWxlX2J1dHRvbiA9IHJlcXVpcmUoIi4vYWRkX3J1bGVfYnV0dG9uIik7Cgp2YXIgX3J1bGVfZ3JvdXBfdGl0bGUgPSByZXF1aXJlKCIuL3J1bGVfZ3JvdXBfdGl0bGUiKTsKCnZhciBfZmllbGRfcnVsZV9lZGl0b3IgPSByZXF1aXJlKCIuL2ZpZWxkX3J1bGVfZWRpdG9yIik7Cgp2YXIgX2lzX3J1bGVfZ3JvdXAgPSByZXF1aXJlKCIuLi8uLi9zZXJ2aWNlcy9pc19ydWxlX2dyb3VwIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsKICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7CiAgICByZXR1cm4gY2FsbDsKICB9CgogIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOwp9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOwogIH07CiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsKfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7CiAgaWYgKHNlbGYgPT09IHZvaWQgMCkgewogICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsKICB9CgogIHJldHVybiBzZWxmOwp9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsKICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsKICB9CgogIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IHsKICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9CiAgfSk7CiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7Cn0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgICBvLl9fcHJvdG9fXyA9IHA7CiAgICByZXR1cm4gbzsKICB9OwoKICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIFJ1bGVHcm91cEVkaXRvciA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9Db21wb25lbnQpIHsKICBfaW5oZXJpdHMoUnVsZUdyb3VwRWRpdG9yLCBfQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gUnVsZUdyb3VwRWRpdG9yKCkgewogICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7CgogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSdWxlR3JvdXBFZGl0b3IpOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgfQoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoUnVsZUdyb3VwRWRpdG9yKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAicmVuZGVyU3ViUnVsZXMiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5ydWxlLmdldFJ1bGVzKCkubWFwKGZ1bmN0aW9uIChzdWJSdWxlLCBzdWJSdWxlSW5kZXgsIHJ1bGVzKSB7CiAgICAgICAgdmFyIGlzTGFzdFJ1bGUgPSBzdWJSdWxlSW5kZXggPT09IHJ1bGVzLmxlbmd0aCAtIDE7CiAgICAgICAgdmFyIGRpdmlkZXIgPSBpc0xhc3RSdWxlID8gbnVsbCA6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSG9yaXpvbnRhbFJ1bGUsIHsKICAgICAgICAgIG1hcmdpbjogIm0iCiAgICAgICAgfSkpOwoKICAgICAgICBpZiAoKDAsIF9pc19ydWxlX2dyb3VwLmlzUnVsZUdyb3VwKShzdWJSdWxlKSkgewogICAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCB7CiAgICAgICAgICAgIGtleTogc3ViUnVsZUluZGV4CiAgICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUnVsZUdyb3VwRWRpdG9yLCB7CiAgICAgICAgICAgIHJ1bGU6IHN1YlJ1bGUsCiAgICAgICAgICAgIHBhcmVudFJ1bGU6IF90aGlzLnByb3BzLnJ1bGUsCiAgICAgICAgICAgIGFsbG93QWRkOiBfdGhpcy5wcm9wcy5hbGxvd0FkZCwKICAgICAgICAgICAgcnVsZURlcHRoOiBfdGhpcy5wcm9wcy5ydWxlRGVwdGggKyAxLAogICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UodXBkYXRlZFN1YlJ1bGUpIHsKICAgICAgICAgICAgICB2YXIgdXBkYXRlZFJ1bGUgPSBfdGhpcy5wcm9wcy5ydWxlLmNsb25lKCk7CgogICAgICAgICAgICAgIHVwZGF0ZWRSdWxlLnJlcGxhY2VSdWxlKHN1YlJ1bGVJbmRleCwgdXBkYXRlZFN1YlJ1bGUpOwoKICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZSh1cGRhdGVkUnVsZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9uRGVsZXRlOiBmdW5jdGlvbiBvbkRlbGV0ZSgpIHsKICAgICAgICAgICAgICB2YXIgdXBkYXRlZFJ1bGUgPSBfdGhpcy5wcm9wcy5ydWxlLmNsb25lKCk7CgogICAgICAgICAgICAgIHVwZGF0ZWRSdWxlLnJlbW92ZVJ1bGUoc3ViUnVsZUluZGV4KTsKCiAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UodXBkYXRlZFJ1bGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KSksIGRpdmlkZXIpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCB7CiAgICAgICAgICBrZXk6IHN1YlJ1bGVJbmRleAogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZmllbGRfcnVsZV9lZGl0b3IuRmllbGRSdWxlRWRpdG9yLCB7CiAgICAgICAgICBydWxlOiBzdWJSdWxlLAogICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKHVwZGF0ZWRTdWJSdWxlKSB7CiAgICAgICAgICAgIHZhciB1cGRhdGVkUnVsZSA9IF90aGlzLnByb3BzLnJ1bGUuY2xvbmUoKTsKCiAgICAgICAgICAgIHVwZGF0ZWRSdWxlLnJlcGxhY2VSdWxlKHN1YlJ1bGVJbmRleCwgdXBkYXRlZFN1YlJ1bGUpOwoKICAgICAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UodXBkYXRlZFJ1bGUpOwogICAgICAgICAgfSwKICAgICAgICAgIG9uRGVsZXRlOiBmdW5jdGlvbiBvbkRlbGV0ZSgpIHsKICAgICAgICAgICAgdmFyIHVwZGF0ZWRSdWxlID0gX3RoaXMucHJvcHMucnVsZS5jbG9uZSgpOwoKICAgICAgICAgICAgdXBkYXRlZFJ1bGUucmVtb3ZlUnVsZShzdWJSdWxlSW5kZXgpOwoKICAgICAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UodXBkYXRlZFJ1bGUpOwogICAgICAgICAgfQogICAgICAgIH0pKSwgZGl2aWRlcik7CiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25BZGRSdWxlQ2xpY2siLCBmdW5jdGlvbiAobmV3UnVsZSkgewogICAgICB2YXIgdXBkYXRlZFJ1bGUgPSBfdGhpcy5wcm9wcy5ydWxlLmNsb25lKCk7CgogICAgICB1cGRhdGVkUnVsZS5hZGRSdWxlKG5ld1J1bGUpOwoKICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UodXBkYXRlZFJ1bGUpOwogICAgfSk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFJ1bGVHcm91cEVkaXRvciwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhbmVsLCB7CiAgICAgICAgY2xhc3NOYW1lOiAic2VjUm9sZU1hcHBpbmdfX3J1bGVFZGl0b3JHcm91cC0tIi5jb25jYXQodGhpcy5wcm9wcy5ydWxlRGVwdGggJSAyID8gJ29kZCcgOiAnZXZlbicpCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgICBkaXJlY3Rpb246ICJjb2x1bW4iCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IHRydWUKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcnVsZV9ncm91cF90aXRsZS5SdWxlR3JvdXBUaXRsZSwgewogICAgICAgIHJ1bGU6IHRoaXMucHJvcHMucnVsZSwKICAgICAgICBvbkNoYW5nZTogdGhpcy5wcm9wcy5vbkNoYW5nZSwKICAgICAgICBwYXJlbnRSdWxlOiB0aGlzLnByb3BzLnBhcmVudFJ1bGUKICAgICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uRW1wdHksIHsKICAgICAgICBjb2xvcjogImRhbmdlciIsCiAgICAgICAgb25DbGljazogdGhpcy5wcm9wcy5vbkRlbGV0ZSwKICAgICAgICBzaXplOiAicyIsCiAgICAgICAgaWNvblR5cGU6ICJ0cmFzaCIsCiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogImRlbGV0ZVJ1bGVHcm91cEJ1dHRvbiIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLnNlY3VyaXR5Lm1hbmFnZW1lbnQuZWRpdFJvbGVNYXBwaW5nLmRlbGV0ZVJ1bGVHcm91cEJ1dHRvbiIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJEZWxldGUiCiAgICAgIH0pKSkpKSwgdGhpcy5yZW5kZXJTdWJSdWxlcygpLCB0aGlzLnByb3BzLmFsbG93QWRkICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfYWRkX3J1bGVfYnV0dG9uLkFkZFJ1bGVCdXR0b24sIHsKICAgICAgICBvbkNsaWNrOiB0aGlzLm9uQWRkUnVsZUNsaWNrCiAgICAgIH0pKSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFJ1bGVHcm91cEVkaXRvcjsKfShfcmVhY3QuQ29tcG9uZW50KTsKCmV4cG9ydHMuUnVsZUdyb3VwRWRpdG9yID0gUnVsZUdyb3VwRWRpdG9yOw=="},null]}