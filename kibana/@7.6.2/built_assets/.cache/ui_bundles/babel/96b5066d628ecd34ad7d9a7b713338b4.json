{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/data_frame_analytics/pages/analytics_management/components/create_analytics_advanced_editor/create_analytics_advanced_editor.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/data_frame_analytics/pages/analytics_management/components/create_analytics_advanced_editor/create_analytics_advanced_editor.js","mtime":1585205045581},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkNyZWF0ZUFuYWx5dGljc0FkdmFuY2VkRWRpdG9yID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgYXJyMltpXSA9IGFycltpXTsKICAgIH0KCiAgICByZXR1cm4gYXJyMjsKICB9Cn0KCnZhciBDcmVhdGVBbmFseXRpY3NBZHZhbmNlZEVkaXRvciA9IGZ1bmN0aW9uIENyZWF0ZUFuYWx5dGljc0FkdmFuY2VkRWRpdG9yKF9yZWYpIHsKICB2YXIgYWN0aW9ucyA9IF9yZWYuYWN0aW9ucywKICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlOwogIHZhciByZXNldEFkdmFuY2VkRWRpdG9yTWVzc2FnZXMgPSBhY3Rpb25zLnJlc2V0QWR2YW5jZWRFZGl0b3JNZXNzYWdlcywKICAgICAgc2V0QWR2YW5jZWRFZGl0b3JSYXdTdHJpbmcgPSBhY3Rpb25zLnNldEFkdmFuY2VkRWRpdG9yUmF3U3RyaW5nLAogICAgICBzZXRGb3JtU3RhdGUgPSBhY3Rpb25zLnNldEZvcm1TdGF0ZSwKICAgICAgc2V0Sm9iQ29uZmlnID0gYWN0aW9ucy5zZXRKb2JDb25maWc7CiAgdmFyIGFkdmFuY2VkRWRpdG9yTWVzc2FnZXMgPSBzdGF0ZS5hZHZhbmNlZEVkaXRvck1lc3NhZ2VzLAogICAgICBhZHZhbmNlZEVkaXRvclJhd1N0cmluZyA9IHN0YXRlLmFkdmFuY2VkRWRpdG9yUmF3U3RyaW5nLAogICAgICBpc0pvYkNyZWF0ZWQgPSBzdGF0ZS5pc0pvYkNyZWF0ZWQsCiAgICAgIHJlcXVlc3RNZXNzYWdlcyA9IHN0YXRlLnJlcXVlc3RNZXNzYWdlczsKICB2YXIgX3N0YXRlJGZvcm0gPSBzdGF0ZS5mb3JtLAogICAgICBjcmVhdGVJbmRleFBhdHRlcm4gPSBfc3RhdGUkZm9ybS5jcmVhdGVJbmRleFBhdHRlcm4sCiAgICAgIGRlc3RpbmF0aW9uSW5kZXhQYXR0ZXJuVGl0bGVFeGlzdHMgPSBfc3RhdGUkZm9ybS5kZXN0aW5hdGlvbkluZGV4UGF0dGVyblRpdGxlRXhpc3RzLAogICAgICBqb2JJZCA9IF9zdGF0ZSRmb3JtLmpvYklkLAogICAgICBqb2JJZEVtcHR5ID0gX3N0YXRlJGZvcm0uam9iSWRFbXB0eSwKICAgICAgam9iSWRFeGlzdHMgPSBfc3RhdGUkZm9ybS5qb2JJZEV4aXN0cywKICAgICAgam9iSWRWYWxpZCA9IF9zdGF0ZSRmb3JtLmpvYklkVmFsaWQ7CgogIHZhciBvbkNoYW5nZSA9IGZ1bmN0aW9uIG9uQ2hhbmdlKHN0cikgewogICAgc2V0QWR2YW5jZWRFZGl0b3JSYXdTdHJpbmcoc3RyKTsKCiAgICB0cnkgewogICAgICBzZXRKb2JDb25maWcoSlNPTi5wYXJzZShzdHIpKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgcmVzZXRBZHZhbmNlZEVkaXRvck1lc3NhZ2VzKCk7CiAgICB9CiAgfTsKCiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtLCB7CiAgICBjbGFzc05hbWU6ICJtbERhdGFGcmFtZUFuYWx5dGljc0NyZWF0ZUZvcm0iCiAgfSwgcmVxdWVzdE1lc3NhZ2VzLm1hcChmdW5jdGlvbiAocmVxdWVzdE1lc3NhZ2UsIGkpIHsKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgewogICAgICBrZXk6IGkKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDYWxsT3V0LCB7CiAgICAgIHRpdGxlOiByZXF1ZXN0TWVzc2FnZS5tZXNzYWdlLAogICAgICBjb2xvcjogcmVxdWVzdE1lc3NhZ2UuZXJyb3IgIT09IHVuZGVmaW5lZCA/ICdkYW5nZXInIDogJ3ByaW1hcnknLAogICAgICBpY29uVHlwZTogcmVxdWVzdE1lc3NhZ2UuZXJyb3IgIT09IHVuZGVmaW5lZCA/ICdhbGVydCcgOiAnY2hlY2tJbkNpcmNsZUZpbGxlZCcsCiAgICAgIHNpemU6ICJzIgogICAgfSwgcmVxdWVzdE1lc3NhZ2UuZXJyb3IgIT09IHVuZGVmaW5lZCA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCByZXF1ZXN0TWVzc2FnZS5lcnJvcikgOiBudWxsKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICBzaXplOiAicyIKICAgIH0pKTsKICB9KSwgIWlzSm9iQ3JlYXRlZCAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWwuZGF0YWZyYW1lLmFuYWx5dGljcy5jcmVhdGUuYWR2YW5jZWRFZGl0b3Iuam9iSWRMYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdBbmFseXRpY3Mgam9iIElEJwogICAgfSksCiAgICBpc0ludmFsaWQ6ICFqb2JJZEVtcHR5ICYmICFqb2JJZFZhbGlkIHx8IGpvYklkRXhpc3RzLAogICAgZXJyb3I6IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoIWpvYklkRW1wdHkgJiYgIWpvYklkVmFsaWQgPyBbX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1sLmRhdGFmcmFtZS5hbmFseXRpY3MuY3JlYXRlLmFkdmFuY2VkRWRpdG9yLmpvYklkSW52YWxpZEVycm9yJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ011c3QgY29udGFpbiBsb3dlcmNhc2UgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgKGEteiBhbmQgMC05KSwgaHlwaGVucywgYW5kIHVuZGVyc2NvcmVzIG9ubHkgYW5kIG11c3Qgc3RhcnQgYW5kIGVuZCB3aXRoIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLicKICAgIH0pXSA6IFtdKSwgX3RvQ29uc3VtYWJsZUFycmF5KGpvYklkRXhpc3RzID8gW19pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tbC5kYXRhZnJhbWUuYW5hbHl0aWNzLmNyZWF0ZS5hZHZhbmNlZEVkaXRvci5qb2JJZEV4aXN0c0Vycm9yJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0FuIGFuYWx5dGljcyBqb2Igd2l0aCB0aGlzIElEIGFscmVhZHkgZXhpc3RzLicKICAgIH0pXSA6IFtdKSkKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmllbGRUZXh0LCB7CiAgICBkaXNhYmxlZDogaXNKb2JDcmVhdGVkLAogICAgcGxhY2Vob2xkZXI6ICJhbmFseXRpY3Mgam9iIElEIiwKICAgIHZhbHVlOiBqb2JJZCwKICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7CiAgICAgIHJldHVybiBzZXRGb3JtU3RhdGUoewogICAgICAgIGpvYklkOiBlLnRhcmdldC52YWx1ZQogICAgICB9KTsKICAgIH0sCiAgICAiYXJpYS1sYWJlbCI6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tbC5kYXRhZnJhbWUuYW5hbHl0aWNzLmNyZWF0ZS5hZHZhbmNlZEVkaXRvci5qb2JJZElucHV0QXJpYUxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0Nob29zZSBhIHVuaXF1ZSBhbmFseXRpY3Mgam9iIElELicKICAgIH0pLAogICAgaXNJbnZhbGlkOiAham9iSWRFbXB0eSAmJiAham9iSWRWYWxpZCB8fCBqb2JJZEV4aXN0cwogIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWwuZGF0YWZyYW1lLmFuYWx5dGljcy5jcmVhdGUuYWR2YW5jZWRFZGl0b3IuY29uZmlnUmVxdWVzdEJvZHknLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ29uZmlndXJhdGlvbiByZXF1ZXN0IGJvZHknCiAgICB9KSwKICAgIHN0eWxlOiB7CiAgICAgIG1heFdpZHRoOiAnMTAwJScKICAgIH0KICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ29kZUVkaXRvciwgewogICAgbW9kZTogImpzb24iLAogICAgd2lkdGg6ICIxMDAlIiwKICAgIHZhbHVlOiBhZHZhbmNlZEVkaXRvclJhd1N0cmluZywKICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSwKICAgIHNldE9wdGlvbnM6IHsKICAgICAgZm9udFNpemU6ICcxMnB4JywKICAgICAgbWF4TGluZXM6IDIwCiAgICB9LAogICAgdGhlbWU6ICJ0ZXh0bWF0ZSIsCiAgICAiYXJpYS1sYWJlbCI6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tbC5kYXRhZnJhbWUuYW5hbHl0aWNzLmNyZWF0ZS5hZHZhbmNlZEVkaXRvci5jb2RlRWRpdG9yQXJpYUxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0FkdmFuY2VkIGFuYWx5dGljcyBqb2IgZWRpdG9yJwogICAgfSkKICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIG51bGwpLCBhZHZhbmNlZEVkaXRvck1lc3NhZ2VzLm1hcChmdW5jdGlvbiAoYWR2YW5jZWRFZGl0b3JNZXNzYWdlLCBpKSB7CiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIHsKICAgICAga2V5OiBpCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ2FsbE91dCwgewogICAgICB0aXRsZTogYWR2YW5jZWRFZGl0b3JNZXNzYWdlLm1lc3NhZ2UgIT09ICcnID8gYWR2YW5jZWRFZGl0b3JNZXNzYWdlLm1lc3NhZ2UgOiBhZHZhbmNlZEVkaXRvck1lc3NhZ2UuZXJyb3IsCiAgICAgIGNvbG9yOiBhZHZhbmNlZEVkaXRvck1lc3NhZ2UuZXJyb3IgIT09IHVuZGVmaW5lZCA/ICdkYW5nZXInIDogJ3ByaW1hcnknLAogICAgICBpY29uVHlwZTogYWR2YW5jZWRFZGl0b3JNZXNzYWdlLmVycm9yICE9PSB1bmRlZmluZWQgPyAnYWxlcnQnIDogJ2NoZWNrSW5DaXJjbGVGaWxsZWQnLAogICAgICBzaXplOiAicyIKICAgIH0sIGFkdmFuY2VkRWRpdG9yTWVzc2FnZS5tZXNzYWdlICE9PSAnJyAmJiBhZHZhbmNlZEVkaXRvck1lc3NhZ2UuZXJyb3IgIT09IHVuZGVmaW5lZCA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCBhZHZhbmNlZEVkaXRvck1lc3NhZ2UuZXJyb3IpIDogbnVsbCksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIG51bGwpKTsKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgIGlzSW52YWxpZDogY3JlYXRlSW5kZXhQYXR0ZXJuICYmIGRlc3RpbmF0aW9uSW5kZXhQYXR0ZXJuVGl0bGVFeGlzdHMsCiAgICBlcnJvcjogY3JlYXRlSW5kZXhQYXR0ZXJuICYmIGRlc3RpbmF0aW9uSW5kZXhQYXR0ZXJuVGl0bGVFeGlzdHMgJiYgW19pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tbC5kYXRhZnJhbWUuYW5hbHl0aWNzLmNyZWF0ZS5pbmRleFBhdHRlcm5BbHJlYWR5RXhpc3RzRXJyb3InLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQW4gaW5kZXggcGF0dGVybiB3aXRoIHRoaXMgdGl0bGUgYWxyZWFkeSBleGlzdHMuJwogICAgfSldCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVN3aXRjaCwgewogICAgZGlzYWJsZWQ6IGlzSm9iQ3JlYXRlZCwKICAgIG5hbWU6ICJtbERhdGFGcmFtZUFuYWx5dGljc0NyZWF0ZUluZGV4UGF0dGVybiIsCiAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1sLmRhdGFmcmFtZS5hbmFseXRpY3MuY3JlYXRlLmNyZWF0ZUluZGV4UGF0dGVybkxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0NyZWF0ZSBpbmRleCBwYXR0ZXJuJwogICAgfSksCiAgICBjaGVja2VkOiBjcmVhdGVJbmRleFBhdHRlcm4gPT09IHRydWUsCiAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoKSB7CiAgICAgIHJldHVybiBzZXRGb3JtU3RhdGUoewogICAgICAgIGNyZWF0ZUluZGV4UGF0dGVybjogIWNyZWF0ZUluZGV4UGF0dGVybgogICAgICB9KTsKICAgIH0KICB9KSkpKTsKfTsKCmV4cG9ydHMuQ3JlYXRlQW5hbHl0aWNzQWR2YW5jZWRFZGl0b3IgPSBDcmVhdGVBbmFseXRpY3NBZHZhbmNlZEVkaXRvcjs="},null]}