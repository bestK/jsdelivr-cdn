{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/services/forecast_service.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/services/forecast_service.js","mtime":1585205045948},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLm1sRm9yZWNhc3RTZXJ2aWNlID0gdm9pZCAwOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfb3BlcmF0b3JzID0gcmVxdWlyZSgicnhqcy9vcGVyYXRvcnMiKTsKCnZhciBfaW5kZXhfcGF0dGVybnMgPSByZXF1aXJlKCIuLi8uLi8uLi9jb21tb24vY29uc3RhbnRzL2luZGV4X3BhdHRlcm5zIik7Cgp2YXIgX21sX2FwaV9zZXJ2aWNlID0gcmVxdWlyZSgiLi9tbF9hcGlfc2VydmljZSIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CgovLyBHZXRzIGEgYmFzaWMgc3VtbWFyeSBvZiB0aGUgbW9zdCByZWNlbnRseSBydW4gZm9yZWNhc3RzIGZvciB0aGUgc3BlY2lmaWVkCi8vIGpvYiwgd2l0aCByZXN1bHRzIGF0IG9yIGxhdGVyIHRoYW4gdGhlIHN1cHBsaWVkIHRpbWVzdGFtcC4KLy8gRXh0cmEgcXVlcnkgb2JqZWN0IGNhbiBiZSBzdXBwbGllZCwgb3IgcGFzcyBudWxsIGlmIG5vIGFkZGl0aW9uYWwgcXVlcnkuCi8vIFJldHVybmVkIHJlc3BvbnNlIGNvbnRhaW5zIGEgZm9yZWNhc3RzIHByb3BlcnR5LCB3aGljaCBpcyBhbiBhcnJheSBvZiBvYmplY3RzCi8vIGNvbnRhaW5pbmcgaWQsIGVhcmxpZXN0IGFuZCBsYXRlc3Qga2V5cy4KZnVuY3Rpb24gZ2V0Rm9yZWNhc3RzU3VtbWFyeShqb2IsIHF1ZXJ5LCBlYXJsaWVzdE1zLCBtYXhSZXN1bHRzKSB7CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIHZhciBvYmogPSB7CiAgICAgIHN1Y2Nlc3M6IHRydWUsCiAgICAgIGZvcmVjYXN0czogW10KICAgIH07IC8vIEJ1aWxkIHRoZSBjcml0ZXJpYSB0byB1c2UgaW4gdGhlIGJvb2wgZmlsdGVyIHBhcnQgb2YgdGhlIHJlcXVlc3QuCiAgICAvLyBBZGQgY3JpdGVyaWEgZm9yIHRoZSBqb2IgSUQsIHJlc3VsdCB0eXBlIGFuZCBlYXJsaWVzdCB0aW1lLCBwbHVzCiAgICAvLyB0aGUgYWRkaXRpb25hbCBxdWVyeSBpZiBzdXBwbGllZC4KCiAgICB2YXIgZmlsdGVyQ3JpdGVyaWEgPSBbewogICAgICB0ZXJtOiB7CiAgICAgICAgcmVzdWx0X3R5cGU6ICdtb2RlbF9mb3JlY2FzdF9yZXF1ZXN0X3N0YXRzJwogICAgICB9CiAgICB9LCB7CiAgICAgIHRlcm06IHsKICAgICAgICBqb2JfaWQ6IGpvYi5qb2JfaWQKICAgICAgfQogICAgfSwgewogICAgICByYW5nZTogewogICAgICAgIHRpbWVzdGFtcDogewogICAgICAgICAgZ3RlOiBlYXJsaWVzdE1zLAogICAgICAgICAgZm9ybWF0OiAnZXBvY2hfbWlsbGlzJwogICAgICAgIH0KICAgICAgfQogICAgfV07CgogICAgaWYgKHF1ZXJ5KSB7CiAgICAgIGZpbHRlckNyaXRlcmlhLnB1c2gocXVlcnkpOwogICAgfQoKICAgIF9tbF9hcGlfc2VydmljZS5tbC5lc1NlYXJjaCh7CiAgICAgIGluZGV4OiBfaW5kZXhfcGF0dGVybnMuTUxfUkVTVUxUU19JTkRFWF9QQVRURVJOLAogICAgICBzaXplOiBtYXhSZXN1bHRzLAogICAgICByZXN0X3RvdGFsX2hpdHNfYXNfaW50OiB0cnVlLAogICAgICBib2R5OiB7CiAgICAgICAgcXVlcnk6IHsKICAgICAgICAgIGJvb2w6IHsKICAgICAgICAgICAgZmlsdGVyOiBmaWx0ZXJDcml0ZXJpYQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc29ydDogW3sKICAgICAgICAgIGZvcmVjYXN0X2NyZWF0ZV90aW1lc3RhbXA6IHsKICAgICAgICAgICAgb3JkZXI6ICdkZXNjJwogICAgICAgICAgfQogICAgICAgIH1dCiAgICAgIH0KICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgaWYgKHJlc3AuaGl0cy50b3RhbCAhPT0gMCkgewogICAgICAgIG9iai5mb3JlY2FzdHMgPSByZXNwLmhpdHMuaGl0cy5tYXAoZnVuY3Rpb24gKGhpdCkgewogICAgICAgICAgcmV0dXJuIGhpdC5fc291cmNlOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXNvbHZlKG9iaik7CiAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVzcCkgewogICAgICByZWplY3QocmVzcCk7CiAgICB9KTsKICB9KTsKfSAvLyBPYnRhaW5zIHRoZSBlYXJsaWVzdCBhbmQgbGF0ZXN0IHRpbWVzdGFtcHMgZm9yIHRoZSBmb3JlY2FzdCBkYXRhIGZyb20KLy8gdGhlIGZvcmVjYXN0IHdpdGggdGhlIHNwZWNpZmllZCBJRC4KLy8gUmV0dXJuZWQgcmVzcG9uc2UgY29udGFpbnMgZWFybGllc3QgYW5kIGxhdGVzdCBwcm9wZXJ0aWVzIHdoaWNoIGFyZSB0aGUKLy8gdGltZXN0YW1wcyBvZiB0aGUgZmlyc3QgYW5kIGxhc3QgbW9kZWxfZm9yZWNhc3QgcmVzdWx0cy4KCgpmdW5jdGlvbiBnZXRGb3JlY2FzdERhdGVSYW5nZShqb2IsIGZvcmVjYXN0SWQpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgdmFyIG9iaiA9IHsKICAgICAgc3VjY2VzczogdHJ1ZSwKICAgICAgZWFybGllc3Q6IG51bGwsCiAgICAgIGxhdGVzdDogbnVsbAogICAgfTsgLy8gQnVpbGQgdGhlIGNyaXRlcmlhIHRvIHVzZSBpbiB0aGUgYm9vbCBmaWx0ZXIgcGFydCBvZiB0aGUgcmVxdWVzdC4KICAgIC8vIEFkZCBjcml0ZXJpYSBmb3IgdGhlIGpvYiBJRCwgZm9yZWNhc3QgSUQsIHJlc3VsdCB0eXBlIGFuZCB0aW1lIHJhbmdlLgoKICAgIHZhciBmaWx0ZXJDcml0ZXJpYSA9IFt7CiAgICAgIHF1ZXJ5X3N0cmluZzogewogICAgICAgIHF1ZXJ5OiAncmVzdWx0X3R5cGU6bW9kZWxfZm9yZWNhc3QnLAogICAgICAgIGFuYWx5emVfd2lsZGNhcmQ6IHRydWUKICAgICAgfQogICAgfSwgewogICAgICB0ZXJtOiB7CiAgICAgICAgam9iX2lkOiBqb2Iuam9iX2lkCiAgICAgIH0KICAgIH0sIHsKICAgICAgdGVybTogewogICAgICAgIGZvcmVjYXN0X2lkOiBmb3JlY2FzdElkCiAgICAgIH0KICAgIH1dOyAvLyBUT0RPIC0gYWRkIGluIGNyaXRlcmlhIGZvciBkZXRlY3RvciBpbmRleCBhbmQgZW50aXR5IGZpZWxkcyAoYnksIG92ZXIsIHBhcnRpdGlvbikKICAgIC8vIG9uY2UgZm9yZWNhc3Rpbmcgd2l0aCB0aGVzZSBwYXJhbWV0ZXJzIGlzIHN1cHBvcnRlZC4KCiAgICBfbWxfYXBpX3NlcnZpY2UubWwuZXNTZWFyY2goewogICAgICBpbmRleDogX2luZGV4X3BhdHRlcm5zLk1MX1JFU1VMVFNfSU5ERVhfUEFUVEVSTiwKICAgICAgc2l6ZTogMCwKICAgICAgYm9keTogewogICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICBib29sOiB7CiAgICAgICAgICAgIGZpbHRlcjogZmlsdGVyQ3JpdGVyaWEKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGFnZ3M6IHsKICAgICAgICAgIGVhcmxpZXN0OiB7CiAgICAgICAgICAgIG1pbjogewogICAgICAgICAgICAgIGZpZWxkOiAndGltZXN0YW1wJwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgbGF0ZXN0OiB7CiAgICAgICAgICAgIG1heDogewogICAgICAgICAgICAgIGZpZWxkOiAndGltZXN0YW1wJwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7CiAgICAgIG9iai5lYXJsaWVzdCA9IF9sb2Rhc2guZGVmYXVsdC5nZXQocmVzcCwgJ2FnZ3JlZ2F0aW9ucy5lYXJsaWVzdC52YWx1ZScsIG51bGwpOwogICAgICBvYmoubGF0ZXN0ID0gX2xvZGFzaC5kZWZhdWx0LmdldChyZXNwLCAnYWdncmVnYXRpb25zLmxhdGVzdC52YWx1ZScsIG51bGwpOwoKICAgICAgaWYgKG9iai5lYXJsaWVzdCA9PT0gbnVsbCB8fCBvYmoubGF0ZXN0ID09PSBudWxsKSB7CiAgICAgICAgcmVqZWN0KHJlc3ApOwogICAgICB9IGVsc2UgewogICAgICAgIHJlc29sdmUob2JqKTsKICAgICAgfQogICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgcmVqZWN0KHJlc3ApOwogICAgfSk7CiAgfSk7Cn0gLy8gT2J0YWlucyB0aGUgcmVxdWVzdGVkIGZvcmVjYXN0IG1vZGVsIGRhdGEgZm9yIHRoZSBmb3JlY2FzdCB3aXRoIHRoZSBzcGVjaWZpZWQgSUQuCgoKZnVuY3Rpb24gZ2V0Rm9yZWNhc3REYXRhKGpvYiwgZGV0ZWN0b3JJbmRleCwgZm9yZWNhc3RJZCwgZW50aXR5RmllbGRzLCBlYXJsaWVzdE1zLCBsYXRlc3RNcywgaW50ZXJ2YWwsIGFnZ1R5cGUpIHsKICAvLyBFeHRyYWN0IHRoZSBwYXJ0aXRpb24sIGJ5LCBvdmVyIGZpZWxkcyBvbiB3aGljaCB0byBmaWx0ZXIuCiAgdmFyIGNyaXRlcmlhRmllbGRzID0gW107CiAgdmFyIGRldGVjdG9yID0gam9iLmFuYWx5c2lzX2NvbmZpZy5kZXRlY3RvcnNbZGV0ZWN0b3JJbmRleF07CgogIGlmIChfbG9kYXNoLmRlZmF1bHQuaGFzKGRldGVjdG9yLCAncGFydGl0aW9uX2ZpZWxkX25hbWUnKSkgewogICAgdmFyIHBhcnRpdGlvbkVudGl0eSA9IF9sb2Rhc2guZGVmYXVsdC5maW5kKGVudGl0eUZpZWxkcywgewogICAgICBmaWVsZE5hbWU6IGRldGVjdG9yLnBhcnRpdGlvbl9maWVsZF9uYW1lCiAgICB9KTsKCiAgICBpZiAocGFydGl0aW9uRW50aXR5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgY3JpdGVyaWFGaWVsZHMucHVzaCh7CiAgICAgICAgZmllbGROYW1lOiAncGFydGl0aW9uX2ZpZWxkX25hbWUnLAogICAgICAgIGZpZWxkVmFsdWU6IHBhcnRpdGlvbkVudGl0eS5maWVsZE5hbWUKICAgICAgfSwgewogICAgICAgIGZpZWxkTmFtZTogJ3BhcnRpdGlvbl9maWVsZF92YWx1ZScsCiAgICAgICAgZmllbGRWYWx1ZTogcGFydGl0aW9uRW50aXR5LmZpZWxkVmFsdWUKICAgICAgfSk7CiAgICB9CiAgfQoKICBpZiAoX2xvZGFzaC5kZWZhdWx0LmhhcyhkZXRlY3RvciwgJ292ZXJfZmllbGRfbmFtZScpKSB7CiAgICB2YXIgb3ZlckVudGl0eSA9IF9sb2Rhc2guZGVmYXVsdC5maW5kKGVudGl0eUZpZWxkcywgewogICAgICBmaWVsZE5hbWU6IGRldGVjdG9yLm92ZXJfZmllbGRfbmFtZQogICAgfSk7CgogICAgaWYgKG92ZXJFbnRpdHkgIT09IHVuZGVmaW5lZCkgewogICAgICBjcml0ZXJpYUZpZWxkcy5wdXNoKHsKICAgICAgICBmaWVsZE5hbWU6ICdvdmVyX2ZpZWxkX25hbWUnLAogICAgICAgIGZpZWxkVmFsdWU6IG92ZXJFbnRpdHkuZmllbGROYW1lCiAgICAgIH0sIHsKICAgICAgICBmaWVsZE5hbWU6ICdvdmVyX2ZpZWxkX3ZhbHVlJywKICAgICAgICBmaWVsZFZhbHVlOiBvdmVyRW50aXR5LmZpZWxkVmFsdWUKICAgICAgfSk7CiAgICB9CiAgfQoKICBpZiAoX2xvZGFzaC5kZWZhdWx0LmhhcyhkZXRlY3RvciwgJ2J5X2ZpZWxkX25hbWUnKSkgewogICAgdmFyIGJ5RW50aXR5ID0gX2xvZGFzaC5kZWZhdWx0LmZpbmQoZW50aXR5RmllbGRzLCB7CiAgICAgIGZpZWxkTmFtZTogZGV0ZWN0b3IuYnlfZmllbGRfbmFtZQogICAgfSk7CgogICAgaWYgKGJ5RW50aXR5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgY3JpdGVyaWFGaWVsZHMucHVzaCh7CiAgICAgICAgZmllbGROYW1lOiAnYnlfZmllbGRfbmFtZScsCiAgICAgICAgZmllbGRWYWx1ZTogYnlFbnRpdHkuZmllbGROYW1lCiAgICAgIH0sIHsKICAgICAgICBmaWVsZE5hbWU6ICdieV9maWVsZF92YWx1ZScsCiAgICAgICAgZmllbGRWYWx1ZTogYnlFbnRpdHkuZmllbGRWYWx1ZQogICAgICB9KTsKICAgIH0KICB9CgogIHZhciBvYmogPSB7CiAgICBzdWNjZXNzOiB0cnVlLAogICAgcmVzdWx0czoge30KICB9OyAvLyBCdWlsZCB0aGUgY3JpdGVyaWEgdG8gdXNlIGluIHRoZSBib29sIGZpbHRlciBwYXJ0IG9mIHRoZSByZXF1ZXN0LgogIC8vIEFkZCBjcml0ZXJpYSBmb3IgdGhlIGpvYiBJRCwgZm9yZWNhc3QgSUQsIGRldGVjdG9yIGluZGV4LCByZXN1bHQgdHlwZSBhbmQgdGltZSByYW5nZS4KCiAgdmFyIGZpbHRlckNyaXRlcmlhID0gW3sKICAgIHF1ZXJ5X3N0cmluZzogewogICAgICBxdWVyeTogJ3Jlc3VsdF90eXBlOm1vZGVsX2ZvcmVjYXN0JywKICAgICAgYW5hbHl6ZV93aWxkY2FyZDogdHJ1ZQogICAgfQogIH0sIHsKICAgIHRlcm06IHsKICAgICAgam9iX2lkOiBqb2Iuam9iX2lkCiAgICB9CiAgfSwgewogICAgdGVybTogewogICAgICBmb3JlY2FzdF9pZDogZm9yZWNhc3RJZAogICAgfQogIH0sIHsKICAgIHRlcm06IHsKICAgICAgZGV0ZWN0b3JfaW5kZXg6IGRldGVjdG9ySW5kZXgKICAgIH0KICB9LCB7CiAgICByYW5nZTogewogICAgICB0aW1lc3RhbXA6IHsKICAgICAgICBndGU6IGVhcmxpZXN0TXMsCiAgICAgICAgbHRlOiBsYXRlc3RNcywKICAgICAgICBmb3JtYXQ6ICdlcG9jaF9taWxsaXMnCiAgICAgIH0KICAgIH0KICB9XTsgLy8gQWRkIGluIHRlcm0gcXVlcmllcyBmb3IgZWFjaCBvZiB0aGUgc3BlY2lmaWVkIGNyaXRlcmlhLgoKICBfbG9kYXNoLmRlZmF1bHQuZWFjaChjcml0ZXJpYUZpZWxkcywgZnVuY3Rpb24gKGNyaXRlcmlhKSB7CiAgICBmaWx0ZXJDcml0ZXJpYS5wdXNoKHsKICAgICAgdGVybTogX2RlZmluZVByb3BlcnR5KHt9LCBjcml0ZXJpYS5maWVsZE5hbWUsIGNyaXRlcmlhLmZpZWxkVmFsdWUpCiAgICB9KTsKICB9KTsgLy8gSWYgYW4gYWdnVHlwZSBvYmplY3QgaGFzIGJlZW4gcGFzc2VkIGluLCB1c2UgaXQuCiAgLy8gT3RoZXJ3aXNlIGRlZmF1bHQgdG8gYXZnLCBtaW4gYW5kIG1heCBhZ2dzIGZvciB0aGUKICAvLyBmb3JlY2FzdCBwcmVkaWN0aW9uLCB1cHBlciBhbmQgbG93ZXIKCgogIHZhciBmb3JlY2FzdEFnZ3MgPSBhZ2dUeXBlID09PSB1bmRlZmluZWQgPyB7CiAgICBhdmc6ICdhdmcnLAogICAgbWF4OiAnbWF4JywKICAgIG1pbjogJ21pbicKICB9IDogewogICAgYXZnOiBhZ2dUeXBlLmF2ZywKICAgIG1heDogYWdnVHlwZS5tYXgsCiAgICBtaW46IGFnZ1R5cGUubWluCiAgfTsKICByZXR1cm4gX21sX2FwaV9zZXJ2aWNlLm1sLmVzU2VhcmNoJCh7CiAgICBpbmRleDogX2luZGV4X3BhdHRlcm5zLk1MX1JFU1VMVFNfSU5ERVhfUEFUVEVSTiwKICAgIHNpemU6IDAsCiAgICBib2R5OiB7CiAgICAgIHF1ZXJ5OiB7CiAgICAgICAgYm9vbDogewogICAgICAgICAgZmlsdGVyOiBmaWx0ZXJDcml0ZXJpYQogICAgICAgIH0KICAgICAgfSwKICAgICAgYWdnczogewogICAgICAgIHRpbWVzOiB7CiAgICAgICAgICBkYXRlX2hpc3RvZ3JhbTogewogICAgICAgICAgICBmaWVsZDogJ3RpbWVzdGFtcCcsCiAgICAgICAgICAgIGludGVydmFsOiBpbnRlcnZhbCwKICAgICAgICAgICAgbWluX2RvY19jb3VudDogMQogICAgICAgICAgfSwKICAgICAgICAgIGFnZ3M6IHsKICAgICAgICAgICAgcHJlZGljdGlvbjogX2RlZmluZVByb3BlcnR5KHt9LCBmb3JlY2FzdEFnZ3MuYXZnLCB7CiAgICAgICAgICAgICAgZmllbGQ6ICdmb3JlY2FzdF9wcmVkaWN0aW9uJwogICAgICAgICAgICB9KSwKICAgICAgICAgICAgZm9yZWNhc3RVcHBlcjogX2RlZmluZVByb3BlcnR5KHt9LCBmb3JlY2FzdEFnZ3MubWF4LCB7CiAgICAgICAgICAgICAgZmllbGQ6ICdmb3JlY2FzdF91cHBlcicKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIGZvcmVjYXN0TG93ZXI6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgZm9yZWNhc3RBZ2dzLm1pbiwgewogICAgICAgICAgICAgIGZpZWxkOiAnZm9yZWNhc3RfbG93ZXInCiAgICAgICAgICAgIH0pCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSkucGlwZSgoMCwgX29wZXJhdG9ycy5tYXApKGZ1bmN0aW9uIChyZXNwKSB7CiAgICB2YXIgYWdncmVnYXRpb25zQnlUaW1lID0gX2xvZGFzaC5kZWZhdWx0LmdldChyZXNwLCBbJ2FnZ3JlZ2F0aW9ucycsICd0aW1lcycsICdidWNrZXRzJ10sIFtdKTsKCiAgICBfbG9kYXNoLmRlZmF1bHQuZWFjaChhZ2dyZWdhdGlvbnNCeVRpbWUsIGZ1bmN0aW9uIChkYXRhRm9yVGltZSkgewogICAgICB2YXIgdGltZSA9IGRhdGFGb3JUaW1lLmtleTsKICAgICAgb2JqLnJlc3VsdHNbdGltZV0gPSB7CiAgICAgICAgcHJlZGljdGlvbjogX2xvZGFzaC5kZWZhdWx0LmdldChkYXRhRm9yVGltZSwgWydwcmVkaWN0aW9uJywgJ3ZhbHVlJ10pLAogICAgICAgIGZvcmVjYXN0VXBwZXI6IF9sb2Rhc2guZGVmYXVsdC5nZXQoZGF0YUZvclRpbWUsIFsnZm9yZWNhc3RVcHBlcicsICd2YWx1ZSddKSwKICAgICAgICBmb3JlY2FzdExvd2VyOiBfbG9kYXNoLmRlZmF1bHQuZ2V0KGRhdGFGb3JUaW1lLCBbJ2ZvcmVjYXN0TG93ZXInLCAndmFsdWUnXSkKICAgICAgfTsKICAgIH0pOwoKICAgIHJldHVybiBvYmo7CiAgfSkpOwp9IC8vIFJ1bnMgYSBmb3JlY2FzdAoKCmZ1bmN0aW9uIHJ1bkZvcmVjYXN0KGpvYklkLCBkdXJhdGlvbikgewogIGNvbnNvbGUubG9nKCdNTCBmb3JlY2FzdCBzZXJ2aWNlIHJ1biBmb3JlY2FzdCB3aXRoIGR1cmF0aW9uOicsIGR1cmF0aW9uKTsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgX21sX2FwaV9zZXJ2aWNlLm1sLmZvcmVjYXN0KHsKICAgICAgam9iSWQ6IGpvYklkLAogICAgICBkdXJhdGlvbjogZHVyYXRpb24KICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgcmVzb2x2ZShyZXNwKTsKICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgcmVqZWN0KGVycik7CiAgICB9KTsKICB9KTsKfSAvLyBHZXRzIHN0YXRzIGZvciBhIGZvcmVjYXN0IHRoYXQgaGFzIGJlZW4gcnVuIG9uIHRoZSBzcGVjaWZpZWQgam9iLgovLyBSZXR1cm5lZCByZXNwb25zZSBjb250YWlucyBhIHN0YXRzIHByb3BlcnR5LCBpbmNsdWRpbmcKLy8gZm9yZWNhc3RfcHJvZ3Jlc3MgKGEgdmFsdWUgZnJvbSAwIHRvIDEpLAovLyBhbmQgZm9yZWNhc3Rfc3RhdHVzICgnZmluaXNoZWQnIHdoZW4gY29tcGxldGUpIHByb3BlcnRpZXMuCgoKZnVuY3Rpb24gZ2V0Rm9yZWNhc3RSZXF1ZXN0U3RhdHMoam9iLCBmb3JlY2FzdElkKSB7CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIHZhciBvYmogPSB7CiAgICAgIHN1Y2Nlc3M6IHRydWUsCiAgICAgIHN0YXRzOiB7fQogICAgfTsgLy8gQnVpbGQgdGhlIGNyaXRlcmlhIHRvIHVzZSBpbiB0aGUgYm9vbCBmaWx0ZXIgcGFydCBvZiB0aGUgcmVxdWVzdC4KICAgIC8vIEFkZCBjcml0ZXJpYSBmb3IgdGhlIGpvYiBJRCwgcmVzdWx0IHR5cGUgYW5kIGVhcmxpZXN0IHRpbWUuCgogICAgdmFyIGZpbHRlckNyaXRlcmlhID0gW3sKICAgICAgcXVlcnlfc3RyaW5nOiB7CiAgICAgICAgcXVlcnk6ICdyZXN1bHRfdHlwZTptb2RlbF9mb3JlY2FzdF9yZXF1ZXN0X3N0YXRzJywKICAgICAgICBhbmFseXplX3dpbGRjYXJkOiB0cnVlCiAgICAgIH0KICAgIH0sIHsKICAgICAgdGVybTogewogICAgICAgIGpvYl9pZDogam9iLmpvYl9pZAogICAgICB9CiAgICB9LCB7CiAgICAgIHRlcm06IHsKICAgICAgICBmb3JlY2FzdF9pZDogZm9yZWNhc3RJZAogICAgICB9CiAgICB9XTsKCiAgICBfbWxfYXBpX3NlcnZpY2UubWwuZXNTZWFyY2goewogICAgICBpbmRleDogX2luZGV4X3BhdHRlcm5zLk1MX1JFU1VMVFNfSU5ERVhfUEFUVEVSTiwKICAgICAgc2l6ZTogMSwKICAgICAgcmVzdF90b3RhbF9oaXRzX2FzX2ludDogdHJ1ZSwKICAgICAgYm9keTogewogICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICBib29sOiB7CiAgICAgICAgICAgIGZpbHRlcjogZmlsdGVyQ3JpdGVyaWEKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgaWYgKHJlc3AuaGl0cy50b3RhbCAhPT0gMCkgewogICAgICAgIG9iai5zdGF0cyA9IF9sb2Rhc2guZGVmYXVsdC5maXJzdChyZXNwLmhpdHMuaGl0cykuX3NvdXJjZTsKICAgICAgfQoKICAgICAgcmVzb2x2ZShvYmopOwogICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgcmVqZWN0KHJlc3ApOwogICAgfSk7CiAgfSk7Cn0KCnZhciBtbEZvcmVjYXN0U2VydmljZSA9IHsKICBnZXRGb3JlY2FzdHNTdW1tYXJ5OiBnZXRGb3JlY2FzdHNTdW1tYXJ5LAogIGdldEZvcmVjYXN0RGF0ZVJhbmdlOiBnZXRGb3JlY2FzdERhdGVSYW5nZSwKICBnZXRGb3JlY2FzdERhdGE6IGdldEZvcmVjYXN0RGF0YSwKICBydW5Gb3JlY2FzdDogcnVuRm9yZWNhc3QsCiAgZ2V0Rm9yZWNhc3RSZXF1ZXN0U3RhdHM6IGdldEZvcmVjYXN0UmVxdWVzdFN0YXRzCn07CmV4cG9ydHMubWxGb3JlY2FzdFNlcnZpY2UgPSBtbEZvcmVjYXN0U2VydmljZTs="},null]}