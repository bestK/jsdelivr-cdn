{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/core/public/plugins/plugins_service.js","dependencies":[{"path":"src/core/public/plugins/plugins_service.js","mtime":1585205038780},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlBsdWdpbnNTZXJ2aWNlID0gdm9pZCAwOwoKdmFyIF9wbHVnaW4yID0gcmVxdWlyZSgiLi9wbHVnaW4iKTsKCnZhciBfcGx1Z2luX2NvbnRleHQgPSByZXF1aXJlKCIuL3BsdWdpbl9jb250ZXh0Iik7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgiLi4vLi4vdXRpbHMiKTsKCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KCmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsKICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7CiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSAiW29iamVjdCBBcmd1bWVudHNdIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7CiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgewogICAgICBhcnIyW2ldID0gYXJyW2ldOwogICAgfQoKICAgIHJldHVybiBhcnIyOwogIH0KfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBTZWMgPSAxMDAwOwovKiogQGludGVybmFsICovCgovKioKICogU2VydmljZSByZXNwb25zaWJsZSBmb3IgbG9hZGluZyBwbHVnaW4gYnVuZGxlcywgaW5pdGlhbGl6aW5nIHBsdWdpbnMsIGFuZCBtYW5hZ2luZyB0aGUgbGlmZWN5Y2xlCiAqIG9mIGFsbCBwbHVnaW5zLgogKgogKiBAaW50ZXJuYWwKICovCgp2YXIgUGx1Z2luc1NlcnZpY2UgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICAvKiogUGx1Z2luIHdyYXBwZXJzIGluIHRvcG9sb2dpY2FsIG9yZGVyLiAqLwogIGZ1bmN0aW9uIFBsdWdpbnNTZXJ2aWNlKGNvcmVDb250ZXh0LCBwbHVnaW5zKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQbHVnaW5zU2VydmljZSk7CgogICAgdGhpcy5jb3JlQ29udGV4dCA9IGNvcmVDb250ZXh0OwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAicGx1Z2lucyIsIG5ldyBNYXAoKSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJwbHVnaW5EZXBlbmRlbmNpZXMiLCBuZXcgTWFwKCkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAic2F0dXBQbHVnaW5zIiwgW10pOyAvLyBHZW5lcmF0ZSBvcGFxdWUgaWRzCgoKICAgIHZhciBvcGFxdWVJZHMgPSBuZXcgTWFwKHBsdWdpbnMubWFwKGZ1bmN0aW9uIChwKSB7CiAgICAgIHJldHVybiBbcC5pZCwgU3ltYm9sKHAuaWQpXTsKICAgIH0pKTsgLy8gU2V0dXAgZGVwZW5kZW5jeSBtYXAgYW5kIHBsdWdpbiB3cmFwcGVycwoKICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikgewogICAgICB2YXIgaWQgPSBfcmVmLmlkLAogICAgICAgICAgcGx1Z2luID0gX3JlZi5wbHVnaW4sCiAgICAgICAgICBfcmVmJGNvbmZpZyA9IF9yZWYuY29uZmlnLAogICAgICAgICAgY29uZmlnID0gX3JlZiRjb25maWcgPT09IHZvaWQgMCA/IHt9IDogX3JlZiRjb25maWc7IC8vIFNldHVwIG1hcCBvZiBkZXBlbmRlbmNpZXMKCiAgICAgIF90aGlzLnBsdWdpbkRlcGVuZGVuY2llcy5zZXQoaWQsIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocGx1Z2luLnJlcXVpcmVkUGx1Z2lucyksIF90b0NvbnN1bWFibGVBcnJheShwbHVnaW4ub3B0aW9uYWxQbHVnaW5zLmZpbHRlcihmdW5jdGlvbiAob3B0UGx1Z2luKSB7CiAgICAgICAgcmV0dXJuIG9wYXF1ZUlkcy5oYXMob3B0UGx1Z2luKTsKICAgICAgfSkpKSk7IC8vIENvbnN0cnVjdCBwbHVnaW4gd3JhcHBlcnMsIGRlcGVuZGluZyBvbiB0aGUgdG9wb2xvZ2ljYWwgb3JkZXIgc2V0IGJ5IHRoZSBzZXJ2ZXIuCgoKICAgICAgX3RoaXMucGx1Z2lucy5zZXQoaWQsIG5ldyBfcGx1Z2luMi5QbHVnaW5XcmFwcGVyKHBsdWdpbiwgb3BhcXVlSWRzLmdldChpZCksICgwLCBfcGx1Z2luX2NvbnRleHQuY3JlYXRlUGx1Z2luSW5pdGlhbGl6ZXJDb250ZXh0KShfdGhpcy5jb3JlQ29udGV4dCwgb3BhcXVlSWRzLmdldChpZCksIHBsdWdpbiwgY29uZmlnKSkpOwogICAgfSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUGx1Z2luc1NlcnZpY2UsIFt7CiAgICBrZXk6ICJnZXRPcGFxdWVJZHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9wYXF1ZUlkcygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7IC8vIFJldHVybiBkZXBlbmRlbmN5IG1hcCBvZiBvcGFxdWUgaWRzCgoKICAgICAgcmV0dXJuIG5ldyBNYXAoX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMucGx1Z2luRGVwZW5kZW5jaWVzKS5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7CiAgICAgICAgdmFyIF9yZWYzID0gX3NsaWNlZFRvQXJyYXkoX3JlZjIsIDIpLAogICAgICAgICAgICBpZCA9IF9yZWYzWzBdLAogICAgICAgICAgICBkZXBzID0gX3JlZjNbMV07CgogICAgICAgIHJldHVybiBbX3RoaXMyLnBsdWdpbnMuZ2V0KGlkKS5vcGFxdWVJZCwgZGVwcy5tYXAoZnVuY3Rpb24gKGRlcElkKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMyLnBsdWdpbnMuZ2V0KGRlcElkKS5vcGFxdWVJZDsKICAgICAgICB9KV07CiAgICAgIH0pKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZXR1cCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXAoZGVwcykgewogICAgICB2YXIgY29udHJhY3RzLCBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uLCBfZGlkSXRlcmF0b3JFcnJvciwgX2l0ZXJhdG9yRXJyb3IsIF9pdGVyYXRvciwgX3N0ZXAsIF9zdGVwJHZhbHVlLCBwbHVnaW5OYW1lLCBwbHVnaW4sIHBsdWdpbkRlcENvbnRyYWN0cywgY29udHJhY3Q7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIHNldHVwJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHRoaXMubG9hZFBsdWdpbkJ1bmRsZXMoZGVwcy5odHRwLmJhc2VQYXRoLnByZXBlbmQpKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAvLyBTZXR1cCBlYWNoIHBsdWdpbiB3aXRoIHJlcXVpcmVkIGFuZCBvcHRpb25hbCBwbHVnaW4gY29udHJhY3RzCiAgICAgICAgICAgICAgY29udHJhY3RzID0gbmV3IE1hcCgpOwogICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlOwogICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDY7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yID0gdGhpcy5wbHVnaW5zLmVudHJpZXMoKVtTeW1ib2wuaXRlcmF0b3JdKCk7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgaWYgKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9zdGVwJHZhbHVlID0gX3NsaWNlZFRvQXJyYXkoX3N0ZXAudmFsdWUsIDIpLCBwbHVnaW5OYW1lID0gX3N0ZXAkdmFsdWVbMF0sIHBsdWdpbiA9IF9zdGVwJHZhbHVlWzFdOwogICAgICAgICAgICAgIHBsdWdpbkRlcENvbnRyYWN0cyA9IF90b0NvbnN1bWFibGVBcnJheSh0aGlzLnBsdWdpbkRlcGVuZGVuY2llcy5nZXQocGx1Z2luTmFtZSkpLnJlZHVjZShmdW5jdGlvbiAoZGVwQ29udHJhY3RzLCBkZXBlbmRlbmN5TmFtZSkgewogICAgICAgICAgICAgICAgLy8gT25seSBzZXQgaWYgcHJlc2VudC4gQ291bGQgYmUgYWJzZW50IGlmIHBsdWdpbiBkb2VzIG5vdCBoYXZlIGNsaWVudC1zaWRlIGNvZGUgb3IgaXMgYQogICAgICAgICAgICAgICAgLy8gbWlzc2luZyBvcHRpb25hbCBwbHVnaW4uCiAgICAgICAgICAgICAgICBpZiAoY29udHJhY3RzLmhhcyhkZXBlbmRlbmN5TmFtZSkpIHsKICAgICAgICAgICAgICAgICAgZGVwQ29udHJhY3RzW2RlcGVuZGVuY3lOYW1lXSA9IGNvbnRyYWN0cy5nZXQoZGVwZW5kZW5jeU5hbWUpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBkZXBDb250cmFjdHM7CiAgICAgICAgICAgICAgfSwge30pOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMzsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKCgwLCBfdXRpbHMud2l0aFRpbWVvdXQpKHsKICAgICAgICAgICAgICAgIHByb21pc2U6IHBsdWdpbi5zZXR1cCgoMCwgX3BsdWdpbl9jb250ZXh0LmNyZWF0ZVBsdWdpblNldHVwQ29udGV4dCkodGhpcy5jb3JlQ29udGV4dCwgZGVwcywgcGx1Z2luKSwgcGx1Z2luRGVwQ29udHJhY3RzKSwKICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDMwICogU2VjLAogICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAiU2V0dXAgbGlmZWN5Y2xlIG9mIFwiIi5jb25jYXQocGx1Z2luTmFtZSwgIlwiIHBsdWdpbiB3YXNuJ3QgY29tcGxldGVkIGluIDMwc2VjLiBDb25zaWRlciBkaXNhYmxpbmcgdGhlIHBsdWdpbiBhbmQgcmUtc3RhcnQuIikKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgIGNvbnRyYWN0ID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBjb250cmFjdHMuc2V0KHBsdWdpbk5hbWUsIGNvbnRyYWN0KTsKICAgICAgICAgICAgICB0aGlzLnNhdHVwUGx1Z2lucy5wdXNoKHBsdWdpbk5hbWUpOwoKICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI1OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjE7CiAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSg2KTsKICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBfY29udGV4dC50MDsKCiAgICAgICAgICAgIGNhc2UgMjU6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI1OwogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyNjsKCiAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgMjg6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI4OwoKICAgICAgICAgICAgICBpZiAoIV9kaWRJdGVyYXRvckVycm9yKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzE7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yOwoKICAgICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDI4KTsKCiAgICAgICAgICAgIGNhc2UgMzI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgyNSk7CgogICAgICAgICAgICBjYXNlIDMzOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgIGNvbnRyYWN0czogY29udHJhY3RzCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDM0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBudWxsLCB0aGlzLCBbWzYsIDIxLCAyNSwgMzNdLCBbMjYsLCAyOCwgMzJdXSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic3RhcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0KGRlcHMpIHsKICAgICAgdmFyIGNvbnRyYWN0cywgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIsIF9kaWRJdGVyYXRvckVycm9yMiwgX2l0ZXJhdG9yRXJyb3IyLCBfaXRlcmF0b3IyLCBfc3RlcDIsIF9zdGVwMiR2YWx1ZSwgX3BsdWdpbk5hbWUsIF9wbHVnaW4sIF9wbHVnaW5EZXBDb250cmFjdHMsIF9jb250cmFjdDsKCiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gc3RhcnQkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIC8vIFNldHVwIGVhY2ggcGx1Z2luIHdpdGggcmVxdWlyZWQgYW5kIG9wdGlvbmFsIHBsdWdpbiBjb250cmFjdHMKICAgICAgICAgICAgICBjb250cmFjdHMgPSBuZXcgTWFwKCk7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlOwogICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlOwogICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDQ7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yMiA9IHRoaXMucGx1Z2lucy5lbnRyaWVzKClbU3ltYm9sLml0ZXJhdG9yXSgpOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGlmIChfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX3N0ZXAyJHZhbHVlID0gX3NsaWNlZFRvQXJyYXkoX3N0ZXAyLnZhbHVlLCAyKSwgX3BsdWdpbk5hbWUgPSBfc3RlcDIkdmFsdWVbMF0sIF9wbHVnaW4gPSBfc3RlcDIkdmFsdWVbMV07CiAgICAgICAgICAgICAgX3BsdWdpbkRlcENvbnRyYWN0cyA9IF90b0NvbnN1bWFibGVBcnJheSh0aGlzLnBsdWdpbkRlcGVuZGVuY2llcy5nZXQoX3BsdWdpbk5hbWUpKS5yZWR1Y2UoZnVuY3Rpb24gKGRlcENvbnRyYWN0cywgZGVwZW5kZW5jeU5hbWUpIHsKICAgICAgICAgICAgICAgIC8vIE9ubHkgc2V0IGlmIHByZXNlbnQuIENvdWxkIGJlIGFic2VudCBpZiBwbHVnaW4gZG9lcyBub3QgaGF2ZSBjbGllbnQtc2lkZSBjb2RlIG9yIGlzIGEKICAgICAgICAgICAgICAgIC8vIG1pc3Npbmcgb3B0aW9uYWwgcGx1Z2luLgogICAgICAgICAgICAgICAgaWYgKGNvbnRyYWN0cy5oYXMoZGVwZW5kZW5jeU5hbWUpKSB7CiAgICAgICAgICAgICAgICAgIGRlcENvbnRyYWN0c1tkZXBlbmRlbmN5TmFtZV0gPSBjb250cmFjdHMuZ2V0KGRlcGVuZGVuY3lOYW1lKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gZGVwQ29udHJhY3RzOwogICAgICAgICAgICAgIH0sIHt9KTsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDExOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoKDAsIF91dGlscy53aXRoVGltZW91dCkoewogICAgICAgICAgICAgICAgcHJvbWlzZTogX3BsdWdpbi5zdGFydCgoMCwgX3BsdWdpbl9jb250ZXh0LmNyZWF0ZVBsdWdpblN0YXJ0Q29udGV4dCkodGhpcy5jb3JlQ29udGV4dCwgZGVwcywgX3BsdWdpbiksIF9wbHVnaW5EZXBDb250cmFjdHMpLAogICAgICAgICAgICAgICAgdGltZW91dDogMzAgKiBTZWMsCiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICJTdGFydCBsaWZlY3ljbGUgb2YgXCIiLmNvbmNhdChfcGx1Z2luTmFtZSwgIlwiIHBsdWdpbiB3YXNuJ3QgY29tcGxldGVkIGluIDMwc2VjLiBDb25zaWRlciBkaXNhYmxpbmcgdGhlIHBsdWdpbiBhbmQgcmUtc3RhcnQuIikKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIF9jb250cmFjdCA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIGNvbnRyYWN0cy5zZXQoX3BsdWdpbk5hbWUsIF9jb250cmFjdCk7CgogICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTg7CiAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWyJjYXRjaCJdKDQpOwogICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gX2NvbnRleHQyLnQwOwoKICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDIyOwogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMjM7CgogICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMjU7CgogICAgICAgICAgICAgIGlmICghX2RpZEl0ZXJhdG9yRXJyb3IyKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI4OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7CgogICAgICAgICAgICBjYXNlIDI4OgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuZmluaXNoKDI1KTsKCiAgICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5maW5pc2goMjIpOwoKICAgICAgICAgICAgY2FzZSAzMDoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgY29udHJhY3RzOiBjb250cmFjdHMKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMzE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBudWxsLCB0aGlzLCBbWzQsIDE4LCAyMiwgMzBdLCBbMjMsLCAyNSwgMjldXSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic3RvcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHsKICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zLCBfZGlkSXRlcmF0b3JFcnJvcjMsIF9pdGVyYXRvckVycm9yMywgX2l0ZXJhdG9yMywgX3N0ZXAzLCBfcGx1Z2luTmFtZTI7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIHN0b3AkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIC8vIFN0b3AgcGx1Z2lucyBpbiByZXZlcnNlIHRvcG9sb2dpY2FsIG9yZGVyLgogICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTsKICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSBmYWxzZTsKICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAzOwoKICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjMgPSB0aGlzLnNhdHVwUGx1Z2lucy5yZXZlcnNlKClbU3ltYm9sLml0ZXJhdG9yXSgpOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7CiAgICAgICAgICAgICAgICBfcGx1Z2luTmFtZTIgPSBfc3RlcDMudmFsdWU7CiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMuZ2V0KF9wbHVnaW5OYW1lMikuc3RvcCgpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDc7CiAgICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gX2NvbnRleHQzWyJjYXRjaCJdKDMpOwogICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IzID0gX2NvbnRleHQzLnQwOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDExOwogICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTI7CgogICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTQ7CgogICAgICAgICAgICAgIGlmICghX2RpZEl0ZXJhdG9yRXJyb3IzKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjM7CgogICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuZmluaXNoKDE0KTsKCiAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5maW5pc2goMTEpOwoKICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIHRoaXMsIFtbMywgNywgMTEsIDE5XSwgWzEyLCwgMTQsIDE4XV0pOwogICAgfQogIH0sIHsKICAgIGtleTogImxvYWRQbHVnaW5CdW5kbGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkUGx1Z2luQnVuZGxlcyhhZGRCYXNlUGF0aCkgewogICAgICAvLyBMb2FkIGFsbCBidW5kbGVzIGluIHBhcmFsbGVsCiAgICAgIHJldHVybiBQcm9taXNlLmFsbChfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5wbHVnaW5zLnZhbHVlcygpKS5tYXAoZnVuY3Rpb24gKHBsdWdpbikgewogICAgICAgIHJldHVybiBwbHVnaW4ubG9hZChhZGRCYXNlUGF0aCk7CiAgICAgIH0pKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBQbHVnaW5zU2VydmljZTsKfSgpOwoKZXhwb3J0cy5QbHVnaW5zU2VydmljZSA9IFBsdWdpbnNTZXJ2aWNlOw=="},null]}