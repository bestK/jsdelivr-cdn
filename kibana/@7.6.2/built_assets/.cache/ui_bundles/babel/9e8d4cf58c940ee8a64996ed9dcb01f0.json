{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/containers/detection_engine/rules/fetch_index_patterns.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/containers/detection_engine/rules/fetch_index_patterns.js","mtime":1585205047779},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnVzZUZldGNoSW5kZXhQYXR0ZXJucyA9IHZvaWQgMDsKCnZhciBfZnAgPSByZXF1aXJlKCJsb2Rhc2gvZnAiKTsKCnZhciBfcmVhY3QgPSByZXF1aXJlKCJyZWFjdCIpOwoKdmFyIF9zb3VyY2UgPSByZXF1aXJlKCIuLi8uLi8uLi9jb250YWluZXJzL3NvdXJjZSIpOwoKdmFyIF90b2FzdGVycyA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbXBvbmVudHMvdG9hc3RlcnMiKTsKCnZhciBfZXJyb3JfdG9fdG9hc3RlciA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbXBvbmVudHMvbWwvYXBpL2Vycm9yX3RvX3RvYXN0ZXIiKTsKCnZhciBfYXBvbGxvX2NvbnRleHQgPSByZXF1aXJlKCIuLi8uLi8uLi91dGlscy9hcG9sbG9fY29udGV4dCIpOwoKdmFyIGkxOG4gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCIuL3RyYW5zbGF0aW9ucyIpKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKdmFyIHVzZUZldGNoSW5kZXhQYXR0ZXJucyA9IGZ1bmN0aW9uIHVzZUZldGNoSW5kZXhQYXR0ZXJucygpIHsKICB2YXIgZGVmYXVsdEluZGljZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdOwogIHZhciBhcG9sbG9DbGllbnQgPSAoMCwgX2Fwb2xsb19jb250ZXh0LnVzZUFwb2xsb0NsaWVudCkoKTsKCiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKGRlZmF1bHRJbmRpY2VzKSwKICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksCiAgICAgIGluZGljZXMgPSBfdXNlU3RhdGUyWzBdLAogICAgICBzZXRJbmRpY2VzID0gX3VzZVN0YXRlMlsxXTsKCiAgdmFyIF91c2VTdGF0ZTMgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShmYWxzZSksCiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgaW5kaWNlc0V4aXN0cyA9IF91c2VTdGF0ZTRbMF0sCiAgICAgIHNldEluZGljZXNFeGlzdHMgPSBfdXNlU3RhdGU0WzFdOwoKICB2YXIgX3VzZVN0YXRlNSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKHsKICAgIGZpZWxkczogW10sCiAgICB0aXRsZTogJycKICB9KSwKICAgICAgX3VzZVN0YXRlNiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTUsIDIpLAogICAgICBpbmRleFBhdHRlcm5zID0gX3VzZVN0YXRlNlswXSwKICAgICAgc2V0SW5kZXhQYXR0ZXJucyA9IF91c2VTdGF0ZTZbMV07CgogIHZhciBfdXNlU3RhdGU3ID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoe30pLAogICAgICBfdXNlU3RhdGU4ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlNywgMiksCiAgICAgIGJyb3dzZXJGaWVsZHMgPSBfdXNlU3RhdGU4WzBdLAogICAgICBzZXRCcm93c2VyRmllbGRzID0gX3VzZVN0YXRlOFsxXTsKCiAgdmFyIF91c2VTdGF0ZTkgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShmYWxzZSksCiAgICAgIF91c2VTdGF0ZTEwID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlOSwgMiksCiAgICAgIGlzTG9hZGluZyA9IF91c2VTdGF0ZTEwWzBdLAogICAgICBzZXRJc0xvYWRpbmcgPSBfdXNlU3RhdGUxMFsxXTsKCiAgdmFyIF91c2VTdGF0ZVRvYXN0ZXIgPSAoMCwgX3RvYXN0ZXJzLnVzZVN0YXRlVG9hc3RlcikoKSwKICAgICAgX3VzZVN0YXRlVG9hc3RlcjIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGVUb2FzdGVyLCAyKSwKICAgICAgZGlzcGF0Y2hUb2FzdGVyID0gX3VzZVN0YXRlVG9hc3RlcjJbMV07CgogICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7CiAgICBpZiAoISgwLCBfZnAuaXNFcXVhbCkoZGVmYXVsdEluZGljZXMsIGluZGljZXMpKSB7CiAgICAgIHNldEluZGljZXMoZGVmYXVsdEluZGljZXMpOwogICAgfQogIH0sIFtkZWZhdWx0SW5kaWNlcywgaW5kaWNlc10pOwogICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7CiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTsKICAgIHZhciBhYm9ydEN0cmwgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7CgogICAgZnVuY3Rpb24gZmV0Y2hJbmRleFBhdHRlcm5zKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGZldGNoSW5kZXhQYXR0ZXJucyQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgaWYgKGFwb2xsb0NsaWVudCAmJiAhKDAsIF9mcC5pc0VtcHR5KShpbmRpY2VzKSkgewogICAgICAgICAgICAgICAgc2V0SXNMb2FkaW5nKHRydWUpOwogICAgICAgICAgICAgICAgYXBvbGxvQ2xpZW50LnF1ZXJ5KHsKICAgICAgICAgICAgICAgICAgcXVlcnk6IF9zb3VyY2Uuc291cmNlUXVlcnksCiAgICAgICAgICAgICAgICAgIGZldGNoUG9saWN5OiAnY2FjaGUtZmlyc3QnLAogICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHsKICAgICAgICAgICAgICAgICAgICBzb3VyY2VJZDogJ2RlZmF1bHQnLAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHRJbmRleDogaW5kaWNlcwogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBjb250ZXh0OiB7CiAgICAgICAgICAgICAgICAgICAgZmV0Y2hPcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGFib3J0Q3RybC5zaWduYWwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICBpZiAoaXNTdWJzY3JpYmVkKSB7CiAgICAgICAgICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICBzZXRJbmRpY2VzRXhpc3RzKCgwLCBfZnAuZ2V0KSgnZGF0YS5zb3VyY2Uuc3RhdHVzLmluZGljZXNFeGlzdCcsIHJlc3VsdCkpOwogICAgICAgICAgICAgICAgICAgIHNldEluZGV4UGF0dGVybnMoKDAsIF9zb3VyY2UuZ2V0SW5kZXhGaWVsZHMpKGluZGljZXMuam9pbigpLCAoMCwgX2ZwLmdldCkoJ2RhdGEuc291cmNlLnN0YXR1cy5pbmRleEZpZWxkcycsIHJlc3VsdCkpKTsKICAgICAgICAgICAgICAgICAgICBzZXRCcm93c2VyRmllbGRzKCgwLCBfc291cmNlLmdldEJyb3dzZXJGaWVsZHMpKGluZGljZXMuam9pbigpLCAoMCwgX2ZwLmdldCkoJ2RhdGEuc291cmNlLnN0YXR1cy5pbmRleEZpZWxkcycsIHJlc3VsdCkpKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICAgIGlmIChpc1N1YnNjcmliZWQpIHsKICAgICAgICAgICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICgwLCBfZXJyb3JfdG9fdG9hc3Rlci5lcnJvclRvVG9hc3RlcikoewogICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGkxOG4uUlVMRV9BRERfRkFJTFVSRSwKICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciwKICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoVG9hc3RlcjogZGlzcGF0Y2hUb2FzdGVyCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgZmV0Y2hJbmRleFBhdHRlcm5zKCk7CiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTsKICAgICAgYWJvcnRDdHJsLmFib3J0KCk7CiAgICB9OwogIH0sIFtpbmRpY2VzXSk7CiAgcmV0dXJuIFt7CiAgICBicm93c2VyRmllbGRzOiBicm93c2VyRmllbGRzLAogICAgaXNMb2FkaW5nOiBpc0xvYWRpbmcsCiAgICBpbmRpY2VzOiBpbmRpY2VzLAogICAgaW5kaWNlc0V4aXN0czogaW5kaWNlc0V4aXN0cywKICAgIGluZGV4UGF0dGVybnM6IGluZGV4UGF0dGVybnMKICB9LCBzZXRJbmRpY2VzXTsKfTsKCmV4cG9ydHMudXNlRmV0Y2hJbmRleFBhdHRlcm5zID0gdXNlRmV0Y2hJbmRleFBhdHRlcm5zOw=="},null]}