{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/discover/np_ready/embeddable/search_embeddable.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/discover/np_ready/embeddable/search_embeddable.js","mtime":1585205039548},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuU2VhcmNoRW1iZWRkYWJsZSA9IHZvaWQgMDsKCnZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJsb2Rhc2giKSk7Cgp2YXIgUnggPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyeGpzIikpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3B1YmxpYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BsdWdpbnMvZGF0YS9wdWJsaWMiKTsKCnZhciBfcHVibGljMiA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uL2VtYmVkZGFibGVfYXBpL3B1YmxpYy9ucF9yZWFkeS9wdWJsaWMiKTsKCnZhciBjb2x1bW5BY3Rpb25zID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgiLi4vYW5ndWxhci9kb2NfdGFibGUvYWN0aW9ucy9jb2x1bW5zIikpOwoKdmFyIF9zZWFyY2hfdGVtcGxhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vc2VhcmNoX3RlbXBsYXRlLmh0bWwiKSk7Cgp2YXIgX2dldF9zb3J0X2Zvcl9zZWFyY2hfc291cmNlID0gcmVxdWlyZSgiLi4vYW5ndWxhci9kb2NfdGFibGUvbGliL2dldF9zb3J0X2Zvcl9zZWFyY2hfc291cmNlIik7Cgp2YXIgX2tpYmFuYV9zZXJ2aWNlcyA9IHJlcXVpcmUoIi4uLy4uL2tpYmFuYV9zZXJ2aWNlcyIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuL2NvbnN0YW50cyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogIGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09ICJzeW1ib2wiKSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0gZWxzZSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfQoKICByZXR1cm4gX3R5cGVvZihvYmopOwp9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogIH0KfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICB9Cn0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgcmV0dXJuIENvbnN0cnVjdG9yOwp9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7CiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgewogICAgcmV0dXJuIGNhbGw7CiAgfQoKICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsKfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7CiAgaWYgKHNlbGYgPT09IHZvaWQgMCkgewogICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsKICB9CgogIHJldHVybiBzZWxmOwp9CgpmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7CiAgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSAidW5kZWZpbmVkIiAmJiBSZWZsZWN0LmdldCkgewogICAgX2dldCA9IFJlZmxlY3QuZ2V0OwogIH0gZWxzZSB7CiAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgewogICAgICB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpOwoKICAgICAgaWYgKCFiYXNlKSByZXR1cm47CiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7CgogICAgICBpZiAoZGVzYy5nZXQpIHsKICAgICAgICByZXR1cm4gZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7CiAgICAgIH0KCiAgICAgIHJldHVybiBkZXNjLnZhbHVlOwogICAgfTsKICB9CgogIHJldHVybiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyIHx8IHRhcmdldCk7Cn0KCmZ1bmN0aW9uIF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHsKICB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgewogICAgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7CiAgICBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhazsKICB9CgogIHJldHVybiBvYmplY3Q7Cn0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgfTsKICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOwp9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsKICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsKICB9CgogIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IHsKICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9CiAgfSk7CiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7Cn0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgICBvLl9fcHJvdG9fXyA9IHA7CiAgICByZXR1cm4gbzsKICB9OwoKICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIFNlYXJjaEVtYmVkZGFibGUgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfRW1iZWRkYWJsZSkgewogIF9pbmhlcml0cyhTZWFyY2hFbWJlZGRhYmxlLCBfRW1iZWRkYWJsZSk7CgogIGZ1bmN0aW9uIFNlYXJjaEVtYmVkZGFibGUoX3JlZiwgaW5pdGlhbElucHV0LCBleGVjdXRlVHJpZ2dlckFjdGlvbnMsIHBhcmVudCkgewogICAgdmFyIF90aGlzOwoKICAgIHZhciAkcm9vdFNjb3BlID0gX3JlZi4kcm9vdFNjb3BlLAogICAgICAgICRjb21waWxlID0gX3JlZi4kY29tcGlsZSwKICAgICAgICBzYXZlZFNlYXJjaCA9IF9yZWYuc2F2ZWRTZWFyY2gsCiAgICAgICAgZWRpdFVybCA9IF9yZWYuZWRpdFVybCwKICAgICAgICBpbmRleFBhdHRlcm5zID0gX3JlZi5pbmRleFBhdHRlcm5zLAogICAgICAgIGVkaXRhYmxlID0gX3JlZi5lZGl0YWJsZSwKICAgICAgICBmaWx0ZXJNYW5hZ2VyID0gX3JlZi5maWx0ZXJNYW5hZ2VyOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWFyY2hFbWJlZGRhYmxlKTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTZWFyY2hFbWJlZGRhYmxlKS5jYWxsKHRoaXMsIGluaXRpYWxJbnB1dCwgewogICAgICBkZWZhdWx0VGl0bGU6IHNhdmVkU2VhcmNoLnRpdGxlLAogICAgICBlZGl0VXJsOiBlZGl0VXJsLAogICAgICBpbmRleFBhdHRlcm5zOiBpbmRleFBhdHRlcm5zLAogICAgICBlZGl0YWJsZTogZWRpdGFibGUKICAgIH0sIHBhcmVudCkpOwogICAgX3RoaXMuZXhlY3V0ZVRyaWdnZXJBY3Rpb25zID0gZXhlY3V0ZVRyaWdnZXJBY3Rpb25zOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInNhdmVkU2VhcmNoIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICIkcm9vdFNjb3BlIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICIkY29tcGlsZSIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiaW5zcGVjdG9yQWRhcHRvcnMiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInNlYXJjaFNjb3BlIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJwYW5lbFRpdGxlIiwgJycpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImZpbHRlcnNTZWFyY2hTb3VyY2UiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInNlYXJjaEluc3RhbmNlIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJhdXRvUmVmcmVzaEZldGNoU3Vic2NyaXB0aW9uIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzdWJzY3JpcHRpb24iLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInR5cGUiLCBfY29uc3RhbnRzLlNFQVJDSF9FTUJFRERBQkxFX1RZUEUpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImZpbHRlck1hbmFnZXIiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImFib3J0Q29udHJvbGxlciIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAicHJldlRpbWVSYW5nZSIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAicHJldkZpbHRlcnMiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInByZXZRdWVyeSIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiZmV0Y2giLCBmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgc2VhcmNoU291cmNlLCB0aXRsZSwgZGVzY3JpcHRpb24sIGluc3BlY3RvclJlcXVlc3QsIHJlc3A7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgaWYgKF90aGlzLnNlYXJjaFNjb3BlKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgc2VhcmNoU291cmNlID0gX3RoaXMuc2F2ZWRTZWFyY2guc2VhcmNoU291cmNlOyAvLyBBYm9ydCBhbnkgaW4tcHJvZ3Jlc3MgcmVxdWVzdHMKCiAgICAgICAgICAgICAgaWYgKF90aGlzLmFib3J0Q29udHJvbGxlcikgX3RoaXMuYWJvcnRDb250cm9sbGVyLmFib3J0KCk7CiAgICAgICAgICAgICAgX3RoaXMuYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpOwogICAgICAgICAgICAgIHNlYXJjaFNvdXJjZS5zZXRGaWVsZCgnc2l6ZScsICgwLCBfa2liYW5hX3NlcnZpY2VzLmdldFNlcnZpY2VzKSgpLnVpU2V0dGluZ3MuZ2V0KCdkaXNjb3ZlcjpzYW1wbGVTaXplJykpOwogICAgICAgICAgICAgIHNlYXJjaFNvdXJjZS5zZXRGaWVsZCgnc29ydCcsICgwLCBfZ2V0X3NvcnRfZm9yX3NlYXJjaF9zb3VyY2UuZ2V0U29ydEZvclNlYXJjaFNvdXJjZSkoX3RoaXMuc2VhcmNoU2NvcGUuc29ydCwgX3RoaXMuc2VhcmNoU2NvcGUuaW5kZXhQYXR0ZXJuKSk7IC8vIExvZyByZXF1ZXN0IHRvIGluc3BlY3RvcgoKICAgICAgICAgICAgICBfdGhpcy5pbnNwZWN0b3JBZGFwdG9ycy5yZXF1ZXN0cy5yZXNldCgpOwoKICAgICAgICAgICAgICB0aXRsZSA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uZW1iZWRkYWJsZS5pbnNwZWN0b3JSZXF1ZXN0RGF0YVRpdGxlJywgewogICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdEYXRhJwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5lbWJlZGRhYmxlLmluc3BlY3RvclJlcXVlc3REZXNjcmlwdGlvbicsIHsKICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVGhpcyByZXF1ZXN0IHF1ZXJpZXMgRWxhc3RpY3NlYXJjaCB0byBmZXRjaCB0aGUgZGF0YSBmb3IgdGhlIHNlYXJjaC4nCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgaW5zcGVjdG9yUmVxdWVzdCA9IF90aGlzLmluc3BlY3RvckFkYXB0b3JzLnJlcXVlc3RzLnN0YXJ0KHRpdGxlLCB7CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBpbnNwZWN0b3JSZXF1ZXN0LnN0YXRzKCgwLCBfa2liYW5hX3NlcnZpY2VzLmdldFJlcXVlc3RJbnNwZWN0b3JTdGF0cykoc2VhcmNoU291cmNlKSk7CiAgICAgICAgICAgICAgc2VhcmNoU291cmNlLmdldFNlYXJjaFJlcXVlc3RCb2R5KCkudGhlbihmdW5jdGlvbiAoYm9keSkgewogICAgICAgICAgICAgICAgaW5zcGVjdG9yUmVxdWVzdC5qc29uKGJvZHkpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIF90aGlzLnNlYXJjaFNjb3BlLmlzTG9hZGluZyA9IHRydWU7CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE0OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNzsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHNlYXJjaFNvdXJjZS5mZXRjaCh7CiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogX3RoaXMuYWJvcnRDb250cm9sbGVyLnNpZ25hbAogICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgcmVzcCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgX3RoaXMuc2VhcmNoU2NvcGUuaXNMb2FkaW5nID0gZmFsc2U7IC8vIExvZyByZXNwb25zZSB0byBpbnNwZWN0b3IKCiAgICAgICAgICAgICAgaW5zcGVjdG9yUmVxdWVzdC5zdGF0cygoMCwgX2tpYmFuYV9zZXJ2aWNlcy5nZXRSZXNwb25zZUluc3BlY3RvclN0YXRzKShzZWFyY2hTb3VyY2UsIHJlc3ApKS5vayh7CiAgICAgICAgICAgICAgICBqc29uOiByZXNwCiAgICAgICAgICAgICAgfSk7IC8vIEFwcGx5IHRoZSBjaGFuZ2VzIHRvIHRoZSBhbmd1bGFyIHNjb3BlCgogICAgICAgICAgICAgIF90aGlzLnNlYXJjaFNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBfdGhpcy5zZWFyY2hTY29wZS5oaXRzID0gcmVzcC5oaXRzLmhpdHM7CiAgICAgICAgICAgICAgICBfdGhpcy5zZWFyY2hTY29wZS50b3RhbEhpdENvdW50ID0gcmVzcC5oaXRzLnRvdGFsOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjg7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyMzsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDE0KTsKCiAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQudDAubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI3OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgIGNhc2UgMjc6CiAgICAgICAgICAgICAgKDAsIF9raWJhbmFfc2VydmljZXMuZ2V0U2VydmljZXMpKCkudG9hc3ROb3RpZmljYXRpb25zLmFkZEVycm9yKF9jb250ZXh0LnQwLCB7CiAgICAgICAgICAgICAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5lbWJlZGRhYmxlLmVycm9yVGl0bGUnLCB7CiAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRXJyb3IgZmV0Y2hpbmcgZGF0YScKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDI4OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBudWxsLCBudWxsLCBbWzE0LCAyM11dKTsKICAgIH0pOwoKICAgIF90aGlzLmZpbHRlck1hbmFnZXIgPSBmaWx0ZXJNYW5hZ2VyOwogICAgX3RoaXMuc2F2ZWRTZWFyY2ggPSBzYXZlZFNlYXJjaDsKICAgIF90aGlzLiRyb290U2NvcGUgPSAkcm9vdFNjb3BlOwogICAgX3RoaXMuJGNvbXBpbGUgPSAkY29tcGlsZTsKICAgIF90aGlzLmluc3BlY3RvckFkYXB0b3JzID0gewogICAgICByZXF1ZXN0czogbmV3IF9raWJhbmFfc2VydmljZXMuUmVxdWVzdEFkYXB0ZXIoKQogICAgfTsKCiAgICBfdGhpcy5pbml0aWFsaXplU2VhcmNoU2NvcGUoKTsKCiAgICBfdGhpcy5hdXRvUmVmcmVzaEZldGNoU3Vic2NyaXB0aW9uID0gKDAsIF9raWJhbmFfc2VydmljZXMuZ2V0U2VydmljZXMpKCkudGltZWZpbHRlci5nZXRBdXRvUmVmcmVzaEZldGNoJCgpLnN1YnNjcmliZShfdGhpcy5mZXRjaCk7CiAgICBfdGhpcy5zdWJzY3JpcHRpb24gPSBSeC5tZXJnZShfdGhpcy5nZXRPdXRwdXQkKCksIF90aGlzLmdldElucHV0JCgpKS5zdWJzY3JpYmUoZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5wYW5lbFRpdGxlID0gX3RoaXMub3V0cHV0LnRpdGxlIHx8ICcnOwoKICAgICAgaWYgKF90aGlzLnNlYXJjaFNjb3BlKSB7CiAgICAgICAgX3RoaXMucHVzaENvbnRhaW5lclN0YXRlUGFyYW1zVG9TY29wZShfdGhpcy5zZWFyY2hTY29wZSk7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFNlYXJjaEVtYmVkZGFibGUsIFt7CiAgICBrZXk6ICJnZXRJbnNwZWN0b3JBZGFwdGVycyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5zcGVjdG9yQWRhcHRlcnMoKSB7CiAgICAgIHJldHVybiB0aGlzLmluc3BlY3RvckFkYXB0b3JzOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFNhdmVkU2VhcmNoIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTYXZlZFNlYXJjaCgpIHsKICAgICAgcmV0dXJuIHRoaXMuc2F2ZWRTZWFyY2g7CiAgICB9CiAgICAvKioKICAgICAqCiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGRvbU5vZGUKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcihkb21Ob2RlKSB7CiAgICAgIGlmICghdGhpcy5zZWFyY2hTY29wZSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignU2VhcmNoIHNjb3BlIG5vdCBkZWZpbmVkJyk7CiAgICAgIH0KCiAgICAgIHRoaXMuc2VhcmNoSW5zdGFuY2UgPSB0aGlzLiRjb21waWxlKF9zZWFyY2hfdGVtcGxhdGUuZGVmYXVsdCkodGhpcy5zZWFyY2hTY29wZSk7CgogICAgICB2YXIgcm9vdE5vZGUgPSBfa2liYW5hX3NlcnZpY2VzLmFuZ3VsYXIuZWxlbWVudChkb21Ob2RlKTsKCiAgICAgIHJvb3ROb2RlLmFwcGVuZCh0aGlzLnNlYXJjaEluc3RhbmNlKTsKICAgICAgdGhpcy5wdXNoQ29udGFpbmVyU3RhdGVQYXJhbXNUb1Njb3BlKHRoaXMuc2VhcmNoU2NvcGUpOwogICAgfQogIH0sIHsKICAgIGtleTogImRlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKFNlYXJjaEVtYmVkZGFibGUucHJvdG90eXBlKSwgImRlc3Ryb3kiLCB0aGlzKS5jYWxsKHRoaXMpOwoKICAgICAgdGhpcy5zYXZlZFNlYXJjaC5kZXN0cm95KCk7CgogICAgICBpZiAodGhpcy5zZWFyY2hJbnN0YW5jZSkgewogICAgICAgIHRoaXMuc2VhcmNoSW5zdGFuY2UucmVtb3ZlKCk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLnNlYXJjaFNjb3BlKSB7CiAgICAgICAgdGhpcy5zZWFyY2hTY29wZS4kZGVzdHJveSgpOwogICAgICAgIGRlbGV0ZSB0aGlzLnNlYXJjaFNjb3BlOwogICAgICB9CgogICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHsKICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOwogICAgICB9CgogICAgICBpZiAodGhpcy5hdXRvUmVmcmVzaEZldGNoU3Vic2NyaXB0aW9uKSB7CiAgICAgICAgdGhpcy5hdXRvUmVmcmVzaEZldGNoU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmFib3J0Q29udHJvbGxlcikgdGhpcy5hYm9ydENvbnRyb2xsZXIuYWJvcnQoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpbml0aWFsaXplU2VhcmNoU2NvcGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRpYWxpemVTZWFyY2hTY29wZSgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgc2VhcmNoU2NvcGUgPSB0aGlzLnNlYXJjaFNjb3BlID0gdGhpcy4kcm9vdFNjb3BlLiRuZXcoKTsKICAgICAgc2VhcmNoU2NvcGUuZGVzY3JpcHRpb24gPSB0aGlzLnNhdmVkU2VhcmNoLmRlc2NyaXB0aW9uOwogICAgICBzZWFyY2hTY29wZS5pbnNwZWN0b3JBZGFwdGVycyA9IHRoaXMuaW5zcGVjdG9yQWRhcHRvcnM7CiAgICAgIHZhciBzZWFyY2hTb3VyY2UgPSB0aGlzLnNhdmVkU2VhcmNoLnNlYXJjaFNvdXJjZTsKICAgICAgdmFyIGluZGV4UGF0dGVybiA9IHNlYXJjaFNjb3BlLmluZGV4UGF0dGVybiA9IHNlYXJjaFNvdXJjZS5nZXRGaWVsZCgnaW5kZXgnKTsKICAgICAgdmFyIHRpbWVSYW5nZVNlYXJjaFNvdXJjZSA9IHNlYXJjaFNvdXJjZS5jcmVhdGUoKTsKICAgICAgdGltZVJhbmdlU2VhcmNoU291cmNlLnNldEZpZWxkKCdmaWx0ZXInLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKCFfdGhpczIuc2VhcmNoU2NvcGUgfHwgIV90aGlzMi5pbnB1dC50aW1lUmFuZ2UpIHJldHVybjsKICAgICAgICByZXR1cm4gKDAsIF9wdWJsaWMuZ2V0VGltZSkoaW5kZXhQYXR0ZXJuLCBfdGhpczIuaW5wdXQudGltZVJhbmdlKTsKICAgICAgfSk7CiAgICAgIHRoaXMuZmlsdGVyc1NlYXJjaFNvdXJjZSA9IHNlYXJjaFNvdXJjZS5jcmVhdGUoKTsKICAgICAgdGhpcy5maWx0ZXJzU2VhcmNoU291cmNlLnNldFBhcmVudCh0aW1lUmFuZ2VTZWFyY2hTb3VyY2UpOwogICAgICBzZWFyY2hTb3VyY2Uuc2V0UGFyZW50KHRoaXMuZmlsdGVyc1NlYXJjaFNvdXJjZSk7CiAgICAgIHRoaXMucHVzaENvbnRhaW5lclN0YXRlUGFyYW1zVG9TY29wZShzZWFyY2hTY29wZSk7CgogICAgICBzZWFyY2hTY29wZS5zZXRTb3J0T3JkZXIgPSBmdW5jdGlvbiAoc29ydCkgewogICAgICAgIF90aGlzMi51cGRhdGVJbnB1dCh7CiAgICAgICAgICBzb3J0OiBzb3J0CiAgICAgICAgfSk7CiAgICAgIH07CgogICAgICBzZWFyY2hTY29wZS5hZGRDb2x1bW4gPSBmdW5jdGlvbiAoY29sdW1uTmFtZSkgewogICAgICAgIGlmICghc2VhcmNoU2NvcGUuY29sdW1ucykgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaW5kZXhQYXR0ZXJuLnBvcHVsYXJpemVGaWVsZChjb2x1bW5OYW1lLCAxKTsKICAgICAgICBjb2x1bW5BY3Rpb25zLmFkZENvbHVtbihzZWFyY2hTY29wZS5jb2x1bW5zLCBjb2x1bW5OYW1lKTsKCiAgICAgICAgX3RoaXMyLnVwZGF0ZUlucHV0KHsKICAgICAgICAgIGNvbHVtbnM6IHNlYXJjaFNjb3BlLmNvbHVtbnMKICAgICAgICB9KTsKICAgICAgfTsKCiAgICAgIHNlYXJjaFNjb3BlLnJlbW92ZUNvbHVtbiA9IGZ1bmN0aW9uIChjb2x1bW5OYW1lKSB7CiAgICAgICAgaWYgKCFzZWFyY2hTY29wZS5jb2x1bW5zKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBjb2x1bW5BY3Rpb25zLnJlbW92ZUNvbHVtbihzZWFyY2hTY29wZS5jb2x1bW5zLCBjb2x1bW5OYW1lKTsKCiAgICAgICAgX3RoaXMyLnVwZGF0ZUlucHV0KHsKICAgICAgICAgIGNvbHVtbnM6IHNlYXJjaFNjb3BlLmNvbHVtbnMKICAgICAgICB9KTsKICAgICAgfTsKCiAgICAgIHNlYXJjaFNjb3BlLm1vdmVDb2x1bW4gPSBmdW5jdGlvbiAoY29sdW1uTmFtZSwgbmV3SW5kZXgpIHsKICAgICAgICBpZiAoIXNlYXJjaFNjb3BlLmNvbHVtbnMpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGNvbHVtbkFjdGlvbnMubW92ZUNvbHVtbihzZWFyY2hTY29wZS5jb2x1bW5zLCBjb2x1bW5OYW1lLCBuZXdJbmRleCk7CgogICAgICAgIF90aGlzMi51cGRhdGVJbnB1dCh7CiAgICAgICAgICBjb2x1bW5zOiBzZWFyY2hTY29wZS5jb2x1bW5zCiAgICAgICAgfSk7CiAgICAgIH07CgogICAgICBzZWFyY2hTY29wZS5maWx0ZXIgPSBmdW5jdGlvbiBfY2FsbGVlMihmaWVsZCwgdmFsdWUsIG9wZXJhdG9yKSB7CiAgICAgICAgdmFyIGZpbHRlcnM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBmaWx0ZXJzID0gKDAsIF9wdWJsaWMuZ2VuZXJhdGVGaWx0ZXJzKShfdGhpczIuZmlsdGVyTWFuYWdlciwgZmllbGQsIHZhbHVlLCBvcGVyYXRvciwgaW5kZXhQYXR0ZXJuLmlkKTsKICAgICAgICAgICAgICAgIGZpbHRlcnMgPSBmaWx0ZXJzLm1hcChmdW5jdGlvbiAoZmlsdGVyKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBmaWx0ZXIsIHsKICAgICAgICAgICAgICAgICAgICAkc3RhdGU6IHsKICAgICAgICAgICAgICAgICAgICAgIHN0b3JlOiBfcHVibGljLmVzRmlsdGVycy5GaWx0ZXJTdGF0ZVN0b3JlLkFQUF9TVEFURQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoX3RoaXMyLmV4ZWN1dGVUcmlnZ2VyQWN0aW9ucyhfcHVibGljMi5BUFBMWV9GSUxURVJfVFJJR0dFUiwgewogICAgICAgICAgICAgICAgICBlbWJlZGRhYmxlOiBfdGhpczIsCiAgICAgICAgICAgICAgICAgIGZpbHRlcnM6IGZpbHRlcnMKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInJlbG9hZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVsb2FkKCkgewogICAgICB0aGlzLmZldGNoKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicHVzaENvbnRhaW5lclN0YXRlUGFyYW1zVG9TY29wZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHVzaENvbnRhaW5lclN0YXRlUGFyYW1zVG9TY29wZShzZWFyY2hTY29wZSkgewogICAgICB2YXIgaXNGZXRjaFJlcXVpcmVkID0gISgwLCBfcHVibGljLm9ubHlEaXNhYmxlZEZpbHRlcnNDaGFuZ2VkKSh0aGlzLmlucHV0LmZpbHRlcnMsIHRoaXMucHJldkZpbHRlcnMpIHx8ICFfbG9kYXNoLmRlZmF1bHQuaXNFcXVhbCh0aGlzLnByZXZRdWVyeSwgdGhpcy5pbnB1dC5xdWVyeSkgfHwgIV9sb2Rhc2guZGVmYXVsdC5pc0VxdWFsKHRoaXMucHJldlRpbWVSYW5nZSwgdGhpcy5pbnB1dC50aW1lUmFuZ2UpIHx8ICFfbG9kYXNoLmRlZmF1bHQuaXNFcXVhbChzZWFyY2hTY29wZS5zb3J0LCB0aGlzLmlucHV0LnNvcnQgfHwgdGhpcy5zYXZlZFNlYXJjaC5zb3J0KTsgLy8gSWYgdGhlcmUgaXMgY29sdW1uIG9yIHNvcnQgZGF0YSBvbiB0aGUgcGFuZWwsIHRoYXQgbWVhbnMgdGhlIG9yaWdpbmFsIGNvbHVtbnMgb3Igc29ydCBzZXR0aW5ncyBoYXZlCiAgICAgIC8vIGJlZW4gb3ZlcnJpZGRlbiBpbiBhIGRhc2hib2FyZC4KCiAgICAgIHNlYXJjaFNjb3BlLmNvbHVtbnMgPSB0aGlzLmlucHV0LmNvbHVtbnMgfHwgdGhpcy5zYXZlZFNlYXJjaC5jb2x1bW5zOwogICAgICBzZWFyY2hTY29wZS5zb3J0ID0gdGhpcy5pbnB1dC5zb3J0IHx8IHRoaXMuc2F2ZWRTZWFyY2guc29ydDsKICAgICAgc2VhcmNoU2NvcGUuc2hhcmVkSXRlbVRpdGxlID0gdGhpcy5wYW5lbFRpdGxlOwoKICAgICAgaWYgKGlzRmV0Y2hSZXF1aXJlZCkgewogICAgICAgIHRoaXMuZmlsdGVyc1NlYXJjaFNvdXJjZS5zZXRGaWVsZCgnZmlsdGVyJywgdGhpcy5pbnB1dC5maWx0ZXJzKTsKICAgICAgICB0aGlzLmZpbHRlcnNTZWFyY2hTb3VyY2Uuc2V0RmllbGQoJ3F1ZXJ5JywgdGhpcy5pbnB1dC5xdWVyeSk7CiAgICAgICAgdGhpcy5mZXRjaCgpOwogICAgICAgIHRoaXMucHJldkZpbHRlcnMgPSB0aGlzLmlucHV0LmZpbHRlcnM7CiAgICAgICAgdGhpcy5wcmV2UXVlcnkgPSB0aGlzLmlucHV0LnF1ZXJ5OwogICAgICAgIHRoaXMucHJldlRpbWVSYW5nZSA9IHRoaXMuaW5wdXQudGltZVJhbmdlOwogICAgICB9CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU2VhcmNoRW1iZWRkYWJsZTsKfShfcHVibGljMi5FbWJlZGRhYmxlKTsKCmV4cG9ydHMuU2VhcmNoRW1iZWRkYWJsZSA9IFNlYXJjaEVtYmVkZGFibGU7"},null]}