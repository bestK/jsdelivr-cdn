{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/visualize/plugin.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/visualize/plugin.js","mtime":1585205039903},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlZpc3VhbGl6ZVBsdWdpbiA9IHZvaWQgMDsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9wbHVnaW5zL2tpYmFuYV91dGlscy9wdWJsaWMiKTsKCnZhciBfdmlzdWFsaXplX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4vbnBfcmVhZHkvdmlzdWFsaXplX2NvbnN0YW50cyIpOwoKdmFyIF9raWJhbmFfc2VydmljZXMgPSByZXF1aXJlKCIuL2tpYmFuYV9zZXJ2aWNlcyIpOwoKdmFyIF9wdWJsaWMyID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9ob21lL3B1YmxpYyIpOwoKdmFyIF9sZWdhY3lfaW1wb3J0cyA9IHJlcXVpcmUoIi4vbGVnYWN5X2ltcG9ydHMiKTsKCnZhciBfc2F2ZWRfdmlzdWFsaXphdGlvbnMgPSByZXF1aXJlKCIuL3NhdmVkX3Zpc3VhbGl6YXRpb25zL3NhdmVkX3Zpc3VhbGl6YXRpb25zIik7CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogIH0KfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICB9Cn0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgcmV0dXJuIENvbnN0cnVjdG9yOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIFZpc3VhbGl6ZVBsdWdpbiA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFZpc3VhbGl6ZVBsdWdpbigpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaXN1YWxpemVQbHVnaW4pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAic3RhcnREZXBlbmRlbmNpZXMiLCBudWxsKTsKICB9CgogIF9jcmVhdGVDbGFzcyhWaXN1YWxpemVQbHVnaW4sIFt7CiAgICBrZXk6ICJzZXR1cCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXAoY29yZSwgX3JlZikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGhvbWUsIGtpYmFuYV9sZWdhY3ksIGdldEFuZ3VsYXJEZXBlbmRlbmNpZXMsIHVzYWdlQ29sbGVjdGlvbjsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBzZXR1cCQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgaG9tZSA9IF9yZWYuaG9tZSwga2liYW5hX2xlZ2FjeSA9IF9yZWYua2liYW5hX2xlZ2FjeSwgZ2V0QW5ndWxhckRlcGVuZGVuY2llcyA9IF9yZWYuX19MRUdBQ1kuZ2V0QW5ndWxhckRlcGVuZGVuY2llcywgdXNhZ2VDb2xsZWN0aW9uID0gX3JlZi51c2FnZUNvbGxlY3Rpb247CiAgICAgICAgICAgICAga2liYW5hX2xlZ2FjeS5yZWdpc3RlckxlZ2FjeUFwcCh7CiAgICAgICAgICAgICAgICBpZDogJ3Zpc3VhbGl6ZScsCiAgICAgICAgICAgICAgICB0aXRsZTogJ1Zpc3VhbGl6ZScsCiAgICAgICAgICAgICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoX3JlZjIsIHBhcmFtcykgewogICAgICAgICAgICAgICAgICB2YXIgY29udGV4dENvcmUsIF90aGlzJHN0YXJ0RGVwZW5kZW5jaSwgc2F2ZWRPYmplY3RzQ2xpZW50LCBlbWJlZGRhYmxlcywgbmF2aWdhdGlvbiwgdmlzdWFsaXphdGlvbnMsIGRhdGEsIHNoYXJlLCBhbmd1bGFyRGVwZW5kZW5jaWVzLCBzYXZlZFZpc3VhbGl6YXRpb25zLCBkZXBzLCBfcmVmMywgcmVuZGVyQXBwOwoKICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBtb3VudCQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dENvcmUgPSBfcmVmMi5jb3JlOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShfdGhpcy5zdGFydERlcGVuZGVuY2llcyA9PT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBzdGFydGVkIHlldCcpOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzJHN0YXJ0RGVwZW5kZW5jaSA9IF90aGlzLnN0YXJ0RGVwZW5kZW5jaWVzLCBzYXZlZE9iamVjdHNDbGllbnQgPSBfdGhpcyRzdGFydERlcGVuZGVuY2kuc2F2ZWRPYmplY3RzQ2xpZW50LCBlbWJlZGRhYmxlcyA9IF90aGlzJHN0YXJ0RGVwZW5kZW5jaS5lbWJlZGRhYmxlcywgbmF2aWdhdGlvbiA9IF90aGlzJHN0YXJ0RGVwZW5kZW5jaS5uYXZpZ2F0aW9uLCB2aXN1YWxpemF0aW9ucyA9IF90aGlzJHN0YXJ0RGVwZW5kZW5jaS52aXN1YWxpemF0aW9ucywgZGF0YSA9IF90aGlzJHN0YXJ0RGVwZW5kZW5jaS5kYXRhLCBzaGFyZSA9IF90aGlzJHN0YXJ0RGVwZW5kZW5jaS5zaGFyZTsKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKGdldEFuZ3VsYXJEZXBlbmRlbmNpZXMoKSk7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhckRlcGVuZGVuY2llcyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZWRWaXN1YWxpemF0aW9ucyA9ICgwLCBfc2F2ZWRfdmlzdWFsaXphdGlvbnMuY3JlYXRlU2F2ZWRWaXNMb2FkZXIpKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkT2JqZWN0c0NsaWVudDogc2F2ZWRPYmplY3RzQ2xpZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJuczogZGF0YS5pbmRleFBhdHRlcm5zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21lOiBjb250ZXh0Q29yZS5jaHJvbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVybGF5czogY29udGV4dENvcmUub3ZlcmxheXMKICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBzID0gX29iamVjdFNwcmVhZCh7fSwgYW5ndWxhckRlcGVuZGVuY2llcywgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQmFzZVBhdGg6IGNvbnRleHRDb3JlLmh0dHAuYmFzZVBhdGgucHJlcGVuZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmU6IGNvbnRleHRDb3JlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21lOiBjb250ZXh0Q29yZS5jaHJvbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWRkYWJsZXM6IGVtYmVkZGFibGVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QmFzZVBhdGg6IGNvcmUuaHR0cC5iYXNlUGF0aC5nZXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleFBhdHRlcm5zOiBkYXRhLmluZGV4UGF0dGVybnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2U6IG5ldyBfcHVibGljLlN0b3JhZ2UobG9jYWxTdG9yYWdlKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb246IG5hdmlnYXRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlZE9iamVjdHNDbGllbnQ6IHNhdmVkT2JqZWN0c0NsaWVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkVmlzdWFsaXphdGlvbnM6IHNhdmVkVmlzdWFsaXphdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlZFF1ZXJ5U2VydmljZTogZGF0YS5xdWVyeS5zYXZlZFF1ZXJpZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZTogc2hhcmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdE5vdGlmaWNhdGlvbnM6IGNvbnRleHRDb3JlLm5vdGlmaWNhdGlvbnMudG9hc3RzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdWlTZXR0aW5nczogY29udGV4dENvcmUudWlTZXR0aW5ncywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc3VhbGl6ZUNhcGFiaWxpdGllczogY29udGV4dENvcmUuYXBwbGljYXRpb24uY2FwYWJpbGl0aWVzLnZpc3VhbGl6ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc3VhbGl6YXRpb25zOiB2aXN1YWxpemF0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzYWdlQ29sbGVjdGlvbjogdXNhZ2VDb2xsZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9raWJhbmFfc2VydmljZXMuc2V0U2VydmljZXMpKGRlcHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKGltcG9ydCgnLi9ucF9yZWFkeS9hcHBsaWNhdGlvbicpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlZjMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckFwcCA9IF9yZWYzLnJlbmRlckFwcDsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCByZW5kZXJBcHAocGFyYW1zLmVsZW1lbnQsIHBhcmFtcy5hcHBCYXNlUGF0aCwgZGVwcykpOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgaG9tZS5mZWF0dXJlQ2F0YWxvZ3VlLnJlZ2lzdGVyKHsKICAgICAgICAgICAgICAgIGlkOiAndmlzdWFsaXplJywKICAgICAgICAgICAgICAgIHRpdGxlOiAnVmlzdWFsaXplJywKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLnZpc3VhbGl6ZS52aXN1YWxpemVEZXNjcmlwdGlvbicsIHsKICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDcmVhdGUgdmlzdWFsaXphdGlvbnMgYW5kIGFnZ3JlZ2F0ZSBkYXRhIHN0b3JlcyBpbiB5b3VyIEVsYXN0aWNzZWFyY2ggaW5kaWNlcy4nCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIGljb246ICd2aXN1YWxpemVBcHAnLAogICAgICAgICAgICAgICAgcGF0aDogIi9hcHAva2liYW5hIyIuY29uY2F0KF92aXN1YWxpemVfY29uc3RhbnRzLlZpc3VhbGl6ZUNvbnN0YW50cy5MQU5ESU5HX1BBR0VfUEFUSCksCiAgICAgICAgICAgICAgICBzaG93T25Ib21lUGFnZTogdHJ1ZSwKICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBfcHVibGljMi5GZWF0dXJlQ2F0YWxvZ3VlQ2F0ZWdvcnkuREFUQQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBfbGVnYWN5X2ltcG9ydHMuVmlzRWRpdG9yVHlwZXNSZWdpc3RyeVByb3ZpZGVyLnJlZ2lzdGVyKF9sZWdhY3lfaW1wb3J0cy5kZWZhdWx0RWRpdG9yKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInN0YXJ0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydChfcmVmNCwgX3JlZjUpIHsKICAgICAgdmFyIHNhdmVkT2JqZWN0c0NsaWVudCA9IF9yZWY0LnNhdmVkT2JqZWN0cy5jbGllbnQ7CiAgICAgIHZhciBlbWJlZGRhYmxlcyA9IF9yZWY1LmVtYmVkZGFibGVzLAogICAgICAgICAgbmF2aWdhdGlvbiA9IF9yZWY1Lm5hdmlnYXRpb24sCiAgICAgICAgICBkYXRhID0gX3JlZjUuZGF0YSwKICAgICAgICAgIHNoYXJlID0gX3JlZjUuc2hhcmUsCiAgICAgICAgICB2aXN1YWxpemF0aW9ucyA9IF9yZWY1LnZpc3VhbGl6YXRpb25zOwogICAgICB0aGlzLnN0YXJ0RGVwZW5kZW5jaWVzID0gewogICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgZW1iZWRkYWJsZXM6IGVtYmVkZGFibGVzLAogICAgICAgIG5hdmlnYXRpb246IG5hdmlnYXRpb24sCiAgICAgICAgc2F2ZWRPYmplY3RzQ2xpZW50OiBzYXZlZE9iamVjdHNDbGllbnQsCiAgICAgICAgc2hhcmU6IHNoYXJlLAogICAgICAgIHZpc3VhbGl6YXRpb25zOiB2aXN1YWxpemF0aW9ucwogICAgICB9OwogICAgICB2YXIgZW1iZWRkYWJsZUZhY3RvcnkgPSBuZXcgX2xlZ2FjeV9pbXBvcnRzLlZpc3VhbGl6ZUVtYmVkZGFibGVGYWN0b3J5KHZpc3VhbGl6YXRpb25zLnR5cGVzKTsKICAgICAgZW1iZWRkYWJsZXMucmVnaXN0ZXJFbWJlZGRhYmxlRmFjdG9yeShfbGVnYWN5X2ltcG9ydHMuVklTVUFMSVpFX0VNQkVEREFCTEVfVFlQRSwgZW1iZWRkYWJsZUZhY3RvcnkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFZpc3VhbGl6ZVBsdWdpbjsKfSgpOwoKZXhwb3J0cy5WaXN1YWxpemVQbHVnaW4gPSBWaXN1YWxpemVQbHVnaW47"},null]}