{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/data/public/query/filter_manager/filter_manager.js","dependencies":[{"path":"src/plugins/data/public/query/filter_manager/filter_manager.js","mtime":1585205041555},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkZpbHRlck1hbmFnZXIgPSB2b2lkIDA7Cgp2YXIgX2xvZGFzaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgibG9kYXNoIikpOwoKdmFyIF9yeGpzID0gcmVxdWlyZSgicnhqcyIpOwoKdmFyIF9jb21wYXJlX2ZpbHRlcnMgPSByZXF1aXJlKCIuL2xpYi9jb21wYXJlX2ZpbHRlcnMiKTsKCnZhciBfc29ydF9maWx0ZXJzID0gcmVxdWlyZSgiLi9saWIvc29ydF9maWx0ZXJzIik7Cgp2YXIgX21hcF9hbmRfZmxhdHRlbl9maWx0ZXJzID0gcmVxdWlyZSgiLi9saWIvbWFwX2FuZF9mbGF0dGVuX2ZpbHRlcnMiKTsKCnZhciBfdW5pcV9maWx0ZXJzID0gcmVxdWlyZSgiLi9saWIvdW5pcV9maWx0ZXJzIik7Cgp2YXIgX29ubHlfZGlzYWJsZWQgPSByZXF1aXJlKCIuL2xpYi9vbmx5X2Rpc2FibGVkIik7Cgp2YXIgX2NvbW1vbiA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbW1vbiIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogIH0KfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICB9Cn0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgcmV0dXJuIENvbnN0cnVjdG9yOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIEZpbHRlck1hbmFnZXIgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBGaWx0ZXJNYW5hZ2VyKHVpU2V0dGluZ3MpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGaWx0ZXJNYW5hZ2VyKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImZpbHRlcnMiLCBbXSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJ1cGRhdGVkJCIsIG5ldyBfcnhqcy5TdWJqZWN0KCkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiZmV0Y2gkIiwgbmV3IF9yeGpzLlN1YmplY3QoKSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJ1aVNldHRpbmdzIiwgdm9pZCAwKTsKCiAgICB0aGlzLnVpU2V0dGluZ3MgPSB1aVNldHRpbmdzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEZpbHRlck1hbmFnZXIsIFt7CiAgICBrZXk6ICJtZXJnZUluY29taW5nRmlsdGVycyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbWVyZ2VJbmNvbWluZ0ZpbHRlcnMocGFydGl0aW9uZWRGaWx0ZXJzKSB7CiAgICAgIHZhciBnbG9iYWxGaWx0ZXJzID0gcGFydGl0aW9uZWRGaWx0ZXJzLmdsb2JhbEZpbHRlcnM7CiAgICAgIHZhciBhcHBGaWx0ZXJzID0gcGFydGl0aW9uZWRGaWx0ZXJzLmFwcEZpbHRlcnM7IC8vIGV4aXN0aW5nIGdsb2JhbEZpbHRlcnMgc2hvdWxkIGJlIG11dGF0ZWQgYnkgYXBwRmlsdGVycwoKICAgICAgX2xvZGFzaC5kZWZhdWx0LmVhY2goYXBwRmlsdGVycywgZnVuY3Rpb24gKGZpbHRlciwgaSkgewogICAgICAgIHZhciBtYXRjaCA9IF9sb2Rhc2guZGVmYXVsdC5maW5kKGdsb2JhbEZpbHRlcnMsIGZ1bmN0aW9uIChnbG9iYWxGaWx0ZXIpIHsKICAgICAgICAgIHJldHVybiAoMCwgX2NvbXBhcmVfZmlsdGVycy5jb21wYXJlRmlsdGVycykoZ2xvYmFsRmlsdGVyLCBmaWx0ZXIpOwogICAgICAgIH0pOyAvLyBubyBtYXRjaCwgZG8gbm90aGluZwoKCiAgICAgICAgaWYgKCFtYXRjaCkgcmV0dXJuOyAvLyBtYXRjaGluZyBmaWx0ZXIgaW4gZ2xvYmFsU3RhdGUsIHVwZGF0ZSBnbG9iYWwgYW5kIHJlbW92ZSBmcm9tIGFwcFN0YXRlCgogICAgICAgIF9sb2Rhc2guZGVmYXVsdC5hc3NpZ24obWF0Y2gubWV0YSwgZmlsdGVyLm1ldGEpOwoKICAgICAgICBhcHBGaWx0ZXJzLnNwbGljZShpLCAxKTsKICAgICAgfSk7CgogICAgICByZXR1cm4gRmlsdGVyTWFuYWdlci5tZXJnZUZpbHRlcnMoYXBwRmlsdGVycywgZ2xvYmFsRmlsdGVycyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaGFuZGxlU3RhdGVVcGRhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVN0YXRlVXBkYXRlKG5ld0ZpbHRlcnMpIHsKICAgICAgbmV3RmlsdGVycy5zb3J0KF9zb3J0X2ZpbHRlcnMuc29ydEZpbHRlcnMpOwogICAgICB2YXIgZmlsdGVyc1VwZGF0ZWQgPSAhKDAsIF9jb21wYXJlX2ZpbHRlcnMuY29tcGFyZUZpbHRlcnMpKHRoaXMuZmlsdGVycywgbmV3RmlsdGVycywgX2NvbXBhcmVfZmlsdGVycy5DT01QQVJFX0FMTF9PUFRJT05TKTsKICAgICAgdmFyIHVwZGF0ZWRPbmx5RGlzYWJsZWRGaWx0ZXJzID0gKDAsIF9vbmx5X2Rpc2FibGVkLm9ubHlEaXNhYmxlZEZpbHRlcnNDaGFuZ2VkKShuZXdGaWx0ZXJzLCB0aGlzLmZpbHRlcnMpOwogICAgICB0aGlzLmZpbHRlcnMgPSBuZXdGaWx0ZXJzOwoKICAgICAgaWYgKGZpbHRlcnNVcGRhdGVkKSB7CiAgICAgICAgdGhpcy51cGRhdGVkJC5uZXh0KCk7CgogICAgICAgIGlmICghdXBkYXRlZE9ubHlEaXNhYmxlZEZpbHRlcnMpIHsKICAgICAgICAgIHRoaXMuZmV0Y2gkLm5leHQoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIC8qIEdldHRlcnMgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0RmlsdGVycyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmlsdGVycygpIHsKICAgICAgcmV0dXJuIF9sb2Rhc2guZGVmYXVsdC5jbG9uZURlZXAodGhpcy5maWx0ZXJzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRBcHBGaWx0ZXJzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBcHBGaWx0ZXJzKCkgewogICAgICB2YXIgX3RoaXMkZ2V0UGFydGl0aW9uZWRGID0gdGhpcy5nZXRQYXJ0aXRpb25lZEZpbHRlcnMoKSwKICAgICAgICAgIGFwcEZpbHRlcnMgPSBfdGhpcyRnZXRQYXJ0aXRpb25lZEYuYXBwRmlsdGVyczsKCiAgICAgIHJldHVybiBhcHBGaWx0ZXJzOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEdsb2JhbEZpbHRlcnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEdsb2JhbEZpbHRlcnMoKSB7CiAgICAgIHZhciBfdGhpcyRnZXRQYXJ0aXRpb25lZEYyID0gdGhpcy5nZXRQYXJ0aXRpb25lZEZpbHRlcnMoKSwKICAgICAgICAgIGdsb2JhbEZpbHRlcnMgPSBfdGhpcyRnZXRQYXJ0aXRpb25lZEYyLmdsb2JhbEZpbHRlcnM7CgogICAgICByZXR1cm4gZ2xvYmFsRmlsdGVyczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRQYXJ0aXRpb25lZEZpbHRlcnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhcnRpdGlvbmVkRmlsdGVycygpIHsKICAgICAgcmV0dXJuIEZpbHRlck1hbmFnZXIucGFydGl0aW9uRmlsdGVycyh0aGlzLmdldEZpbHRlcnMoKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0VXBkYXRlcyQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFVwZGF0ZXMkKCkgewogICAgICByZXR1cm4gdGhpcy51cGRhdGVkJC5hc09ic2VydmFibGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRGZXRjaGVzJCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmV0Y2hlcyQoKSB7CiAgICAgIHJldHVybiB0aGlzLmZldGNoJC5hc09ic2VydmFibGUoKTsKICAgIH0KICAgIC8qIFNldHRlcnMgKi8KCiAgfSwgewogICAga2V5OiAiYWRkRmlsdGVycyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRmlsdGVycyhmaWx0ZXJzKSB7CiAgICAgIHZhciBfY3VycmVudEZpbHRlcnMkYXBwRmksIF9jdXJyZW50RmlsdGVycyRnbG9iYTsKCiAgICAgIHZhciBwaW5GaWx0ZXJTdGF0dXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudWlTZXR0aW5ncy5nZXQoJ2ZpbHRlcnM6cGlubmVkQnlEZWZhdWx0Jyk7CgogICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmlsdGVycykpIHsKICAgICAgICBmaWx0ZXJzID0gW2ZpbHRlcnNdOwogICAgICB9CgogICAgICBpZiAoZmlsdGVycy5sZW5ndGggPT09IDApIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBzdG9yZSA9IHBpbkZpbHRlclN0YXR1cyA/IF9jb21tb24uZXNGaWx0ZXJzLkZpbHRlclN0YXRlU3RvcmUuR0xPQkFMX1NUQVRFIDogX2NvbW1vbi5lc0ZpbHRlcnMuRmlsdGVyU3RhdGVTdG9yZS5BUFBfU1RBVEU7CiAgICAgIEZpbHRlck1hbmFnZXIuc2V0RmlsdGVyc1N0b3JlKGZpbHRlcnMsIHN0b3JlKTsKICAgICAgdmFyIG1hcHBlZEZpbHRlcnMgPSAoMCwgX21hcF9hbmRfZmxhdHRlbl9maWx0ZXJzLm1hcEFuZEZsYXR0ZW5GaWx0ZXJzKShmaWx0ZXJzKTsgLy8gVGhpcyBpcyB3aGVyZSB3ZSBhZGQgbmV3IGZpbHRlcnMgdG8gdGhlIGNvcnJlY3QgcGxhY2UgKGFwcCBcIGdsb2JhbCkKCiAgICAgIHZhciBuZXdQYXJ0aXRpb25lZEZpbHRlcnMgPSBGaWx0ZXJNYW5hZ2VyLnBhcnRpdGlvbkZpbHRlcnMobWFwcGVkRmlsdGVycyk7CiAgICAgIHZhciBjdXJyZW50RmlsdGVycyA9IHRoaXMuZ2V0UGFydGl0aW9uZWRGaWx0ZXJzKCk7CgogICAgICAoX2N1cnJlbnRGaWx0ZXJzJGFwcEZpID0gY3VycmVudEZpbHRlcnMuYXBwRmlsdGVycykucHVzaC5hcHBseShfY3VycmVudEZpbHRlcnMkYXBwRmksIF90b0NvbnN1bWFibGVBcnJheShuZXdQYXJ0aXRpb25lZEZpbHRlcnMuYXBwRmlsdGVycykpOwoKICAgICAgKF9jdXJyZW50RmlsdGVycyRnbG9iYSA9IGN1cnJlbnRGaWx0ZXJzLmdsb2JhbEZpbHRlcnMpLnB1c2guYXBwbHkoX2N1cnJlbnRGaWx0ZXJzJGdsb2JhLCBfdG9Db25zdW1hYmxlQXJyYXkobmV3UGFydGl0aW9uZWRGaWx0ZXJzLmdsb2JhbEZpbHRlcnMpKTsKCiAgICAgIHZhciBuZXdGaWx0ZXJzID0gdGhpcy5tZXJnZUluY29taW5nRmlsdGVycyhjdXJyZW50RmlsdGVycyk7CiAgICAgIHRoaXMuaGFuZGxlU3RhdGVVcGRhdGUobmV3RmlsdGVycyk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0RmlsdGVycyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RmlsdGVycyhuZXdGaWx0ZXJzKSB7CiAgICAgIHZhciBwaW5GaWx0ZXJTdGF0dXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudWlTZXR0aW5ncy5nZXQoJ2ZpbHRlcnM6cGlubmVkQnlEZWZhdWx0Jyk7CiAgICAgIHZhciBzdG9yZSA9IHBpbkZpbHRlclN0YXR1cyA/IF9jb21tb24uZXNGaWx0ZXJzLkZpbHRlclN0YXRlU3RvcmUuR0xPQkFMX1NUQVRFIDogX2NvbW1vbi5lc0ZpbHRlcnMuRmlsdGVyU3RhdGVTdG9yZS5BUFBfU1RBVEU7CiAgICAgIEZpbHRlck1hbmFnZXIuc2V0RmlsdGVyc1N0b3JlKG5ld0ZpbHRlcnMsIHN0b3JlKTsKICAgICAgdmFyIG1hcHBlZEZpbHRlcnMgPSAoMCwgX21hcF9hbmRfZmxhdHRlbl9maWx0ZXJzLm1hcEFuZEZsYXR0ZW5GaWx0ZXJzKShuZXdGaWx0ZXJzKTsKICAgICAgdmFyIG5ld1BhcnRpdGlvbmVkRmlsdGVycyA9IEZpbHRlck1hbmFnZXIucGFydGl0aW9uRmlsdGVycyhtYXBwZWRGaWx0ZXJzKTsKICAgICAgdmFyIG1lcmdlZEZpbHRlcnMgPSB0aGlzLm1lcmdlSW5jb21pbmdGaWx0ZXJzKG5ld1BhcnRpdGlvbmVkRmlsdGVycyk7CiAgICAgIHRoaXMuaGFuZGxlU3RhdGVVcGRhdGUobWVyZ2VkRmlsdGVycyk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVtb3ZlRmlsdGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVGaWx0ZXIoZmlsdGVyKSB7CiAgICAgIHZhciBmaWx0ZXJJbmRleCA9IF9sb2Rhc2guZGVmYXVsdC5maW5kSW5kZXgodGhpcy5maWx0ZXJzLCBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIHJldHVybiBfbG9kYXNoLmRlZmF1bHQuaXNFcXVhbChpdGVtLm1ldGEsIGZpbHRlci5tZXRhKSAmJiBfbG9kYXNoLmRlZmF1bHQuaXNFcXVhbChpdGVtLnF1ZXJ5LCBmaWx0ZXIucXVlcnkpOwogICAgICB9KTsKCiAgICAgIGlmIChmaWx0ZXJJbmRleCA+PSAwKSB7CiAgICAgICAgdmFyIG5ld0ZpbHRlcnMgPSBfbG9kYXNoLmRlZmF1bHQuY2xvbmVEZWVwKHRoaXMuZmlsdGVycyk7CgogICAgICAgIG5ld0ZpbHRlcnMuc3BsaWNlKGZpbHRlckluZGV4LCAxKTsKICAgICAgICB0aGlzLmhhbmRsZVN0YXRlVXBkYXRlKG5ld0ZpbHRlcnMpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmVtb3ZlQWxsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVBbGwoKSB7CiAgICAgIHRoaXMuc2V0RmlsdGVycyhbXSk7CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJtZXJnZUZpbHRlcnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG1lcmdlRmlsdGVycyhhcHBGaWx0ZXJzLCBnbG9iYWxGaWx0ZXJzKSB7CiAgICAgIHJldHVybiAoMCwgX3VuaXFfZmlsdGVycy51bmlxRmlsdGVycykoYXBwRmlsdGVycy5yZXZlcnNlKCkuY29uY2F0KGdsb2JhbEZpbHRlcnMucmV2ZXJzZSgpKSkucmV2ZXJzZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnRpdGlvbkZpbHRlcnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnRpdGlvbkZpbHRlcnMoZmlsdGVycykgewogICAgICB2YXIgXyRwYXJ0aXRpb24gPSBfbG9kYXNoLmRlZmF1bHQucGFydGl0aW9uKGZpbHRlcnMsIF9jb21tb24uZXNGaWx0ZXJzLmlzRmlsdGVyUGlubmVkKSwKICAgICAgICAgIF8kcGFydGl0aW9uMiA9IF9zbGljZWRUb0FycmF5KF8kcGFydGl0aW9uLCAyKSwKICAgICAgICAgIGdsb2JhbEZpbHRlcnMgPSBfJHBhcnRpdGlvbjJbMF0sCiAgICAgICAgICBhcHBGaWx0ZXJzID0gXyRwYXJ0aXRpb24yWzFdOwoKICAgICAgcmV0dXJuIHsKICAgICAgICBnbG9iYWxGaWx0ZXJzOiBnbG9iYWxGaWx0ZXJzLAogICAgICAgIGFwcEZpbHRlcnM6IGFwcEZpbHRlcnMKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZXRGaWx0ZXJzU3RvcmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZpbHRlcnNTdG9yZShmaWx0ZXJzLCBzdG9yZSkgewogICAgICBfbG9kYXNoLmRlZmF1bHQubWFwKGZpbHRlcnMsIGZ1bmN0aW9uIChmaWx0ZXIpIHsKICAgICAgICAvLyBPdmVycmlkZSBzdGF0dXMgb25seSBmb3IgZmlsdGVycyB0aGF0IGRpZG4ndCBoYXZlIHN0YXRlIGluIHRoZSBmaXJzdCBwbGFjZS4KICAgICAgICBpZiAoZmlsdGVyLiRzdGF0ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBmaWx0ZXIuJHN0YXRlID0gewogICAgICAgICAgICBzdG9yZTogc3RvcmUKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBGaWx0ZXJNYW5hZ2VyOwp9KCk7CgpleHBvcnRzLkZpbHRlck1hbmFnZXIgPSBGaWx0ZXJNYW5hZ2VyOw=="},null]}