{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/advanced_ui_actions/public/custom_time_range_action.js","dependencies":[{"path":"x-pack/plugins/advanced_ui_actions/public/custom_time_range_action.js","mtime":1585205048999},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkN1c3RvbVRpbWVSYW5nZUFjdGlvbiA9IHZvaWQgMDsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3B1YmxpYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL3NyYy9wbHVnaW5zL3VpX2FjdGlvbnMvcHVibGljIik7Cgp2YXIgX2N1c3RvbWl6ZV90aW1lX3JhbmdlX21vZGFsID0gcmVxdWlyZSgiLi9jdXN0b21pemVfdGltZV9yYW5nZV9tb2RhbCIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBDVVNUT01fVElNRV9SQU5HRSA9ICdDVVNUT01fVElNRV9SQU5HRSc7CnZhciBTRUFSQ0hfRU1CRUREQUJMRV9UWVBFID0gJ3NlYXJjaCc7CgpmdW5jdGlvbiBoYXNUaW1lUmFuZ2UoZW1iZWRkYWJsZSkgewogIHJldHVybiBlbWJlZGRhYmxlLmdldElucHV0KCkudGltZVJhbmdlICE9PSB1bmRlZmluZWQ7Cn0KCnZhciBWSVNVQUxJWkVfRU1CRUREQUJMRV9UWVBFID0gJ3Zpc3VhbGl6YXRpb24nOwoKZnVuY3Rpb24gaXNWaXN1YWxpemVFbWJlZGRhYmxlKGVtYmVkZGFibGUpIHsKICByZXR1cm4gZW1iZWRkYWJsZS50eXBlID09PSBWSVNVQUxJWkVfRU1CRUREQUJMRV9UWVBFOwp9Cgp2YXIgQ3VzdG9tVGltZVJhbmdlQWN0aW9uID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQ3VzdG9tVGltZVJhbmdlQWN0aW9uKF9yZWYpIHsKICAgIHZhciBvcGVuTW9kYWwgPSBfcmVmLm9wZW5Nb2RhbCwKICAgICAgICBkYXRlRm9ybWF0ID0gX3JlZi5kYXRlRm9ybWF0LAogICAgICAgIGNvbW1vbmx5VXNlZFJhbmdlcyA9IF9yZWYuY29tbW9ubHlVc2VkUmFuZ2VzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDdXN0b21UaW1lUmFuZ2VBY3Rpb24pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAidHlwZSIsIENVU1RPTV9USU1FX1JBTkdFKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgIm9wZW5Nb2RhbCIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJkYXRlRm9ybWF0Iiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImNvbW1vbmx5VXNlZFJhbmdlcyIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJpZCIsIENVU1RPTV9USU1FX1JBTkdFKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgIm9yZGVyIiwgNyk7CgogICAgdGhpcy5vcGVuTW9kYWwgPSBvcGVuTW9kYWw7CiAgICB0aGlzLmRhdGVGb3JtYXQgPSBkYXRlRm9ybWF0OwogICAgdGhpcy5jb21tb25seVVzZWRSYW5nZXMgPSBjb21tb25seVVzZWRSYW5nZXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ3VzdG9tVGltZVJhbmdlQWN0aW9uLCBbewogICAga2V5OiAiZ2V0RGlzcGxheU5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKCkgewogICAgICByZXR1cm4gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmFkdmFuY2VkVWlBY3Rpb25zLmN1c3RvbWl6ZVRpbWVSYW5nZU1lbnVJdGVtLmRpc3BsYXlOYW1lJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ3VzdG9taXplIHRpbWUgcmFuZ2UnCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEljb25UeXBlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJY29uVHlwZSgpIHsKICAgICAgcmV0dXJuICdjYWxlbmRhcic7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNDb21wYXRpYmxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0NvbXBhdGlibGUoX3JlZjIpIHsKICAgICAgdmFyIGVtYmVkZGFibGUsIGlzSW5wdXRDb250cm9sLCBpc01hcmtkb3duOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGlzQ29tcGF0aWJsZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgZW1iZWRkYWJsZSA9IF9yZWYyLmVtYmVkZGFibGU7CiAgICAgICAgICAgICAgaXNJbnB1dENvbnRyb2wgPSBpc1Zpc3VhbGl6ZUVtYmVkZGFibGUoZW1iZWRkYWJsZSkgJiYgZW1iZWRkYWJsZS5nZXRPdXRwdXQoKS52aXNUeXBlTmFtZSA9PT0gJ2lucHV0X2NvbnRyb2xfdmlzJzsKICAgICAgICAgICAgICBpc01hcmtkb3duID0gaXNWaXN1YWxpemVFbWJlZGRhYmxlKGVtYmVkZGFibGUpICYmIGVtYmVkZGFibGUuZ2V0T3V0cHV0KCkudmlzVHlwZU5hbWUgPT09ICdtYXJrZG93bic7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgQm9vbGVhbihlbWJlZGRhYmxlICYmIGhhc1RpbWVSYW5nZShlbWJlZGRhYmxlKSAmJiAvLyBTYXZlZCBzZWFyY2hlcyBkb24ndCBsaXN0ZW4gdG8gdGhlIHRpbWUgcmFuZ2UgZnJvbSB0aGUgY29udGFpbmVyIHRoYXQgaXMgcGFzc2VkIGRvd24gdG8gdGhlbSBzbyBpdAogICAgICAgICAgICAgIC8vIHdvbid0IHdvcmsgd2l0aG91dCBhIGZpeC4gIEZvciBub3csIGp1c3QgbGVhdmUgdGhlbSBvdXQuCiAgICAgICAgICAgICAgZW1iZWRkYWJsZS50eXBlICE9PSBTRUFSQ0hfRU1CRUREQUJMRV9UWVBFICYmICFpc0lucHV0Q29udHJvbCAmJiAhaXNNYXJrZG93bikpOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJleGVjdXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBleGVjdXRlKF9yZWYzKSB7CiAgICAgIHZhciBlbWJlZGRhYmxlLCBpc0NvbXBhdGlibGUsIG1vZGFsU2Vzc2lvbjsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBleGVjdXRlJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBlbWJlZGRhYmxlID0gX3JlZjMuZW1iZWRkYWJsZTsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh0aGlzLmlzQ29tcGF0aWJsZSh7CiAgICAgICAgICAgICAgICBlbWJlZGRhYmxlOiBlbWJlZGRhYmxlCiAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IF9jb250ZXh0Mi5zZW50OwoKICAgICAgICAgICAgICBpZiAoaXNDb21wYXRpYmxlKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHRocm93IG5ldyBfcHVibGljLkluY29tcGF0aWJsZUFjdGlvbkVycm9yKCk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgLy8gT25seSBoZXJlIGZvciB0eXBlc2NyaXB0CiAgICAgICAgICAgICAgaWYgKGhhc1RpbWVSYW5nZShlbWJlZGRhYmxlKSkgewogICAgICAgICAgICAgICAgbW9kYWxTZXNzaW9uID0gdGhpcy5vcGVuTW9kYWwoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY3VzdG9taXplX3RpbWVfcmFuZ2VfbW9kYWwuQ3VzdG9taXplVGltZVJhbmdlTW9kYWwsIHsKICAgICAgICAgICAgICAgICAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZSgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9kYWxTZXNzaW9uLmNsb3NlKCk7CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGVtYmVkZGFibGU6IGVtYmVkZGFibGUsCiAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQ6IHRoaXMuZGF0ZUZvcm1hdCwKICAgICAgICAgICAgICAgICAgY29tbW9ubHlVc2VkUmFuZ2VzOiB0aGlzLmNvbW1vbmx5VXNlZFJhbmdlcwogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIHRoaXMpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEN1c3RvbVRpbWVSYW5nZUFjdGlvbjsKfSgpOwoKZXhwb3J0cy5DdXN0b21UaW1lUmFuZ2VBY3Rpb24gPSBDdXN0b21UaW1lUmFuZ2VBY3Rpb247"},null]}