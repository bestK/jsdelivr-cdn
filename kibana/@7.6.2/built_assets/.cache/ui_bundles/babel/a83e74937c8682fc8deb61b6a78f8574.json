{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/fixed_scroll.js","dependencies":[{"path":"src/legacy/ui/public/fixed_scroll.js","mtime":1585205040711},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkZpeGVkU2Nyb2xsUHJvdmlkZXIgPSBGaXhlZFNjcm9sbFByb3ZpZGVyOwoKdmFyIF9qcXVlcnkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImpxdWVyeSIpKTsKCnZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJsb2Rhc2giKSk7Cgp2YXIgX21vZHVsZXMgPSByZXF1aXJlKCIuL21vZHVsZXMiKTsKCnZhciBfZGVib3VuY2UgPSByZXF1aXJlKCJ1aS9kaXJlY3RpdmVzL2RlYm91bmNlIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoKICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yCiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoCiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0CiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIKICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkKICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsCiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiAqICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWQogKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUKICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwogKiB1bmRlciB0aGUgTGljZW5zZS4KICovCnZhciBTQ1JPTExFUl9IRUlHSFQgPSAyMDsKCmZ1bmN0aW9uIEZpeGVkU2Nyb2xsUHJvdmlkZXIoUHJpdmF0ZSkgewogIHZhciBkZWJvdW5jZSA9IFByaXZhdGUoX2RlYm91bmNlLkRlYm91bmNlUHJvdmlkZXIpOwogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0EnLAogICAgbGluazogZnVuY3Rpb24gbGluaygkc2NvcGUsICRlbCkgewogICAgICB2YXIgJHdpbmRvdyA9ICgwLCBfanF1ZXJ5LmRlZmF1bHQpKHdpbmRvdyk7CiAgICAgIHZhciAkc2Nyb2xsZXIgPSAoMCwgX2pxdWVyeS5kZWZhdWx0KSgnPGRpdiBjbGFzcz0iZml4ZWQtc2Nyb2xsLXNjcm9sbGVyIj4nKS5oZWlnaHQoU0NST0xMRVJfSEVJR0hUKTsKICAgICAgLyoqCiAgICAgICAqIFJlbW92ZSB0aGUgbGlzdGVuZXJzIGJvdW5kIGluIGxpc3RlbigpCiAgICAgICAqIEB0eXBlIHtmdW5jdGlvbn0KICAgICAgICovCgogICAgICB2YXIgdW5saXN0ZW4gPSBfbG9kYXNoLmRlZmF1bHQubm9vcDsKICAgICAgLyoqCiAgICAgICAqIExpc3RlbiBmb3Igc2Nyb2xsIGV2ZW50cyBvbiB0aGUgJHNjcm9sbGVyIGFuZCB0aGUgJGVsLCBzZXRzIHVubGlzdGVuKCkKICAgICAgICoKICAgICAgICogdW5saXN0ZW4gbXVzdCBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgb3IgbGlzdGVuKCkgd2lsbCB0aHJvdyBhbiBFcnJvcgogICAgICAgKgogICAgICAgKiBTaW5jZSB0aGUgYnJvd3NlciBlbWl0cyAic2Nyb2xsIiBldmVudHMgYWZ0ZXIgc2V0dGluZyBzY3JvbGxMZWZ0CiAgICAgICAqIHRoZSBsaXN0ZW5lcnMgYWxzbyBwcmV2ZW50IHR1Zy1vZi13YXIKICAgICAgICoKICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHVubGlzdGVuIHdhcyBub3QgY2FsbGVkIGZpcnN0CiAgICAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH0KICAgICAgICovCgogICAgICBmdW5jdGlvbiBsaXN0ZW4oKSB7CiAgICAgICAgaWYgKHVubGlzdGVuICE9PSBfbG9kYXNoLmRlZmF1bHQubm9vcCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmaXhlZFNjcm9sbCBsaXN0ZW5lcnMgd2VyZSBub3QgY2xlYW5lZCB1cCBwcm9wZXJseSBiZWZvcmUgcmUtbGlzdGVuaW5nIScpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGJsb2NrVG87CgogICAgICAgIGZ1bmN0aW9uIGJpbmQoJGZyb20sICR0bykgewogICAgICAgICAgZnVuY3Rpb24gaGFuZGxlcigpIHsKICAgICAgICAgICAgaWYgKGJsb2NrVG8gPT09ICR0bykgcmV0dXJuIGJsb2NrVG8gPSBudWxsOwogICAgICAgICAgICAkdG8uc2Nyb2xsTGVmdCgoYmxvY2tUbyA9ICRmcm9tKS5zY3JvbGxMZWZ0KCkpOwogICAgICAgICAgfQoKICAgICAgICAgICRmcm9tLm9uKCdzY3JvbGwnLCBoYW5kbGVyKTsKICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICRmcm9tLm9mZignc2Nyb2xsJywgaGFuZGxlcik7CiAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgdW5saXN0ZW4gPSBfbG9kYXNoLmRlZmF1bHQuZmxvdyhiaW5kKCRlbCwgJHNjcm9sbGVyKSwgYmluZCgkc2Nyb2xsZXIsICRlbCksIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHVubGlzdGVuID0gX2xvZGFzaC5kZWZhdWx0Lm5vb3A7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgLyoqCiAgICAgICAqIFJldmVydCBET00gY2hhbmdlcyBhbmQgZXZlbnQgbGlzdGVuZXJzCiAgICAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH0KICAgICAgICovCgoKICAgICAgZnVuY3Rpb24gY2xlYW5VcCgpIHsKICAgICAgICB1bmxpc3RlbigpOwogICAgICAgICRzY3JvbGxlci5kZXRhY2goKTsKICAgICAgICAkZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScsIDApOwogICAgICB9CiAgICAgIC8qKgogICAgICAgKiBNb2RpZnkgdGhlIERPTSBhbmQgYXR0YWNoIGV2ZW50IGxpc3RlbmVycyBiYXNlZCBvbiBuZWVkLgogICAgICAgKiBJcyBjYWxsZWQgbWFueSB0aW1lcyB0byByZS1zZXR1cCwgbXVzdCBiZSBpZGVtcG90ZW50CiAgICAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH0KICAgICAgICovCgoKICAgICAgZnVuY3Rpb24gc2V0dXAoKSB7CiAgICAgICAgY2xlYW5VcCgpOwogICAgICAgIHZhciBjb250YWluZXJXaWR0aCA9ICRlbC53aWR0aCgpOwogICAgICAgIHZhciBjb250ZW50V2lkdGggPSAkZWwucHJvcCgnc2Nyb2xsV2lkdGgnKTsKICAgICAgICB2YXIgY29udGFpbmVySG9yaXpPdmVyZmxvdyA9IGNvbnRlbnRXaWR0aCAtIGNvbnRhaW5lcldpZHRoOwogICAgICAgIHZhciBlbFRvcCA9ICRlbC5vZmZzZXQoKS50b3AgLSAkd2luZG93LnNjcm9sbFRvcCgpOwogICAgICAgIHZhciBlbEJvdHRvbSA9IGVsVG9wICsgJGVsLmhlaWdodCgpOwogICAgICAgIHZhciB3aW5kb3dWZXJ0T3ZlcmZsb3cgPSBlbEJvdHRvbSAtICR3aW5kb3cuaGVpZ2h0KCk7CiAgICAgICAgdmFyIHJlcXVpcmVTY3JvbGxlciA9IGNvbnRhaW5lckhvcml6T3ZlcmZsb3cgPiAwICYmIHdpbmRvd1ZlcnRPdmVyZmxvdyA+IDA7CiAgICAgICAgaWYgKCFyZXF1aXJlU2Nyb2xsZXIpIHJldHVybjsgLy8gcHVzaCB0aGUgY29udGVudCBhd2F5IGZyb20gdGhlIHNjcm9sbGVyCgogICAgICAgICRlbC5jc3MoJ3BhZGRpbmctYm90dG9tJywgU0NST0xMRVJfSEVJR0hUKTsgLy8gZmlsbCB0aGUgc2Nyb2xsZXIgd2l0aCBhIGR1bW15IGVsZW1lbnQgdGhhdCBtaW1pY3MgdGhlIGNvbnRlbnQKCiAgICAgICAgJHNjcm9sbGVyLndpZHRoKGNvbnRhaW5lcldpZHRoKS5odG1sKCgwLCBfanF1ZXJ5LmRlZmF1bHQpKCc8ZGl2PicpLmNzcyh7CiAgICAgICAgICB3aWR0aDogY29udGVudFdpZHRoLAogICAgICAgICAgaGVpZ2h0OiBTQ1JPTExFUl9IRUlHSFQKICAgICAgICB9KSkuaW5zZXJ0QWZ0ZXIoJGVsKTsgLy8gbGlzdGVuIGZvciBzY3JvbGwgZXZlbnRzCgogICAgICAgIGxpc3RlbigpOwogICAgICB9CgogICAgICB2YXIgd2lkdGg7CiAgICAgIHZhciBzY3JvbGxXaWR0aDsKCiAgICAgIGZ1bmN0aW9uIGNoZWNrV2lkdGgoKSB7CiAgICAgICAgdmFyIG5ld1Njcm9sbFdpZHRoID0gJGVsLnByb3AoJ3Njcm9sbFdpZHRoJyk7CiAgICAgICAgdmFyIG5ld1dpZHRoID0gJGVsLndpZHRoKCk7CgogICAgICAgIGlmIChzY3JvbGxXaWR0aCAhPT0gbmV3U2Nyb2xsV2lkdGggfHwgd2lkdGggIT09IG5ld1dpZHRoKSB7CiAgICAgICAgICAkc2NvcGUuJGFwcGx5KHNldHVwKTsKICAgICAgICAgIHNjcm9sbFdpZHRoID0gbmV3U2Nyb2xsV2lkdGg7CiAgICAgICAgICB3aWR0aCA9IG5ld1dpZHRoOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIGRlYm91bmNlZENoZWNrV2lkdGggPSBkZWJvdW5jZShjaGVja1dpZHRoLCAxMDAsIHsKICAgICAgICBpbnZva2VBcHBseTogZmFsc2UKICAgICAgfSk7CiAgICAgICRzY29wZS4kd2F0Y2goZGVib3VuY2VkQ2hlY2tXaWR0aCk7IC8vIGNsZWFudXAgd2hlbiB0aGUgc2NvcGUgaXMgZGVzdHJveWVkCgogICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHsKICAgICAgICBjbGVhblVwKCk7CiAgICAgICAgZGVib3VuY2VkQ2hlY2tXaWR0aC5jYW5jZWwoKTsKICAgICAgICAkc2Nyb2xsZXIgPSAkd2luZG93ID0gbnVsbDsKICAgICAgfSk7CiAgICB9CiAgfTsKfQovKioKICogVGhpcyBkaXJlY3RpdmUgYWRkcyBhIGZpeGVkIGhvcml6b250YWwgc2Nyb2xsYmFyIHRvIHRoZSBib3R0b20gb2YgdGhlIHdpbmRvdyB0aGF0IHByb3hpZXMgaXRzIHNjcm9sbCBldmVudHMKICogdG8gdGhlIHRhcmdldCBlbGVtZW50J3MgcmVhbCBzY3JvbGxiYXIuIFRoaXMgaXMgdXNlZnVsIHdoZW4gdGhlIHRhcmdldCBlbGVtZW50J3MgaG9yaXpvbnRhbCBzY3JvbGxiYXIKICogbWlnaHQgYmUgd2FhYWF5IGRvd24gdGhlIHBhZ2UsIGxpa2UgdGhlIGRvYyB0YWJsZSBvbiBEaXNjb3Zlci4KICovCgoKX21vZHVsZXMudWlNb2R1bGVzLmdldCgna2liYW5hJykuZGlyZWN0aXZlKCdmaXhlZFNjcm9sbCcsIEZpeGVkU2Nyb2xsUHJvdmlkZXIpOw=="},null]}