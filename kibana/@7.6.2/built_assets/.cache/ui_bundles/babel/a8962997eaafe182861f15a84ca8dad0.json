{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/layers/sources/vector_source.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/layers/sources/vector_source.js","mtime":1585205045325},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFic3RyYWN0VmVjdG9yU291cmNlID0gdm9pZCAwOwoKdmFyIF92ZWN0b3JfbGF5ZXIgPSByZXF1aXJlKCIuLi92ZWN0b3JfbGF5ZXIiKTsKCnZhciBfdG9vbHRpcF9wcm9wZXJ0eSA9IHJlcXVpcmUoIi4uL3Rvb2x0aXBzL3Rvb2x0aXBfcHJvcGVydHkiKTsKCnZhciBfdmVjdG9yX3N0eWxlID0gcmVxdWlyZSgiLi4vc3R5bGVzL3ZlY3Rvci92ZWN0b3Jfc3R5bGUiKTsKCnZhciBfc291cmNlID0gcmVxdWlyZSgiLi9zb3VyY2UiKTsKCnZhciB0b3BvanNvbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInRvcG9qc29uLWNsaWVudCIpKTsKCnZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJsb2Rhc2giKSk7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfdmVjdG9yX2ZlYXR1cmVfdHlwZXMgPSByZXF1aXJlKCIuL3ZlY3Rvcl9mZWF0dXJlX3R5cGVzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKdmFyIEFic3RyYWN0VmVjdG9yU291cmNlID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0Fic3RyYWN0U291cmNlKSB7CiAgX2luaGVyaXRzKEFic3RyYWN0VmVjdG9yU291cmNlLCBfQWJzdHJhY3RTb3VyY2UpOwoKICBmdW5jdGlvbiBBYnN0cmFjdFZlY3RvclNvdXJjZSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBYnN0cmFjdFZlY3RvclNvdXJjZSk7CgogICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBYnN0cmFjdFZlY3RvclNvdXJjZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQWJzdHJhY3RWZWN0b3JTb3VyY2UsIFt7CiAgICBrZXk6ICJjcmVhdGVGaWVsZCIsCgogICAgLyoqCiAgICAgKiBmYWN0b3J5IGZ1bmN0aW9uIGNyZWF0aW5nIGEgbmV3IGZpZWxkLWluc3RhbmNlCiAgICAgKiBAcGFyYW0gZmllbGROYW1lCiAgICAgKiBAcGFyYW0gbGFiZWwKICAgICAqIEByZXR1cm5zIHtFU0FnZ01ldHJpY0ZpZWxkfQogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRmllbGQoKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiU2hvdWxkIGltcGxlbWVtZW50ICIuY29uY2F0KHRoaXMuY29uc3RydWN0b3IudHlwZSwgIiAiKS5jb25jYXQodGhpcykpOwogICAgfQogICAgLyoqCiAgICAgKiBSZXRyaWV2ZXMgYSBmaWVsZC4gVGhpcyBtYXkgYmUgYW4gZXhpc3RpbmcgaW5zdGFuY2UuCiAgICAgKiBAcGFyYW0gZmllbGROYW1lCiAgICAgKiBAcGFyYW0gbGFiZWwKICAgICAqIEByZXR1cm5zIHtFU0FnZ01ldHJpY0ZpZWxkfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldEZpZWxkQnlOYW1lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaWVsZEJ5TmFtZShuYW1lKSB7CiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUZpZWxkKHsKICAgICAgICBmaWVsZE5hbWU6IG5hbWUKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2NyZWF0ZURlZmF1bHRMYXllckRlc2NyaXB0b3IiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVEZWZhdWx0TGF5ZXJEZXNjcmlwdG9yKG9wdGlvbnMsIG1hcENvbG9ycykgewogICAgICByZXR1cm4gX3ZlY3Rvcl9sYXllci5WZWN0b3JMYXllci5jcmVhdGVEZXNjcmlwdG9yKF9vYmplY3RTcHJlYWQoewogICAgICAgIHNvdXJjZURlc2NyaXB0b3I6IHRoaXMuX2Rlc2NyaXB0b3IKICAgICAgfSwgb3B0aW9ucyksIG1hcENvbG9ycyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2dldFRvb2x0aXBQcm9wZXJ0eU5hbWVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0VG9vbHRpcFByb3BlcnR5TmFtZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLl90b29sdGlwRmllbGRzLm1hcChmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgICByZXR1cm4gZmllbGQuZ2V0TmFtZSgpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjcmVhdGVEZWZhdWx0TGF5ZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRMYXllcihvcHRpb25zLCBtYXBDb2xvcnMpIHsKICAgICAgdmFyIGxheWVyRGVzY3JpcHRvciA9IHRoaXMuX2NyZWF0ZURlZmF1bHRMYXllckRlc2NyaXB0b3Iob3B0aW9ucywgbWFwQ29sb3JzKTsKCiAgICAgIHZhciBzdHlsZSA9IG5ldyBfdmVjdG9yX3N0eWxlLlZlY3RvclN0eWxlKGxheWVyRGVzY3JpcHRvci5zdHlsZSwgdGhpcyk7CiAgICAgIHJldHVybiBuZXcgX3ZlY3Rvcl9sYXllci5WZWN0b3JMYXllcih7CiAgICAgICAgbGF5ZXJEZXNjcmlwdG9yOiBsYXllckRlc2NyaXB0b3IsCiAgICAgICAgc291cmNlOiB0aGlzLAogICAgICAgIHN0eWxlOiBzdHlsZQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc0ZpbHRlckJ5TWFwQm91bmRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0ZpbHRlckJ5TWFwQm91bmRzKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNGaWx0ZXJCeU1hcEJvdW5kc0NvbmZpZ3VyYWJsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNGaWx0ZXJCeU1hcEJvdW5kc0NvbmZpZ3VyYWJsZSgpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogImlzQm91bmRzQXdhcmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzQm91bmRzQXdhcmUoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRCb3VuZHNGb3JGaWx0ZXJzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCb3VuZHNGb3JGaWx0ZXJzKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGdldEJvdW5kc0ZvckZpbHRlcnMkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbnNvbGUud2FybignU2hvdWxkIGltcGxlbWVudCBBYnN0cmFjdFZlY3RvclNvdXJjZSNnZXRCb3VuZHNGb3JGaWx0ZXJzJyk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgbnVsbCk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldERhdGVGaWVsZHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERhdGVGaWVsZHMoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gZ2V0RGF0ZUZpZWxkcyQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIFtdKTsKCiAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldE51bWJlckZpZWxkcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TnVtYmVyRmllbGRzKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGdldE51bWJlckZpZWxkcyQoX2NvbnRleHQzKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIFtdKTsKCiAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEZpZWxkcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmllbGRzKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGdldEZpZWxkcyQoX2NvbnRleHQ0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQ0LnQwID0gW107CiAgICAgICAgICAgICAgX2NvbnRleHQ0LnQxID0gX3RvQ29uc3VtYWJsZUFycmF5OwogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHRoaXMuZ2V0RGF0ZUZpZWxkcygpKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBfY29udGV4dDQudDIgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dDQudDMgPSAoMCwgX2NvbnRleHQ0LnQxKShfY29udGV4dDQudDIpOwogICAgICAgICAgICAgIF9jb250ZXh0NC50NCA9IF90b0NvbnN1bWFibGVBcnJheTsKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDk7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh0aGlzLmdldE51bWJlckZpZWxkcygpKTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBfY29udGV4dDQudDUgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dDQudDYgPSAoMCwgX2NvbnRleHQ0LnQ0KShfY29udGV4dDQudDUpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDQudDAuY29uY2F0LmNhbGwoX2NvbnRleHQ0LnQwLCBfY29udGV4dDQudDMsIF9jb250ZXh0NC50NikpOwoKICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIHRoaXMpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldENhdGVnb3JpY2FsRmllbGRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDYXRlZ29yaWNhbEZpZWxkcygpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBnZXRDYXRlZ29yaWNhbEZpZWxkcyQoX2NvbnRleHQ1KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIFtdKTsKCiAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldExlZnRKb2luRmllbGRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMZWZ0Sm9pbkZpZWxkcygpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBnZXRMZWZ0Sm9pbkZpZWxkcyQoX2NvbnRleHQ2KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIsIFtdKTsKCiAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEdlb0pzb25XaXRoTWV0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0R2VvSnNvbldpdGhNZXRhKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGdldEdlb0pzb25XaXRoTWV0YSQoX2NvbnRleHQ3KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaG91bGQgaW1wbGVtZW50IFZlY3RvclNvdXJjZSNnZXRHZW9Kc29uJyk7CgogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjYW5Gb3JtYXRGZWF0dXJlUHJvcGVydGllcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuRm9ybWF0RmVhdHVyZVByb3BlcnRpZXMoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0gLy8gQWxsb3cgc291cmNlIHRvIGZpbHRlciBhbmQgZm9ybWF0IGZlYXR1cmUgcHJvcGVydGllcyBiZWZvcmUgZGlzcGxheWluZyB0byB1c2VyCgogIH0sIHsKICAgIGtleTogImZpbHRlckFuZEZvcm1hdFByb3BlcnRpZXNUb0h0bWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlckFuZEZvcm1hdFByb3BlcnRpZXNUb0h0bWwocHJvcGVydGllcykgewogICAgICB2YXIgdG9vbHRpcFByb3BlcnRpZXMsIGtleTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBmaWx0ZXJBbmRGb3JtYXRQcm9wZXJ0aWVzVG9IdG1sJChfY29udGV4dDgpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDgucHJldiA9IF9jb250ZXh0OC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICB0b29sdGlwUHJvcGVydGllcyA9IFtdOwogICAgICAgICAgICAgIF9jb250ZXh0OC50MCA9IHJlZ2VuZXJhdG9yUnVudGltZS5rZXlzKHByb3BlcnRpZXMpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGlmICgoX2NvbnRleHQ4LnQxID0gX2NvbnRleHQ4LnQwKCkpLmRvbmUpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAga2V5ID0gX2NvbnRleHQ4LnQxLnZhbHVlOwoKICAgICAgICAgICAgICBpZiAoIWtleS5zdGFydHNXaXRoKCdfX2tibicpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDY7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguYWJydXB0KCJjb250aW51ZSIsIDIpOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIHRvb2x0aXBQcm9wZXJ0aWVzLnB1c2gobmV3IF90b29sdGlwX3Byb3BlcnR5LlRvb2x0aXBQcm9wZXJ0eShrZXksIGtleSwgcHJvcGVydGllc1trZXldKSk7CiAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAyOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguYWJydXB0KCJyZXR1cm4iLCB0b29sdGlwUHJvcGVydGllcyk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNUaW1lQXdhcmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzVGltZUF3YXJlKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGlzVGltZUF3YXJlJChfY29udGV4dDkpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LmFicnVwdCgicmV0dXJuIiwgZmFsc2UpOwoKICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNKb2luYWJsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNKb2luYWJsZSgpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0U3VwcG9ydGVkU2hhcGVUeXBlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3VwcG9ydGVkU2hhcGVUeXBlcygpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBnZXRTdXBwb3J0ZWRTaGFwZVR5cGVzJChfY29udGV4dDEwKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMC5wcmV2ID0gX2NvbnRleHQxMC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoInJldHVybiIsIFtfdmVjdG9yX2ZlYXR1cmVfdHlwZXMuVkVDVE9SX1NIQVBFX1RZUEVTLlBPSU5ULCBfdmVjdG9yX2ZlYXR1cmVfdHlwZXMuVkVDVE9SX1NIQVBFX1RZUEVTLkxJTkUsIF92ZWN0b3JfZmVhdHVyZV90eXBlcy5WRUNUT1JfU0hBUEVfVFlQRVMuUE9MWUdPTl0pOwoKICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFNvdXJjZVRvb2x0aXBDb250ZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTb3VyY2VUb29sdGlwQ29udGVudCgpCiAgICAvKiBzb3VyY2VEYXRhUmVxdWVzdCAqLwogICAgewogICAgICByZXR1cm4gewogICAgICAgIHRvb2x0aXBDb250ZW50OiBudWxsLAogICAgICAgIGFyZVJlc3VsdHNUcmltbWVkOiBmYWxzZQogICAgICB9OwogICAgfQogIH1dLCBbewogICAga2V5OiAiZ2V0R2VvSnNvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0R2VvSnNvbihfcmVmKSB7CiAgICAgIHZhciBmb3JtYXQsIGZlYXR1cmVDb2xsZWN0aW9uUGF0aCwgZmV0Y2hVcmwsIGZldGNoZWRKc29uLCByZXNwb25zZSwgZmVhdHVyZXM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gZ2V0R2VvSnNvbiQoX2NvbnRleHQxMSkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTEucHJldiA9IF9jb250ZXh0MTEubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgZm9ybWF0ID0gX3JlZi5mb3JtYXQsIGZlYXR1cmVDb2xsZWN0aW9uUGF0aCA9IF9yZWYuZmVhdHVyZUNvbGxlY3Rpb25QYXRoLCBmZXRjaFVybCA9IF9yZWYuZmV0Y2hVcmw7CiAgICAgICAgICAgICAgX2NvbnRleHQxMS5wcmV2ID0gMTsKICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoZmV0Y2goZmV0Y2hVcmwpKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0MTEuc2VudDsKCiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSA3OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVlc3QgZmFpbGVkJyk7CgogICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gOTsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHJlc3BvbnNlLmpzb24oKSk7CgogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgZmV0Y2hlZEpzb24gPSBfY29udGV4dDExLnNlbnQ7CiAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIF9jb250ZXh0MTEucHJldiA9IDEyOwogICAgICAgICAgICAgIF9jb250ZXh0MTEudDAgPSBfY29udGV4dDExWyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5zb3VyY2UudmV0b3JTb3VyY2UucmVxdWVzdEZhaWxlZEVycm9yTWVzc2FnZScsIHsKICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVW5hYmxlIHRvIGZldGNoIHZlY3RvciBzaGFwZXMgZnJvbSB1cmw6IHtmZXRjaFVybH0iLAogICAgICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgICAgIGZldGNoVXJsOiBmZXRjaFVybAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgaWYgKCEoZm9ybWF0ID09PSAnZ2VvanNvbicpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAxNzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuYWJydXB0KCJyZXR1cm4iLCBmZXRjaGVkSnNvbik7CgogICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgIGlmICghKGZvcm1hdCA9PT0gJ3RvcG9qc29uJykpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDIwOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBmZWF0dXJlcyA9IF9sb2Rhc2guZGVmYXVsdC5nZXQoZmV0Y2hlZEpzb24sICJvYmplY3RzLiIuY29uY2F0KGZlYXR1cmVDb2xsZWN0aW9uUGF0aCkpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLmFicnVwdCgicmV0dXJuIiwgdG9wb2pzb24uZmVhdHVyZShmZXRjaGVkSnNvbiwgZmVhdHVyZXMpKTsKCiAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLnNvdXJjZS52ZXRvclNvdXJjZS5mb3JtYXRFcnJvck1lc3NhZ2UnLCB7CiAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlVuYWJsZSB0byBmZXRjaCB2ZWN0b3Igc2hhcGVzIGZyb20gdXJsOiB7Zm9ybWF0fSIsCiAgICAgICAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgICAgICAgZm9ybWF0OiBmb3JtYXQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIG51bGwsIFtbMSwgMTJdXSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQWJzdHJhY3RWZWN0b3JTb3VyY2U7Cn0oX3NvdXJjZS5BYnN0cmFjdFNvdXJjZSk7CgpleHBvcnRzLkFic3RyYWN0VmVjdG9yU291cmNlID0gQWJzdHJhY3RWZWN0b3JTb3VyY2U7"},null]}