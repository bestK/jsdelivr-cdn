{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/jobs/new_job/pages/components/pick_fields_step/components/advanced_detector_modal/advanced_detector_modal.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/jobs/new_job/pages/components/pick_fields_step/components/advanced_detector_modal/advanced_detector_modal.js","mtime":1585205045892},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFkdmFuY2VkRGV0ZWN0b3JNb2RhbCA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2pvYl9jcmVhdG9yX2NvbnRleHQgPSByZXF1aXJlKCIuLi8uLi8uLi9qb2JfY3JlYXRvcl9jb250ZXh0Iik7Cgp2YXIgX2dlbmVyYWwgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9jb21tb24vam9iX2NyZWF0b3IvdXRpbC9nZW5lcmFsIik7Cgp2YXIgX2ZpZWxkcyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2NvbW1vbi90eXBlcy9maWVsZHMiKTsKCnZhciBfbW9kYWxfd3JhcHBlciA9IHJlcXVpcmUoIi4vbW9kYWxfd3JhcHBlciIpOwoKdmFyIF9zdHJpbmdfdXRpbHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi8uLi91dGlsL3N0cmluZ191dGlscyIpOwoKdmFyIF9kZWZhdWx0X2NvbmZpZ3MgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9jb21tb24vam9iX2NyZWF0b3IvdXRpbC9kZWZhdWx0X2NvbmZpZ3MiKTsKCnZhciBfZGVzY3JpcHRpb25zID0gcmVxdWlyZSgiLi9kZXNjcmlwdGlvbnMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9Cgp2YXIgZW1wdHlPcHRpb24gPSB7CiAgbGFiZWw6ICcnCn07CnZhciBleGNsdWRlRnJlcXVlbnRPcHRpb25zID0gW3sKICBsYWJlbDogJ2FsbCcKfSwgewogIGxhYmVsOiAnbm9uZScKfV07Cgp2YXIgQWR2YW5jZWREZXRlY3Rvck1vZGFsID0gZnVuY3Rpb24gQWR2YW5jZWREZXRlY3Rvck1vZGFsKF9yZWYpIHsKICB2YXIgcGF5bG9hZCA9IF9yZWYucGF5bG9hZCwKICAgICAgZmllbGRzID0gX3JlZi5maWVsZHMsCiAgICAgIGFnZ3MgPSBfcmVmLmFnZ3MsCiAgICAgIGRldGVjdG9yQ2hhbmdlSGFuZGxlciA9IF9yZWYuZGV0ZWN0b3JDaGFuZ2VIYW5kbGVyLAogICAgICBjbG9zZU1vZGFsID0gX3JlZi5jbG9zZU1vZGFsOwoKICB2YXIgX3VzZUNvbnRleHQgPSAoMCwgX3JlYWN0LnVzZUNvbnRleHQpKF9qb2JfY3JlYXRvcl9jb250ZXh0LkpvYkNyZWF0b3JDb250ZXh0KSwKICAgICAgamMgPSBfdXNlQ29udGV4dC5qb2JDcmVhdG9yOwoKICB2YXIgam9iQ3JlYXRvciA9IGpjOwoKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkocGF5bG9hZC5kZXRlY3RvciksCiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLAogICAgICBkZXRlY3RvciA9IF91c2VTdGF0ZTJbMF0sCiAgICAgIHNldERldGVjdG9yID0gX3VzZVN0YXRlMlsxXTsKCiAgdmFyIF91c2VTdGF0ZTMgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShjcmVhdGVBZ2dPcHRpb24oZGV0ZWN0b3IuYWdnKSksCiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgYWdnT3B0aW9uID0gX3VzZVN0YXRlNFswXSwKICAgICAgc2V0QWdnT3B0aW9uID0gX3VzZVN0YXRlNFsxXTsKCiAgdmFyIF91c2VTdGF0ZTUgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShjcmVhdGVGaWVsZE9wdGlvbihkZXRlY3Rvci5maWVsZCkpLAogICAgICBfdXNlU3RhdGU2ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlNSwgMiksCiAgICAgIGZpZWxkT3B0aW9uID0gX3VzZVN0YXRlNlswXSwKICAgICAgc2V0RmllbGRPcHRpb24gPSBfdXNlU3RhdGU2WzFdOwoKICB2YXIgX3VzZVN0YXRlNyA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKGNyZWF0ZUZpZWxkT3B0aW9uKGRldGVjdG9yLmJ5RmllbGQpKSwKICAgICAgX3VzZVN0YXRlOCA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTcsIDIpLAogICAgICBieUZpZWxkT3B0aW9uID0gX3VzZVN0YXRlOFswXSwKICAgICAgc2V0QnlGaWVsZE9wdGlvbiA9IF91c2VTdGF0ZThbMV07CgogIHZhciBfdXNlU3RhdGU5ID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoY3JlYXRlRmllbGRPcHRpb24oZGV0ZWN0b3Iub3ZlckZpZWxkKSksCiAgICAgIF91c2VTdGF0ZTEwID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlOSwgMiksCiAgICAgIG92ZXJGaWVsZE9wdGlvbiA9IF91c2VTdGF0ZTEwWzBdLAogICAgICBzZXRPdmVyRmllbGRPcHRpb24gPSBfdXNlU3RhdGUxMFsxXTsKCiAgdmFyIF91c2VTdGF0ZTExID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoY3JlYXRlRmllbGRPcHRpb24oZGV0ZWN0b3IucGFydGl0aW9uRmllbGQpKSwKICAgICAgX3VzZVN0YXRlMTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUxMSwgMiksCiAgICAgIHBhcnRpdGlvbkZpZWxkT3B0aW9uID0gX3VzZVN0YXRlMTJbMF0sCiAgICAgIHNldFBhcnRpdGlvbkZpZWxkT3B0aW9uID0gX3VzZVN0YXRlMTJbMV07CgogIHZhciBfdXNlU3RhdGUxMyA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKGNyZWF0ZUV4Y2x1ZGVGcmVxdWVudE9wdGlvbihkZXRlY3Rvci5leGNsdWRlRnJlcXVlbnQpKSwKICAgICAgX3VzZVN0YXRlMTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUxMywgMiksCiAgICAgIGV4Y2x1ZGVGcmVxdWVudE9wdGlvbiA9IF91c2VTdGF0ZTE0WzBdLAogICAgICBzZXRFeGNsdWRlRnJlcXVlbnRPcHRpb24gPSBfdXNlU3RhdGUxNFsxXTsKCiAgdmFyIF91c2VTdGF0ZTE1ID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZGV0ZWN0b3IuZGVzY3JpcHRpb24gfHwgJycpLAogICAgICBfdXNlU3RhdGUxNiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTE1LCAyKSwKICAgICAgZGVzY3JpcHRpb25PcHRpb24gPSBfdXNlU3RhdGUxNlswXSwKICAgICAgc2V0RGVzY3JpcHRpb25PcHRpb24gPSBfdXNlU3RhdGUxNlsxXTsKCiAgdmFyIF91c2VTdGF0ZTE3ID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkodHJ1ZSksCiAgICAgIF91c2VTdGF0ZTE4ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMTcsIDIpLAogICAgICBzcGxpdEZpZWxkc0VuYWJsZWQgPSBfdXNlU3RhdGUxOFswXSwKICAgICAgc2V0U3BsaXRGaWVsZHNFbmFibGVkID0gX3VzZVN0YXRlMThbMV07CgogIHZhciBfdXNlU3RhdGUxOSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKHRydWUpLAogICAgICBfdXNlU3RhdGUyMCA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTE5LCAyKSwKICAgICAgZXhjbHVkZUZyZXF1ZW50RW5hYmxlZCA9IF91c2VTdGF0ZTIwWzBdLAogICAgICBzZXRFeGNsdWRlRnJlcXVlbnRFbmFibGVkID0gX3VzZVN0YXRlMjBbMV07CgogIHZhciBfdXNlU3RhdGUyMSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKHRydWUpLAogICAgICBfdXNlU3RhdGUyMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTIxLCAyKSwKICAgICAgZmllbGRPcHRpb25FbmFibGVkID0gX3VzZVN0YXRlMjJbMF0sCiAgICAgIHNldEZpZWxkT3B0aW9uRW5hYmxlZCA9IF91c2VTdGF0ZTIyWzFdOwoKICB2YXIgX3VzZURldGVjdG9yUGxhY2Vob2xkID0gdXNlRGV0ZWN0b3JQbGFjZWhvbGRlcihkZXRlY3RvciksCiAgICAgIGRlc2NyaXB0aW9uUGxhY2Vob2xkZXIgPSBfdXNlRGV0ZWN0b3JQbGFjZWhvbGQuZGVzY3JpcHRpb25QbGFjZWhvbGRlciwKICAgICAgc2V0RGVzY3JpcHRpb25QbGFjZWhvbGRlciA9IF91c2VEZXRlY3RvclBsYWNlaG9sZC5zZXREZXNjcmlwdGlvblBsYWNlaG9sZGVyOwoKICB2YXIgdXNpbmdTY3JpcHRGaWVsZHMgPSBqb2JDcmVhdG9yLmFkZGl0aW9uYWxGaWVsZHMubGVuZ3RoID4gMDsgLy8gbGlzdCBvZiBhZ2dyZWdhdGlvbiBjb21ib2JveCBvcHRpb25zLgoKICB2YXIgYWdnT3B0aW9ucyA9IGFnZ3MuZmlsdGVyKGZ1bmN0aW9uIChhZ2cpIHsKICAgIHJldHVybiBmaWx0ZXJBZ2dzKGFnZywgdXNpbmdTY3JpcHRGaWVsZHMpOwogIH0pLm1hcChjcmVhdGVBZ2dPcHRpb24pOyAvLyBmaWVsZHMgYXZhaWxhYmxlIGZvciB0aGUgc2VsZWN0ZWQgYWdnCgogIHZhciBfdXNlQ3VycmVudEZpZWxkT3B0aW8gPSB1c2VDdXJyZW50RmllbGRPcHRpb25zKGRldGVjdG9yLmFnZywgam9iQ3JlYXRvci5hZGRpdGlvbmFsRmllbGRzLCBmaWVsZHMpLAogICAgICBjdXJyZW50RmllbGRPcHRpb25zID0gX3VzZUN1cnJlbnRGaWVsZE9wdGlvLmN1cnJlbnRGaWVsZE9wdGlvbnMsCiAgICAgIHNldEN1cnJlbnRGaWVsZE9wdGlvbnMgPSBfdXNlQ3VycmVudEZpZWxkT3B0aW8uc2V0Q3VycmVudEZpZWxkT3B0aW9uczsKCiAgdmFyIGFsbEZpZWxkT3B0aW9ucyA9IF90b0NvbnN1bWFibGVBcnJheSgoMCwgX2dlbmVyYWwuY3JlYXRlRmllbGRPcHRpb25zKShmaWVsZHMsIGpvYkNyZWF0b3IuYWRkaXRpb25hbEZpZWxkcykpLnNvcnQoY29tYm9Cb3hPcHRpb25zU29ydCk7CgogIHZhciBzcGxpdEZpZWxkT3B0aW9ucyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYWxsRmllbGRPcHRpb25zKSwgX3RvQ29uc3VtYWJsZUFycmF5KCgwLCBfZ2VuZXJhbC5jcmVhdGVNbGNhdGVnb3J5RmllbGRPcHRpb24pKGpvYkNyZWF0b3IuY2F0ZWdvcml6YXRpb25GaWVsZE5hbWUpKSkuc29ydChjb21ib0JveE9wdGlvbnNTb3J0KTsKICB2YXIgZXZlbnRSYXRlRmllbGQgPSBmaWVsZHMuZmluZChmdW5jdGlvbiAoZikgewogICAgcmV0dXJuIGYuaWQgPT09IF9maWVsZHMuRVZFTlRfUkFURV9GSUVMRF9JRDsKICB9KTsKCiAgdmFyIG9uT3B0aW9uQ2hhbmdlID0gZnVuY3Rpb24gb25PcHRpb25DaGFuZ2UoZnVuYykgewogICAgcmV0dXJuIGZ1bmN0aW9uIChzZWxlY3RlZE9wdGlvbnMpIHsKICAgICAgZnVuYyhzZWxlY3RlZE9wdGlvbnNbMF0gfHwgZW1wdHlPcHRpb24pOwogICAgfTsKICB9OwoKICBmdW5jdGlvbiBnZXRBZ2codGl0bGUpIHsKICAgIHJldHVybiBhZ2dzLmZpbmQoZnVuY3Rpb24gKGEpIHsKICAgICAgcmV0dXJuIGEuaWQgPT09IHRpdGxlOwogICAgfSkgfHwgbnVsbDsKICB9CgogIGZ1bmN0aW9uIGdldEZpZWxkKHRpdGxlKSB7CiAgICBpZiAodGl0bGUgPT09IF9maWVsZHMubWxDYXRlZ29yeS5pZCkgewogICAgICByZXR1cm4gX2ZpZWxkcy5tbENhdGVnb3J5OwogICAgfQoKICAgIHJldHVybiBmaWVsZHMuZmluZChmdW5jdGlvbiAoZikgewogICAgICByZXR1cm4gZi5pZCA9PT0gdGl0bGU7CiAgICB9KSB8fCBqb2JDcmVhdG9yLmFkZGl0aW9uYWxGaWVsZHMuZmluZChmdW5jdGlvbiAoZikgewogICAgICByZXR1cm4gZi5pZCA9PT0gdGl0bGU7CiAgICB9KSB8fCBudWxsOwogIH0KCiAgKDAsIF9yZWFjdC51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHsKICAgIHZhciBhZ2cgPSBnZXRBZ2coYWdnT3B0aW9uLmxhYmVsKTsKICAgIHZhciBmaWVsZCA9IGdldEZpZWxkKGZpZWxkT3B0aW9uLmxhYmVsKTsKICAgIHZhciBieUZpZWxkID0gZ2V0RmllbGQoYnlGaWVsZE9wdGlvbi5sYWJlbCk7CiAgICB2YXIgb3ZlckZpZWxkID0gZ2V0RmllbGQob3ZlckZpZWxkT3B0aW9uLmxhYmVsKTsKICAgIHZhciBwYXJ0aXRpb25GaWVsZCA9IGdldEZpZWxkKHBhcnRpdGlvbkZpZWxkT3B0aW9uLmxhYmVsKTsKCiAgICBpZiAoYWdnICE9PSBudWxsKSB7CiAgICAgIHNldEN1cnJlbnRGaWVsZE9wdGlvbnMoYWdnKTsKCiAgICAgIGlmIChpc0ZpZWxkbGVzc0FnZyhhZ2cpICYmIGV2ZW50UmF0ZUZpZWxkICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBzZXRTcGxpdEZpZWxkc0VuYWJsZWQodHJ1ZSk7CiAgICAgICAgc2V0RmllbGRPcHRpb24oZW1wdHlPcHRpb24pOwogICAgICAgIHNldEZpZWxkT3B0aW9uRW5hYmxlZChmYWxzZSk7CiAgICAgICAgZmllbGQgPSBldmVudFJhdGVGaWVsZDsKICAgICAgfSBlbHNlIHsKICAgICAgICBzZXRTcGxpdEZpZWxkc0VuYWJsZWQoZmllbGQgIT09IG51bGwpOwogICAgICAgIHNldEZpZWxkT3B0aW9uRW5hYmxlZCh0cnVlKTsKICAgICAgfSAvLyBvbmx5IGVuYWJsZSBleGNsdWRlIGZyZXF1ZW50IGlmIHRoZXJlIGlzIGEgYnkgb3Igb3ZlciBzZWxlY3RlZAoKCiAgICAgIHNldEV4Y2x1ZGVGcmVxdWVudEVuYWJsZWQoYnlGaWVsZCAhPT0gbnVsbCB8fCBvdmVyRmllbGQgIT09IG51bGwpOwogICAgfSBlbHNlIHsKICAgICAgc2V0U3BsaXRGaWVsZHNFbmFibGVkKGZhbHNlKTsKICAgICAgc2V0RmllbGRPcHRpb25FbmFibGVkKGZhbHNlKTsKICAgIH0KCiAgICB2YXIgZHRyID0gewogICAgICBhZ2c6IGFnZywKICAgICAgZmllbGQ6IGZpZWxkLAogICAgICBieUZpZWxkOiBieUZpZWxkLAogICAgICBvdmVyRmllbGQ6IG92ZXJGaWVsZCwKICAgICAgcGFydGl0aW9uRmllbGQ6IHBhcnRpdGlvbkZpZWxkLAogICAgICBleGNsdWRlRnJlcXVlbnQ6IGV4Y2x1ZGVGcmVxdWVudE9wdGlvbi5sYWJlbCAhPT0gJycgPyBleGNsdWRlRnJlcXVlbnRPcHRpb24ubGFiZWwgOiBudWxsLAogICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25PcHRpb24gIT09ICcnID8gZGVzY3JpcHRpb25PcHRpb24gOiBudWxsLAogICAgICBjdXN0b21SdWxlczogbnVsbAogICAgfTsKICAgIHNldERldGVjdG9yKGR0cik7CiAgICBzZXREZXNjcmlwdGlvblBsYWNlaG9sZGVyKGR0cik7CiAgfSwgW2FnZ09wdGlvbiwgZmllbGRPcHRpb24sIGJ5RmllbGRPcHRpb24sIG92ZXJGaWVsZE9wdGlvbiwgcGFydGl0aW9uRmllbGRPcHRpb24sIGV4Y2x1ZGVGcmVxdWVudE9wdGlvbiwgZGVzY3JpcHRpb25PcHRpb25dKTsKICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgdmFyIGFnZyA9IGdldEFnZyhhZ2dPcHRpb24ubGFiZWwpOwogICAgc2V0U3BsaXRGaWVsZHNFbmFibGVkKGFnZ09wdGlvbi5sYWJlbCAhPT0gJycpOwoKICAgIGlmIChhZ2cgIT09IG51bGwpIHsKICAgICAgc2V0RmllbGRPcHRpb25FbmFibGVkKGlzRmllbGRsZXNzQWdnKGFnZykgPT09IGZhbHNlKTsKICAgICAgdmFyIGJ5RmllbGQgPSBnZXRGaWVsZChieUZpZWxkT3B0aW9uLmxhYmVsKTsKICAgICAgdmFyIG92ZXJGaWVsZCA9IGdldEZpZWxkKG92ZXJGaWVsZE9wdGlvbi5sYWJlbCk7CiAgICAgIHNldEV4Y2x1ZGVGcmVxdWVudEVuYWJsZWQoYnlGaWVsZCAhPT0gbnVsbCB8fCBvdmVyRmllbGQgIT09IG51bGwpOwogICAgfQogIH0sIFtdKTsKICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgLy8gd2lwZSB0aGUgZXhjbHVkZSBmcmVxdWVudCBjaG9pY2UgaWYgdGhlIHNlbGVjdCBoYXMgYmVlbiBkaXNhYmxlZAogICAgaWYgKGV4Y2x1ZGVGcmVxdWVudEVuYWJsZWQgPT09IGZhbHNlKSB7CiAgICAgIHNldEV4Y2x1ZGVGcmVxdWVudE9wdGlvbihlbXB0eU9wdGlvbik7CiAgICB9CiAgfSwgW2V4Y2x1ZGVGcmVxdWVudEVuYWJsZWRdKTsKCiAgZnVuY3Rpb24gb25DcmVhdGVDbGljaygpIHsKICAgIGRldGVjdG9yQ2hhbmdlSGFuZGxlcihkZXRlY3RvciwgcGF5bG9hZC5pbmRleCk7CiAgfQoKICBmdW5jdGlvbiBzYXZlRW5hYmxlZCgpIHsKICAgIHJldHVybiBzcGxpdEZpZWxkc0VuYWJsZWQgJiYgKGZpZWxkT3B0aW9uRW5hYmxlZCA9PT0gZmFsc2UgfHwgZmllbGRPcHRpb25FbmFibGVkID09PSB0cnVlICYmIGZpZWxkT3B0aW9uLmxhYmVsICE9PSAnJyk7CiAgfQoKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfbW9kYWxfd3JhcHBlci5Nb2RhbFdyYXBwZXIsIHsKICAgIG9uQ3JlYXRlQ2xpY2s6IG9uQ3JlYXRlQ2xpY2ssCiAgICBjbG9zZU1vZGFsOiBjbG9zZU1vZGFsLAogICAgc2F2ZUVuYWJsZWQ6IHNhdmVFbmFibGVkKCkKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAiZGF0YS10ZXN0LXN1YmoiOiAibWxBZHZhbmNlZEZ1bmN0aW9uU2VsZWN0IgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2Rlc2NyaXB0aW9ucy5BZ2dEZXNjcmlwdGlvbiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbWJvQm94LCB7CiAgICBzaW5nbGVTZWxlY3Rpb246IHsKICAgICAgYXNQbGFpblRleHQ6IHRydWUKICAgIH0sCiAgICBvcHRpb25zOiBhZ2dPcHRpb25zLAogICAgc2VsZWN0ZWRPcHRpb25zOiBjcmVhdGVTZWxlY3RlZE9wdGlvbnMoYWdnT3B0aW9uLCBhZ2dPcHRpb25zKSwKICAgIG9uQ2hhbmdlOiBvbk9wdGlvbkNoYW5nZShzZXRBZ2dPcHRpb24pLAogICAgaXNDbGVhcmFibGU6IHRydWUKICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJtbEFkdmFuY2VkRmllbGRTZWxlY3QiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZGVzY3JpcHRpb25zLkZpZWxkRGVzY3JpcHRpb24sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDb21ib0JveCwgewogICAgc2luZ2xlU2VsZWN0aW9uOiB7CiAgICAgIGFzUGxhaW5UZXh0OiB0cnVlCiAgICB9LAogICAgb3B0aW9uczogY3VycmVudEZpZWxkT3B0aW9ucywKICAgIHNlbGVjdGVkT3B0aW9uczogY3JlYXRlU2VsZWN0ZWRPcHRpb25zKGZpZWxkT3B0aW9uLCBjdXJyZW50RmllbGRPcHRpb25zKSwKICAgIG9uQ2hhbmdlOiBvbk9wdGlvbkNoYW5nZShzZXRGaWVsZE9wdGlvbiksCiAgICBpc0NsZWFyYWJsZTogdHJ1ZSwKICAgIGlzRGlzYWJsZWQ6IGZpZWxkT3B0aW9uRW5hYmxlZCA9PT0gZmFsc2UKICB9KSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUhvcml6b250YWxSdWxlLCB7CiAgICBtYXJnaW46ICJsIgogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyaWQsIHsKICAgIGNvbHVtbnM6IDIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJtbEFkdmFuY2VkQnlGaWVsZFNlbGVjdCIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9kZXNjcmlwdGlvbnMuQnlGaWVsZERlc2NyaXB0aW9uLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ29tYm9Cb3gsIHsKICAgIHNpbmdsZVNlbGVjdGlvbjogewogICAgICBhc1BsYWluVGV4dDogdHJ1ZQogICAgfSwKICAgIG9wdGlvbnM6IHNwbGl0RmllbGRPcHRpb25zLAogICAgc2VsZWN0ZWRPcHRpb25zOiBjcmVhdGVTZWxlY3RlZE9wdGlvbnMoYnlGaWVsZE9wdGlvbiwgc3BsaXRGaWVsZE9wdGlvbnMpLAogICAgb25DaGFuZ2U6IG9uT3B0aW9uQ2hhbmdlKHNldEJ5RmllbGRPcHRpb24pLAogICAgaXNDbGVhcmFibGU6IHRydWUsCiAgICBpc0Rpc2FibGVkOiBzcGxpdEZpZWxkc0VuYWJsZWQgPT09IGZhbHNlCiAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAiZGF0YS10ZXN0LXN1YmoiOiAibWxBZHZhbmNlZE92ZXJGaWVsZFNlbGVjdCIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9kZXNjcmlwdGlvbnMuT3ZlckZpZWxkRGVzY3JpcHRpb24sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDb21ib0JveCwgewogICAgc2luZ2xlU2VsZWN0aW9uOiB7CiAgICAgIGFzUGxhaW5UZXh0OiB0cnVlCiAgICB9LAogICAgb3B0aW9uczogc3BsaXRGaWVsZE9wdGlvbnMsCiAgICBzZWxlY3RlZE9wdGlvbnM6IGNyZWF0ZVNlbGVjdGVkT3B0aW9ucyhvdmVyRmllbGRPcHRpb24sIHNwbGl0RmllbGRPcHRpb25zKSwKICAgIG9uQ2hhbmdlOiBvbk9wdGlvbkNoYW5nZShzZXRPdmVyRmllbGRPcHRpb24pLAogICAgaXNDbGVhcmFibGU6IHRydWUsCiAgICBpc0Rpc2FibGVkOiBzcGxpdEZpZWxkc0VuYWJsZWQgPT09IGZhbHNlCiAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAiZGF0YS10ZXN0LXN1YmoiOiAibWxBZHZhbmNlZFBhcnRpdGlvbkZpZWxkU2VsZWN0IgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2Rlc2NyaXB0aW9ucy5QYXJ0aXRpb25GaWVsZERlc2NyaXB0aW9uLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ29tYm9Cb3gsIHsKICAgIHNpbmdsZVNlbGVjdGlvbjogewogICAgICBhc1BsYWluVGV4dDogdHJ1ZQogICAgfSwKICAgIG9wdGlvbnM6IHNwbGl0RmllbGRPcHRpb25zLAogICAgc2VsZWN0ZWRPcHRpb25zOiBjcmVhdGVTZWxlY3RlZE9wdGlvbnMocGFydGl0aW9uRmllbGRPcHRpb24sIHNwbGl0RmllbGRPcHRpb25zKSwKICAgIG9uQ2hhbmdlOiBvbk9wdGlvbkNoYW5nZShzZXRQYXJ0aXRpb25GaWVsZE9wdGlvbiksCiAgICBpc0NsZWFyYWJsZTogdHJ1ZSwKICAgIGlzRGlzYWJsZWQ6IHNwbGl0RmllbGRzRW5hYmxlZCA9PT0gZmFsc2UKICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJtbEFkdmFuY2VkRXhjbHVkZUZyZXF1ZW50U2VsZWN0IgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2Rlc2NyaXB0aW9ucy5FeGNsdWRlRnJlcXVlbnREZXNjcmlwdGlvbiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbWJvQm94LCB7CiAgICBzaW5nbGVTZWxlY3Rpb246IHsKICAgICAgYXNQbGFpblRleHQ6IHRydWUKICAgIH0sCiAgICBvcHRpb25zOiBleGNsdWRlRnJlcXVlbnRPcHRpb25zLAogICAgc2VsZWN0ZWRPcHRpb25zOiBjcmVhdGVTZWxlY3RlZE9wdGlvbnMoZXhjbHVkZUZyZXF1ZW50T3B0aW9uLCBleGNsdWRlRnJlcXVlbnRPcHRpb25zKSwKICAgIG9uQ2hhbmdlOiBvbk9wdGlvbkNoYW5nZShzZXRFeGNsdWRlRnJlcXVlbnRPcHRpb24pLAogICAgaXNDbGVhcmFibGU6IHRydWUsCiAgICBpc0Rpc2FibGVkOiBzcGxpdEZpZWxkc0VuYWJsZWQgPT09IGZhbHNlIHx8IGV4Y2x1ZGVGcmVxdWVudEVuYWJsZWQgPT09IGZhbHNlCiAgfSkpKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlIb3Jpem9udGFsUnVsZSwgewogICAgbWFyZ2luOiAibCIKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9kZXNjcmlwdGlvbnMuRGVzY3JpcHRpb25EZXNjcmlwdGlvbiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHRBcmVhLCB7CiAgICByb3dzOiAyLAogICAgZnVsbFdpZHRoOiB0cnVlLAogICAgcGxhY2Vob2xkZXI6IGRlc2NyaXB0aW9uUGxhY2Vob2xkZXIsCiAgICB2YWx1ZTogZGVzY3JpcHRpb25PcHRpb24sCiAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkgewogICAgICByZXR1cm4gc2V0RGVzY3JpcHRpb25PcHRpb24oZS50YXJnZXQudmFsdWUpOwogICAgfSwKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJtbEFkdmFuY2VkRGV0ZWN0b3JEZXNjcmlwdGlvbklucHV0IgogIH0pKSkpKSk7Cn07CgpleHBvcnRzLkFkdmFuY2VkRGV0ZWN0b3JNb2RhbCA9IEFkdmFuY2VkRGV0ZWN0b3JNb2RhbDsKCmZ1bmN0aW9uIGNyZWF0ZUFnZ09wdGlvbihhZ2cpIHsKICBpZiAoYWdnID09PSBudWxsKSB7CiAgICByZXR1cm4gZW1wdHlPcHRpb247CiAgfQoKICByZXR1cm4gewogICAgbGFiZWw6IGFnZy5pZAogIH07Cn0gLy8gZ2V0IGxpc3Qgb2YgYWdncmVnYXRpb25zLCBmaWx0ZXJpbmcgb3V0IGFueSBhZ2dzIHdpdGggbm8gZmllbGRzLAovLyB1bmxlc3Mgc2NyaXB0IGZpZWxkcyBhcmUgYmVpbmcgdXNlZCwgaW4gd2hpY2ggY2FzZSBsaXN0IGFsbCBmaWVsZHMsIGFzIGl0J3Mgbm90IHBvc3NpYmxlCi8vIHRvIGRldGVybWluZSB0aGUgdHlwZSBvZiBhIHNjcmlwdCBmaWVsZCBhbmQgc28gYWxsIGFnZ3Mgc2hvdWxkIGJlIGF2YWlsYWJsZS4KCgpmdW5jdGlvbiBmaWx0ZXJBZ2dzKGFnZywgdXNpbmdTY3JpcHRGaWVsZHMpIHsKICByZXR1cm4gYWdnLmZpZWxkcyAhPT0gdW5kZWZpbmVkICYmICh1c2luZ1NjcmlwdEZpZWxkcyB8fCBhZ2cuZmllbGRzLmxlbmd0aCk7Cn0KCmZ1bmN0aW9uIGNyZWF0ZUZpZWxkT3B0aW9uKGZpZWxkKSB7CiAgaWYgKGZpZWxkID09PSBudWxsKSB7CiAgICByZXR1cm4gZW1wdHlPcHRpb247CiAgfQoKICByZXR1cm4gewogICAgbGFiZWw6IGZpZWxkLm5hbWUKICB9Owp9CgpmdW5jdGlvbiBjcmVhdGVFeGNsdWRlRnJlcXVlbnRPcHRpb24oZXhjbHVkZUZyZXF1ZW50KSB7CiAgaWYgKGV4Y2x1ZGVGcmVxdWVudCA9PT0gbnVsbCkgewogICAgcmV0dXJuIGVtcHR5T3B0aW9uOwogIH0KCiAgcmV0dXJuIHsKICAgIGxhYmVsOiBleGNsdWRlRnJlcXVlbnQKICB9Owp9CgpmdW5jdGlvbiBpc0ZpZWxkbGVzc0FnZyhhZ2cpIHsKICAvLyBmaWVsZGxlc3MgYWdncyBoYXZlIGJlZW4gZ2l2ZW4gb25lIGV2ZW50IHJhdGUgZmllbGQgZm9yIFVJIHJlYXNvbnMuCiAgLy8gdGhlcmVmb3JlIGlmIGFuIGFnZydzIGZpZWxkIGxpc3Qgb25seSBjb250YWlucyBldmVudCByYXRlLCBpdCBtdXN0IGJlCiAgLy8gYSBmaWVsZGxlc3MgYWdnLgogIHJldHVybiBhZ2cuZmllbGRzICYmIGFnZy5maWVsZHMubGVuZ3RoID09PSAxICYmIGFnZy5maWVsZHNbMF0uaWQgPT09IF9maWVsZHMuRVZFTlRfUkFURV9GSUVMRF9JRDsKfQoKZnVuY3Rpb24gdXNlRGV0ZWN0b3JQbGFjZWhvbGRlcihkZXRlY3RvcikgewogIHZhciBfdXNlU3RhdGUyMyA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKGNyZWF0ZURlZmF1bHREZXNjcmlwdGlvbihkZXRlY3RvcikpLAogICAgICBfdXNlU3RhdGUyNCA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTIzLCAyKSwKICAgICAgZGVzY3JpcHRpb25QbGFjZWhvbGRlciA9IF91c2VTdGF0ZTI0WzBdLAogICAgICBzZXREZXNjcmlwdGlvblBsYWNlaG9sZGVyU3RyaW5nID0gX3VzZVN0YXRlMjRbMV07CgogIGZ1bmN0aW9uIHNldERlc2NyaXB0aW9uUGxhY2Vob2xkZXIoZHRyKSB7CiAgICBzZXREZXNjcmlwdGlvblBsYWNlaG9sZGVyU3RyaW5nKGNyZWF0ZURlZmF1bHREZXNjcmlwdGlvbihkdHIpKTsKICB9CgogIHJldHVybiB7CiAgICBkZXNjcmlwdGlvblBsYWNlaG9sZGVyOiBkZXNjcmlwdGlvblBsYWNlaG9sZGVyLAogICAgc2V0RGVzY3JpcHRpb25QbGFjZWhvbGRlcjogc2V0RGVzY3JpcHRpb25QbGFjZWhvbGRlcgogIH07Cn0gLy8gY3JlYXRlcyBsaXN0IG9mIGNvbWJvYm94IG9wdGlvbnMgYmFzZWQgb24gYW4gYWdncmVnYXRpb24ncyBmaWVsZCBsaXN0CgoKZnVuY3Rpb24gY3JlYXRlRmllbGRPcHRpb25zRnJvbUFnZyhhZ2csIGFkZGl0aW9uYWxGaWVsZHMpIHsKICByZXR1cm4gKDAsIF9nZW5lcmFsLmNyZWF0ZUZpZWxkT3B0aW9ucykoYWdnICE9PSBudWxsICYmIGFnZy5maWVsZHMgIT09IHVuZGVmaW5lZCA/IGFnZy5maWVsZHMgOiBbXSwgYWRkaXRpb25hbEZpZWxkcyk7Cn0gLy8gY3VzdG9tIGhvb2sgZm9yIHN0b3JpbmcgY29tYm9ib3ggb3B0aW9ucyBiYXNlZCBvbiBhbiBhZ2dyZWdhdGlvbiBmaWVsZCBsaXN0CgoKZnVuY3Rpb24gdXNlQ3VycmVudEZpZWxkT3B0aW9ucyhhZ2dyZWdhdGlvbiwgYWRkaXRpb25hbEZpZWxkcywgZmllbGRzKSB7CiAgdmFyIF91c2VTdGF0ZTI1ID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoY3JlYXRlRmllbGRPcHRpb25zRnJvbUFnZyhhZ2dyZWdhdGlvbiwgYWRkaXRpb25hbEZpZWxkcykpLAogICAgICBfdXNlU3RhdGUyNiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTI1LCAyKSwKICAgICAgY3VycmVudEZpZWxkT3B0aW9ucyA9IF91c2VTdGF0ZTI2WzBdLAogICAgICBfc2V0Q3VycmVudEZpZWxkT3B0aW9ucyA9IF91c2VTdGF0ZTI2WzFdOwoKICByZXR1cm4gewogICAgY3VycmVudEZpZWxkT3B0aW9uczogY3VycmVudEZpZWxkT3B0aW9ucywKICAgIHNldEN1cnJlbnRGaWVsZE9wdGlvbnM6IGZ1bmN0aW9uIHNldEN1cnJlbnRGaWVsZE9wdGlvbnMoYWdnKSB7CiAgICAgIHJldHVybiBfc2V0Q3VycmVudEZpZWxkT3B0aW9ucyhjcmVhdGVGaWVsZE9wdGlvbnNGcm9tQWdnKGFnZywgYWRkaXRpb25hbEZpZWxkcykpOwogICAgfQogIH07Cn0KCmZ1bmN0aW9uIGNyZWF0ZURlZmF1bHREZXNjcmlwdGlvbihkdHIpIHsKICBpZiAoZHRyLmFnZyA9PT0gbnVsbCB8fCBkdHIuZmllbGQgPT09IG51bGwpIHsKICAgIHJldHVybiAnJzsKICB9CgogIHZhciBiYXNpY0RldGVjdG9yID0gKDAsIF9kZWZhdWx0X2NvbmZpZ3MuY3JlYXRlQmFzaWNEZXRlY3RvcikoZHRyLmFnZywgZHRyLmZpZWxkKTsKICBiYXNpY0RldGVjdG9yLmJ5X2ZpZWxkX25hbWUgPSBkdHIuYnlGaWVsZCA/IGR0ci5ieUZpZWxkLmlkIDogdW5kZWZpbmVkOwogIGJhc2ljRGV0ZWN0b3Iub3Zlcl9maWVsZF9uYW1lID0gZHRyLm92ZXJGaWVsZCA/IGR0ci5vdmVyRmllbGQuaWQgOiB1bmRlZmluZWQ7CiAgYmFzaWNEZXRlY3Rvci5wYXJ0aXRpb25fZmllbGRfbmFtZSA9IGR0ci5wYXJ0aXRpb25GaWVsZCA/IGR0ci5wYXJ0aXRpb25GaWVsZC5pZCA6IHVuZGVmaW5lZDsKICBiYXNpY0RldGVjdG9yLmV4Y2x1ZGVfZnJlcXVlbnQgPSBkdHIuZXhjbHVkZUZyZXF1ZW50ID8gZHRyLmV4Y2x1ZGVGcmVxdWVudCA6IHVuZGVmaW5lZDsKICByZXR1cm4gKDAsIF9zdHJpbmdfdXRpbHMuZGV0ZWN0b3JUb1N0cmluZykoYmFzaWNEZXRlY3Rvcik7Cn0gLy8gZml4ZXMgaXNzdWUgd2l0aCBFdWlDb21ib0JveC4KLy8gaWYgdGhlIG9wdGlvbnMgbGlzdCBvbmx5IGNvbnRhaW5zIG9uZSBvcHRpb24gYW5kIG5vdGhpbmcgaGFzIGJlZW4gc2VsZWN0ZWQsIHNldAovLyBzZWxlY3RlZE9wdGlvbnMgbGlzdCB0byBiZSBhbiBlbXB0eSBhcnJheQoKCmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdGVkT3B0aW9ucyhzZWxlY3RlZE9wdGlvbiwgb3B0aW9ucykgewogIHJldHVybiBvcHRpb25zLmxlbmd0aCA9PT0gMSAmJiBvcHRpb25zWzBdLmxhYmVsICE9PSBzZWxlY3RlZE9wdGlvbi5sYWJlbCB8fCBzZWxlY3RlZE9wdGlvbi5sYWJlbCA9PT0gJycgPyBbXSA6IFtzZWxlY3RlZE9wdGlvbl07Cn0KCmZ1bmN0aW9uIGNvbWJvQm94T3B0aW9uc1NvcnQoYSwgYikgewogIHJldHVybiBhLmxhYmVsLmxvY2FsZUNvbXBhcmUoYi5sYWJlbCk7Cn0="},null]}