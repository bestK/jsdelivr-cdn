{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/upgrade_assistant/public/np_ready/application/components/tabs/checkup/deprecations/index_table.js","dependencies":[{"path":"x-pack/legacy/plugins/upgrade_assistant/public/np_ready/application/components/tabs/checkup/deprecations/index_table.js","mtime":1585205048647},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuSW5kZXhEZXByZWNhdGlvblRhYmxlID0gZXhwb3J0cy5JbmRleERlcHJlY2F0aW9uVGFibGVVSSA9IHZvaWQgMDsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9idXR0b24gPSByZXF1aXJlKCIuL2RlZmF1bHRfZmllbGRzL2J1dHRvbiIpOwoKdmFyIF9yZWluZGV4ID0gcmVxdWlyZSgiLi9yZWluZGV4Iik7Cgp2YXIgX2FwcF9jb250ZXh0ID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vYXBwX2NvbnRleHQiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsKICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7CiAgICByZXR1cm4gY2FsbDsKICB9CgogIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOwp9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOwogIH07CiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsKfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7CiAgaWYgKHNlbGYgPT09IHZvaWQgMCkgewogICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsKICB9CgogIHJldHVybiBzZWxmOwp9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsKICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsKICB9CgogIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IHsKICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9CiAgfSk7CiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7Cn0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgICBvLl9fcHJvdG9fXyA9IHA7CiAgICByZXR1cm4gbzsKICB9OwoKICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIFBBR0VfU0laRVMgPSBbMTAsIDI1LCA1MCwgMTAwLCAyNTAsIDUwMCwgMTAwMF07Cgp2YXIgSW5kZXhEZXByZWNhdGlvblRhYmxlVUkgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKEluZGV4RGVwcmVjYXRpb25UYWJsZVVJLCBfUmVhY3QkQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gSW5kZXhEZXByZWNhdGlvblRhYmxlVUkocHJvcHMpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5kZXhEZXByZWNhdGlvblRhYmxlVUkpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEluZGV4RGVwcmVjYXRpb25UYWJsZVVJKS5jYWxsKHRoaXMsIHByb3BzKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25UYWJsZUNoYW5nZSIsIGZ1bmN0aW9uICh0YWJsZVByb3BzKSB7CiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBzb3J0RmllbGQ6IHRhYmxlUHJvcHMuc29ydC5maWVsZCwKICAgICAgICBzb3J0RGlyZWN0aW9uOiB0YWJsZVByb3BzLnNvcnQuZGlyZWN0aW9uLAogICAgICAgIHBhZ2VJbmRleDogdGFibGVQcm9wcy5wYWdlLmluZGV4LAogICAgICAgIHBhZ2VTaXplOiB0YWJsZVByb3BzLnBhZ2Uuc2l6ZQogICAgICB9KTsKICAgIH0pOwoKICAgIF90aGlzLnN0YXRlID0gewogICAgICBzb3J0RmllbGQ6ICdpbmRleCcsCiAgICAgIHNvcnREaXJlY3Rpb246ICdhc2MnLAogICAgICBwYWdlSW5kZXg6IDAsCiAgICAgIHBhZ2VTaXplOiAxMAogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhJbmRleERlcHJlY2F0aW9uVGFibGVVSSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgaW50bCA9IHRoaXMucHJvcHMuaW50bDsKICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSwKICAgICAgICAgIHBhZ2VJbmRleCA9IF90aGlzJHN0YXRlLnBhZ2VJbmRleCwKICAgICAgICAgIHBhZ2VTaXplID0gX3RoaXMkc3RhdGUucGFnZVNpemUsCiAgICAgICAgICBzb3J0RmllbGQgPSBfdGhpcyRzdGF0ZS5zb3J0RmllbGQsCiAgICAgICAgICBzb3J0RGlyZWN0aW9uID0gX3RoaXMkc3RhdGUuc29ydERpcmVjdGlvbjsKICAgICAgdmFyIGNvbHVtbnMgPSBbewogICAgICAgIGZpZWxkOiAnaW5kZXgnLAogICAgICAgIG5hbWU6IGludGwuZm9ybWF0TWVzc2FnZSh7CiAgICAgICAgICBpZDogJ3hwYWNrLnVwZ3JhZGVBc3Npc3RhbnQuY2hlY2t1cFRhYi5kZXByZWNhdGlvbnMuaW5kZXhUYWJsZS5pbmRleENvbHVtbkxhYmVsJywKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnSW5kZXgnCiAgICAgICAgfSksCiAgICAgICAgc29ydGFibGU6IHRydWUKICAgICAgfSwgewogICAgICAgIGZpZWxkOiAnZGV0YWlscycsCiAgICAgICAgbmFtZTogaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICAgIGlkOiAneHBhY2sudXBncmFkZUFzc2lzdGFudC5jaGVja3VwVGFiLmRlcHJlY2F0aW9ucy5pbmRleFRhYmxlLmRldGFpbHNDb2x1bW5MYWJlbCcsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0RldGFpbHMnCiAgICAgICAgfSkKICAgICAgfV07CgogICAgICBpZiAodGhpcy5hY3Rpb25zQ29sdW1uKSB7CiAgICAgICAgLy8gQHRzLWlnbm9yZQogICAgICAgIGNvbHVtbnMucHVzaCh0aGlzLmFjdGlvbnNDb2x1bW4pOwogICAgICB9CgogICAgICB2YXIgc29ydGluZyA9IHsKICAgICAgICBzb3J0OiB7CiAgICAgICAgICBmaWVsZDogc29ydEZpZWxkLAogICAgICAgICAgZGlyZWN0aW9uOiBzb3J0RGlyZWN0aW9uCiAgICAgICAgfQogICAgICB9OwoKICAgICAgdmFyIHBhZ2luYXRpb24gPSBfb2JqZWN0U3ByZWFkKHsKICAgICAgICBwYWdlSW5kZXg6IHBhZ2VJbmRleCwKICAgICAgICBwYWdlU2l6ZTogcGFnZVNpemUKICAgICAgfSwgdGhpcy5wYWdlU2l6ZU9wdGlvbnMoKSk7CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJhc2ljVGFibGUsIHsKICAgICAgICBpdGVtczogdGhpcy5nZXRSb3dzKCksCiAgICAgICAgY29sdW1uczogY29sdW1ucywKICAgICAgICBzb3J0aW5nOiBzb3J0aW5nLAogICAgICAgIHBhZ2luYXRpb246IHBhZ2luYXRpb24sCiAgICAgICAgb25DaGFuZ2U6IHRoaXMub25UYWJsZUNoYW5nZSwKICAgICAgICBoYXNBY3Rpb25zOiBmYWxzZQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRSb3dzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSb3dzKCkgewogICAgICB2YXIgX3RoaXMkc3RhdGUyID0gdGhpcy5zdGF0ZSwKICAgICAgICAgIHNvcnRGaWVsZCA9IF90aGlzJHN0YXRlMi5zb3J0RmllbGQsCiAgICAgICAgICBzb3J0RGlyZWN0aW9uID0gX3RoaXMkc3RhdGUyLnNvcnREaXJlY3Rpb24sCiAgICAgICAgICBwYWdlSW5kZXggPSBfdGhpcyRzdGF0ZTIucGFnZUluZGV4LAogICAgICAgICAgcGFnZVNpemUgPSBfdGhpcyRzdGF0ZTIucGFnZVNpemU7CiAgICAgIHZhciBpbmRpY2VzID0gdGhpcy5wcm9wcy5pbmRpY2VzOwogICAgICB2YXIgc29ydGVkID0gKDAsIF9sb2Rhc2guc29ydEJ5KShpbmRpY2VzLCBzb3J0RmllbGQpOwoKICAgICAgaWYgKHNvcnREaXJlY3Rpb24gPT09ICdkZXNjJykgewogICAgICAgIHNvcnRlZCA9IHNvcnRlZC5yZXZlcnNlKCk7CiAgICAgIH0KCiAgICAgIHZhciBzdGFydCA9IHBhZ2VJbmRleCAqIHBhZ2VTaXplOwogICAgICByZXR1cm4gc29ydGVkLnNsaWNlKHN0YXJ0LCBzdGFydCArIHBhZ2VTaXplKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYWdlU2l6ZU9wdGlvbnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhZ2VTaXplT3B0aW9ucygpIHsKICAgICAgdmFyIGluZGljZXMgPSB0aGlzLnByb3BzLmluZGljZXM7CiAgICAgIHZhciB0b3RhbEl0ZW1Db3VudCA9IGluZGljZXMubGVuZ3RoOyAvLyBJZiB3ZSBvbmx5IGhhdmUgdGhhdCBzbWFsbGVzdCBwYWdlIHNpemUsIGRvbid0IHNob3cgYW55IHBhZ2Ugc2l6ZSBvcHRpb25zLgoKICAgICAgaWYgKHRvdGFsSXRlbUNvdW50IDw9IFBBR0VfU0laRVNbMF0pIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgdG90YWxJdGVtQ291bnQ6IHRvdGFsSXRlbUNvdW50LAogICAgICAgICAgcGFnZVNpemVPcHRpb25zOiBbXSwKICAgICAgICAgIGhpZGVQZXJQYWdlT3B0aW9uczogdHJ1ZQogICAgICAgIH07CiAgICAgIH0gLy8gS2VlcCBhIHNpemUgb3B0aW9uIGlmIHRoZSAjIG9mIGl0ZW1zIGlzIGxhcmdlciB0aGFuIHRoZSBwcmV2aW91cyBvcHRpb24uCiAgICAgIC8vIFRoaXMgYXZvaWRzIGhhdmluZyBhIGxvbmcgbGlzdCBvZiB1c2VsZXNzIHBhZ2Ugc2l6ZXMuCgoKICAgICAgdmFyIHBhZ2VTaXplT3B0aW9ucyA9IFBBR0VfU0laRVMuZmlsdGVyKGZ1bmN0aW9uIChwZXJQYWdlLCBpZHgpIHsKICAgICAgICByZXR1cm4gaWR4ID09PSAwIHx8IHRvdGFsSXRlbUNvdW50ID4gUEFHRV9TSVpFU1tpZHggLSAxXTsKICAgICAgfSk7CiAgICAgIHJldHVybiB7CiAgICAgICAgdG90YWxJdGVtQ291bnQ6IHRvdGFsSXRlbUNvdW50LAogICAgICAgIHBhZ2VTaXplT3B0aW9uczogcGFnZVNpemVPcHRpb25zLAogICAgICAgIGhpZGVQZXJQYWdlT3B0aW9uczogZmFsc2UKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhY3Rpb25zQ29sdW1uIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAvLyBOT1RFOiB0aGlzIG5haXZlIGltcGxlbWVudGF0aW9uIGFzc3VtZXMgYWxsIGluZGljZXMgaW4gdGhlIHRhYmxlIGFyZQogICAgICAvLyBzaG91bGQgc2hvdyB0aGUgcmVpbmRleCBidXR0b24uIFRoaXMgc2hvdWxkIHdvcmsgZm9yIGtub3duIHVzZWNhc2VzLgogICAgICB2YXIgaW5kaWNlcyA9IHRoaXMucHJvcHMuaW5kaWNlczsKICAgICAgdmFyIHNob3dSZWluZGV4QnV0dG9uID0gaW5kaWNlcy5maW5kKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgcmV0dXJuIGkucmVpbmRleCA9PT0gdHJ1ZTsKICAgICAgfSk7CiAgICAgIHZhciBzaG93TmVlZHNEZWZhdWx0RmllbGRzQnV0dG9uID0gaW5kaWNlcy5maW5kKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgcmV0dXJuIGkubmVlZHNEZWZhdWx0RmllbGRzID09PSB0cnVlOwogICAgICB9KTsKCiAgICAgIGlmICghc2hvd1JlaW5kZXhCdXR0b24gJiYgIXNob3dOZWVkc0RlZmF1bHRGaWVsZHNCdXR0b24pIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgcmV0dXJuIHsKICAgICAgICBhY3Rpb25zOiBbewogICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaW5kZXhEZXApIHsKICAgICAgICAgICAgaWYgKHNob3dSZWluZGV4QnV0dG9uKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2FwcF9jb250ZXh0LkFwcENvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgICAgICAgICAgICB2YXIgWFNSRiA9IF9yZWYuWFNSRiwKICAgICAgICAgICAgICAgICAgICBodHRwID0gX3JlZi5odHRwOwogICAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlaW5kZXguUmVpbmRleEJ1dHRvbiwgewogICAgICAgICAgICAgICAgICBpbmRleE5hbWU6IGluZGV4RGVwLmluZGV4LAogICAgICAgICAgICAgICAgICBodHRwOiBodHRwLAogICAgICAgICAgICAgICAgICB4c3JmOiBYU1JGCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfYXBwX2NvbnRleHQuQXBwQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKF9yZWYyKSB7CiAgICAgICAgICAgICAgICB2YXIgaHR0cCA9IF9yZWYyLmh0dHA7CiAgICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfYnV0dG9uLkZpeERlZmF1bHRGaWVsZHNCdXR0b24sIHsKICAgICAgICAgICAgICAgICAgaW5kZXhOYW1lOiBpbmRleERlcC5pbmRleCwKICAgICAgICAgICAgICAgICAgaHR0cDogaHR0cAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9XQogICAgICB9OwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEluZGV4RGVwcmVjYXRpb25UYWJsZVVJOwp9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7CgpleHBvcnRzLkluZGV4RGVwcmVjYXRpb25UYWJsZVVJID0gSW5kZXhEZXByZWNhdGlvblRhYmxlVUk7CnZhciBJbmRleERlcHJlY2F0aW9uVGFibGUgPSAoMCwgX3JlYWN0Mi5pbmplY3RJMThuKShJbmRleERlcHJlY2F0aW9uVGFibGVVSSk7CmV4cG9ydHMuSW5kZXhEZXByZWNhdGlvblRhYmxlID0gSW5kZXhEZXByZWNhdGlvblRhYmxlOw=="},null]}