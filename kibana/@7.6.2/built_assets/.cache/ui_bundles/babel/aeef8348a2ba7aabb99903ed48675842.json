{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/layers/sources/ems_file_source/ems_file_source.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/layers/sources/ems_file_source/ems_file_source.js","mtime":1585205045325},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkVNU0ZpbGVTb3VyY2UgPSB2b2lkIDA7Cgp2YXIgX3ZlY3Rvcl9zb3VyY2UgPSByZXF1aXJlKCIuLi92ZWN0b3Jfc291cmNlIik7Cgp2YXIgX3ZlY3Rvcl9mZWF0dXJlX3R5cGVzID0gcmVxdWlyZSgiLi4vdmVjdG9yX2ZlYXR1cmVfdHlwZXMiKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX21ldGEgPSByZXF1aXJlKCIuLi8uLi8uLi9tZXRhIik7Cgp2YXIgX2NyZWF0ZV9zb3VyY2VfZWRpdG9yID0gcmVxdWlyZSgiLi9jcmVhdGVfc291cmNlX2VkaXRvciIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX2kxOG5fZ2V0dGVycyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2NvbW1vbi9pMThuX2dldHRlcnMiKTsKCnZhciBfdXBkYXRlX3NvdXJjZV9lZGl0b3IgPSByZXF1aXJlKCIuL3VwZGF0ZV9zb3VyY2VfZWRpdG9yIik7Cgp2YXIgX2Vtc19maWxlX2ZpZWxkID0gcmVxdWlyZSgiLi4vLi4vZmllbGRzL2Vtc19maWxlX2ZpZWxkIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCnZhciBFTVNGaWxlU291cmNlID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0Fic3RyYWN0VmVjdG9yU291cmNlKSB7CiAgX2luaGVyaXRzKEVNU0ZpbGVTb3VyY2UsIF9BYnN0cmFjdFZlY3RvclNvdXJjZSk7CgogIF9jcmVhdGVDbGFzcyhFTVNGaWxlU291cmNlLCBudWxsLCBbewogICAga2V5OiAiY3JlYXRlRGVzY3JpcHRvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRGVzY3JpcHRvcihfcmVmKSB7CiAgICAgIHZhciBpZCA9IF9yZWYuaWQsCiAgICAgICAgICBfcmVmJHRvb2x0aXBQcm9wZXJ0aWUgPSBfcmVmLnRvb2x0aXBQcm9wZXJ0aWVzLAogICAgICAgICAgdG9vbHRpcFByb3BlcnRpZXMgPSBfcmVmJHRvb2x0aXBQcm9wZXJ0aWUgPT09IHZvaWQgMCA/IFtdIDogX3JlZiR0b29sdGlwUHJvcGVydGllOwogICAgICByZXR1cm4gewogICAgICAgIHR5cGU6IEVNU0ZpbGVTb3VyY2UudHlwZSwKICAgICAgICBpZDogaWQsCiAgICAgICAgdG9vbHRpcFByb3BlcnRpZXM6IHRvb2x0aXBQcm9wZXJ0aWVzCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyRWRpdG9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJFZGl0b3IoX3JlZjIpIHsKICAgICAgdmFyIG9uUHJldmlld1NvdXJjZSA9IF9yZWYyLm9uUHJldmlld1NvdXJjZSwKICAgICAgICAgIGluc3BlY3RvckFkYXB0ZXJzID0gX3JlZjIuaW5zcGVjdG9yQWRhcHRlcnM7CgogICAgICB2YXIgb25Tb3VyY2VDb25maWdDaGFuZ2UgPSBmdW5jdGlvbiBvblNvdXJjZUNvbmZpZ0NoYW5nZShzb3VyY2VDb25maWcpIHsKICAgICAgICB2YXIgc291cmNlRGVzY3JpcHRvciA9IEVNU0ZpbGVTb3VyY2UuY3JlYXRlRGVzY3JpcHRvcihzb3VyY2VDb25maWcpOwogICAgICAgIHZhciBzb3VyY2UgPSBuZXcgRU1TRmlsZVNvdXJjZShzb3VyY2VEZXNjcmlwdG9yLCBpbnNwZWN0b3JBZGFwdGVycyk7CiAgICAgICAgb25QcmV2aWV3U291cmNlKHNvdXJjZSk7CiAgICAgIH07CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY3JlYXRlX3NvdXJjZV9lZGl0b3IuRU1TRmlsZUNyZWF0ZVNvdXJjZUVkaXRvciwgewogICAgICAgIG9uU291cmNlQ29uZmlnQ2hhbmdlOiBvblNvdXJjZUNvbmZpZ0NoYW5nZQogICAgICB9KTsKICAgIH0KICB9XSk7CgogIGZ1bmN0aW9uIEVNU0ZpbGVTb3VyY2UoZGVzY3JpcHRvciwgaW5zcGVjdG9yQWRhcHRlcnMpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRU1TRmlsZVNvdXJjZSk7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRU1TRmlsZVNvdXJjZSkuY2FsbCh0aGlzLCBFTVNGaWxlU291cmNlLmNyZWF0ZURlc2NyaXB0b3IoZGVzY3JpcHRvciksIGluc3BlY3RvckFkYXB0ZXJzKSk7CiAgICBfdGhpcy5fdG9vbHRpcEZpZWxkcyA9IF90aGlzLl9kZXNjcmlwdG9yLnRvb2x0aXBQcm9wZXJ0aWVzLm1hcChmdW5jdGlvbiAocHJvcGVydHlLZXkpIHsKICAgICAgcmV0dXJuIF90aGlzLmNyZWF0ZUZpZWxkKHsKICAgICAgICBmaWVsZE5hbWU6IHByb3BlcnR5S2V5CiAgICAgIH0pOwogICAgfSk7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRU1TRmlsZVNvdXJjZSwgW3sKICAgIGtleTogImNyZWF0ZUZpZWxkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVGaWVsZChfcmVmMykgewogICAgICB2YXIgZmllbGROYW1lID0gX3JlZjMuZmllbGROYW1lOwogICAgICByZXR1cm4gbmV3IF9lbXNfZmlsZV9maWVsZC5FTVNGaWxlRmllbGQoewogICAgICAgIGZpZWxkTmFtZTogZmllbGROYW1lLAogICAgICAgIHNvdXJjZTogdGhpcywKICAgICAgICBvcmlnaW46IF9jb25zdGFudHMuRklFTERfT1JJR0lOLlNPVVJDRQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXJTb3VyY2VTZXR0aW5nc0VkaXRvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyU291cmNlU2V0dGluZ3NFZGl0b3IoX3JlZjQpIHsKICAgICAgdmFyIG9uQ2hhbmdlID0gX3JlZjQub25DaGFuZ2U7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF91cGRhdGVfc291cmNlX2VkaXRvci5VcGRhdGVTb3VyY2VFZGl0b3IsIHsKICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2UsCiAgICAgICAgdG9vbHRpcEZpZWxkczogdGhpcy5fdG9vbHRpcEZpZWxkcywKICAgICAgICBsYXllcklkOiB0aGlzLl9kZXNjcmlwdG9yLmlkLAogICAgICAgIHNvdXJjZTogdGhpcwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRFTVNGaWxlTGF5ZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVNU0ZpbGVMYXllcigpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgZW1zQ2xpZW50LCBlbXNGaWxlTGF5ZXJzLCBlbXNGaWxlTGF5ZXI7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gZ2V0RU1TRmlsZUxheWVyJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBlbXNDbGllbnQgPSAoMCwgX21ldGEuZ2V0RU1TQ2xpZW50KSgpOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoZW1zQ2xpZW50LmdldEZpbGVMYXllcnMoKSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgZW1zRmlsZUxheWVycyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgZW1zRmlsZUxheWVyID0gZW1zRmlsZUxheWVycy5maW5kKGZ1bmN0aW9uIChmaWxlTGF5ZXIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmaWxlTGF5ZXIuZ2V0SWQoKSA9PT0gX3RoaXMyLl9kZXNjcmlwdG9yLmlkOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBpZiAoZW1zRmlsZUxheWVyKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLnNvdXJjZS5lbXNGaWxlLnVuYWJsZVRvRmluZElkRXJyb3JNZXNzYWdlJywgewogICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJVbmFibGUgdG8gZmluZCBFTVMgdmVjdG9yIHNoYXBlcyBmb3IgaWQ6IHtpZH0iLAogICAgICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLl9kZXNjcmlwdG9yLmlkCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGVtc0ZpbGVMYXllcik7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIHRoaXMpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEdlb0pzb25XaXRoTWV0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0R2VvSnNvbldpdGhNZXRhKCkgewogICAgICB2YXIgZW1zRmlsZUxheWVyLCBmZWF0dXJlQ29sbGVjdGlvbiwgZW1zSWRGaWVsZDsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBnZXRHZW9Kc29uV2l0aE1ldGEkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHRoaXMuZ2V0RU1TRmlsZUxheWVyKCkpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGVtc0ZpbGVMYXllciA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKF92ZWN0b3Jfc291cmNlLkFic3RyYWN0VmVjdG9yU291cmNlLmdldEdlb0pzb24oewogICAgICAgICAgICAgICAgZm9ybWF0OiBlbXNGaWxlTGF5ZXIuZ2V0RGVmYXVsdEZvcm1hdFR5cGUoKSwKICAgICAgICAgICAgICAgIGZlYXR1cmVDb2xsZWN0aW9uUGF0aDogJ2RhdGEnLAogICAgICAgICAgICAgICAgZmV0Y2hVcmw6IGVtc0ZpbGVMYXllci5nZXREZWZhdWx0Rm9ybWF0VXJsKCkKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgZmVhdHVyZUNvbGxlY3Rpb24gPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICBlbXNJZEZpZWxkID0gZW1zRmlsZUxheWVyLl9jb25maWcuZmllbGRzLmZpbmQoZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmllbGQudHlwZSA9PT0gJ2lkJzsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBmZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChmZWF0dXJlLCBpbmRleCkgewogICAgICAgICAgICAgICAgZmVhdHVyZS5pZCA9IGVtc0lkRmllbGQgPyBmZWF0dXJlLnByb3BlcnRpZXNbZW1zSWRGaWVsZC5pZF0gOiBpbmRleDsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgZGF0YTogZmVhdHVyZUNvbGxlY3Rpb24sCiAgICAgICAgICAgICAgICBtZXRhOiB7fQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgbnVsbCwgdGhpcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0SW1tdXRhYmxlUHJvcGVydGllcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW1tdXRhYmxlUHJvcGVydGllcygpIHsKICAgICAgdmFyIGVtc0xpbmssIF9lbXNGaWxlTGF5ZXI7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGdldEltbXV0YWJsZVByb3BlcnRpZXMkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMDsKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh0aGlzLmdldEVNU0ZpbGVMYXllcigpKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBfZW1zRmlsZUxheWVyID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgZW1zTGluayA9IF9lbXNGaWxlTGF5ZXIuZ2V0RU1TSG90TGluaygpOwogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gOTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDc7CiAgICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gX2NvbnRleHQzWyJjYXRjaCJdKDApOwoKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBbewogICAgICAgICAgICAgICAgbGFiZWw6ICgwLCBfaTE4bl9nZXR0ZXJzLmdldERhdGFTb3VyY2VMYWJlbCkoKSwKICAgICAgICAgICAgICAgIHZhbHVlOiBFTVNGaWxlU291cmNlLnRpdGxlCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLnNvdXJjZS5lbXNGaWxlLmxheWVyTGFiZWwnLCB7CiAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTGF5ZXIiCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9kZXNjcmlwdG9yLmlkLAogICAgICAgICAgICAgICAgbGluazogZW1zTGluawogICAgICAgICAgICAgIH1dKTsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBudWxsLCB0aGlzLCBbWzAsIDddXSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0RGlzcGxheU5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKCkgewogICAgICB2YXIgX2Vtc0ZpbGVMYXllcjI7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lJChfY29udGV4dDQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDA7CiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAodGhpcy5nZXRFTVNGaWxlTGF5ZXIoKSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgX2Vtc0ZpbGVMYXllcjIgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgX2Vtc0ZpbGVMYXllcjIuZ2V0RGlzcGxheU5hbWUoKSk7CgogICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSA3OwogICAgICAgICAgICAgIF9jb250ZXh0NC50MCA9IF9jb250ZXh0NFsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgdGhpcy5fZGVzY3JpcHRvci5pZCk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgbnVsbCwgdGhpcywgW1swLCA3XV0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEF0dHJpYnV0aW9ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QXR0cmlidXRpb25zKCkgewogICAgICB2YXIgZW1zRmlsZUxheWVyOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGdldEF0dHJpYnV0aW9ucyQoX2NvbnRleHQ1KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAodGhpcy5nZXRFTVNGaWxlTGF5ZXIoKSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgZW1zRmlsZUxheWVyID0gX2NvbnRleHQ1LnNlbnQ7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIGVtc0ZpbGVMYXllci5nZXRBdHRyaWJ1dGlvbnMoKSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBudWxsLCB0aGlzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRMZWZ0Sm9pbkZpZWxkcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGVmdEpvaW5GaWVsZHMoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIGVtc0ZpbGVMYXllciwgZmllbGRzOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGdldExlZnRKb2luRmllbGRzJChfY29udGV4dDYpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh0aGlzLmdldEVNU0ZpbGVMYXllcigpKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBlbXNGaWxlTGF5ZXIgPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICBmaWVsZHMgPSBlbXNGaWxlTGF5ZXIuZ2V0RmllbGRzSW5MYW5ndWFnZSgpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCBmaWVsZHMubWFwKGZ1bmN0aW9uIChmKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMzLmNyZWF0ZUZpZWxkKHsKICAgICAgICAgICAgICAgICAgZmllbGROYW1lOiBmLm5hbWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIHRoaXMpOwogICAgfQogIH0sIHsKICAgIGtleTogImNhbkZvcm1hdEZlYXR1cmVQcm9wZXJ0aWVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5Gb3JtYXRGZWF0dXJlUHJvcGVydGllcygpIHsKICAgICAgcmV0dXJuIHRoaXMuX3Rvb2x0aXBGaWVsZHMubGVuZ3RoID4gMDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaWx0ZXJBbmRGb3JtYXRQcm9wZXJ0aWVzVG9IdG1sIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXJBbmRGb3JtYXRQcm9wZXJ0aWVzVG9IdG1sKHByb3BlcnRpZXMpIHsKICAgICAgdmFyIHRvb2x0aXBQcm9wZXJ0aWVzOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGZpbHRlckFuZEZvcm1hdFByb3BlcnRpZXNUb0h0bWwkKF9jb250ZXh0NykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHRvb2x0aXBQcm9wZXJ0aWVzID0gdGhpcy5fdG9vbHRpcEZpZWxkcy5tYXAoZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwcm9wZXJ0aWVzW2ZpZWxkLmdldE5hbWUoKV07CiAgICAgICAgICAgICAgICByZXR1cm4gZmllbGQuY3JlYXRlVG9vbHRpcFByb3BlcnR5KHZhbHVlKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LmFicnVwdCgicmV0dXJuIiwgUHJvbWlzZS5hbGwodG9vbHRpcFByb3BlcnRpZXMpKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIHRoaXMpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFN1cHBvcnRlZFNoYXBlVHlwZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN1cHBvcnRlZFNoYXBlVHlwZXMoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gZ2V0U3VwcG9ydGVkU2hhcGVUeXBlcyQoX2NvbnRleHQ4KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoInJldHVybiIsIFtfdmVjdG9yX2ZlYXR1cmVfdHlwZXMuVkVDVE9SX1NIQVBFX1RZUEVTLlBPTFlHT05dKTsKCiAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEVNU0ZpbGVTb3VyY2U7Cn0oX3ZlY3Rvcl9zb3VyY2UuQWJzdHJhY3RWZWN0b3JTb3VyY2UpOwoKZXhwb3J0cy5FTVNGaWxlU291cmNlID0gRU1TRmlsZVNvdXJjZTsKCl9kZWZpbmVQcm9wZXJ0eShFTVNGaWxlU291cmNlLCAidHlwZSIsIF9jb25zdGFudHMuRU1TX0ZJTEUpOwoKX2RlZmluZVByb3BlcnR5KEVNU0ZpbGVTb3VyY2UsICJ0aXRsZSIsIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLnNvdXJjZS5lbXNGaWxlVGl0bGUnLCB7CiAgZGVmYXVsdE1lc3NhZ2U6ICdFTVMgQm91bmRhcmllcycKfSkpOwoKX2RlZmluZVByb3BlcnR5KEVNU0ZpbGVTb3VyY2UsICJkZXNjcmlwdGlvbiIsIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLnNvdXJjZS5lbXNGaWxlRGVzY3JpcHRpb24nLCB7CiAgZGVmYXVsdE1lc3NhZ2U6ICdBZG1pbmlzdHJhdGl2ZSBib3VuZGFyaWVzIGZyb20gRWxhc3RpYyBNYXBzIFNlcnZpY2UnCn0pKTsKCl9kZWZpbmVQcm9wZXJ0eShFTVNGaWxlU291cmNlLCAiaWNvbiIsICdlbXNBcHAnKTs="},null]}