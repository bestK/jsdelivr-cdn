{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/cross_cluster_replication/public/app/sections/follower_index_edit/follower_index_edit.js","dependencies":[{"path":"x-pack/legacy/plugins/cross_cluster_replication/public/app/sections/follower_index_edit/follower_index_edit.js","mtime":1585205044117},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkZvbGxvd2VySW5kZXhFZGl0ID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInByb3AtdHlwZXMiKSk7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2Nocm9tZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgidWkvY2hyb21lIikpOwoKdmFyIF9tYW5hZ2VtZW50ID0gcmVxdWlyZSgidWkvbWFuYWdlbWVudCIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfYnJlYWRjcnVtYnMgPSByZXF1aXJlKCIuLi8uLi9zZXJ2aWNlcy9icmVhZGNydW1icyIpOwoKdmFyIF9yb3V0aW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuLi8uLi9zZXJ2aWNlcy9yb3V0aW5nIikpOwoKdmFyIF9jb21wb25lbnRzID0gcmVxdWlyZSgiLi4vLi4vY29tcG9uZW50cyIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi9jb25zdGFudHMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKdmFyIEZvbGxvd2VySW5kZXhFZGl0ID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHsKICBfaW5oZXJpdHMoRm9sbG93ZXJJbmRleEVkaXQsIF9QdXJlQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gRm9sbG93ZXJJbmRleEVkaXQoKSB7CiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjsKCiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvbGxvd2VySW5kZXhFZGl0KTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKEZvbGxvd2VySW5kZXhFZGl0KSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic3RhdGUiLCB7CiAgICAgIGxhc3RGb2xsb3dlckluZGV4SWQ6IHVuZGVmaW5lZCwKICAgICAgc2hvd0NvbmZpcm1Nb2RhbDogZmFsc2UKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInNhdmVGb2xsb3dlckluZGV4IiwgZnVuY3Rpb24gKG5hbWUsIGZvbGxvd2VySW5kZXgpIHsKICAgICAgX3RoaXMuZWRpdGVkRm9sbG93ZXJJbmRleFBheWxvYWQgPSB7CiAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICBmb2xsb3dlckluZGV4OiBmb2xsb3dlckluZGV4CiAgICAgIH07CgogICAgICBfdGhpcy5zaG93Q29uZmlybU1vZGFsKCk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJjb25maXJtU2F2ZUZvbGxvd2VySWhkZXgiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfdGhpcyRlZGl0ZWRGb2xsb3dlckkgPSBfdGhpcy5lZGl0ZWRGb2xsb3dlckluZGV4UGF5bG9hZCwKICAgICAgICAgIG5hbWUgPSBfdGhpcyRlZGl0ZWRGb2xsb3dlckkubmFtZSwKICAgICAgICAgIGZvbGxvd2VySW5kZXggPSBfdGhpcyRlZGl0ZWRGb2xsb3dlckkuZm9sbG93ZXJJbmRleDsKCiAgICAgIF90aGlzLnByb3BzLnNhdmVGb2xsb3dlckluZGV4KG5hbWUsIGZvbGxvd2VySW5kZXgpOwoKICAgICAgX3RoaXMuY2xvc2VDb25maXJtTW9kYWwoKTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInNob3dDb25maXJtTW9kYWwiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgc2hvd0NvbmZpcm1Nb2RhbDogdHJ1ZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImNsb3NlQ29uZmlybU1vZGFsIiwgZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoewogICAgICAgIHNob3dDb25maXJtTW9kYWw6IGZhbHNlCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAicmVuZGVyQ29uZmlybU1vZGFsIiwgZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcywKICAgICAgICAgIGZvbGxvd2VySW5kZXhJZCA9IF90aGlzJHByb3BzLmZvbGxvd2VySW5kZXhJZCwKICAgICAgICAgIGlzUGF1c2VkID0gX3RoaXMkcHJvcHMuZm9sbG93ZXJJbmRleC5pc1BhdXNlZDsKCiAgICAgIHZhciB0aXRsZSA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5mb2xsb3dlckluZGV4RWRpdEZvcm0uY29uZmlybU1vZGFsLnRpdGxlJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVXBkYXRlIGZvbGxvd2VyIGluZGV4ICd7aWR9Jz8iLAogICAgICAgIHZhbHVlczogewogICAgICAgICAgaWQ6IGZvbGxvd2VySW5kZXhJZAogICAgICAgIH0KICAgICAgfSk7CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aU92ZXJsYXlNYXNrLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ29uZmlybU1vZGFsLCB7CiAgICAgICAgdGl0bGU6IHRpdGxlLAogICAgICAgIG9uQ2FuY2VsOiBfdGhpcy5jbG9zZUNvbmZpcm1Nb2RhbCwKICAgICAgICBvbkNvbmZpcm06IF90aGlzLmNvbmZpcm1TYXZlRm9sbG93ZXJJaGRleCwKICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uZm9sbG93ZXJJbmRleEVkaXRGb3JtLmNvbmZpcm1Nb2RhbC5jYW5jZWxCdXR0b25UZXh0JywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDYW5jZWwnCiAgICAgICAgfSksCiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IGlzUGF1c2VkID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uZm9sbG93ZXJJbmRleEVkaXRGb3JtLmNvbmZpcm1Nb2RhbC5jb25maXJtQW5kUmVzdW1lQnV0dG9uVGV4dCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlVwZGF0ZSBhbmQgcmVzdW1lIgogICAgICAgIH0pIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uZm9sbG93ZXJJbmRleEVkaXRGb3JtLmNvbmZpcm1Nb2RhbC5jb25maXJtQnV0dG9uVGV4dCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlVwZGF0ZSIKICAgICAgICB9KQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgbnVsbCwgaXNQYXVzZWQgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uZm9sbG93ZXJJbmRleEVkaXRGb3JtLmNvbmZpcm1Nb2RhbC5yZXN1bWVEZXNjcmlwdGlvbiIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJVcGRhdGluZyBhIGZvbGxvd2VyIGluZGV4IHJlc3VtZXMgcmVwbGljYXRpb24gb2YgaXRzIGxlYWRlciBpbmRleC4iCiAgICAgIH0pIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLmNyb3NzQ2x1c3RlclJlcGxpY2F0aW9uLmZvbGxvd2VySW5kZXhFZGl0Rm9ybS5jb25maXJtTW9kYWwuZGVzY3JpcHRpb24iLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVGhlIGZvbGxvd2VyIGluZGV4IGlzIHBhdXNlZCwgdGhlbiByZXN1bWVkLiBJZiB0aGUgdXBkYXRlIGZhaWxzLCB0cnkgbWFudWFsbHkgcmVzdW1pbmcgcmVwbGljYXRpb24uIgogICAgICB9KSkpKTsKICAgIH0pOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhGb2xsb3dlckluZGV4RWRpdCwgW3sKICAgIGtleTogImNvbXBvbmVudERpZE1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHsKICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsCiAgICAgICAgICBpZCA9IF90aGlzJHByb3BzMi5tYXRjaC5wYXJhbXMuaWQsCiAgICAgICAgICBzZWxlY3RGb2xsb3dlckluZGV4ID0gX3RoaXMkcHJvcHMyLnNlbGVjdEZvbGxvd2VySW5kZXg7CiAgICAgIHZhciBkZWNvZGVkSWQ7CgogICAgICB0cnkgewogICAgICAgIC8vIFdoZW4gd2UgbmF2aWdhdGUgdGhyb3VnaCB0aGUgcm91dGVyIChoaXN0b3J5LnB1c2gpIHdlIG5lZWQgdG8gZGVjb2RlIGJvdGggdGhlIHVyaSBhbmQgdGhlIGlkCiAgICAgICAgZGVjb2RlZElkID0gZGVjb2RlVVJJKGlkKTsKICAgICAgICBkZWNvZGVkSWQgPSBkZWNvZGVVUklDb21wb25lbnQoZGVjb2RlZElkKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIC8vIFRoaXMgaXMgYSBwYWdlIGxvYWQuIEkgZ3Vlc3MgdGhhdCBBbmd1bGFySlMgcm91dGVyIGRvZXMgYWxyZWFkeSBhIGRlY29kZVVSSSBzbyBpdCBpcyBub3QKICAgICAgICAvLyBuZWNlc3NhcnkgaW4gdGhpcyBjYXNlLgogICAgICAgIGRlY29kZWRJZCA9IGRlY29kZVVSSUNvbXBvbmVudChpZCk7CiAgICAgIH0KCiAgICAgIHNlbGVjdEZvbGxvd2VySW5kZXgoZGVjb2RlZElkKTsKCiAgICAgIF9jaHJvbWUuZGVmYXVsdC5icmVhZGNydW1icy5zZXQoW19tYW5hZ2VtZW50Lk1BTkFHRU1FTlRfQlJFQURDUlVNQiwgX2JyZWFkY3J1bWJzLmxpc3RCcmVhZGNydW1iLCBfYnJlYWRjcnVtYnMuZWRpdEJyZWFkY3J1bWJdKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wb25lbnREaWRVcGRhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkgewogICAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcywKICAgICAgICAgIGZvbGxvd2VySW5kZXggPSBfdGhpcyRwcm9wczMuZm9sbG93ZXJJbmRleCwKICAgICAgICAgIGdldEZvbGxvd2VySW5kZXggPSBfdGhpcyRwcm9wczMuZ2V0Rm9sbG93ZXJJbmRleDsgLy8gRmV0Y2ggdGhlIGZvbGxvd2VyIGluZGV4IG9uIHRoZSBzZXJ2ZXIgaWYgd2UgZG9uJ3QgaGF2ZSBpdCAoaS5lLiBwYWdlIHJlbG9hZCkKCiAgICAgIGlmICghZm9sbG93ZXJJbmRleCAmJiBwcmV2U3RhdGUubGFzdEZvbGxvd2VySW5kZXhJZCAhPT0gdGhpcy5zdGF0ZS5sYXN0Rm9sbG93ZXJJbmRleElkKSB7CiAgICAgICAgZ2V0Rm9sbG93ZXJJbmRleCh0aGlzLnN0YXRlLmxhc3RGb2xsb3dlckluZGV4SWQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiY29tcG9uZW50V2lsbFVubW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkgewogICAgICB0aGlzLnByb3BzLmNsZWFyQXBpRXJyb3IoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXJMb2FkaW5nRm9sbG93ZXJJbmRleCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyTG9hZGluZ0ZvbGxvd2VySW5kZXgoKSB7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnRzLlNlY3Rpb25Mb2FkaW5nLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uZm9sbG93ZXJJbmRleEVkaXRGb3JtLmxvYWRpbmdGb2xsb3dlckluZGV4VGl0bGUiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTG9hZGluZyBmb2xsb3dlciBpbmRleFx1MjAyNiIKICAgICAgfSkpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlckdldEZvbGxvd2VySW5kZXhFcnJvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyR2V0Rm9sbG93ZXJJbmRleEVycm9yKGVycm9yKSB7CiAgICAgIHZhciBuYW1lID0gdGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMuaWQ7CgogICAgICB2YXIgdGl0bGUgPSBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uZm9sbG93ZXJJbmRleEVkaXRGb3JtLmxvYWRpbmdFcnJvclRpdGxlJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRXJyb3IgbG9hZGluZyBmb2xsb3dlciBpbmRleCcKICAgICAgfSk7CgogICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZXJyb3Iuc3RhdHVzID09PSA0MDQgPyB7CiAgICAgICAgZGF0YTogewogICAgICAgICAgZXJyb3I6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5mb2xsb3dlckluZGV4RWRpdEZvcm0ubG9hZGluZ0Vycm9yTWVzc2FnZScsIHsKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJUaGUgZm9sbG93ZXIgaW5kZXggJ3tuYW1lfScgZG9lcyBub3QgZXhpc3QuIiwKICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgbmFtZTogbmFtZQogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIH0KICAgICAgfSA6IGVycm9yOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudHMuU2VjdGlvbkVycm9yLCB7CiAgICAgICAgdGl0bGU6IHRpdGxlLAogICAgICAgIGVycm9yOiBlcnJvck1lc3NhZ2UKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibSIKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25FbXB0eSwgX2V4dGVuZHMoe30sIF9yb3V0aW5nLmRlZmF1bHQuZ2V0Um91dGVyTGlua1Byb3BzKCcvZm9sbG93ZXJfaW5kaWNlcycpLCB7CiAgICAgICAgaWNvblR5cGU6ICJhcnJvd0xlZnQiLAogICAgICAgIGZsdXNoOiAibGVmdCIsCiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInZpZXdMaXN0Rm9sbG93ZXJJbmRleEJ1dHRvbiIKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5mb2xsb3dlckluZGV4RWRpdEZvcm0udmlld0ZvbGxvd2VySW5kaWNlc0J1dHRvbkxhYmVsIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlZpZXcgZm9sbG93ZXIgaW5kaWNlcyIKICAgICAgfSkpKSkpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLAogICAgICAgICAgY2xlYXJBcGlFcnJvciA9IF90aGlzJHByb3BzNC5jbGVhckFwaUVycm9yLAogICAgICAgICAgYXBpU3RhdHVzID0gX3RoaXMkcHJvcHM0LmFwaVN0YXR1cywKICAgICAgICAgIGFwaUVycm9yID0gX3RoaXMkcHJvcHM0LmFwaUVycm9yLAogICAgICAgICAgZm9sbG93ZXJJbmRleCA9IF90aGlzJHByb3BzNC5mb2xsb3dlckluZGV4LAogICAgICAgICAgY3VycmVudFVybCA9IF90aGlzJHByb3BzNC5tYXRjaC51cmw7CiAgICAgIHZhciBzaG93Q29uZmlybU1vZGFsID0gdGhpcy5zdGF0ZS5zaG93Q29uZmlybU1vZGFsOwogICAgICAvKiByZW1vdmUgbm9uLWVkaXRhYmxlIHByb3BlcnRpZXMgKi8KCiAgICAgIHZhciBfcmVmID0gZm9sbG93ZXJJbmRleCB8fCB7fSwKICAgICAgICAgIHNoYXJkcyA9IF9yZWYuc2hhcmRzLAogICAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbInNoYXJkcyJdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwoKCiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUGFnZUNvbnRlbnQsIHsKICAgICAgICBob3Jpem9udGFsUG9zaXRpb246ICJjZW50ZXIiLAogICAgICAgIGNsYXNzTmFtZTogImNjclBhZ2VDb250ZW50IgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnRzLkZvbGxvd2VySW5kZXhQYWdlVGl0bGUsIHsKICAgICAgICB0aXRsZTogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uZm9sbG93ZXJJbmRleC5lZGl0VGl0bGUiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJFZGl0IGZvbGxvd2VyIGluZGV4IgogICAgICAgIH0pCiAgICAgIH0pLCBhcGlTdGF0dXMuZ2V0ID09PSBfY29uc3RhbnRzLkFQSV9TVEFUVVMuTE9BRElORyAmJiB0aGlzLnJlbmRlckxvYWRpbmdGb2xsb3dlckluZGV4KCksIGFwaUVycm9yLmdldCAmJiB0aGlzLnJlbmRlckdldEZvbGxvd2VySW5kZXhFcnJvcihhcGlFcnJvci5nZXQpLCBmb2xsb3dlckluZGV4ICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudHMuUmVtb3RlQ2x1c3RlcnNQcm92aWRlciwgbnVsbCwgZnVuY3Rpb24gKF9yZWYyKSB7CiAgICAgICAgdmFyIGlzTG9hZGluZyA9IF9yZWYyLmlzTG9hZGluZywKICAgICAgICAgICAgZXJyb3IgPSBfcmVmMi5lcnJvciwKICAgICAgICAgICAgcmVtb3RlQ2x1c3RlcnMgPSBfcmVmMi5yZW1vdGVDbHVzdGVyczsKCiAgICAgICAgaWYgKGlzTG9hZGluZykgewogICAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudHMuU2VjdGlvbkxvYWRpbmcsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uZm9sbG93ZXJJbmRleEVkaXRGb3JtLmxvYWRpbmdSZW1vdGVDbHVzdGVyc01lc3NhZ2UiLAogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkxvYWRpbmcgcmVtb3RlIGNsdXN0ZXJzXHUyMDI2IgogICAgICAgICAgfSkpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudHMuRm9sbG93ZXJJbmRleEZvcm0sIHsKICAgICAgICAgIGZvbGxvd2VySW5kZXg6IHJlc3QsCiAgICAgICAgICBhcGlTdGF0dXM6IGFwaVN0YXR1cy5zYXZlLAogICAgICAgICAgYXBpRXJyb3I6IGFwaUVycm9yLnNhdmUsCiAgICAgICAgICBjdXJyZW50VXJsOiBjdXJyZW50VXJsLAogICAgICAgICAgcmVtb3RlQ2x1c3RlcnM6IGVycm9yID8gW10gOiByZW1vdGVDbHVzdGVycywKICAgICAgICAgIHNhdmVGb2xsb3dlckluZGV4OiBfdGhpczIuc2F2ZUZvbGxvd2VySW5kZXgsCiAgICAgICAgICBjbGVhckFwaUVycm9yOiBjbGVhckFwaUVycm9yLAogICAgICAgICAgc2F2ZUJ1dHRvbkxhYmVsOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgICBpZDogInhwYWNrLmNyb3NzQ2x1c3RlclJlcGxpY2F0aW9uLmZvbGxvd2VySW5kZXhFZGl0Rm9ybS5zYXZlQnV0dG9uTGFiZWwiLAogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlVwZGF0ZSIKICAgICAgICAgIH0pCiAgICAgICAgfSk7CiAgICAgIH0pLCBzaG93Q29uZmlybU1vZGFsICYmIHRoaXMucmVuZGVyQ29uZmlybU1vZGFsKCkpOwogICAgfQogIH1dLCBbewogICAga2V5OiAiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZjMsIF9yZWY0KSB7CiAgICAgIHZhciBmb2xsb3dlckluZGV4SWQgPSBfcmVmMy5mb2xsb3dlckluZGV4SWQ7CiAgICAgIHZhciBsYXN0Rm9sbG93ZXJJbmRleElkID0gX3JlZjQubGFzdEZvbGxvd2VySW5kZXhJZDsKCiAgICAgIGlmIChsYXN0Rm9sbG93ZXJJbmRleElkICE9PSBmb2xsb3dlckluZGV4SWQpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgbGFzdEZvbGxvd2VySW5kZXhJZDogZm9sbG93ZXJJbmRleElkCiAgICAgICAgfTsKICAgICAgfQoKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRm9sbG93ZXJJbmRleEVkaXQ7Cn0oX3JlYWN0LlB1cmVDb21wb25lbnQpOwoKZXhwb3J0cy5Gb2xsb3dlckluZGV4RWRpdCA9IEZvbGxvd2VySW5kZXhFZGl0OwoKX2RlZmluZVByb3BlcnR5KEZvbGxvd2VySW5kZXhFZGl0LCAicHJvcFR5cGVzIiwgewogIGdldEZvbGxvd2VySW5kZXg6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgc2VsZWN0Rm9sbG93ZXJJbmRleDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBzYXZlRm9sbG93ZXJJbmRleDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBjbGVhckFwaUVycm9yOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLAogIGFwaUVycm9yOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsCiAgYXBpU3RhdHVzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsCiAgZm9sbG93ZXJJbmRleDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwKICBmb2xsb3dlckluZGV4SWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcKfSk7"},null]}