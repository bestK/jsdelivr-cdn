{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/layers/vector_layer.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/layers/vector_layer.js","mtime":1585205045317},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VectorLayer = void 0;

var _turf = _interopRequireDefault(require("turf"));

var _react = _interopRequireDefault(require("react"));

var _layer = require("./layer");

var _vector_style = require("./styles/vector/vector_style");

var _inner_join = require("./joins/inner_join");

var _constants = require("../../common/constants");

var _lodash = _interopRequireDefault(require("lodash"));

var _join_tooltip_property = require("./tooltips/join_tooltip_property");

var _eui = require("@elastic/eui");

var _i18n = require("@kbn/i18n");

var _data_request = require("./util/data_request");

var _can_skip_fetch = require("./util/can_skip_fetch");

var _assign_feature_ids = require("./util/assign_feature_ids");

var _mb_filter_expressions = require("./util/mb_filter_expressions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var VectorLayer =
/*#__PURE__*/
function (_AbstractLayer) {
  _inherits(VectorLayer, _AbstractLayer);

  _createClass(VectorLayer, null, [{
    key: "createDescriptor",
    value: function createDescriptor(options, mapColors) {
      var layerDescriptor = _get(_getPrototypeOf(VectorLayer), "createDescriptor", this).call(this, options);

      layerDescriptor.type = VectorLayer.type;

      if (!options.style) {
        var styleProperties = _vector_style.VectorStyle.createDefaultStyleProperties(mapColors);

        layerDescriptor.style = _vector_style.VectorStyle.createDescriptor(styleProperties);
      }

      return layerDescriptor;
    }
  }]);

  function VectorLayer(options) {
    var _this;

    _classCallCheck(this, VectorLayer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(VectorLayer).call(this, options));
    _this._joins = [];

    if (options.layerDescriptor.joins) {
      options.layerDescriptor.joins.forEach(function (joinDescriptor) {
        var join = new _inner_join.InnerJoin(joinDescriptor, _this._source);

        _this._joins.push(join);
      });
    }

    _this._style = new _vector_style.VectorStyle(_this._descriptor.style, _this._source, _assertThisInitialized(_this));
    return _this;
  }

  _createClass(VectorLayer, [{
    key: "destroy",
    value: function destroy() {
      if (this._source) {
        this._source.destroy();
      }

      this._joins.forEach(function (joinSource) {
        joinSource.destroy();
      });
    }
  }, {
    key: "getJoins",
    value: function getJoins() {
      return this._joins.slice();
    }
  }, {
    key: "getValidJoins",
    value: function getValidJoins() {
      return this._joins.filter(function (join) {
        return join.hasCompleteConfig();
      });
    }
  }, {
    key: "_hasJoins",
    value: function _hasJoins() {
      return this.getValidJoins().length > 0;
    }
  }, {
    key: "isDataLoaded",
    value: function isDataLoaded() {
      var sourceDataRequest = this.getSourceDataRequest();

      if (!sourceDataRequest || !sourceDataRequest.hasData()) {
        return false;
      }

      var joins = this.getValidJoins();

      for (var i = 0; i < joins.length; i++) {
        var joinDataRequest = this.getDataRequest(joins[i].getSourceDataRequestId());

        if (!joinDataRequest || !joinDataRequest.hasData()) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "getCustomIconAndTooltipContent",
    value: function getCustomIconAndTooltipContent() {
      var featureCollection = this._getSourceFeatureCollection();

      var noResultsIcon = _react.default.createElement(_eui.EuiIcon, {
        size: "m",
        color: "subdued",
        type: "minusInCircle"
      });

      if (!featureCollection || featureCollection.features.length === 0) {
        return {
          icon: noResultsIcon,
          tooltipContent: _i18n.i18n.translate('xpack.maps.vectorLayer.noResultsFoundTooltip', {
            defaultMessage: "No results found."
          })
        };
      }

      if (this._joins.length && !featureCollection.features.some(function (feature) {
        return feature.properties[_constants.FEATURE_VISIBLE_PROPERTY_NAME];
      })) {
        return {
          icon: noResultsIcon,
          tooltipContent: _i18n.i18n.translate('xpack.maps.vectorLayer.noResultsFoundInJoinTooltip', {
            defaultMessage: "No matching results found in term joins"
          })
        };
      }

      var sourceDataRequest = this.getSourceDataRequest();

      var _this$_source$getSour = this._source.getSourceTooltipContent(sourceDataRequest),
          tooltipContent = _this$_source$getSour.tooltipContent,
          areResultsTrimmed = _this$_source$getSour.areResultsTrimmed;

      return {
        icon: this._style.getIcon(),
        tooltipContent: tooltipContent,
        areResultsTrimmed: areResultsTrimmed
      };
    }
  }, {
    key: "getLayerTypeIconName",
    value: function getLayerTypeIconName() {
      return 'vector';
    }
  }, {
    key: "hasLegendDetails",
    value: function hasLegendDetails() {
      return regeneratorRuntime.async(function hasLegendDetails$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this._style.hasLegendDetails());

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "renderLegendDetails",
    value: function renderLegendDetails() {
      return this._style.renderLegendDetails();
    }
  }, {
    key: "_getBoundsBasedOnData",
    value: function _getBoundsBasedOnData() {
      var featureCollection = this._getSourceFeatureCollection();

      if (!featureCollection) {
        return null;
      }

      var visibleFeatures = featureCollection.features.filter(function (feature) {
        return feature.properties[_constants.FEATURE_VISIBLE_PROPERTY_NAME];
      });

      var bbox = _turf.default.bbox({
        type: 'FeatureCollection',
        features: visibleFeatures
      });

      return {
        min_lon: bbox[0],
        min_lat: bbox[1],
        max_lon: bbox[2],
        max_lat: bbox[3]
      };
    }
  }, {
    key: "getBounds",
    value: function getBounds(dataFilters) {
      var isStaticLayer, searchFilters;
      return regeneratorRuntime.async(function getBounds$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              isStaticLayer = !this._source.isBoundsAware() || !this._source.isFilterByMapBounds();

              if (!isStaticLayer) {
                _context2.next = 3;
                break;
              }

              return _context2.abrupt("return", this._getBoundsBasedOnData());

            case 3:
              searchFilters = this._getSearchFilters(dataFilters);
              _context2.next = 6;
              return regeneratorRuntime.awrap(this._source.getBoundsForFilters(searchFilters));

            case 6:
              return _context2.abrupt("return", _context2.sent);

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getLeftJoinFields",
    value: function getLeftJoinFields() {
      return regeneratorRuntime.async(function getLeftJoinFields$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return regeneratorRuntime.awrap(this._source.getLeftJoinFields());

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getSourceName",
    value: function getSourceName() {
      return regeneratorRuntime.async(function getSourceName$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this._source.getDisplayName());

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "_getJoinFields",
    value: function _getJoinFields() {
      var joinFields = [];
      this.getValidJoins().forEach(function (join) {
        var fields = join.getJoinFields();
        joinFields.push.apply(joinFields, _toConsumableArray(fields));
      });
      return joinFields;
    }
  }, {
    key: "getDateFields",
    value: function getDateFields() {
      return regeneratorRuntime.async(function getDateFields$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return regeneratorRuntime.awrap(this._source.getDateFields());

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getNumberFields",
    value: function getNumberFields() {
      var numberFieldOptions;
      return regeneratorRuntime.async(function getNumberFields$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return regeneratorRuntime.awrap(this._source.getNumberFields());

            case 2:
              numberFieldOptions = _context6.sent;
              return _context6.abrupt("return", [].concat(_toConsumableArray(numberFieldOptions), _toConsumableArray(this._getJoinFields())));

            case 4:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getCategoricalFields",
    value: function getCategoricalFields() {
      return regeneratorRuntime.async(function getCategoricalFields$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return regeneratorRuntime.awrap(this._source.getCategoricalFields());

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getFields",
    value: function getFields() {
      var sourceFields;
      return regeneratorRuntime.async(function getFields$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return regeneratorRuntime.awrap(this._source.getFields());

            case 2:
              sourceFields = _context8.sent;
              return _context8.abrupt("return", [].concat(_toConsumableArray(sourceFields), _toConsumableArray(this._getJoinFields())));

            case 4:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getIndexPatternIds",
    value: function getIndexPatternIds() {
      var indexPatternIds = this._source.getIndexPatternIds();

      this.getValidJoins().forEach(function (join) {
        indexPatternIds.push.apply(indexPatternIds, _toConsumableArray(join.getIndexPatternIds()));
      });
      return indexPatternIds;
    }
  }, {
    key: "getQueryableIndexPatternIds",
    value: function getQueryableIndexPatternIds() {
      var indexPatternIds = this._source.getQueryableIndexPatternIds();

      this.getValidJoins().forEach(function (join) {
        indexPatternIds.push.apply(indexPatternIds, _toConsumableArray(join.getQueryableIndexPatternIds()));
      });
      return indexPatternIds;
    }
  }, {
    key: "_findDataRequestById",
    value: function _findDataRequestById(sourceDataId) {
      return this._dataRequests.find(function (dataRequest) {
        return dataRequest.getDataId() === sourceDataId;
      });
    }
  }, {
    key: "_syncJoin",
    value: function _syncJoin(_ref) {
      var join, startLoading, stopLoading, onLoadError, registerCancelCallback, dataFilters, joinSource, sourceDataId, requestToken, searchFilters, prevDataRequest, canSkipFetch, leftSourceName, _ref2, propertiesMap;

      return regeneratorRuntime.async(function _syncJoin$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              join = _ref.join, startLoading = _ref.startLoading, stopLoading = _ref.stopLoading, onLoadError = _ref.onLoadError, registerCancelCallback = _ref.registerCancelCallback, dataFilters = _ref.dataFilters;
              joinSource = join.getRightJoinSource();
              sourceDataId = join.getSourceDataRequestId();
              requestToken = Symbol("layer-join-refresh:".concat(this.getId(), " - ").concat(sourceDataId));
              searchFilters = _objectSpread({}, dataFilters, {
                fieldNames: joinSource.getFieldNames(),
                sourceQuery: joinSource.getWhereQuery(),
                applyGlobalQuery: joinSource.getApplyGlobalQuery()
              });
              prevDataRequest = this._findDataRequestById(sourceDataId);
              _context9.next = 8;
              return regeneratorRuntime.awrap((0, _can_skip_fetch.canSkipSourceUpdate)({
                source: joinSource,
                prevDataRequest: prevDataRequest,
                nextMeta: searchFilters
              }));

            case 8:
              canSkipFetch = _context9.sent;

              if (!canSkipFetch) {
                _context9.next = 11;
                break;
              }

              return _context9.abrupt("return", {
                dataHasChanged: false,
                join: join,
                propertiesMap: prevDataRequest.getData()
              });

            case 11:
              _context9.prev = 11;
              startLoading(sourceDataId, requestToken, searchFilters);
              _context9.next = 15;
              return regeneratorRuntime.awrap(this.getSourceName());

            case 15:
              leftSourceName = _context9.sent;
              _context9.next = 18;
              return regeneratorRuntime.awrap(joinSource.getPropertiesMap(searchFilters, leftSourceName, join.getLeftField().getName(), registerCancelCallback.bind(null, requestToken)));

            case 18:
              _ref2 = _context9.sent;
              propertiesMap = _ref2.propertiesMap;
              stopLoading(sourceDataId, requestToken, propertiesMap);
              return _context9.abrupt("return", {
                dataHasChanged: true,
                join: join,
                propertiesMap: propertiesMap
              });

            case 24:
              _context9.prev = 24;
              _context9.t0 = _context9["catch"](11);

              if (!(_context9.t0 instanceof _data_request.DataRequestAbortError)) {
                onLoadError(sourceDataId, requestToken, "Join error: ".concat(_context9.t0.message));
              }

              return _context9.abrupt("return", {
                dataHasChanged: true,
                join: join,
                propertiesMap: null
              });

            case 28:
            case "end":
              return _context9.stop();
          }
        }
      }, null, this, [[11, 24]]);
    }
  }, {
    key: "_syncJoins",
    value: function _syncJoins(syncContext) {
      var _this2 = this;

      var joinSyncs;
      return regeneratorRuntime.async(function _syncJoins$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              joinSyncs = this.getValidJoins().map(function _callee(join) {
                return regeneratorRuntime.async(function _callee$(_context10) {
                  while (1) {
                    switch (_context10.prev = _context10.next) {
                      case 0:
                        _context10.next = 2;
                        return regeneratorRuntime.awrap(_this2._syncJoinStyleMeta(syncContext, join));

                      case 2:
                        _context10.next = 4;
                        return regeneratorRuntime.awrap(_this2._syncJoinFormatters(syncContext, join));

                      case 4:
                        return _context10.abrupt("return", _this2._syncJoin(_objectSpread({
                          join: join
                        }, syncContext)));

                      case 5:
                      case "end":
                        return _context10.stop();
                    }
                  }
                });
              });
              _context11.next = 3;
              return regeneratorRuntime.awrap(Promise.all(joinSyncs));

            case 3:
              return _context11.abrupt("return", _context11.sent);

            case 4:
            case "end":
              return _context11.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "_getSearchFilters",
    value: function _getSearchFilters(dataFilters) {
      var fieldNames = [].concat(_toConsumableArray(this._source.getFieldNames()), _toConsumableArray(this._style.getSourceFieldNames()), _toConsumableArray(this.getValidJoins().map(function (join) {
        return join.getLeftField().getName();
      })));
      return _objectSpread({}, dataFilters, {
        fieldNames: _lodash.default.uniq(fieldNames).sort(),
        geogridPrecision: this._source.getGeoGridPrecision(dataFilters.zoom),
        sourceQuery: this.getQuery(),
        applyGlobalQuery: this._source.getApplyGlobalQuery(),
        sourceMeta: this._source.getSyncMeta()
      });
    }
  }, {
    key: "_performInnerJoins",
    value: function _performInnerJoins(sourceResult, joinStates, updateSourceData) {
      var shouldUpdateStore, i, feature, oldVisbility, isFeatureVisible, j, joinState, innerJoin, canJoinOnCurrent;
      return regeneratorRuntime.async(function _performInnerJoins$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              //should update the store if
              //-- source result was refreshed
              //-- any of the join configurations changed (joinState changed)
              //-- visibility of any of the features has changed
              shouldUpdateStore = sourceResult.refreshed || joinStates.some(function (joinState) {
                return joinState.dataHasChanged;
              });

              if (shouldUpdateStore) {
                _context12.next = 3;
                break;
              }

              return _context12.abrupt("return");

            case 3:
              for (i = 0; i < sourceResult.featureCollection.features.length; i++) {
                feature = sourceResult.featureCollection.features[i];
                oldVisbility = feature.properties[_constants.FEATURE_VISIBLE_PROPERTY_NAME];
                isFeatureVisible = true;

                for (j = 0; j < joinStates.length; j++) {
                  joinState = joinStates[j];
                  innerJoin = joinState.join;
                  canJoinOnCurrent = innerJoin.joinPropertiesToFeature(feature, joinState.propertiesMap);
                  isFeatureVisible = isFeatureVisible && canJoinOnCurrent;
                }

                if (oldVisbility !== isFeatureVisible) {
                  shouldUpdateStore = true;
                }

                feature.properties[_constants.FEATURE_VISIBLE_PROPERTY_NAME] = isFeatureVisible;
              }

              if (shouldUpdateStore) {
                updateSourceData(_objectSpread({}, sourceResult.featureCollection));
              }

            case 5:
            case "end":
              return _context12.stop();
          }
        }
      });
    }
  }, {
    key: "_syncSource",
    value: function _syncSource(_ref3) {
      var startLoading, stopLoading, onLoadError, registerCancelCallback, dataFilters, requestToken, searchFilters, prevDataRequest, canSkipFetch, layerName, _ref4, sourceFeatureCollection, meta, layerFeatureCollection;

      return regeneratorRuntime.async(function _syncSource$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              startLoading = _ref3.startLoading, stopLoading = _ref3.stopLoading, onLoadError = _ref3.onLoadError, registerCancelCallback = _ref3.registerCancelCallback, dataFilters = _ref3.dataFilters;
              requestToken = Symbol("layer-".concat(this.getId(), "-").concat(_constants.SOURCE_DATA_ID_ORIGIN));
              searchFilters = this._getSearchFilters(dataFilters);
              prevDataRequest = this.getSourceDataRequest();
              _context13.next = 6;
              return regeneratorRuntime.awrap((0, _can_skip_fetch.canSkipSourceUpdate)({
                source: this._source,
                prevDataRequest: prevDataRequest,
                nextMeta: searchFilters
              }));

            case 6:
              canSkipFetch = _context13.sent;

              if (!canSkipFetch) {
                _context13.next = 9;
                break;
              }

              return _context13.abrupt("return", {
                refreshed: false,
                featureCollection: prevDataRequest.getData()
              });

            case 9:
              _context13.prev = 9;
              startLoading(_constants.SOURCE_DATA_ID_ORIGIN, requestToken, searchFilters);
              _context13.next = 13;
              return regeneratorRuntime.awrap(this.getDisplayName());

            case 13:
              layerName = _context13.sent;
              _context13.next = 16;
              return regeneratorRuntime.awrap(this._source.getGeoJsonWithMeta(layerName, searchFilters, registerCancelCallback.bind(null, requestToken)));

            case 16:
              _ref4 = _context13.sent;
              sourceFeatureCollection = _ref4.data;
              meta = _ref4.meta;
              layerFeatureCollection = (0, _assign_feature_ids.assignFeatureIds)(sourceFeatureCollection);
              stopLoading(_constants.SOURCE_DATA_ID_ORIGIN, requestToken, layerFeatureCollection, meta);
              return _context13.abrupt("return", {
                refreshed: true,
                featureCollection: layerFeatureCollection
              });

            case 24:
              _context13.prev = 24;
              _context13.t0 = _context13["catch"](9);

              if (!(_context13.t0 instanceof _data_request.DataRequestAbortError)) {
                onLoadError(_constants.SOURCE_DATA_ID_ORIGIN, requestToken, _context13.t0.message);
              }

              return _context13.abrupt("return", {
                refreshed: false
              });

            case 28:
            case "end":
              return _context13.stop();
          }
        }
      }, null, this, [[9, 24]]);
    }
  }, {
    key: "_syncSourceStyleMeta",
    value: function _syncSourceStyleMeta(syncContext) {
      return regeneratorRuntime.async(function _syncSourceStyleMeta$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              if (!(this._style.constructor.type !== _constants.LAYER_STYLE_TYPE.VECTOR)) {
                _context14.next = 2;
                break;
              }

              return _context14.abrupt("return");

            case 2:
              return _context14.abrupt("return", this._syncStyleMeta(_objectSpread({
                source: this._source,
                sourceQuery: this.getQuery(),
                dataRequestId: _constants.SOURCE_META_ID_ORIGIN,
                dynamicStyleProps: this._style.getDynamicPropertiesArray().filter(function (dynamicStyleProp) {
                  return dynamicStyleProp.getFieldOrigin() === _constants.FIELD_ORIGIN.SOURCE && dynamicStyleProp.isFieldMetaEnabled();
                })
              }, syncContext)));

            case 3:
            case "end":
              return _context14.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "_syncJoinStyleMeta",
    value: function _syncJoinStyleMeta(syncContext, join) {
      var joinSource;
      return regeneratorRuntime.async(function _syncJoinStyleMeta$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              joinSource = join.getRightJoinSource();
              return _context15.abrupt("return", this._syncStyleMeta(_objectSpread({
                source: joinSource,
                sourceQuery: joinSource.getWhereQuery(),
                dataRequestId: join.getSourceMetaDataRequestId(),
                dynamicStyleProps: this._style.getDynamicPropertiesArray().filter(function (dynamicStyleProp) {
                  var matchingField = joinSource.getMetricFieldForName(dynamicStyleProp.getField().getName());
                  return dynamicStyleProp.getFieldOrigin() === _constants.FIELD_ORIGIN.JOIN && !!matchingField && dynamicStyleProp.isFieldMetaEnabled();
                })
              }, syncContext)));

            case 2:
            case "end":
              return _context15.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "_syncStyleMeta",
    value: function _syncStyleMeta(_ref5) {
      var source, sourceQuery, dataRequestId, dynamicStyleProps, dataFilters, startLoading, stopLoading, onLoadError, registerCancelCallback, dynamicStyleFields, nextMeta, prevDataRequest, canSkipFetch, requestToken, _layerName, styleMeta;

      return regeneratorRuntime.async(function _syncStyleMeta$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              source = _ref5.source, sourceQuery = _ref5.sourceQuery, dataRequestId = _ref5.dataRequestId, dynamicStyleProps = _ref5.dynamicStyleProps, dataFilters = _ref5.dataFilters, startLoading = _ref5.startLoading, stopLoading = _ref5.stopLoading, onLoadError = _ref5.onLoadError, registerCancelCallback = _ref5.registerCancelCallback;

              if (!(!source.isESSource() || dynamicStyleProps.length === 0)) {
                _context16.next = 3;
                break;
              }

              return _context16.abrupt("return");

            case 3:
              dynamicStyleFields = dynamicStyleProps.map(function (dynamicStyleProp) {
                return dynamicStyleProp.getField().getName();
              });
              _context16.t0 = _lodash.default.uniq(dynamicStyleFields).sort();
              _context16.t1 = sourceQuery;
              _context16.t2 = this._style.isTimeAware();

              if (!_context16.t2) {
                _context16.next = 11;
                break;
              }

              _context16.next = 10;
              return regeneratorRuntime.awrap(source.isTimeAware());

            case 10:
              _context16.t2 = _context16.sent;

            case 11:
              _context16.t3 = _context16.t2;
              _context16.t4 = dataFilters.timeFilters;
              nextMeta = {
                dynamicStyleFields: _context16.t0,
                sourceQuery: _context16.t1,
                isTimeAware: _context16.t3,
                timeFilters: _context16.t4
              };
              prevDataRequest = this._findDataRequestById(dataRequestId);
              canSkipFetch = (0, _can_skip_fetch.canSkipStyleMetaUpdate)({
                prevDataRequest: prevDataRequest,
                nextMeta: nextMeta
              });

              if (!canSkipFetch) {
                _context16.next = 18;
                break;
              }

              return _context16.abrupt("return");

            case 18:
              requestToken = Symbol("layer-".concat(this.getId(), "-").concat(dataRequestId));
              _context16.prev = 19;
              startLoading(dataRequestId, requestToken, nextMeta);
              _context16.next = 23;
              return regeneratorRuntime.awrap(this.getDisplayName());

            case 23:
              _layerName = _context16.sent;
              _context16.next = 26;
              return regeneratorRuntime.awrap(source.loadStylePropsMeta(_layerName, this._style, dynamicStyleProps, registerCancelCallback, nextMeta));

            case 26:
              styleMeta = _context16.sent;
              stopLoading(dataRequestId, requestToken, styleMeta, nextMeta);
              _context16.next = 33;
              break;

            case 30:
              _context16.prev = 30;
              _context16.t5 = _context16["catch"](19);

              if (!(_context16.t5 instanceof _data_request.DataRequestAbortError)) {
                onLoadError(dataRequestId, requestToken, _context16.t5.message);
              }

            case 33:
            case "end":
              return _context16.stop();
          }
        }
      }, null, this, [[19, 30]]);
    }
  }, {
    key: "_syncSourceFormatters",
    value: function _syncSourceFormatters(syncContext) {
      return regeneratorRuntime.async(function _syncSourceFormatters$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              if (!(this._style.constructor.type !== _constants.LAYER_STYLE_TYPE.VECTOR)) {
                _context17.next = 2;
                break;
              }

              return _context17.abrupt("return");

            case 2:
              return _context17.abrupt("return", this._syncFormatters(_objectSpread({
                source: this._source,
                dataRequestId: _constants.SOURCE_FORMATTERS_ID_ORIGIN,
                fields: this._style.getDynamicPropertiesArray().filter(function (dynamicStyleProp) {
                  return dynamicStyleProp.getFieldOrigin() === _constants.FIELD_ORIGIN.SOURCE;
                }).map(function (dynamicStyleProp) {
                  return dynamicStyleProp.getField();
                })
              }, syncContext)));

            case 3:
            case "end":
              return _context17.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "_syncJoinFormatters",
    value: function _syncJoinFormatters(syncContext, join) {
      var joinSource;
      return regeneratorRuntime.async(function _syncJoinFormatters$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              joinSource = join.getRightJoinSource();
              return _context18.abrupt("return", this._syncFormatters(_objectSpread({
                source: joinSource,
                dataRequestId: join.getSourceFormattersDataRequestId(),
                fields: this._style.getDynamicPropertiesArray().filter(function (dynamicStyleProp) {
                  var matchingField = joinSource.getMetricFieldForName(dynamicStyleProp.getField().getName());
                  return dynamicStyleProp.getFieldOrigin() === _constants.FIELD_ORIGIN.JOIN && !!matchingField;
                }).map(function (dynamicStyleProp) {
                  return dynamicStyleProp.getField();
                })
              }, syncContext)));

            case 2:
            case "end":
              return _context18.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "_syncFormatters",
    value: function _syncFormatters(_ref6) {
      var source, dataRequestId, fields, startLoading, stopLoading, onLoadError, fieldNames, nextMeta, prevDataRequest, canSkipUpdate, requestToken, formatters, promises;
      return regeneratorRuntime.async(function _syncFormatters$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              source = _ref6.source, dataRequestId = _ref6.dataRequestId, fields = _ref6.fields, startLoading = _ref6.startLoading, stopLoading = _ref6.stopLoading, onLoadError = _ref6.onLoadError;

              if (!(fields.length === 0)) {
                _context20.next = 3;
                break;
              }

              return _context20.abrupt("return");

            case 3:
              fieldNames = fields.map(function (field) {
                return field.getName();
              });
              nextMeta = {
                fieldNames: _lodash.default.uniq(fieldNames).sort()
              };
              prevDataRequest = this._findDataRequestById(dataRequestId);
              canSkipUpdate = (0, _can_skip_fetch.canSkipFormattersUpdate)({
                prevDataRequest: prevDataRequest,
                nextMeta: nextMeta
              });

              if (!canSkipUpdate) {
                _context20.next = 9;
                break;
              }

              return _context20.abrupt("return");

            case 9:
              requestToken = Symbol("layer-".concat(this.getId(), "-").concat(dataRequestId));
              _context20.prev = 10;
              startLoading(dataRequestId, requestToken, nextMeta);
              formatters = {};
              promises = fields.map(function _callee2(field) {
                var fieldName;
                return regeneratorRuntime.async(function _callee2$(_context19) {
                  while (1) {
                    switch (_context19.prev = _context19.next) {
                      case 0:
                        fieldName = field.getName();
                        _context19.next = 3;
                        return regeneratorRuntime.awrap(source.getFieldFormatter(fieldName));

                      case 3:
                        formatters[fieldName] = _context19.sent;

                      case 4:
                      case "end":
                        return _context19.stop();
                    }
                  }
                });
              });
              _context20.next = 16;
              return regeneratorRuntime.awrap(Promise.all(promises));

            case 16:
              stopLoading(dataRequestId, requestToken, formatters, nextMeta);
              _context20.next = 22;
              break;

            case 19:
              _context20.prev = 19;
              _context20.t0 = _context20["catch"](10);
              onLoadError(dataRequestId, requestToken, _context20.t0.message);

            case 22:
            case "end":
              return _context20.stop();
          }
        }
      }, null, this, [[10, 19]]);
    }
  }, {
    key: "syncData",
    value: function syncData(syncContext) {
      var sourceResult, joinStates;
      return regeneratorRuntime.async(function syncData$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              if (!(!this.isVisible() || !this.showAtZoomLevel(syncContext.dataFilters.zoom))) {
                _context21.next = 2;
                break;
              }

              return _context21.abrupt("return");

            case 2:
              _context21.next = 4;
              return regeneratorRuntime.awrap(this._syncSourceStyleMeta(syncContext));

            case 4:
              _context21.next = 6;
              return regeneratorRuntime.awrap(this._syncSourceFormatters(syncContext));

            case 6:
              _context21.next = 8;
              return regeneratorRuntime.awrap(this._syncSource(syncContext));

            case 8:
              sourceResult = _context21.sent;

              if (!(!sourceResult.featureCollection || !sourceResult.featureCollection.features.length || !this._hasJoins())) {
                _context21.next = 11;
                break;
              }

              return _context21.abrupt("return");

            case 11:
              _context21.next = 13;
              return regeneratorRuntime.awrap(this._syncJoins(syncContext));

            case 13:
              joinStates = _context21.sent;
              _context21.next = 16;
              return regeneratorRuntime.awrap(this._performInnerJoins(sourceResult, joinStates, syncContext.updateSourceData));

            case 16:
            case "end":
              return _context21.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "_getSourceFeatureCollection",
    value: function _getSourceFeatureCollection() {
      var sourceDataRequest = this.getSourceDataRequest();
      return sourceDataRequest ? sourceDataRequest.getData() : null;
    }
  }, {
    key: "_syncFeatureCollectionWithMb",
    value: function _syncFeatureCollectionWithMb(mbMap) {
      var mbGeoJSONSource = mbMap.getSource(this.getId());

      var featureCollection = this._getSourceFeatureCollection();

      var featureCollectionOnMap = _layer.AbstractLayer.getBoundDataForSource(mbMap, this.getId());

      if (!featureCollection) {
        if (featureCollectionOnMap) {
          this._style.clearFeatureState(featureCollectionOnMap, mbMap, this.getId());
        }

        mbGeoJSONSource.setData(_constants.EMPTY_FEATURE_COLLECTION);
        return;
      } // "feature-state" data expressions are not supported with layout properties.
      // To work around this limitation,
      // scaled layout properties (like icon-size) must fall back to geojson property values :(


      var hasGeoJsonProperties = this._style.setFeatureStateAndStyleProps(featureCollection, mbMap, this.getId());

      if (featureCollection !== featureCollectionOnMap || hasGeoJsonProperties) {
        mbGeoJSONSource.setData(featureCollection);
      }
    }
  }, {
    key: "_setMbPointsProperties",
    value: function _setMbPointsProperties(mbMap) {
      var pointLayerId = this._getMbPointLayerId();

      var symbolLayerId = this._getMbSymbolLayerId();

      var pointLayer = mbMap.getLayer(pointLayerId);
      var symbolLayer = mbMap.getLayer(symbolLayerId); // Point layers symbolized as circles require 2 mapbox layers because
      // "circle" layers do not support "text" style properties
      // Point layers symbolized as icons only contain a single mapbox layer.

      var markerLayerId;
      var textLayerId;

      if (this._style.arePointsSymbolizedAsCircles()) {
        markerLayerId = pointLayerId;
        textLayerId = this._getMbTextLayerId();

        if (symbolLayer) {
          mbMap.setLayoutProperty(symbolLayerId, 'visibility', 'none');
        }

        this._setMbCircleProperties(mbMap);
      } else {
        markerLayerId = symbolLayerId;
        textLayerId = symbolLayerId;

        if (pointLayer) {
          mbMap.setLayoutProperty(pointLayerId, 'visibility', 'none');
          mbMap.setLayoutProperty(this._getMbTextLayerId(), 'visibility', 'none');
        }

        this._setMbSymbolProperties(mbMap);
      }

      this.syncVisibilityWithMb(mbMap, markerLayerId);
      mbMap.setLayerZoomRange(markerLayerId, this._descriptor.minZoom, this._descriptor.maxZoom);

      if (markerLayerId !== textLayerId) {
        this.syncVisibilityWithMb(mbMap, textLayerId);
        mbMap.setLayerZoomRange(textLayerId, this._descriptor.minZoom, this._descriptor.maxZoom);
      }
    }
  }, {
    key: "_setMbCircleProperties",
    value: function _setMbCircleProperties(mbMap) {
      var sourceId = this.getId();

      var pointLayerId = this._getMbPointLayerId();

      var pointLayer = mbMap.getLayer(pointLayerId);

      if (!pointLayer) {
        mbMap.addLayer({
          id: pointLayerId,
          type: 'circle',
          source: sourceId,
          paint: {}
        });
      }

      var textLayerId = this._getMbTextLayerId();

      var textLayer = mbMap.getLayer(textLayerId);

      if (!textLayer) {
        mbMap.addLayer({
          id: textLayerId,
          type: 'symbol',
          source: sourceId
        });
      }

      var filterExpr = (0, _mb_filter_expressions.getPointFilterExpression)(this._hasJoins());

      if (filterExpr !== mbMap.getFilter(pointLayerId)) {
        mbMap.setFilter(pointLayerId, filterExpr);
        mbMap.setFilter(textLayerId, filterExpr);
      }

      this._style.setMBPaintPropertiesForPoints({
        alpha: this.getAlpha(),
        mbMap: mbMap,
        pointLayerId: pointLayerId
      });

      this._style.setMBPropertiesForLabelText({
        alpha: this.getAlpha(),
        mbMap: mbMap,
        textLayerId: textLayerId
      });
    }
  }, {
    key: "_setMbSymbolProperties",
    value: function _setMbSymbolProperties(mbMap) {
      var sourceId = this.getId();

      var symbolLayerId = this._getMbSymbolLayerId();

      var symbolLayer = mbMap.getLayer(symbolLayerId);

      if (!symbolLayer) {
        mbMap.addLayer({
          id: symbolLayerId,
          type: 'symbol',
          source: sourceId
        });
      }

      var filterExpr = (0, _mb_filter_expressions.getPointFilterExpression)(this._hasJoins());

      if (filterExpr !== mbMap.getFilter(symbolLayerId)) {
        mbMap.setFilter(symbolLayerId, filterExpr);
      }

      this._style.setMBSymbolPropertiesForPoints({
        alpha: this.getAlpha(),
        mbMap: mbMap,
        symbolLayerId: symbolLayerId
      });

      this._style.setMBPropertiesForLabelText({
        alpha: this.getAlpha(),
        mbMap: mbMap,
        textLayerId: symbolLayerId
      });
    }
  }, {
    key: "_setMbLinePolygonProperties",
    value: function _setMbLinePolygonProperties(mbMap) {
      var sourceId = this.getId();

      var fillLayerId = this._getMbPolygonLayerId();

      var lineLayerId = this._getMbLineLayerId();

      var hasJoins = this._hasJoins();

      if (!mbMap.getLayer(fillLayerId)) {
        mbMap.addLayer({
          id: fillLayerId,
          type: 'fill',
          source: sourceId,
          paint: {}
        });
      }

      if (!mbMap.getLayer(lineLayerId)) {
        mbMap.addLayer({
          id: lineLayerId,
          type: 'line',
          source: sourceId,
          paint: {}
        });
      }

      this._style.setMBPaintProperties({
        alpha: this.getAlpha(),
        mbMap: mbMap,
        fillLayerId: fillLayerId,
        lineLayerId: lineLayerId
      });

      this.syncVisibilityWithMb(mbMap, fillLayerId);
      mbMap.setLayerZoomRange(fillLayerId, this._descriptor.minZoom, this._descriptor.maxZoom);
      var fillFilterExpr = (0, _mb_filter_expressions.getFillFilterExpression)(hasJoins);

      if (fillFilterExpr !== mbMap.getFilter(fillLayerId)) {
        mbMap.setFilter(fillLayerId, fillFilterExpr);
      }

      this.syncVisibilityWithMb(mbMap, lineLayerId);
      mbMap.setLayerZoomRange(lineLayerId, this._descriptor.minZoom, this._descriptor.maxZoom);
      var lineFilterExpr = (0, _mb_filter_expressions.getLineFilterExpression)(hasJoins);

      if (lineFilterExpr !== mbMap.getFilter(lineLayerId)) {
        mbMap.setFilter(lineLayerId, lineFilterExpr);
      }
    }
  }, {
    key: "_syncStylePropertiesWithMb",
    value: function _syncStylePropertiesWithMb(mbMap) {
      this._setMbPointsProperties(mbMap);

      this._setMbLinePolygonProperties(mbMap);
    }
  }, {
    key: "_syncSourceBindingWithMb",
    value: function _syncSourceBindingWithMb(mbMap) {
      var mbSource = mbMap.getSource(this.getId());

      if (!mbSource) {
        mbMap.addSource(this.getId(), {
          type: 'geojson',
          data: _constants.EMPTY_FEATURE_COLLECTION
        });
      }
    }
  }, {
    key: "syncLayerWithMB",
    value: function syncLayerWithMB(mbMap) {
      this._syncSourceBindingWithMb(mbMap);

      this._syncFeatureCollectionWithMb(mbMap);

      this._syncStylePropertiesWithMb(mbMap);
    }
  }, {
    key: "_getMbPointLayerId",
    value: function _getMbPointLayerId() {
      return this.makeMbLayerId('circle');
    }
  }, {
    key: "_getMbTextLayerId",
    value: function _getMbTextLayerId() {
      return this.makeMbLayerId('text');
    }
  }, {
    key: "_getMbSymbolLayerId",
    value: function _getMbSymbolLayerId() {
      return this.makeMbLayerId('symbol');
    }
  }, {
    key: "_getMbLineLayerId",
    value: function _getMbLineLayerId() {
      return this.makeMbLayerId('line');
    }
  }, {
    key: "_getMbPolygonLayerId",
    value: function _getMbPolygonLayerId() {
      return this.makeMbLayerId('fill');
    }
  }, {
    key: "getMbLayerIds",
    value: function getMbLayerIds() {
      return [this._getMbPointLayerId(), this._getMbTextLayerId(), this._getMbSymbolLayerId(), this._getMbLineLayerId(), this._getMbPolygonLayerId()];
    }
  }, {
    key: "ownsMbLayerId",
    value: function ownsMbLayerId(mbLayerId) {
      return this.getMbLayerIds().includes(mbLayerId);
    }
  }, {
    key: "ownsMbSourceId",
    value: function ownsMbSourceId(mbSourceId) {
      return this.getId() === mbSourceId;
    }
  }, {
    key: "_addJoinsToSourceTooltips",
    value: function _addJoinsToSourceTooltips(tooltipsFromSource) {
      for (var _i = 0; _i < tooltipsFromSource.length; _i++) {
        var tooltipProperty = tooltipsFromSource[_i];
        var matchingJoins = [];

        for (var _j = 0; _j < this._joins.length; _j++) {
          if (this._joins[_j].getLeftField().getName() === tooltipProperty.getPropertyKey()) {
            matchingJoins.push(this._joins[_j]);
          }
        }

        if (matchingJoins.length) {
          tooltipsFromSource[_i] = new _join_tooltip_property.JoinTooltipProperty(tooltipProperty, matchingJoins);
        }
      }
    }
  }, {
    key: "getPropertiesForTooltip",
    value: function getPropertiesForTooltip(properties) {
      var allTooltips, _i2, propsFromJoin;

      return regeneratorRuntime.async(function getPropertiesForTooltip$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return regeneratorRuntime.awrap(this._source.filterAndFormatPropertiesToHtml(properties));

            case 2:
              allTooltips = _context22.sent;

              this._addJoinsToSourceTooltips(allTooltips);

              _i2 = 0;

            case 5:
              if (!(_i2 < this._joins.length)) {
                _context22.next = 13;
                break;
              }

              _context22.next = 8;
              return regeneratorRuntime.awrap(this._joins[_i2].filterAndFormatPropertiesForTooltip(properties));

            case 8:
              propsFromJoin = _context22.sent;
              allTooltips = [].concat(_toConsumableArray(allTooltips), _toConsumableArray(propsFromJoin));

            case 10:
              _i2++;
              _context22.next = 5;
              break;

            case 13:
              return _context22.abrupt("return", allTooltips);

            case 14:
            case "end":
              return _context22.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "canShowTooltip",
    value: function canShowTooltip() {
      return this.isVisible() && (this._source.canFormatFeatureProperties() || this._joins.length);
    }
  }, {
    key: "getFeatureById",
    value: function getFeatureById(id) {
      var featureCollection = this._getSourceFeatureCollection();

      if (!featureCollection) {
        return;
      }

      return featureCollection.features.find(function (feature) {
        return feature.properties[_constants.FEATURE_ID_PROPERTY_NAME] === id;
      });
    }
  }]);

  return VectorLayer;
}(_layer.AbstractLayer);

exports.VectorLayer = VectorLayer;

_defineProperty(VectorLayer, "type", _constants.LAYER_TYPE.VECTOR);"},null]}