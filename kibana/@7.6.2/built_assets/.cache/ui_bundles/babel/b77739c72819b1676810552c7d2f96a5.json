{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/transform/public/app/sections/create_transform/components/step_define/common.js","dependencies":[{"path":"x-pack/legacy/plugins/transform/public/app/sections/create_transform/components/step_define/common.js","mtime":1585205048547},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmdldFBpdm90RHJvcGRvd25PcHRpb25zID0gZ2V0UGl2b3REcm9wZG93bk9wdGlvbnM7CmV4cG9ydHMuZ2V0UGl2b3RQcmV2aWV3RGV2Q29uc29sZVN0YXRlbWVudCA9IHZvaWQgMDsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX2NvbW1vbiA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2NvbW1vbiIpOwovKgogKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lCiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS4KICovCgoKZnVuY3Rpb24gZ2V0RGVmYXVsdEdyb3VwQnlDb25maWcoYWdnTmFtZSwgZHJvcERvd25OYW1lLCBmaWVsZE5hbWUsIGdyb3VwQnlBZ2cpIHsKICBzd2l0Y2ggKGdyb3VwQnlBZ2cpIHsKICAgIGNhc2UgX2NvbW1vbi5QSVZPVF9TVVBQT1JURURfR1JPVVBfQllfQUdHUy5URVJNUzoKICAgICAgcmV0dXJuIHsKICAgICAgICBhZ2c6IGdyb3VwQnlBZ2csCiAgICAgICAgYWdnTmFtZTogYWdnTmFtZSwKICAgICAgICBkcm9wRG93bk5hbWU6IGRyb3BEb3duTmFtZSwKICAgICAgICBmaWVsZDogZmllbGROYW1lCiAgICAgIH07CgogICAgY2FzZSBfY29tbW9uLlBJVk9UX1NVUFBPUlRFRF9HUk9VUF9CWV9BR0dTLkhJU1RPR1JBTToKICAgICAgcmV0dXJuIHsKICAgICAgICBhZ2c6IGdyb3VwQnlBZ2csCiAgICAgICAgYWdnTmFtZTogYWdnTmFtZSwKICAgICAgICBkcm9wRG93bk5hbWU6IGRyb3BEb3duTmFtZSwKICAgICAgICBmaWVsZDogZmllbGROYW1lLAogICAgICAgIGludGVydmFsOiAnMTAnCiAgICAgIH07CgogICAgY2FzZSBfY29tbW9uLlBJVk9UX1NVUFBPUlRFRF9HUk9VUF9CWV9BR0dTLkRBVEVfSElTVE9HUkFNOgogICAgICByZXR1cm4gewogICAgICAgIGFnZzogZ3JvdXBCeUFnZywKICAgICAgICBhZ2dOYW1lOiBhZ2dOYW1lLAogICAgICAgIGRyb3BEb3duTmFtZTogZHJvcERvd25OYW1lLAogICAgICAgIGZpZWxkOiBmaWVsZE5hbWUsCiAgICAgICAgY2FsZW5kYXJfaW50ZXJ2YWw6ICcxbScKICAgICAgfTsKICB9Cn0KCnZhciBpbGxlZ2FsRXNBZ2dOYW1lQ2hhcnMgPSAvW1tcXT5dL2c7CgpmdW5jdGlvbiBnZXRQaXZvdERyb3Bkb3duT3B0aW9ucyhpbmRleFBhdHRlcm4pIHsKICAvLyBUaGUgYXZhaWxhYmxlIGdyb3VwIGJ5IG9wdGlvbnMKICB2YXIgZ3JvdXBCeU9wdGlvbnMgPSBbXTsKICB2YXIgZ3JvdXBCeU9wdGlvbnNEYXRhID0ge307IC8vIFRoZSBhdmFpbGFibGUgYWdncmVnYXRpb25zCgogIHZhciBhZ2dPcHRpb25zID0gW107CiAgdmFyIGFnZ09wdGlvbnNEYXRhID0ge307CiAgdmFyIGlnbm9yZUZpZWxkTmFtZXMgPSBbJ19pZCcsICdfaW5kZXgnLCAnX3R5cGUnXTsKICB2YXIgZmllbGRzID0gaW5kZXhQYXR0ZXJuLmZpZWxkcy5maWx0ZXIoZnVuY3Rpb24gKGZpZWxkKSB7CiAgICByZXR1cm4gZmllbGQuYWdncmVnYXRhYmxlID09PSB0cnVlICYmICFpZ25vcmVGaWVsZE5hbWVzLmluY2x1ZGVzKGZpZWxkLm5hbWUpOwogIH0pLm1hcChmdW5jdGlvbiAoZmllbGQpIHsKICAgIHJldHVybiB7CiAgICAgIG5hbWU6IGZpZWxkLm5hbWUsCiAgICAgIHR5cGU6IGZpZWxkLnR5cGUKICAgIH07CiAgfSk7CiAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAvLyBHcm91cCBieQogICAgdmFyIGF2YWlsYWJsZUdyb3VwQnlBZ2dzID0gKDAsIF9sb2Rhc2guZ2V0KShfY29tbW9uLnBpdm90R3JvdXBCeUZpZWxkU3VwcG9ydCwgZmllbGQudHlwZSk7CgogICAgaWYgKGF2YWlsYWJsZUdyb3VwQnlBZ2dzICE9PSB1bmRlZmluZWQpIHsKICAgICAgYXZhaWxhYmxlR3JvdXBCeUFnZ3MuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXBCeUFnZykgewogICAgICAgIC8vIEFnZ3JlZ2F0aW9uIG5hbWUgZm9yIHRoZSBncm91cC1ieSBpcyB0aGUgcGxhaW4gZmllbGQgbmFtZS4gSWxsZWdhbCBjaGFyYWN0ZXJzIHdpbGwgYmUgcmVtb3ZlZC4KICAgICAgICB2YXIgYWdnTmFtZSA9IGZpZWxkLm5hbWUucmVwbGFjZShpbGxlZ2FsRXNBZ2dOYW1lQ2hhcnMsICcnKS50cmltKCk7IC8vIE9wdGlvbiBuYW1lIGluIHRoZSBkcm9wZG93biBmb3IgdGhlIGdyb3VwLWJ5IGlzIGluIHRoZSBmb3JtIG9mIGBzdW0oZmllbGRuYW1lKWAuCgogICAgICAgIHZhciBkcm9wRG93bk5hbWUgPSAiIi5jb25jYXQoZ3JvdXBCeUFnZywgIigiKS5jb25jYXQoZmllbGQubmFtZSwgIikiKTsKICAgICAgICB2YXIgZ3JvdXBCeU9wdGlvbiA9IHsKICAgICAgICAgIGxhYmVsOiBkcm9wRG93bk5hbWUKICAgICAgICB9OwogICAgICAgIGdyb3VwQnlPcHRpb25zLnB1c2goZ3JvdXBCeU9wdGlvbik7CiAgICAgICAgZ3JvdXBCeU9wdGlvbnNEYXRhW2Ryb3BEb3duTmFtZV0gPSBnZXREZWZhdWx0R3JvdXBCeUNvbmZpZyhhZ2dOYW1lLCBkcm9wRG93bk5hbWUsIGZpZWxkLm5hbWUsIGdyb3VwQnlBZ2cpOwogICAgICB9KTsKICAgIH0gLy8gQWdncmVnYXRpb25zCgoKICAgIHZhciBhZ2dPcHRpb24gPSB7CiAgICAgIGxhYmVsOiBmaWVsZC5uYW1lLAogICAgICBvcHRpb25zOiBbXQogICAgfTsKICAgIHZhciBhdmFpbGFibGVBZ2dzID0gKDAsIF9sb2Rhc2guZ2V0KShfY29tbW9uLnBpdm90QWdnc0ZpZWxkU3VwcG9ydCwgZmllbGQudHlwZSk7CgogICAgaWYgKGF2YWlsYWJsZUFnZ3MgIT09IHVuZGVmaW5lZCkgewogICAgICBhdmFpbGFibGVBZ2dzLmZvckVhY2goZnVuY3Rpb24gKGFnZykgewogICAgICAgIC8vIEFnZ3JlZ2F0aW9uIG5hbWUgaXMgZm9ybWF0dGVkIGxpa2UgYGZpZWxkbmFtZS5zdW1gLiBJbGxlZ2FsIGNoYXJhY3RlcnMgd2lsbCBiZSByZW1vdmVkLgogICAgICAgIHZhciBhZ2dOYW1lID0gIiIuY29uY2F0KGZpZWxkLm5hbWUucmVwbGFjZShpbGxlZ2FsRXNBZ2dOYW1lQ2hhcnMsICcnKS50cmltKCksICIuIikuY29uY2F0KGFnZyk7IC8vIE9wdGlvbiBuYW1lIGluIHRoZSBkcm9wZG93biBmb3IgdGhlIGFnZ3JlZ2F0aW9uIGlzIGluIHRoZSBmb3JtIG9mIGBzdW0oZmllbGRuYW1lKWAuCgogICAgICAgIHZhciBkcm9wRG93bk5hbWUgPSAiIi5jb25jYXQoYWdnLCAiKCIpLmNvbmNhdChmaWVsZC5uYW1lLCAiKSIpOwogICAgICAgIGFnZ09wdGlvbi5vcHRpb25zLnB1c2goewogICAgICAgICAgbGFiZWw6IGRyb3BEb3duTmFtZQogICAgICAgIH0pOwogICAgICAgIGFnZ09wdGlvbnNEYXRhW2Ryb3BEb3duTmFtZV0gPSB7CiAgICAgICAgICBhZ2c6IGFnZywKICAgICAgICAgIGZpZWxkOiBmaWVsZC5uYW1lLAogICAgICAgICAgYWdnTmFtZTogYWdnTmFtZSwKICAgICAgICAgIGRyb3BEb3duTmFtZTogZHJvcERvd25OYW1lCiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9CgogICAgYWdnT3B0aW9ucy5wdXNoKGFnZ09wdGlvbik7CiAgfSk7CiAgcmV0dXJuIHsKICAgIGdyb3VwQnlPcHRpb25zOiBncm91cEJ5T3B0aW9ucywKICAgIGdyb3VwQnlPcHRpb25zRGF0YTogZ3JvdXBCeU9wdGlvbnNEYXRhLAogICAgYWdnT3B0aW9uczogYWdnT3B0aW9ucywKICAgIGFnZ09wdGlvbnNEYXRhOiBhZ2dPcHRpb25zRGF0YQogIH07Cn0KCnZhciBnZXRQaXZvdFByZXZpZXdEZXZDb25zb2xlU3RhdGVtZW50ID0gZnVuY3Rpb24gZ2V0UGl2b3RQcmV2aWV3RGV2Q29uc29sZVN0YXRlbWVudChyZXF1ZXN0KSB7CiAgcmV0dXJuICJQT1NUIF90cmFuc2Zvcm0vX3ByZXZpZXdcbiIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHJlcXVlc3QsIG51bGwsIDIpLCAiXG4iKTsKfTsKCmV4cG9ydHMuZ2V0UGl2b3RQcmV2aWV3RGV2Q29uc29sZVN0YXRlbWVudCA9IGdldFBpdm90UHJldmlld0RldkNvbnNvbGVTdGF0ZW1lbnQ7"},null]}