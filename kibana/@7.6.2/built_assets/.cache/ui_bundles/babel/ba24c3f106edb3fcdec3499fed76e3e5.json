{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/beats_management/public/lib/adapters/framework/kibana_framework_adapter.js","dependencies":[{"path":"x-pack/legacy/plugins/beats_management/public/lib/adapters/framework/kibana_framework_adapter.js","mtime":1585205043206},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLktpYmFuYUZyYW1ld29ya0FkYXB0ZXIgPSB2b2lkIDA7Cgp2YXIgX1BhdGhSZXBvcnRlciA9IHJlcXVpcmUoImlvLXRzL2xpYi9QYXRoUmVwb3J0ZXIiKTsKCnZhciBSZWFjdERPTSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0LWRvbSIpKTsKCnZhciBfRWl0aGVyID0gcmVxdWlyZSgiZnAtdHMvbGliL0VpdGhlciIpOwoKdmFyIF9uZXdfcGxhdGZvcm0gPSByZXF1aXJlKCJ1aS9uZXdfcGxhdGZvcm0iKTsKCnZhciBfYWRhcHRlcl90eXBlcyA9IHJlcXVpcmUoIi4vYWRhcHRlcl90eXBlcyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgYXJyMltpXSA9IGFycltpXTsKICAgIH0KCiAgICByZXR1cm4gYXJyMjsKICB9Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgS2liYW5hRnJhbWV3b3JrQWRhcHRlciA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIF9jcmVhdGVDbGFzcyhLaWJhbmFGcmFtZXdvcmtBZGFwdGVyLCBbewogICAga2V5OiAiaW5mbyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgaWYgKHRoaXMueHBhY2tJbmZvKSB7CiAgICAgICAgcmV0dXJuIHRoaXMueHBhY2tJbmZvOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBFcnJvcignZnJhbWV3b3JrIGFkYXB0ZXIgbXVzdCBoYXZlIGluaXQgY2FsbGVkIGJlZm9yZSBhbnl0aGluZyBlbHNlJyk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJjdXJyZW50VXNlciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuc2hpZWxkVXNlcjsKICAgIH0KICB9XSk7CgogIGZ1bmN0aW9uIEtpYmFuYUZyYW1ld29ya0FkYXB0ZXIoUExVR0lOX0lELCBtYW5hZ2VtZW50LCByb3V0ZXMsIGdldEJhc2VQYXRoLCBvbktpYmFuYVJlYWR5LCB4cGFja0luZm9TZXJ2aWNlLCB2ZXJzaW9uKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBLaWJhbmFGcmFtZXdvcmtBZGFwdGVyKTsKCiAgICB0aGlzLlBMVUdJTl9JRCA9IFBMVUdJTl9JRDsKICAgIHRoaXMubWFuYWdlbWVudCA9IG1hbmFnZW1lbnQ7CiAgICB0aGlzLnJvdXRlcyA9IHJvdXRlczsKICAgIHRoaXMuZ2V0QmFzZVBhdGggPSBnZXRCYXNlUGF0aDsKICAgIHRoaXMub25LaWJhbmFSZWFkeSA9IG9uS2liYW5hUmVhZHk7CiAgICB0aGlzLnhwYWNrSW5mb1NlcnZpY2UgPSB4cGFja0luZm9TZXJ2aWNlOwogICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInhwYWNrSW5mbyIsIG51bGwpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiYWRhcHRlclNlcnZpY2UiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAic2hpZWxkVXNlciIsIG51bGwpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAic2V0VUlTZXR0aW5ncyIsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7CiAgICAgIF90aGlzLmFkYXB0ZXJTZXJ2aWNlLmNhbGxPckJ1ZmZlcihmdW5jdGlvbiAoX3JlZikgewogICAgICAgIHZhciBjb25maWcgPSBfcmVmLmNvbmZpZzsKICAgICAgICBjb25maWcuc2V0KGtleSwgdmFsdWUpOwogICAgICB9KTsKICAgIH0pOwoKICAgIHRoaXMuYWRhcHRlclNlcnZpY2UgPSBuZXcgS2liYW5hQWRhcHRlclNlcnZpY2VQcm92aWRlcigpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEtpYmFuYUZyYW1ld29ya0FkYXB0ZXIsIFt7CiAgICBrZXk6ICJ3YWl0VW50aWxGcmFtZXdvcmtSZWFkeSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gd2FpdFVudGlsRnJhbWV3b3JrUmVhZHkoKSB7CiAgICAgIHZhciB4cGFja0luZm8sIHhwYWNrSW5mb1VucGFja2VkLCBhc3NlcnREYXRhLCBzZWN1cml0eVNldHVwLCBhc3NlcnRVc2VyOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIHdhaXRVbnRpbEZyYW1ld29ya1JlYWR5JChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHRoaXMub25LaWJhbmFSZWFkeSgpKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICB4cGFja0luZm8gPSB0aGlzLnhwYWNrSW5mb1NlcnZpY2U7CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDM7CiAgICAgICAgICAgICAgeHBhY2tJbmZvVW5wYWNrZWQgPSB7CiAgICAgICAgICAgICAgICBiYXNlUGF0aDogdGhpcy5nZXRCYXNlUGF0aCgpLAogICAgICAgICAgICAgICAgbGljZW5zZTogewogICAgICAgICAgICAgICAgICB0eXBlOiB4cGFja0luZm8gPyB4cGFja0luZm8uZ2V0TGljZW5zZSgpLnR5cGUgOiAnb3NzJywKICAgICAgICAgICAgICAgICAgZXhwaXJlZDogeHBhY2tJbmZvID8gIXhwYWNrSW5mby5nZXRMaWNlbnNlKCkuaXNBY3RpdmUgOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgZXhwaXJ5X2RhdGVfaW5fbWlsbGlzOiB4cGFja0luZm8uZ2V0TGljZW5zZSgpLmV4cGlyeURhdGVJbk1pbGxpcyAhPT0gdW5kZWZpbmVkID8geHBhY2tJbmZvLmdldExpY2Vuc2UoKS5leHBpcnlEYXRlSW5NaWxsaXMgOiAtMQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHNlY3VyaXR5OiB7CiAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHhwYWNrSW5mbyA/IHhwYWNrSW5mby5nZXQoImZlYXR1cmVzLiIuY29uY2F0KHRoaXMuUExVR0lOX0lELCAiLnNlY3VyaXR5LmVuYWJsZWQiKSwgZmFsc2UpIDogZmFsc2UsCiAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZTogeHBhY2tJbmZvID8geHBhY2tJbmZvLmdldCgiZmVhdHVyZXMuIi5jb25jYXQodGhpcy5QTFVHSU5fSUQsICIuc2VjdXJpdHkuYXZhaWxhYmxlIiksIGZhbHNlKSA6IGZhbHNlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc2V0dGluZ3M6IHhwYWNrSW5mbyA/IHhwYWNrSW5mby5nZXQoImZlYXR1cmVzLiIuY29uY2F0KHRoaXMuUExVR0lOX0lELCAiLnNldHRpbmdzIikpIDoge30KICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNzsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDMpOwogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiVW5leHBlY3RlZCBkYXRhIHN0cnVjdHVyZSBmcm9tIHhwYWNrSW5mb1NlcnZpY2UsICIuY29uY2F0KEpTT04uc3RyaW5naWZ5KF9jb250ZXh0LnQwKSkpOwoKICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICBhc3NlcnREYXRhID0gX2FkYXB0ZXJfdHlwZXMuUnVudGltZUZyYW1ld29ya0luZm8uZGVjb2RlKHhwYWNrSW5mb1VucGFja2VkKTsKCiAgICAgICAgICAgICAgaWYgKCEoMCwgX0VpdGhlci5pc0xlZnQpKGFzc2VydERhdGEpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiRXJyb3IgcGFyc2luZyB4cGFjayBpbmZvIGluICIuY29uY2F0KHRoaXMuUExVR0lOX0lELCAiLCAgICIpLmNvbmNhdChfUGF0aFJlcG9ydGVyLlBhdGhSZXBvcnRlci5yZXBvcnQoYXNzZXJ0RGF0YSlbMF0pKTsKCiAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgdGhpcy54cGFja0luZm8gPSB4cGFja0luZm9VbnBhY2tlZDsKICAgICAgICAgICAgICBzZWN1cml0eVNldHVwID0gX25ld19wbGF0Zm9ybS5ucFNldHVwLnBsdWdpbnMuc2VjdXJpdHk7CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE1OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxODsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHNlY3VyaXR5U2V0dXAgPT09IG51bGwgfHwgc2VjdXJpdHlTZXR1cCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VjdXJpdHlTZXR1cC5hdXRoYy5nZXRDdXJyZW50VXNlcigpKTsKCiAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgX2NvbnRleHQudDEgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICBpZiAoX2NvbnRleHQudDEpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQudDEgPSBudWxsOwoKICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICB0aGlzLnNoaWVsZFVzZXIgPSBfY29udGV4dC50MTsKICAgICAgICAgICAgICBhc3NlcnRVc2VyID0gX2FkYXB0ZXJfdHlwZXMuUnVudGltZUZyYW1ld29ya1VzZXIuZGVjb2RlKHRoaXMuc2hpZWxkVXNlcik7CgogICAgICAgICAgICAgIGlmICghKDAsIF9FaXRoZXIuaXNMZWZ0KShhc3NlcnRVc2VyKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI1OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkVycm9yIHBhcnNpbmcgdXNlciBpbmZvIGluICIuY29uY2F0KHRoaXMuUExVR0lOX0lELCAiLCAgICIpLmNvbmNhdChfUGF0aFJlcG9ydGVyLlBhdGhSZXBvcnRlci5yZXBvcnQoYXNzZXJ0VXNlcilbMF0pKTsKCiAgICAgICAgICAgIGNhc2UgMjU6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDMwOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAyNzoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjc7CiAgICAgICAgICAgICAgX2NvbnRleHQudDIgPSBfY29udGV4dFsiY2F0Y2giXSgxNSk7CiAgICAgICAgICAgICAgdGhpcy5zaGllbGRVc2VyID0gbnVsbDsKCiAgICAgICAgICAgIGNhc2UgMzA6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIHRoaXMsIFtbMywgN10sIFsxNSwgMjddXSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyVUlBdFBhdGgiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclVJQXRQYXRoKHBhdGgsIGNvbXBvbmVudCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciB0b0NvbnRyb2xsZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdzZWxmJzsKICAgICAgdmFyIGFkYXB0ZXIgPSB0aGlzOwogICAgICB0aGlzLnJvdXRlcy53aGVuKCIiLmNvbmNhdChwYXRoKS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KEFycmF5KDYpKS5tYXAoZnVuY3Rpb24gKGUsIG4pIHsKICAgICAgICByZXR1cm4gIi86YXJnIi5jb25jYXQobiwgIj8iKTsKICAgICAgfSkuam9pbignJykpLCAvLyBIYWNrIGJlY2F1c2UgYW5ndWxhciAxIGRvZXMgbm90IHN1cHBvcnQgd2lsZGNhcmRzCiAgICAgIHsKICAgICAgICB0ZW1wbGF0ZTogdG9Db250cm9sbGVyID09PSAnc2VsZicgPyAiPCIuY29uY2F0KHRoaXMuUExVR0lOX0lELCAiPjxkaXYgaWQ9XCIiKS5jb25jYXQodGhpcy5QTFVHSU5fSUQsICJSZWFjdFJvb3RcIj48L2Rpdj48LyIpLmNvbmNhdCh0aGlzLlBMVUdJTl9JRCwgIj4iKSA6ICI8a2JuLW1hbmFnZW1lbnQtYXBwIHNlY3Rpb249XCIiLmNvbmNhdCh0aGlzLlBMVUdJTl9JRC5yZXBsYWNlKCdfJywgJy0nKSwgIlwiPlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJtYW5hZ2VtZW50LXNpZGVuYXZcIiBjbGFzcz1cImV1aVBhZ2VTaWRlQmFyXCIgc3R5bGU9XCJwb3NpdGlvbjogc3RhdGljO1wiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCIiKS5jb25jYXQodGhpcy5QTFVHSU5fSUQsICJSZWFjdFJvb3RcIiAvPlxuICAgICAgICAgICAgICAgPC9rYm4tbWFuYWdlbWVudC1hcHA+IiksCiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1jbGFzc2VzLXBlci1maWxlCiAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24gY29udHJvbGxlcigkc2NvcGUsICRyb3V0ZSkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgdmFyIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiIi5jb25jYXQoX3RoaXMyLlBMVUdJTl9JRCwgIlJlYWN0Um9vdCIpKTsKICAgICAgICAgICAgICBSZWFjdERPTS5yZW5kZXIoY29tcG9uZW50LCBlbGVtKTsKICAgICAgICAgICAgICBhZGFwdGVyLm1hbmFnZUFuZ3VsYXJMaWZlY3ljbGUoJHNjb3BlLCAkcm91dGUsIGVsZW0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICRzY29wZS4kb25Jbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICRzY29wZS50b3BOYXZNZW51ID0gW107CiAgICAgICAgICAgIH07CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiRXJyb3IgcmVuZGVyaW5nIEJlYXRzIENNIHRvIHRoZSBkb20sICIuY29uY2F0KGUubWVzc2FnZSkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVnaXN0ZXJNYW5hZ2VtZW50U2VjdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJNYW5hZ2VtZW50U2VjdGlvbihzZXR0aW5ncykgewogICAgICB2YXIgc2VjdGlvbklkID0gc2V0dGluZ3MuaWQgfHwgdGhpcy5QTFVHSU5fSUQ7CgogICAgICBpZiAoIXRoaXMubWFuYWdlbWVudC5oYXNJdGVtKHNlY3Rpb25JZCkpIHsKICAgICAgICB0aGlzLm1hbmFnZW1lbnQucmVnaXN0ZXIoc2VjdGlvbklkLCB7CiAgICAgICAgICBkaXNwbGF5OiBzZXR0aW5ncy5uYW1lLAogICAgICAgICAgaWNvbjogc2V0dGluZ3MuaWNvbk5hbWUsCiAgICAgICAgICBvcmRlcjogc2V0dGluZ3Mub3JkZXIgfHwgMzAKICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInJlZ2lzdGVyTWFuYWdlbWVudFVJIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3Rlck1hbmFnZW1lbnRVSShzZXR0aW5ncykgewogICAgICB2YXIgc2VjdGlvbklkID0gc2V0dGluZ3Muc2VjdGlvbklkIHx8IHRoaXMuUExVR0lOX0lEOwoKICAgICAgaWYgKCF0aGlzLm1hbmFnZW1lbnQuaGFzSXRlbShzZWN0aW9uSWQpKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJyZWdpc3Rlck1hbmFnZW1lbnRVSSB3YXMgY2FsbGVkIHdpdGggYSBzZWN0aW9uSWQgb2YgIi5jb25jYXQoc2VjdGlvbklkLCAiLCBhbmQgdGhhdCBpcyBpcyBub3QgeWV0IHJlZ2VzdGVyZWQgYXMgYSBzZWN0aW9uIikpOwogICAgICB9CgogICAgICB2YXIgc2VjdGlvbiA9IHRoaXMubWFuYWdlbWVudC5nZXRTZWN0aW9uKHNlY3Rpb25JZCk7CiAgICAgIHNlY3Rpb24ucmVnaXN0ZXIoc2VjdGlvbklkLCB7CiAgICAgICAgdmlzaWJsZTogc2V0dGluZ3MudmlzYWJsZSB8fCB0cnVlLAogICAgICAgIGRpc3BsYXk6IHNldHRpbmdzLm5hbWUsCiAgICAgICAgb3JkZXI6IHNldHRpbmdzLm9yZGVyIHx8IDMwLAogICAgICAgIHVybDogIiMiLmNvbmNhdChzZXR0aW5ncy5iYXNlUGF0aCkKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAibWFuYWdlQW5ndWxhckxpZmVjeWNsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbWFuYWdlQW5ndWxhckxpZmVjeWNsZSgkc2NvcGUsICRyb3V0ZSwgZWxlbSkgewogICAgICB2YXIgbGFzdFJvdXRlID0gJHJvdXRlLmN1cnJlbnQ7CiAgICAgIHZhciBkZXJlZ2lzdGVyID0gJHNjb3BlLiRvbignJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcycsIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgY3VycmVudFJvdXRlID0gJHJvdXRlLmN1cnJlbnQ7IC8vIGlmIHRlbXBsYXRlcyBhcmUgdGhlIHNhbWUgd2UgYXJlIG9uIHRoZSBzYW1lIHJvdXRlCgogICAgICAgIGlmIChsYXN0Um91dGUuJCRyb3V0ZS50ZW1wbGF0ZSA9PT0gY3VycmVudFJvdXRlLiQkcm91dGUudGVtcGxhdGUpIHsKICAgICAgICAgIC8vIHRoaXMgcHJldmVudHMgYW5ndWxhciBmcm9tIGRlc3Ryb3lpbmcgc2NvcGUKICAgICAgICAgICRyb3V0ZS5jdXJyZW50ID0gbGFzdFJvdXRlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoZWxlbSkgewogICAgICAgICAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKGVsZW0pOwogICAgICAgICAgICBlbGVtLnJlbW92ZSgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkgewogICAgICAgIGlmIChkZXJlZ2lzdGVyKSB7CiAgICAgICAgICBkZXJlZ2lzdGVyKCk7CiAgICAgICAgfSAvLyBtYW51YWxseSB1bm1vdW50IGNvbXBvbmVudCB3aGVuIHNjb3BlIGlzIGRlc3Ryb3llZAoKCiAgICAgICAgaWYgKGVsZW0pIHsKICAgICAgICAgIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUoZWxlbSk7CiAgICAgICAgICBlbGVtLnJlbW92ZSgpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gS2liYW5hRnJhbWV3b3JrQWRhcHRlcjsKfSgpOwoKZXhwb3J0cy5LaWJhbmFGcmFtZXdvcmtBZGFwdGVyID0gS2liYW5hRnJhbWV3b3JrQWRhcHRlcjsKCnZhciBLaWJhbmFBZGFwdGVyU2VydmljZVByb3ZpZGVyID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gS2liYW5hQWRhcHRlclNlcnZpY2VQcm92aWRlcigpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBLaWJhbmFBZGFwdGVyU2VydmljZVByb3ZpZGVyKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInNlcnZpY2VSZWZzIiwgbnVsbCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJidWZmZXJlZENhbGxzIiwgW10pOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEtpYmFuYUFkYXB0ZXJTZXJ2aWNlUHJvdmlkZXIsIFt7CiAgICBrZXk6ICIkZ2V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAkZ2V0KCRyb290U2NvcGUsIGNvbmZpZykgewogICAgICB0aGlzLnNlcnZpY2VSZWZzID0gewogICAgICAgIGNvbmZpZzogY29uZmlnLAogICAgICAgIHJvb3RTY29wZTogJHJvb3RTY29wZQogICAgICB9OwogICAgICB0aGlzLmFwcGx5QnVmZmVyZWRDYWxscyh0aGlzLmJ1ZmZlcmVkQ2FsbHMpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjYWxsT3JCdWZmZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGxPckJ1ZmZlcihzZXJ2aWNlQ2FsbCkgewogICAgICBpZiAodGhpcy5zZXJ2aWNlUmVmcyAhPT0gbnVsbCkgewogICAgICAgIHRoaXMuYXBwbHlCdWZmZXJlZENhbGxzKFtzZXJ2aWNlQ2FsbF0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuYnVmZmVyZWRDYWxscy5wdXNoKHNlcnZpY2VDYWxsKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImFwcGx5QnVmZmVyZWRDYWxscyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlCdWZmZXJlZENhbGxzKGJ1ZmZlcmVkQ2FsbHMpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICBpZiAoIXRoaXMuc2VydmljZVJlZnMpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMuc2VydmljZVJlZnMucm9vdFNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7CiAgICAgICAgYnVmZmVyZWRDYWxscy5mb3JFYWNoKGZ1bmN0aW9uIChzZXJ2aWNlQ2FsbCkgewogICAgICAgICAgaWYgKCFfdGhpczMuc2VydmljZVJlZnMpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBzZXJ2aWNlQ2FsbChfdGhpczMuc2VydmljZVJlZnMpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBLaWJhbmFBZGFwdGVyU2VydmljZVByb3ZpZGVyOwp9KCk7"},null]}