{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/lens/public/editor_frame_plugin/plugin.js","dependencies":[{"path":"x-pack/legacy/plugins/lens/public/editor_frame_plugin/plugin.js","mtime":1585205044989},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmVkaXRvckZyYW1lU3RvcCA9IGV4cG9ydHMuZWRpdG9yRnJhbWVTdGFydCA9IGV4cG9ydHMuZWRpdG9yRnJhbWVTZXR1cCA9IGV4cG9ydHMuRWRpdG9yRnJhbWVQbHVnaW4gPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcmVhY3REb20gPSByZXF1aXJlKCJyZWFjdC1kb20iKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2Nocm9tZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgidWkvY2hyb21lIikpOwoKdmFyIF9uZXdfcGxhdGZvcm0gPSByZXF1aXJlKCJ1aS9uZXdfcGxhdGZvcm0iKTsKCnZhciBfZWRpdG9yX2ZyYW1lID0gcmVxdWlyZSgiLi9lZGl0b3JfZnJhbWUiKTsKCnZhciBfbWVyZ2VfdGFibGVzID0gcmVxdWlyZSgiLi9tZXJnZV90YWJsZXMiKTsKCnZhciBfZW1iZWRkYWJsZV9mYWN0b3J5ID0gcmVxdWlyZSgiLi9lbWJlZGRhYmxlL2VtYmVkZGFibGVfZmFjdG9yeSIpOwoKdmFyIF9zdGF0ZV9tYW5hZ2VtZW50ID0gcmVxdWlyZSgiLi9lZGl0b3JfZnJhbWUvc3RhdGVfbWFuYWdlbWVudCIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBFZGl0b3JGcmFtZVBsdWdpbiA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEVkaXRvckZyYW1lUGx1Z2luKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVkaXRvckZyYW1lUGx1Z2luKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImRhdGFzb3VyY2VzIiwge30pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAidmlzdWFsaXphdGlvbnMiLCB7fSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRWRpdG9yRnJhbWVQbHVnaW4sIFt7CiAgICBrZXk6ICJzZXR1cCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXAoY29yZSwgcGx1Z2lucykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcGx1Z2lucy5leHByZXNzaW9ucy5yZWdpc3RlckZ1bmN0aW9uKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX21lcmdlX3RhYmxlcy5tZXJnZVRhYmxlczsKICAgICAgfSk7CiAgICAgIHJldHVybiB7CiAgICAgICAgcmVnaXN0ZXJEYXRhc291cmNlOiBmdW5jdGlvbiByZWdpc3RlckRhdGFzb3VyY2UoZGF0YXNvdXJjZSkgewogICAgICAgICAgX3RoaXMuZGF0YXNvdXJjZXNbZGF0YXNvdXJjZS5pZF0gPSBkYXRhc291cmNlOwogICAgICAgIH0sCiAgICAgICAgcmVnaXN0ZXJWaXN1YWxpemF0aW9uOiBmdW5jdGlvbiByZWdpc3RlclZpc3VhbGl6YXRpb24odmlzdWFsaXphdGlvbikgewogICAgICAgICAgX3RoaXMudmlzdWFsaXphdGlvbnNbdmlzdWFsaXphdGlvbi5pZF0gPSB2aXN1YWxpemF0aW9uOwogICAgICAgIH0KICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdGFydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoY29yZSwgcGx1Z2lucykgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHBsdWdpbnMuZW1iZWRkYWJsZS5yZWdpc3RlckVtYmVkZGFibGVGYWN0b3J5KCdsZW5zJywgbmV3IF9lbWJlZGRhYmxlX2ZhY3RvcnkuRW1iZWRkYWJsZUZhY3RvcnkocGx1Z2lucy5kYXRhLnF1ZXJ5LnRpbWVmaWx0ZXIudGltZWZpbHRlciwgcGx1Z2lucy5jaHJvbWUsIHBsdWdpbnMuZXhwcmVzc2lvbnMuRXhwcmVzc2lvblJlbmRlcmVyLCBwbHVnaW5zLmRhdGEuaW5kZXhQYXR0ZXJucykpOwoKICAgICAgdmFyIGNyZWF0ZUluc3RhbmNlID0gZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoKSB7CiAgICAgICAgdmFyIGRvbUVsZW1lbnQ7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudChlbGVtZW50LCBfcmVmKSB7CiAgICAgICAgICAgIHZhciBkb2MgPSBfcmVmLmRvYywKICAgICAgICAgICAgICAgIG9uRXJyb3IgPSBfcmVmLm9uRXJyb3IsCiAgICAgICAgICAgICAgICBkYXRlUmFuZ2UgPSBfcmVmLmRhdGVSYW5nZSwKICAgICAgICAgICAgICAgIHF1ZXJ5ID0gX3JlZi5xdWVyeSwKICAgICAgICAgICAgICAgIGZpbHRlcnMgPSBfcmVmLmZpbHRlcnMsCiAgICAgICAgICAgICAgICBzYXZlZFF1ZXJ5ID0gX3JlZi5zYXZlZFF1ZXJ5LAogICAgICAgICAgICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlOwogICAgICAgICAgICBkb21FbGVtZW50ID0gZWxlbWVudDsKICAgICAgICAgICAgdmFyIGZpcnN0RGF0YXNvdXJjZUlkID0gT2JqZWN0LmtleXMoX3RoaXMyLmRhdGFzb3VyY2VzKVswXTsKICAgICAgICAgICAgdmFyIGZpcnN0VmlzdWFsaXphdGlvbklkID0gT2JqZWN0LmtleXMoX3RoaXMyLnZpc3VhbGl6YXRpb25zKVswXTsKICAgICAgICAgICAgKDAsIF9yZWFjdERvbS5yZW5kZXIpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5JMThuUHJvdmlkZXIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2VkaXRvcl9mcmFtZS5FZGl0b3JGcmFtZSwgewogICAgICAgICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJsbnNFZGl0b3JGcmFtZSIsCiAgICAgICAgICAgICAgb25FcnJvcjogb25FcnJvciwKICAgICAgICAgICAgICBkYXRhc291cmNlTWFwOiBfdGhpczIuZGF0YXNvdXJjZXMsCiAgICAgICAgICAgICAgdmlzdWFsaXphdGlvbk1hcDogX3RoaXMyLnZpc3VhbGl6YXRpb25zLAogICAgICAgICAgICAgIGluaXRpYWxEYXRhc291cmNlSWQ6ICgwLCBfc3RhdGVfbWFuYWdlbWVudC5nZXRBY3RpdmVEYXRhc291cmNlSWRGcm9tRG9jKShkb2MpIHx8IGZpcnN0RGF0YXNvdXJjZUlkIHx8IG51bGwsCiAgICAgICAgICAgICAgaW5pdGlhbFZpc3VhbGl6YXRpb25JZDogZG9jICYmIGRvYy52aXN1YWxpemF0aW9uVHlwZSB8fCBmaXJzdFZpc3VhbGl6YXRpb25JZCB8fCBudWxsLAogICAgICAgICAgICAgIGNvcmU6IGNvcmUsCiAgICAgICAgICAgICAgRXhwcmVzc2lvblJlbmRlcmVyOiBwbHVnaW5zLmV4cHJlc3Npb25zLkV4cHJlc3Npb25SZW5kZXJlciwKICAgICAgICAgICAgICBkb2M6IGRvYywKICAgICAgICAgICAgICBkYXRlUmFuZ2U6IGRhdGVSYW5nZSwKICAgICAgICAgICAgICBxdWVyeTogcXVlcnksCiAgICAgICAgICAgICAgZmlsdGVyczogZmlsdGVycywKICAgICAgICAgICAgICBzYXZlZFF1ZXJ5OiBzYXZlZFF1ZXJ5LAogICAgICAgICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZQogICAgICAgICAgICB9KSksIGRvbUVsZW1lbnQpOwogICAgICAgICAgfSwKICAgICAgICAgIHVubW91bnQ6IGZ1bmN0aW9uIHVubW91bnQoKSB7CiAgICAgICAgICAgIGlmIChkb21FbGVtZW50KSB7CiAgICAgICAgICAgICAgKDAsIF9yZWFjdERvbS51bm1vdW50Q29tcG9uZW50QXROb2RlKShkb21FbGVtZW50KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH07CiAgICAgIH07CgogICAgICByZXR1cm4gewogICAgICAgIGNyZWF0ZUluc3RhbmNlOiBjcmVhdGVJbnN0YW5jZQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInN0b3AiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7CiAgICAgIHJldHVybiB7fTsKICAgIH0KICB9XSk7CgogIHJldHVybiBFZGl0b3JGcmFtZVBsdWdpbjsKfSgpOwoKZXhwb3J0cy5FZGl0b3JGcmFtZVBsdWdpbiA9IEVkaXRvckZyYW1lUGx1Z2luOwp2YXIgZWRpdG9yRnJhbWUgPSBuZXcgRWRpdG9yRnJhbWVQbHVnaW4oKTsKCnZhciBlZGl0b3JGcmFtZVNldHVwID0gZnVuY3Rpb24gZWRpdG9yRnJhbWVTZXR1cCgpIHsKICByZXR1cm4gZWRpdG9yRnJhbWUuc2V0dXAoX25ld19wbGF0Zm9ybS5ucFNldHVwLmNvcmUsIHsKICAgIGRhdGE6IF9uZXdfcGxhdGZvcm0ubnBTZXR1cC5wbHVnaW5zLmRhdGEsCiAgICBlbWJlZGRhYmxlOiBfbmV3X3BsYXRmb3JtLm5wU2V0dXAucGx1Z2lucy5lbWJlZGRhYmxlLAogICAgZXhwcmVzc2lvbnM6IF9uZXdfcGxhdGZvcm0ubnBTZXR1cC5wbHVnaW5zLmV4cHJlc3Npb25zCiAgfSk7Cn07CgpleHBvcnRzLmVkaXRvckZyYW1lU2V0dXAgPSBlZGl0b3JGcmFtZVNldHVwOwoKdmFyIGVkaXRvckZyYW1lU3RhcnQgPSBmdW5jdGlvbiBlZGl0b3JGcmFtZVN0YXJ0KCkgewogIHJldHVybiBlZGl0b3JGcmFtZS5zdGFydChfbmV3X3BsYXRmb3JtLm5wU3RhcnQuY29yZSwgewogICAgZGF0YTogX25ld19wbGF0Zm9ybS5ucFN0YXJ0LnBsdWdpbnMuZGF0YSwKICAgIGVtYmVkZGFibGU6IF9uZXdfcGxhdGZvcm0ubnBTdGFydC5wbHVnaW5zLmVtYmVkZGFibGUsCiAgICBleHByZXNzaW9uczogX25ld19wbGF0Zm9ybS5ucFN0YXJ0LnBsdWdpbnMuZXhwcmVzc2lvbnMsCiAgICBjaHJvbWU6IF9jaHJvbWUuZGVmYXVsdAogIH0pOwp9OwoKZXhwb3J0cy5lZGl0b3JGcmFtZVN0YXJ0ID0gZWRpdG9yRnJhbWVTdGFydDsKCnZhciBlZGl0b3JGcmFtZVN0b3AgPSBmdW5jdGlvbiBlZGl0b3JGcmFtZVN0b3AoKSB7CiAgcmV0dXJuIGVkaXRvckZyYW1lLnN0b3AoKTsKfTsKCmV4cG9ydHMuZWRpdG9yRnJhbWVTdG9wID0gZWRpdG9yRnJhbWVTdG9wOw=="},null]}