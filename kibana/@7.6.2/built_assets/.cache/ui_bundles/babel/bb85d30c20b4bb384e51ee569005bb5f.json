{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/data/public/search/search_source/search_source.js","dependencies":[{"path":"src/legacy/core_plugins/data/public/search/search_source/search_source.js","mtime":1585205039312},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlNlYXJjaFNvdXJjZSA9IHZvaWQgMDsKCnZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJsb2Rhc2giKSk7Cgp2YXIgX25ld19wbGF0Zm9ybSA9IHJlcXVpcmUoInVpL25ld19wbGF0Zm9ybSIpOwoKdmFyIF9jaHJvbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInVpL2Nocm9tZSIpKTsKCnZhciBfbm9ybWFsaXplX3NvcnRfcmVxdWVzdCA9IHJlcXVpcmUoIi4vbm9ybWFsaXplX3NvcnRfcmVxdWVzdCIpOwoKdmFyIF9mZXRjaCA9IHJlcXVpcmUoIi4uL2ZldGNoIik7Cgp2YXIgX3B1YmxpYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uL3BsdWdpbnMva2liYW5hX3V0aWxzL3B1YmxpYyIpOwoKdmFyIF9wdWJsaWMyID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9kYXRhL3B1YmxpYyIpOwoKdmFyIF9lcnJvcnMgPSByZXF1aXJlKCIuLi9mZXRjaC9lcnJvcnMiKTsKCnZhciBfZmlsdGVyX2RvY3ZhbHVlX2ZpZWxkcyA9IHJlcXVpcmUoIi4vZmlsdGVyX2RvY3ZhbHVlX2ZpZWxkcyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogIH0KfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICB9Cn0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgcmV0dXJuIENvbnN0cnVjdG9yOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIGVzU2hhcmRUaW1lb3V0ID0gX25ld19wbGF0Zm9ybS5ucFNldHVwLmNvcmUuaW5qZWN0ZWRNZXRhZGF0YS5nZXRJbmplY3RlZFZhcignZXNTaGFyZFRpbWVvdXQnKTsKCnZhciBjb25maWcgPSBfbmV3X3BsYXRmb3JtLm5wU2V0dXAuY29yZS51aVNldHRpbmdzOwoKdmFyIFNlYXJjaFNvdXJjZSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFNlYXJjaFNvdXJjZSgpIHsKICAgIHZhciBmaWVsZHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWFyY2hTb3VyY2UpOwoKICAgIHRoaXMuZmllbGRzID0gZmllbGRzOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiaWQiLCBfbG9kYXNoLmRlZmF1bHQudW5pcXVlSWQoJ2RhdGFfc291cmNlJykpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAic2VhcmNoU3RyYXRlZ3lJZCIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJwYXJlbnQiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAicmVxdWVzdFN0YXJ0SGFuZGxlcnMiLCBbXSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJpbmhlcml0T3B0aW9ucyIsIHt9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImhpc3RvcnkiLCBbXSk7CiAgfQogIC8qKiAqKioKICAgKiBQVUJMSUMgQVBJCiAgICoqKioqLwoKCiAgX2NyZWF0ZUNsYXNzKFNlYXJjaFNvdXJjZSwgW3sKICAgIGtleTogInNldFByZWZlcnJlZFNlYXJjaFN0cmF0ZWd5SWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldFByZWZlcnJlZFNlYXJjaFN0cmF0ZWd5SWQoc2VhcmNoU3RyYXRlZ3lJZCkgewogICAgICB0aGlzLnNlYXJjaFN0cmF0ZWd5SWQgPSBzZWFyY2hTdHJhdGVneUlkOwogICAgfQogIH0sIHsKICAgIGtleTogInNldEZpZWxkcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RmllbGRzKG5ld0ZpZWxkcykgewogICAgICB0aGlzLmZpZWxkcyA9IG5ld0ZpZWxkczsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0RmllbGQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZpZWxkKGZpZWxkLCB2YWx1ZSkgewogICAgICBpZiAodmFsdWUgPT0gbnVsbCkgewogICAgICAgIGRlbGV0ZSB0aGlzLmZpZWxkc1tmaWVsZF07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5maWVsZHNbZmllbGRdID0gdmFsdWU7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOwogICAgfQogIH0sIHsKICAgIGtleTogImdldElkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJZCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaWQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0RmllbGRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaWVsZHMoKSB7CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLmZpZWxkcyk7CiAgICB9CiAgICAvKioKICAgICAqIEdldCBmaWVsZHMgZnJvbSB0aGUgZmllbGRzCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0RmllbGQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZpZWxkKGZpZWxkKSB7CiAgICAgIHZhciByZWN1cnNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlOwoKICAgICAgaWYgKCFyZWN1cnNlIHx8IHRoaXMuZmllbGRzW2ZpZWxkXSAhPT0gdm9pZCAwKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRzW2ZpZWxkXTsKICAgICAgfQoKICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KCk7CiAgICAgIHJldHVybiBwYXJlbnQgJiYgcGFyZW50LmdldEZpZWxkKGZpZWxkKTsKICAgIH0KICAgIC8qKgogICAgICogR2V0IHRoZSBmaWVsZCBmcm9tIG91ciBvd24gZmllbGRzLCBkb24ndCB0cmF2ZXJzZSB1cCB0aGUgY2hhaW4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRPd25GaWVsZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3duRmllbGQoZmllbGQpIHsKICAgICAgcmV0dXJuIHRoaXMuZ2V0RmllbGQoZmllbGQsIGZhbHNlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjcmVhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHsKICAgICAgcmV0dXJuIG5ldyBTZWFyY2hTb3VyY2UoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjcmVhdGVDb3B5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVDb3B5KCkgewogICAgICB2YXIgbmV3U2VhcmNoU291cmNlID0gbmV3IFNlYXJjaFNvdXJjZSgpOwogICAgICBuZXdTZWFyY2hTb3VyY2Uuc2V0RmllbGRzKF9vYmplY3RTcHJlYWQoe30sIHRoaXMuZmllbGRzKSk7IC8vIHdoZW4gc2VyaWFsaXppbmcgdGhlIGludGVybmFsIGZpZWxkcyB3ZSBsb3NlIHRoZSBpbnRlcm5hbCBjbGFzc2VzIHVzZWQgaW4gdGhlIGluZGV4CiAgICAgIC8vIHBhdHRlcm4sIHNvIHdlIGhhdmUgdG8gc2V0IGl0IGFnYWluIHRvIHdvcmthcm91bmQgdGhpcyBiZWhhdmlvcgoKICAgICAgbmV3U2VhcmNoU291cmNlLnNldEZpZWxkKCdpbmRleCcsIHRoaXMuZ2V0RmllbGQoJ2luZGV4JykpOwogICAgICBuZXdTZWFyY2hTb3VyY2Uuc2V0UGFyZW50KHRoaXMuZ2V0UGFyZW50KCkpOwogICAgICByZXR1cm4gbmV3U2VhcmNoU291cmNlOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZUNoaWxkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVDaGlsZCgpIHsKICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwogICAgICB2YXIgY2hpbGRTZWFyY2hTb3VyY2UgPSBuZXcgU2VhcmNoU291cmNlKCk7CiAgICAgIGNoaWxkU2VhcmNoU291cmNlLnNldFBhcmVudCh0aGlzLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIGNoaWxkU2VhcmNoU291cmNlOwogICAgfQogICAgLyoqCiAgICAgKiBTZXQgYSBzZWFyY2hTb3VyY2UgdGhhdCB0aGlzIHNvdXJjZSBzaG91bGQgaW5oZXJpdCBmcm9tCiAgICAgKiBAcGFyYW0gIHtTZWFyY2hTb3VyY2V9IHBhcmVudCAtIHRoZSBwYXJlbnQgc2VhcmNoU291cmNlCiAgICAgKiBAcGFyYW0gIHtTZWFyY2hTb3VyY2VPcHRpb25zfSBvcHRpb25zIC0gdGhlIGluaGVyaXQgb3B0aW9ucwogICAgICogQHJldHVybiB7dGhpc30gLSBjaGFpbmFibGUKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJzZXRQYXJlbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldFBhcmVudChwYXJlbnQpIHsKICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwogICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDsKICAgICAgdGhpcy5pbmhlcml0T3B0aW9ucyA9IG9wdGlvbnM7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogICAgLyoqCiAgICAgKiBHZXQgdGhlIHBhcmVudCBvZiB0aGlzIFNlYXJjaFNvdXJjZQogICAgICogQHJldHVybiB7dW5kZWZpbmVkfHNlYXJjaFNvdXJjZX0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRQYXJlbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhcmVudCgpIHsKICAgICAgcmV0dXJuIHRoaXMucGFyZW50OwogICAgfQogICAgLyoqCiAgICAgKiBGZXRjaCB0aGlzIHNvdXJjZSBhbmQgcmVqZWN0IHRoZSByZXR1cm5lZCBQcm9taXNlIG9uIGVycm9yCiAgICAgKgogICAgICogQGFzeW5jCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZmV0Y2giLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoKCkgewogICAgICB2YXIgb3B0aW9ucywKICAgICAgICAgICRpbmplY3RvciwKICAgICAgICAgIGVzLAogICAgICAgICAgc2VhcmNoUmVxdWVzdCwKICAgICAgICAgIHJlc3BvbnNlLAogICAgICAgICAgX2FyZ3MgPSBhcmd1bWVudHM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gZmV0Y2gkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIG9wdGlvbnMgPSBfYXJncy5sZW5ndGggPiAwICYmIF9hcmdzWzBdICE9PSB1bmRlZmluZWQgPyBfYXJnc1swXSA6IHt9OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoX2Nocm9tZS5kZWZhdWx0LmRhbmdlcm91c2x5R2V0QWN0aXZlSW5qZWN0b3IoKSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgJGluamVjdG9yID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBlcyA9ICRpbmplY3Rvci5nZXQoJ2VzJyk7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh0aGlzLnJlcXVlc3RJc1N0YXJ0aW5nKG9wdGlvbnMpKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHRoaXMuZmxhdHRlbigpKTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBzZWFyY2hSZXF1ZXN0ID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkgPSBbc2VhcmNoUmVxdWVzdF07CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEzOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoKDAsIF9mZXRjaC5mZXRjaFNvb24pKHNlYXJjaFJlcXVlc3QsIF9vYmplY3RTcHJlYWQoe30sIHRoaXMuc2VhcmNoU3RyYXRlZ3lJZCAmJiB7CiAgICAgICAgICAgICAgICBzZWFyY2hTdHJhdGVneUlkOiB0aGlzLnNlYXJjaFN0cmF0ZWd5SWQKICAgICAgICAgICAgICB9LCB7fSwgb3B0aW9ucyksIHsKICAgICAgICAgICAgICAgIGVzOiBlcywKICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnLAogICAgICAgICAgICAgICAgZXNTaGFyZFRpbWVvdXQ6IGVzU2hhcmRUaW1lb3V0CiAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIGlmICghcmVzcG9uc2UuZXJyb3IpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhyb3cgbmV3IF9lcnJvcnMuUmVxdWVzdEZhaWx1cmUobnVsbCwgcmVzcG9uc2UpOwoKICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBudWxsLCB0aGlzKTsKICAgIH0KICAgIC8qKgogICAgICogIEFkZCBhIGhhbmRsZXIgdGhhdCB3aWxsIGJlIG5vdGlmaWVkIHdoZW5ldmVyIHJlcXVlc3RzIHN0YXJ0CiAgICAgKiAgQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIKICAgICAqICBAcmV0dXJuIHt1bmRlZmluZWR9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAib25SZXF1ZXN0U3RhcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uUmVxdWVzdFN0YXJ0KGhhbmRsZXIpIHsKICAgICAgdGhpcy5yZXF1ZXN0U3RhcnRIYW5kbGVycy5wdXNoKGhhbmRsZXIpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFNlYXJjaFJlcXVlc3RCb2R5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWFyY2hSZXF1ZXN0Qm9keSgpIHsKICAgICAgdmFyIHNlYXJjaFJlcXVlc3Q7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gZ2V0U2VhcmNoUmVxdWVzdEJvZHkkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHRoaXMuZmxhdHRlbigpKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBzZWFyY2hSZXF1ZXN0ID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHNlYXJjaFJlcXVlc3QuYm9keSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBudWxsLCB0aGlzKTsKICAgIH0KICAgIC8qKgogICAgICogQ29tcGxldGVseSBkZXN0cm95IHRoZSBTZWFyY2hTb3VyY2UuCiAgICAgKiBAcmV0dXJuIHt1bmRlZmluZWR9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZGVzdHJveSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgdGhpcy5yZXF1ZXN0U3RhcnRIYW5kbGVycy5sZW5ndGggPSAwOwogICAgfQogICAgLyoqICoqKioKICAgICAqIFBSSVZBVEUgQVBJUwogICAgICoqKioqKi8KCiAgICAvKioKICAgICAqICBDYWxsZWQgYnkgcmVxdWVzdHMgb2YgdGhpcyBzZWFyY2ggc291cmNlIHdoZW4gdGhleSBhcmUgc3RhcnRlZAogICAgICogIEBwYXJhbSAge0NvdXJpZXIuUmVxdWVzdH0gcmVxdWVzdAogICAgICogIEBwYXJhbSBvcHRpb25zCiAgICAgKiAgQHJldHVybiB7UHJvbWlzZTx1bmRlZmluZWQ+fQogICAgICovCgogIH0sIHsKICAgIGtleTogInJlcXVlc3RJc1N0YXJ0aW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0SXNTdGFydGluZygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgIHZhciBoYW5kbGVycyA9IF90b0NvbnN1bWFibGVBcnJheSh0aGlzLnJlcXVlc3RTdGFydEhhbmRsZXJzKTsgLy8gSWYgY2FsbFBhcmVudFN0YXJ0SGFuZGxlcnMgaGFzIGJlZW4gc2V0IHRvIHRydWUsIHdlIGFsc28gY2FsbCBhbGwKICAgICAgLy8gaGFuZGxlcnMgb2YgcGFyZW50IHNlYXJjaCBzb3VyY2VzLgoKCiAgICAgIGlmICh0aGlzLmluaGVyaXRPcHRpb25zLmNhbGxQYXJlbnRTdGFydEhhbmRsZXJzKSB7CiAgICAgICAgdmFyIF9zZWFyY2hTb3VyY2UgPSB0aGlzLmdldFBhcmVudCgpOwoKICAgICAgICB3aGlsZSAoX3NlYXJjaFNvdXJjZSkgewogICAgICAgICAgaGFuZGxlcnMucHVzaC5hcHBseShoYW5kbGVycywgX3RvQ29uc3VtYWJsZUFycmF5KF9zZWFyY2hTb3VyY2UucmVxdWVzdFN0YXJ0SGFuZGxlcnMpKTsKICAgICAgICAgIF9zZWFyY2hTb3VyY2UgPSBfc2VhcmNoU291cmNlLmdldFBhcmVudCgpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGhhbmRsZXJzLm1hcChmdW5jdGlvbiAoZm4pIHsKICAgICAgICByZXR1cm4gZm4oX3RoaXMsIG9wdGlvbnMpOwogICAgICB9KSk7CiAgICB9CiAgICAvKioKICAgICAqIFVzZWQgdG8gbWVyZ2UgcHJvcGVydGllcyBpbnRvIHRoZSBkYXRhIHdpdGhpbiAuX2ZsYXR0ZW4oKS4KICAgICAqIFRoZSBkYXRhIGlzIHBhc3NlZCBpbiBhbmQgbW9kaWZpZWQgYnkgdGhlIGZ1bmN0aW9uCiAgICAgKgogICAgICogQHBhcmFtICB7b2JqZWN0fSBkYXRhIC0gdGhlIGN1cnJlbnQgbWVyZ2VkIGRhdGEKICAgICAqIEBwYXJhbSAgeyp9IHZhbCAtIHRoZSB2YWx1ZSBhdCBga2V5YAogICAgICogQHBhcmFtICB7Kn0ga2V5IC0gVGhlIGtleSBvZiBgdmFsYAogICAgICogQHJldHVybiB7dW5kZWZpbmVkfQogICAgICovCgogIH0sIHsKICAgIGtleTogIm1lcmdlUHJvcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbWVyZ2VQcm9wKGRhdGEsIHZhbCwga2V5KSB7CiAgICAgIHZhbCA9IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicgPyB2YWwodGhpcykgOiB2YWw7CiAgICAgIGlmICh2YWwgPT0gbnVsbCB8fCAha2V5KSByZXR1cm47CgogICAgICB2YXIgYWRkVG9Sb290ID0gZnVuY3Rpb24gYWRkVG9Sb290KHJvb3RLZXksIHZhbHVlKSB7CiAgICAgICAgZGF0YVtyb290S2V5XSA9IHZhbHVlOwogICAgICB9OwogICAgICAvKioKICAgICAgICogQWRkIHRoZSBrZXkgYW5kIHZhbCB0byB0aGUgYm9keSBvZiB0aGUgcmVxdWVzdAogICAgICAgKi8KCgogICAgICB2YXIgYWRkVG9Cb2R5ID0gZnVuY3Rpb24gYWRkVG9Cb2R5KGJvZHlLZXksIHZhbHVlKSB7CiAgICAgICAgLy8gaWdub3JlIGlmIHdlIGFscmVhZHkgaGF2ZSBhIHZhbHVlCiAgICAgICAgaWYgKGRhdGEuYm9keVtib2R5S2V5XSA9PSBudWxsKSB7CiAgICAgICAgICBkYXRhLmJvZHlbYm9keUtleV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICAgIH07CgogICAgICBzd2l0Y2ggKGtleSkgewogICAgICAgIGNhc2UgJ2ZpbHRlcic6CiAgICAgICAgICByZXR1cm4gYWRkVG9Sb290KCdmaWx0ZXJzJywgKGRhdGEuZmlsdGVycyB8fCBbXSkuY29uY2F0KHZhbCkpOwoKICAgICAgICBjYXNlICdxdWVyeSc6CiAgICAgICAgICByZXR1cm4gYWRkVG9Sb290KGtleSwgKGRhdGFba2V5XSB8fCBbXSkuY29uY2F0KHZhbCkpOwoKICAgICAgICBjYXNlICdmaWVsZHMnOgogICAgICAgICAgdmFyIF9maWVsZHMgPSBfbG9kYXNoLmRlZmF1bHQudW5pcSgoZGF0YVtrZXldIHx8IFtdKS5jb25jYXQodmFsKSk7CgogICAgICAgICAgcmV0dXJuIGFkZFRvUm9vdChrZXksIF9maWVsZHMpOwoKICAgICAgICBjYXNlICdpbmRleCc6CiAgICAgICAgY2FzZSAndHlwZSc6CiAgICAgICAgY2FzZSAnaGlnaGxpZ2h0QWxsJzoKICAgICAgICAgIHJldHVybiBrZXkgJiYgZGF0YVtrZXldID09IG51bGwgJiYgYWRkVG9Sb290KGtleSwgdmFsKTsKCiAgICAgICAgY2FzZSAnc2VhcmNoQWZ0ZXInOgogICAgICAgICAgcmV0dXJuIGFkZFRvQm9keSgnc2VhcmNoX2FmdGVyJywgdmFsKTsKCiAgICAgICAgY2FzZSAnc291cmNlJzoKICAgICAgICAgIHJldHVybiBhZGRUb0JvZHkoJ19zb3VyY2UnLCB2YWwpOwoKICAgICAgICBjYXNlICdzb3J0JzoKICAgICAgICAgIHZhciBzb3J0ID0gKDAsIF9ub3JtYWxpemVfc29ydF9yZXF1ZXN0Lm5vcm1hbGl6ZVNvcnRSZXF1ZXN0KSh2YWwsIHRoaXMuZ2V0RmllbGQoJ2luZGV4JyksIGNvbmZpZy5nZXQoJ3NvcnQ6b3B0aW9ucycpKTsKICAgICAgICAgIHJldHVybiBhZGRUb0JvZHkoa2V5LCBzb3J0KTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBhZGRUb0JvZHkoa2V5LCB2YWwpOwogICAgICB9CiAgICB9CiAgICAvKioKICAgICAqIFdhbGsgdGhlIGluaGVyaXRhbmNlIGNoYWluIG9mIGEgc291cmNlIGFuZCByZXR1cm4gaXRzCiAgICAgKiBmbGF0IHJlcHJlc2VudGF0aW9uICh0YWtpbmcgaW50byBhY2NvdW50IG1lcmdpbmcgcnVsZXMpCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0KICAgICAqIEByZXNvbHZlZCB7T2JqZWN0fG51bGx9IC0gdGhlIGZsYXQgZGF0YSBvZiB0aGUgU2VhcmNoU291cmNlCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAibWVyZ2VQcm9wcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbWVyZ2VQcm9wcygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgcm9vdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpczsKICAgICAgdmFyIHNlYXJjaFJlcXVlc3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHsKICAgICAgICBib2R5OiB7fQogICAgICB9OwogICAgICBPYmplY3QuZW50cmllcyh0aGlzLmZpZWxkcykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikgewogICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLAogICAgICAgICAgICBrZXkgPSBfcmVmMlswXSwKICAgICAgICAgICAgdmFsdWUgPSBfcmVmMlsxXTsKCiAgICAgICAgX3RoaXMyLm1lcmdlUHJvcChzZWFyY2hSZXF1ZXN0LCB2YWx1ZSwga2V5KTsKICAgICAgfSk7CgogICAgICBpZiAodGhpcy5wYXJlbnQpIHsKICAgICAgICB0aGlzLnBhcmVudC5tZXJnZVByb3BzKHJvb3QsIHNlYXJjaFJlcXVlc3QpOwogICAgICB9CgogICAgICByZXR1cm4gc2VhcmNoUmVxdWVzdDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmbGF0dGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmbGF0dGVuKCkgewogICAgICB2YXIgc2VhcmNoUmVxdWVzdCA9IHRoaXMubWVyZ2VQcm9wcygpOwogICAgICBzZWFyY2hSZXF1ZXN0LmJvZHkgPSBzZWFyY2hSZXF1ZXN0LmJvZHkgfHwge307CiAgICAgIHZhciBib2R5ID0gc2VhcmNoUmVxdWVzdC5ib2R5LAogICAgICAgICAgaW5kZXggPSBzZWFyY2hSZXF1ZXN0LmluZGV4LAogICAgICAgICAgZmllbGRzID0gc2VhcmNoUmVxdWVzdC5maWVsZHMsCiAgICAgICAgICBxdWVyeSA9IHNlYXJjaFJlcXVlc3QucXVlcnksCiAgICAgICAgICBmaWx0ZXJzID0gc2VhcmNoUmVxdWVzdC5maWx0ZXJzLAogICAgICAgICAgaGlnaGxpZ2h0QWxsID0gc2VhcmNoUmVxdWVzdC5oaWdobGlnaHRBbGw7CiAgICAgIHZhciBjb21wdXRlZEZpZWxkcyA9IGluZGV4ID8gaW5kZXguZ2V0Q29tcHV0ZWRGaWVsZHMoKSA6IHt9OwogICAgICBib2R5LnN0b3JlZF9maWVsZHMgPSBjb21wdXRlZEZpZWxkcy5zdG9yZWRGaWVsZHM7CiAgICAgIGJvZHkuc2NyaXB0X2ZpZWxkcyA9IGJvZHkuc2NyaXB0X2ZpZWxkcyB8fCB7fTsKCiAgICAgIF9sb2Rhc2guZGVmYXVsdC5leHRlbmQoYm9keS5zY3JpcHRfZmllbGRzLCBjb21wdXRlZEZpZWxkcy5zY3JpcHRGaWVsZHMpOwoKICAgICAgdmFyIGRlZmF1bHREb2NWYWx1ZUZpZWxkcyA9IGNvbXB1dGVkRmllbGRzLmRvY3ZhbHVlRmllbGRzID8gY29tcHV0ZWRGaWVsZHMuZG9jdmFsdWVGaWVsZHMgOiBbXTsKICAgICAgYm9keS5kb2N2YWx1ZV9maWVsZHMgPSBib2R5LmRvY3ZhbHVlX2ZpZWxkcyB8fCBkZWZhdWx0RG9jVmFsdWVGaWVsZHM7CgogICAgICBpZiAoIWJvZHkuaGFzT3duUHJvcGVydHkoJ19zb3VyY2UnKSAmJiBpbmRleCkgewogICAgICAgIGJvZHkuX3NvdXJjZSA9IGluZGV4LmdldFNvdXJjZUZpbHRlcmluZygpOwogICAgICB9CgogICAgICBpZiAoYm9keS5fc291cmNlKSB7CiAgICAgICAgLy8gZXhjbHVkZSBzb3VyY2UgZmllbGRzIGZvciB0aGlzIGluZGV4IHBhdHRlcm4gc3BlY2lmaWVkIGJ5IHRoZSB1c2VyCiAgICAgICAgdmFyIGZpbHRlciA9ICgwLCBfcHVibGljLmZpZWxkV2lsZGNhcmRGaWx0ZXIpKGJvZHkuX3NvdXJjZS5leGNsdWRlcywgY29uZmlnLmdldCgnbWV0YUZpZWxkcycpKTsKICAgICAgICBib2R5LmRvY3ZhbHVlX2ZpZWxkcyA9IGJvZHkuZG9jdmFsdWVfZmllbGRzLmZpbHRlcihmdW5jdGlvbiAoZG9jdmFsdWVGaWVsZCkgewogICAgICAgICAgcmV0dXJuIGZpbHRlcihkb2N2YWx1ZUZpZWxkLmZpZWxkKTsKICAgICAgICB9KTsKICAgICAgfSAvLyBpZiB3ZSBvbmx5IHdhbnQgdG8gc2VhcmNoIGZvciBjZXJ0YWluIGZpZWxkcwoKCiAgICAgIGlmIChmaWVsZHMpIHsKICAgICAgICAvLyBmaWx0ZXIgb3V0IHRoZSBkb2N2YWx1ZV9maWVsZHMsIGFuZCBzY3JpcHRfZmllbGRzIHRvIG9ubHkgaW5jbHVkZSB0aG9zZSB0aGF0IHdlIGFyZSBjb25jZXJuZWQgd2l0aAogICAgICAgIGJvZHkuZG9jdmFsdWVfZmllbGRzID0gKDAsIF9maWx0ZXJfZG9jdmFsdWVfZmllbGRzLmZpbHRlckRvY3ZhbHVlRmllbGRzKShib2R5LmRvY3ZhbHVlX2ZpZWxkcywgZmllbGRzKTsKICAgICAgICBib2R5LnNjcmlwdF9maWVsZHMgPSBfbG9kYXNoLmRlZmF1bHQucGljayhib2R5LnNjcmlwdF9maWVsZHMsIGZpZWxkcyk7IC8vIHJlcXVlc3QgdGhlIHJlbWFpbmluZyBmaWVsZHMgZnJvbSBib3RoIHN0b3JlZF9maWVsZHMgYW5kIF9zb3VyY2UKCiAgICAgICAgdmFyIHJlbWFpbmluZ0ZpZWxkcyA9IF9sb2Rhc2guZGVmYXVsdC5kaWZmZXJlbmNlKGZpZWxkcywgX2xvZGFzaC5kZWZhdWx0LmtleXMoYm9keS5zY3JpcHRfZmllbGRzKSk7CgogICAgICAgIGJvZHkuc3RvcmVkX2ZpZWxkcyA9IHJlbWFpbmluZ0ZpZWxkczsKCiAgICAgICAgX2xvZGFzaC5kZWZhdWx0LnNldChib2R5LCAnX3NvdXJjZS5pbmNsdWRlcycsIHJlbWFpbmluZ0ZpZWxkcyk7CiAgICAgIH0KCiAgICAgIHZhciBlc1F1ZXJ5Q29uZmlncyA9IF9wdWJsaWMyLmVzUXVlcnkuZ2V0RXNRdWVyeUNvbmZpZyhjb25maWcpOwoKICAgICAgYm9keS5xdWVyeSA9IF9wdWJsaWMyLmVzUXVlcnkuYnVpbGRFc1F1ZXJ5KGluZGV4LCBxdWVyeSwgZmlsdGVycywgZXNRdWVyeUNvbmZpZ3MpOwoKICAgICAgaWYgKGhpZ2hsaWdodEFsbCAmJiBib2R5LnF1ZXJ5KSB7CiAgICAgICAgYm9keS5oaWdobGlnaHQgPSAoMCwgX3B1YmxpYzIuZ2V0SGlnaGxpZ2h0UmVxdWVzdCkoYm9keS5xdWVyeSwgY29uZmlnLmdldCgnZG9jX3RhYmxlOmhpZ2hsaWdodCcpKTsKICAgICAgICBkZWxldGUgc2VhcmNoUmVxdWVzdC5oaWdobGlnaHRBbGw7CiAgICAgIH0KCiAgICAgIHZhciB0cmFuc2xhdGVUb1F1ZXJ5ID0gZnVuY3Rpb24gdHJhbnNsYXRlVG9RdWVyeShmaWx0ZXIpIHsKICAgICAgICByZXR1cm4gZmlsdGVyICYmIChmaWx0ZXIucXVlcnkgfHwgZmlsdGVyKTsKICAgICAgfTsgLy8gcmUtd3JpdGUgZmlsdGVycyB3aXRoaW4gZmlsdGVyIGFnZ3JlZ2F0aW9ucwoKCiAgICAgIChmdW5jdGlvbiByZWN1cnNlKGFnZ0JyYW5jaCkgewogICAgICAgIGlmICghYWdnQnJhbmNoKSByZXR1cm47CiAgICAgICAgT2JqZWN0LmtleXMoYWdnQnJhbmNoKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCkgewogICAgICAgICAgdmFyIGFnZyA9IGFnZ0JyYW5jaFtpZF07CgogICAgICAgICAgaWYgKGFnZy5maWx0ZXJzKSB7CiAgICAgICAgICAgIC8vIHRyYW5zbGF0ZSBmaWx0ZXJzIGFnZ3JlZ2F0aW9ucwogICAgICAgICAgICB2YXIgYWdnRmlsdGVycyA9IGFnZy5maWx0ZXJzLmZpbHRlcnM7CiAgICAgICAgICAgIE9iamVjdC5rZXlzKGFnZ0ZpbHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGZpbHRlcklkKSB7CiAgICAgICAgICAgICAgYWdnRmlsdGVyc1tmaWx0ZXJJZF0gPSB0cmFuc2xhdGVUb1F1ZXJ5KGFnZ0ZpbHRlcnNbZmlsdGVySWRdKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgcmVjdXJzZShhZ2cuYWdncyB8fCBhZ2cuYWdncmVnYXRpb25zKTsKICAgICAgICB9KTsKICAgICAgfSkoYm9keS5hZ2dzIHx8IGJvZHkuYWdncmVnYXRpb25zKTsKCiAgICAgIHJldHVybiBzZWFyY2hSZXF1ZXN0OwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNlYXJjaFNvdXJjZTsKfSgpOwoKZXhwb3J0cy5TZWFyY2hTb3VyY2UgPSBTZWFyY2hTb3VyY2U7"},null]}