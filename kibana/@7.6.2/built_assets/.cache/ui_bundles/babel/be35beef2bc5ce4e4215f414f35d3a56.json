{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/snapshot_restore/public/app/sections/home/repository_list/repository_table/repository_table.js","dependencies":[{"path":"x-pack/legacy/plugins/snapshot_restore/public/app/sections/home/repository_list/repository_table/repository_table.js","mtime":1585205048231},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlJlcG9zaXRvcnlUYWJsZSA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uL2NvbW1vbi9jb25zdGFudHMiKTsKCnZhciBfY29tcG9uZW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMiKTsKCnZhciBfY29uc3RhbnRzMiA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2NvbnN0YW50cyIpOwoKdmFyIF9pbmRleCA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2luZGV4Iik7Cgp2YXIgX3RleHQgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9zZXJ2aWNlcy90ZXh0Iik7Cgp2YXIgX3VpX21ldHJpYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL3NlcnZpY2VzL3VpX21ldHJpYyIpOwoKdmFyIF9uYXZpZ2F0aW9uID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vc2VydmljZXMvbmF2aWdhdGlvbiIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9Cgp2YXIgUmVwb3NpdG9yeVRhYmxlID0gZnVuY3Rpb24gUmVwb3NpdG9yeVRhYmxlKF9yZWYpIHsKICB2YXIgcmVwb3NpdG9yaWVzID0gX3JlZi5yZXBvc2l0b3JpZXMsCiAgICAgIG1hbmFnZWRSZXBvc2l0b3J5ID0gX3JlZi5tYW5hZ2VkUmVwb3NpdG9yeSwKICAgICAgcmVsb2FkID0gX3JlZi5yZWxvYWQsCiAgICAgIG9wZW5SZXBvc2l0b3J5RGV0YWlsc1VybCA9IF9yZWYub3BlblJlcG9zaXRvcnlEZXRhaWxzVXJsLAogICAgICBvblJlcG9zaXRvcnlEZWxldGVkID0gX3JlZi5vblJlcG9zaXRvcnlEZWxldGVkOwoKICB2YXIgX3VzZUFwcERlcGVuZGVuY2llcyA9ICgwLCBfaW5kZXgudXNlQXBwRGVwZW5kZW5jaWVzKSgpLAogICAgICBpMThuID0gX3VzZUFwcERlcGVuZGVuY2llcy5jb3JlLmkxOG47CgogIHZhciBGb3JtYXR0ZWRNZXNzYWdlID0gaTE4bi5Gb3JtYXR0ZWRNZXNzYWdlOwogIHZhciB0cmFja1VpTWV0cmljID0gX3VpX21ldHJpYy51aU1ldHJpY1NlcnZpY2UudHJhY2tVaU1ldHJpYzsKCiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKFtdKSwKICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksCiAgICAgIHNlbGVjdGVkSXRlbXMgPSBfdXNlU3RhdGUyWzBdLAogICAgICBzZXRTZWxlY3RlZEl0ZW1zID0gX3VzZVN0YXRlMlsxXTsKCiAgdmFyIGNvbHVtbnMgPSBbewogICAgZmllbGQ6ICduYW1lJywKICAgIG5hbWU6IGkxOG4udHJhbnNsYXRlKCd4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUxpc3QudGFibGUubmFtZUNvbHVtblRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ05hbWUnCiAgICB9KSwKICAgIHRydW5jYXRlVGV4dDogdHJ1ZSwKICAgIHNvcnRhYmxlOiB0cnVlLAogICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIobmFtZSkgewogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlMaW5rLCB7CiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgIHJldHVybiB0cmFja1VpTWV0cmljKF9jb25zdGFudHMyLlVJTV9SRVBPU0lUT1JZX1NIT1dfREVUQUlMU19DTElDSyk7CiAgICAgICAgfSwKICAgICAgICBocmVmOiBvcGVuUmVwb3NpdG9yeURldGFpbHNVcmwobmFtZSksCiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInJlcG9zaXRvcnlMaW5rIgogICAgICB9LCBuYW1lKSwgIlx4QTBceEEwIiwgbWFuYWdlZFJlcG9zaXRvcnkgPT09IG5hbWUgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSWNvblRpcCwgewogICAgICAgIGNvbnRlbnQ6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUxpc3QudGFibGUubWFuYWdlZFJlcG9zaXRvcnlCYWRnZUxhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVGhpcyBpcyBhIG1hbmFnZWQgcmVwb3NpdG9yeSIKICAgICAgICB9KSwKICAgICAgICBwb3NpdGlvbjogInJpZ2h0IgogICAgICB9KSA6IG51bGwpOwogICAgfQogIH0sIHsKICAgIGZpZWxkOiAndHlwZScsCiAgICBuYW1lOiBpMThuLnRyYW5zbGF0ZSgneHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlMaXN0LnRhYmxlLnR5cGVDb2x1bW5UaXRsZScsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdUeXBlJwogICAgfSksCiAgICB0cnVuY2F0ZVRleHQ6IHRydWUsCiAgICBzb3J0YWJsZTogdHJ1ZSwKICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHR5cGUsIHJlcG9zaXRvcnkpIHsKICAgICAgaWYgKHR5cGUgPT09IF9jb25zdGFudHMuUkVQT1NJVE9SWV9UWVBFUy5zb3VyY2UpIHsKICAgICAgICByZXR1cm4gX3RleHQudGV4dFNlcnZpY2UuZ2V0UmVwb3NpdG9yeVR5cGVOYW1lKHR5cGUsIHJlcG9zaXRvcnkuc2V0dGluZ3MuZGVsZWdhdGVUeXBlKTsKICAgICAgfQoKICAgICAgcmV0dXJuIF90ZXh0LnRleHRTZXJ2aWNlLmdldFJlcG9zaXRvcnlUeXBlTmFtZSh0eXBlKTsKICAgIH0KICB9LCB7CiAgICBmaWVsZDogJ2FjdGlvbnMnLAogICAgbmFtZTogaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5TGlzdC50YWJsZS5hY3Rpb25zQ29sdW1uVGl0bGUnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQWN0aW9ucycKICAgIH0pLAogICAgYWN0aW9uczogW3sKICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoX3JlZjIpIHsKICAgICAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWU7CiAgICAgICAgdmFyIGxhYmVsID0gaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5TGlzdC50YWJsZS5hY3Rpb25FZGl0VG9vbHRpcCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRWRpdCcKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRvb2xUaXAsIHsKICAgICAgICAgIGNvbnRlbnQ6IGxhYmVsCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkljb24sIHsKICAgICAgICAgICJhcmlhLWxhYmVsIjogaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5TGlzdC50YWJsZS5hY3Rpb25FZGl0QXJpYUxhYmVsJywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0VkaXQgcmVwb3NpdG9yeSBge25hbWV9YCcsCiAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgIG5hbWU6IG5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgfSksCiAgICAgICAgICBpY29uVHlwZTogInBlbmNpbCIsCiAgICAgICAgICBjb2xvcjogInByaW1hcnkiLAogICAgICAgICAgaHJlZjogKDAsIF9uYXZpZ2F0aW9uLmxpbmtUb0VkaXRSZXBvc2l0b3J5KShuYW1lKSwKICAgICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJlZGl0UmVwb3NpdG9yeUJ1dHRvbiIKICAgICAgICB9KSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoX3JlZjMpIHsKICAgICAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWU7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudHMuUmVwb3NpdG9yeURlbGV0ZVByb3ZpZGVyLCBudWxsLCBmdW5jdGlvbiAoZGVsZXRlUmVwb3NpdG9yeVByb21wdCkgewogICAgICAgICAgdmFyIGxhYmVsID0gbmFtZSAhPT0gbWFuYWdlZFJlcG9zaXRvcnkgPyBpMThuLnRyYW5zbGF0ZSgneHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlMaXN0LnRhYmxlLmFjdGlvblJlbW92ZVRvb2x0aXAnLCB7CiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUmVtb3ZlJwogICAgICAgICAgfSkgOiBpMThuLnRyYW5zbGF0ZSgneHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlMaXN0LnRhYmxlLmRlbGV0ZU1hbmFnZWRSZXBvc2l0b3J5VG9vbHRpcCcsIHsKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdZb3UgY2Fubm90IGRlbGV0ZSBhIG1hbmFnZWQgcmVwb3NpdG9yeS4nCiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVG9vbFRpcCwgewogICAgICAgICAgICBjb250ZW50OiBsYWJlbAogICAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkljb24sIHsKICAgICAgICAgICAgImFyaWEtbGFiZWwiOiBpMThuLnRyYW5zbGF0ZSgneHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlMaXN0LnRhYmxlLmFjdGlvblJlbW92ZUFyaWFMYWJlbCcsIHsKICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1JlbW92ZSByZXBvc2l0b3J5IGB7bmFtZX1gJywKICAgICAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBpY29uVHlwZTogInRyYXNoIiwKICAgICAgICAgICAgY29sb3I6ICJkYW5nZXIiLAogICAgICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiZGVsZXRlUmVwb3NpdG9yeUJ1dHRvbiIsCiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZVJlcG9zaXRvcnlQcm9tcHQoW25hbWVdLCBvblJlcG9zaXRvcnlEZWxldGVkKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNEaXNhYmxlZDogQm9vbGVhbihuYW1lID09PSBtYW5hZ2VkUmVwb3NpdG9yeSkKICAgICAgICAgIH0pKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfV0sCiAgICB3aWR0aDogJzEwMHB4JwogIH1dOwogIHZhciBzb3J0aW5nID0gewogICAgc29ydDogewogICAgICBmaWVsZDogJ25hbWUnLAogICAgICBkaXJlY3Rpb246ICdhc2MnCiAgICB9CiAgfTsKICB2YXIgcGFnaW5hdGlvbiA9IHsKICAgIGluaXRpYWxQYWdlU2l6ZTogMjAsCiAgICBwYWdlU2l6ZU9wdGlvbnM6IFsxMCwgMjAsIDUwXQogIH07CiAgdmFyIHNlbGVjdGlvbiA9IHsKICAgIG9uU2VsZWN0aW9uQ2hhbmdlOiBmdW5jdGlvbiBvblNlbGVjdGlvbkNoYW5nZShuZXdTZWxlY3RlZEl0ZW1zKSB7CiAgICAgIHJldHVybiBzZXRTZWxlY3RlZEl0ZW1zKG5ld1NlbGVjdGVkSXRlbXMpOwogICAgfSwKICAgIHNlbGVjdGFibGU6IGZ1bmN0aW9uIHNlbGVjdGFibGUoX3JlZjQpIHsKICAgICAgdmFyIG5hbWUgPSBfcmVmNC5uYW1lOwogICAgICByZXR1cm4gQm9vbGVhbihuYW1lICE9PSBtYW5hZ2VkUmVwb3NpdG9yeSk7CiAgICB9LAogICAgc2VsZWN0YWJsZU1lc3NhZ2U6IGZ1bmN0aW9uIHNlbGVjdGFibGVNZXNzYWdlKHNlbGVjdGFibGUpIHsKICAgICAgaWYgKCFzZWxlY3RhYmxlKSB7CiAgICAgICAgcmV0dXJuIGkxOG4udHJhbnNsYXRlKCd4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUxpc3QudGFibGUuZGVsZXRlTWFuYWdlZFJlcG9zaXRvcnlUb29sdGlwJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdZb3UgY2Fubm90IGRlbGV0ZSBhIG1hbmFnZWQgcmVwb3NpdG9yeS4nCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9OwogIHZhciBzZWFyY2ggPSB7CiAgICB0b29sc0xlZnQ6IHNlbGVjdGVkSXRlbXMubGVuZ3RoID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tcG9uZW50cy5SZXBvc2l0b3J5RGVsZXRlUHJvdmlkZXIsIG51bGwsIGZ1bmN0aW9uIChkZWxldGVSZXBvc2l0b3J5UHJvbXB0KSB7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uLCB7CiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgIHJldHVybiBkZWxldGVSZXBvc2l0b3J5UHJvbXB0KHNlbGVjdGVkSXRlbXMubWFwKGZ1bmN0aW9uIChyZXBvc2l0b3J5KSB7CiAgICAgICAgICAgIHJldHVybiByZXBvc2l0b3J5Lm5hbWU7CiAgICAgICAgICB9KSwgb25SZXBvc2l0b3J5RGVsZXRlZCk7CiAgICAgICAgfSwKICAgICAgICBjb2xvcjogImRhbmdlciIsCiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInNyUmVwb3NpdG9yeUxpc3RCdWxrRGVsZXRlQWN0aW9uQnV0dG9uIgogICAgICB9LCBzZWxlY3RlZEl0ZW1zLmxlbmd0aCA9PT0gMSA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlMaXN0LnRhYmxlLmRlbGV0ZVNpbmdsZVJlcG9zaXRvcnlCdXR0b24iLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiUmVtb3ZlIHJlcG9zaXRvcnkiCiAgICAgIH0pIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUxpc3QudGFibGUuZGVsZXRlTXVsdGlwbGVSZXBvc2l0b3JpZXNCdXR0b24iLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiUmVtb3ZlIHJlcG9zaXRvcmllcyIKICAgICAgfSkpOwogICAgfSkgOiB1bmRlZmluZWQsCiAgICB0b29sc1JpZ2h0OiBbX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbiwgewogICAgICBrZXk6ICJyZWxvYWRCdXR0b24iLAogICAgICBjb2xvcjogInNlY29uZGFyeSIsCiAgICAgIGljb25UeXBlOiAicmVmcmVzaCIsCiAgICAgIG9uQ2xpY2s6IHJlbG9hZCwKICAgICAgImRhdGEtdGVzdC1zdWJqIjogInJlbG9hZEJ1dHRvbiIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNuYXBzaG90UmVzdG9yZS5yZXBvc2l0b3J5TGlzdC50YWJsZS5yZWxvYWRSZXBvc2l0b3JpZXNCdXR0b24iLAogICAgICBkZWZhdWx0TWVzc2FnZTogIlJlbG9hZCIKICAgIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbiwgewogICAgICBrZXk6ICJyZWdpc3RlclJlcG8iLAogICAgICBocmVmOiAoMCwgX25hdmlnYXRpb24ubGlua1RvQWRkUmVwb3NpdG9yeSkoKSwKICAgICAgZmlsbDogdHJ1ZSwKICAgICAgaWNvblR5cGU6ICJwbHVzSW5DaXJjbGUiLAogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAicmVnaXN0ZXJSZXBvc2l0b3J5QnV0dG9uIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suc25hcHNob3RSZXN0b3JlLnJlcG9zaXRvcnlMaXN0LmFkZFJlcG9zaXRvcnlCdXR0b25MYWJlbCIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiUmVnaXN0ZXIgYSByZXBvc2l0b3J5IgogICAgfSkpXSwKICAgIGJveDogewogICAgICBpbmNyZW1lbnRhbDogdHJ1ZSwKICAgICAgc2NoZW1hOiB0cnVlCiAgICB9LAogICAgZmlsdGVyczogW3sKICAgICAgdHlwZTogJ2ZpZWxkX3ZhbHVlX3NlbGVjdGlvbicsCiAgICAgIGZpZWxkOiAndHlwZScsCiAgICAgIG5hbWU6IGkxOG4udHJhbnNsYXRlKCd4cGFjay5zbmFwc2hvdFJlc3RvcmUucmVwb3NpdG9yeUxpc3QudGFibGUudHlwZUZpbHRlckxhYmVsJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVHlwZScKICAgICAgfSksCiAgICAgIG11bHRpU2VsZWN0OiBmYWxzZSwKICAgICAgb3B0aW9uczogT2JqZWN0LmtleXMocmVwb3NpdG9yaWVzLnJlZHVjZShmdW5jdGlvbiAodHlwZU1hcCwgcmVwb3NpdG9yeSkgewogICAgICAgIHR5cGVNYXBbcmVwb3NpdG9yeS50eXBlXSA9IHRydWU7CiAgICAgICAgcmV0dXJuIHR5cGVNYXA7CiAgICAgIH0sIHt9KSkubWFwKGZ1bmN0aW9uICh0eXBlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHZhbHVlOiB0eXBlLAogICAgICAgICAgdmlldzogX3RleHQudGV4dFNlcnZpY2UuZ2V0UmVwb3NpdG9yeVR5cGVOYW1lKHR5cGUpCiAgICAgICAgfTsKICAgICAgfSkKICAgIH1dCiAgfTsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUluTWVtb3J5VGFibGUsIHsKICAgIGl0ZW1zOiByZXBvc2l0b3JpZXMsCiAgICBpdGVtSWQ6ICJuYW1lIiwKICAgIGNvbHVtbnM6IGNvbHVtbnMsCiAgICBzZWFyY2g6IHNlYXJjaCwKICAgIHNvcnRpbmc6IHNvcnRpbmcsCiAgICBzZWxlY3Rpb246IHNlbGVjdGlvbiwKICAgIHBhZ2luYXRpb246IHBhZ2luYXRpb24sCiAgICBpc1NlbGVjdGFibGU6IHRydWUsCiAgICByb3dQcm9wczogZnVuY3Rpb24gcm93UHJvcHMoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgJ2RhdGEtdGVzdC1zdWJqJzogJ3JvdycKICAgICAgfTsKICAgIH0sCiAgICBjZWxsUHJvcHM6IGZ1bmN0aW9uIGNlbGxQcm9wcyhpdGVtLCBmaWVsZCkgewogICAgICByZXR1cm4gewogICAgICAgICdkYXRhLXRlc3Qtc3Viaic6ICIiLmNvbmNhdChmaWVsZC5uYW1lLCAiX2NlbGwiKQogICAgICB9OwogICAgfSwKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJyZXBvc2l0b3J5VGFibGUiCiAgfSk7Cn07CgpleHBvcnRzLlJlcG9zaXRvcnlUYWJsZSA9IFJlcG9zaXRvcnlUYWJsZTs="},null]}