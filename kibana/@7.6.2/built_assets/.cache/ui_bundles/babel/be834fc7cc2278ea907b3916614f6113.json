{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/page/network/network_dns_table/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/page/network/network_dns_table/index.js","mtime":1585205047603},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk5ldHdvcmtEbnNUYWJsZSA9IGV4cG9ydHMuTmV0d29ya0Ruc1RhYmxlQ29tcG9uZW50ID0gdm9pZCAwOwoKdmFyIF9mcCA9IHJlcXVpcmUoImxvZGFzaC9mcCIpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9yZWFjdFJlZHV4ID0gcmVxdWlyZSgicmVhY3QtcmVkdXgiKTsKCnZhciBfYWN0aW9ucyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMiKTsKCnZhciBfc3RvcmUgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9zdG9yZSIpOwoKdmFyIF9wYWdpbmF0ZWRfdGFibGUgPSByZXF1aXJlKCIuLi8uLi8uLi9wYWdpbmF0ZWRfdGFibGUiKTsKCnZhciBfY29sdW1ucyA9IHJlcXVpcmUoIi4vY29sdW1ucyIpOwoKdmFyIF9pc19wdHJfaW5jbHVkZWQgPSByZXF1aXJlKCIuL2lzX3B0cl9pbmNsdWRlZCIpOwoKdmFyIGkxOG4gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCIuL3RyYW5zbGF0aW9ucyIpKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQovKgogKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lCiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS4KICovCgoKdmFyIHRhYmxlVHlwZSA9IF9zdG9yZS5uZXR3b3JrTW9kZWwuTmV0d29ya1RhYmxlVHlwZS5kbnM7CnZhciByb3dJdGVtcyA9IFt7CiAgdGV4dDogaTE4bi5ST1dTXzUsCiAgbnVtYmVyT2ZSb3c6IDUKfSwgewogIHRleHQ6IGkxOG4uUk9XU18xMCwKICBudW1iZXJPZlJvdzogMTAKfV07Cgp2YXIgTmV0d29ya0Ruc1RhYmxlQ29tcG9uZW50ID0gX3JlYWN0LmRlZmF1bHQubWVtbyhmdW5jdGlvbiAoX3JlZikgewogIHZhciBhY3RpdmVQYWdlID0gX3JlZi5hY3RpdmVQYWdlLAogICAgICBkYXRhID0gX3JlZi5kYXRhLAogICAgICBmYWtlVG90YWxDb3VudCA9IF9yZWYuZmFrZVRvdGFsQ291bnQsCiAgICAgIGlkID0gX3JlZi5pZCwKICAgICAgaXNJbnNwZWN0ID0gX3JlZi5pc0luc3BlY3QsCiAgICAgIGlzUHRySW5jbHVkZWQgPSBfcmVmLmlzUHRySW5jbHVkZWQsCiAgICAgIGxpbWl0ID0gX3JlZi5saW1pdCwKICAgICAgbG9hZGluZyA9IF9yZWYubG9hZGluZywKICAgICAgbG9hZFBhZ2UgPSBfcmVmLmxvYWRQYWdlLAogICAgICBzaG93TW9yZVBhZ2VzSW5kaWNhdG9yID0gX3JlZi5zaG93TW9yZVBhZ2VzSW5kaWNhdG9yLAogICAgICBzb3J0ID0gX3JlZi5zb3J0LAogICAgICB0b3RhbENvdW50ID0gX3JlZi50b3RhbENvdW50LAogICAgICB0eXBlID0gX3JlZi50eXBlLAogICAgICB1cGRhdGVOZXR3b3JrVGFibGUgPSBfcmVmLnVwZGF0ZU5ldHdvcmtUYWJsZTsKICB2YXIgdXBkYXRlTGltaXRQYWdpbmF0aW9uID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKG5ld0xpbWl0KSB7CiAgICByZXR1cm4gdXBkYXRlTmV0d29ya1RhYmxlKHsKICAgICAgbmV0d29ya1R5cGU6IHR5cGUsCiAgICAgIHRhYmxlVHlwZTogdGFibGVUeXBlLAogICAgICB1cGRhdGVzOiB7CiAgICAgICAgbGltaXQ6IG5ld0xpbWl0CiAgICAgIH0KICAgIH0pOwogIH0sIFt0eXBlLCB1cGRhdGVOZXR3b3JrVGFibGVdKTsKICB2YXIgdXBkYXRlQWN0aXZlUGFnZSA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChuZXdQYWdlKSB7CiAgICByZXR1cm4gdXBkYXRlTmV0d29ya1RhYmxlKHsKICAgICAgbmV0d29ya1R5cGU6IHR5cGUsCiAgICAgIHRhYmxlVHlwZTogdGFibGVUeXBlLAogICAgICB1cGRhdGVzOiB7CiAgICAgICAgYWN0aXZlUGFnZTogbmV3UGFnZQogICAgICB9CiAgICB9KTsKICB9LCBbdHlwZSwgdXBkYXRlTmV0d29ya1RhYmxlXSk7CiAgdmFyIG9uQ2hhbmdlID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKGNyaXRlcmlhKSB7CiAgICBpZiAoY3JpdGVyaWEuc29ydCAhPSBudWxsKSB7CiAgICAgIHZhciBuZXdEbnNTb3J0RmllbGQgPSB7CiAgICAgICAgZmllbGQ6IGNyaXRlcmlhLnNvcnQuZmllbGQuc3BsaXQoJy4nKVsxXSwKICAgICAgICBkaXJlY3Rpb246IGNyaXRlcmlhLnNvcnQuZGlyZWN0aW9uCiAgICAgIH07CgogICAgICBpZiAoISgwLCBfZnAuaXNFcXVhbCkobmV3RG5zU29ydEZpZWxkLCBzb3J0KSkgewogICAgICAgIHVwZGF0ZU5ldHdvcmtUYWJsZSh7CiAgICAgICAgICBuZXR3b3JrVHlwZTogdHlwZSwKICAgICAgICAgIHRhYmxlVHlwZTogdGFibGVUeXBlLAogICAgICAgICAgdXBkYXRlczogewogICAgICAgICAgICBzb3J0OiBuZXdEbnNTb3J0RmllbGQKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0sIFtzb3J0LCB0eXBlLCB1cGRhdGVOZXR3b3JrVGFibGVdKTsKICB2YXIgb25DaGFuZ2VQdHJJbmNsdWRlZCA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB1cGRhdGVOZXR3b3JrVGFibGUoewogICAgICBuZXR3b3JrVHlwZTogdHlwZSwKICAgICAgdGFibGVUeXBlOiB0YWJsZVR5cGUsCiAgICAgIHVwZGF0ZXM6IHsKICAgICAgICBpc1B0ckluY2x1ZGVkOiAhaXNQdHJJbmNsdWRlZAogICAgICB9CiAgICB9KTsKICB9LCBbdHlwZSwgdXBkYXRlTmV0d29ya1RhYmxlLCBpc1B0ckluY2x1ZGVkXSk7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3BhZ2luYXRlZF90YWJsZS5QYWdpbmF0ZWRUYWJsZSwgewogICAgYWN0aXZlUGFnZTogYWN0aXZlUGFnZSwKICAgIGNvbHVtbnM6ICgwLCBfY29sdW1ucy5nZXROZXR3b3JrRG5zQ29sdW1ucykodHlwZSksCiAgICBkYXRhVGVzdFN1Ymo6ICJ0YWJsZS0iLmNvbmNhdCh0YWJsZVR5cGUpLAogICAgaGVhZGVyQ291bnQ6IHRvdGFsQ291bnQsCiAgICBoZWFkZXJTdXBwbGVtZW50OiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9pc19wdHJfaW5jbHVkZWQuSXNQdHJJbmNsdWRlZCwgewogICAgICBpc1B0ckluY2x1ZGVkOiBpc1B0ckluY2x1ZGVkLAogICAgICBvbkNoYW5nZTogb25DaGFuZ2VQdHJJbmNsdWRlZAogICAgfSksCiAgICBoZWFkZXJUaXRsZTogaTE4bi5UT1BfRE5TX0RPTUFJTlMsCiAgICBoZWFkZXJUb29sdGlwOiBpMThuLlRPT0xUSVAsCiAgICBoZWFkZXJVbml0OiBpMThuLlVOSVQodG90YWxDb3VudCksCiAgICBpZDogaWQsCiAgICBpdGVtc1BlclJvdzogcm93SXRlbXMsCiAgICBpc0luc3BlY3Q6IGlzSW5zcGVjdCwKICAgIGxpbWl0OiBsaW1pdCwKICAgIGxvYWRpbmc6IGxvYWRpbmcsCiAgICBsb2FkUGFnZTogbG9hZFBhZ2UsCiAgICBvbkNoYW5nZTogb25DaGFuZ2UsCiAgICBwYWdlT2ZJdGVtczogZGF0YSwKICAgIHNob3dNb3JlUGFnZXNJbmRpY2F0b3I6IHNob3dNb3JlUGFnZXNJbmRpY2F0b3IsCiAgICBzb3J0aW5nOiB7CiAgICAgIGZpZWxkOiAibm9kZS4iLmNvbmNhdChzb3J0LmZpZWxkKSwKICAgICAgZGlyZWN0aW9uOiBzb3J0LmRpcmVjdGlvbgogICAgfSwKICAgIHRvdGFsQ291bnQ6IGZha2VUb3RhbENvdW50LAogICAgdXBkYXRlQWN0aXZlUGFnZTogdXBkYXRlQWN0aXZlUGFnZSwKICAgIHVwZGF0ZUxpbWl0UGFnaW5hdGlvbjogdXBkYXRlTGltaXRQYWdpbmF0aW9uCiAgfSk7Cn0pOwoKZXhwb3J0cy5OZXR3b3JrRG5zVGFibGVDb21wb25lbnQgPSBOZXR3b3JrRG5zVGFibGVDb21wb25lbnQ7Ck5ldHdvcmtEbnNUYWJsZUNvbXBvbmVudC5kaXNwbGF5TmFtZSA9ICdOZXR3b3JrRG5zVGFibGVDb21wb25lbnQnOwoKdmFyIG1ha2VNYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBtYWtlTWFwU3RhdGVUb1Byb3BzKCkgewogIHZhciBnZXROZXR3b3JrRG5zU2VsZWN0b3IgPSBfc3RvcmUubmV0d29ya1NlbGVjdG9ycy5kbnNTZWxlY3RvcigpOwoKICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7CiAgICByZXR1cm4gZ2V0TmV0d29ya0Ruc1NlbGVjdG9yKHN0YXRlKTsKICB9OwoKICByZXR1cm4gbWFwU3RhdGVUb1Byb3BzOwp9OwoKdmFyIE5ldHdvcmtEbnNUYWJsZSA9ICgwLCBfcmVhY3RSZWR1eC5jb25uZWN0KShtYWtlTWFwU3RhdGVUb1Byb3BzLCB7CiAgdXBkYXRlTmV0d29ya1RhYmxlOiBfYWN0aW9ucy5uZXR3b3JrQWN0aW9ucy51cGRhdGVOZXR3b3JrVGFibGUKfSkoTmV0d29ya0Ruc1RhYmxlQ29tcG9uZW50KTsKZXhwb3J0cy5OZXR3b3JrRG5zVGFibGUgPSBOZXR3b3JrRG5zVGFibGU7"},null]}