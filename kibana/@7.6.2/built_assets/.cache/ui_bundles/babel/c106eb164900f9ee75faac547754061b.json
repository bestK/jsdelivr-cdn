{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/file_upload/public/components/json_import_progress.js","dependencies":[{"path":"x-pack/legacy/plugins/file_upload/public/components/json_import_progress.js","mtime":1585205044181},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkpzb25JbXBvcnRQcm9ncmVzcyA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2tpYmFuYV9zZXJ2aWNlcyA9IHJlcXVpcmUoIi4uL2tpYmFuYV9zZXJ2aWNlcyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKdmFyIEpzb25JbXBvcnRQcm9ncmVzcyA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9Db21wb25lbnQpIHsKICBfaW5oZXJpdHMoSnNvbkltcG9ydFByb2dyZXNzLCBfQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gSnNvbkltcG9ydFByb2dyZXNzKCkgewogICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7CgogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBKc29uSW1wb3J0UHJvZ3Jlc3MpOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgfQoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoSnNvbkltcG9ydFByb2dyZXNzKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic3RhdGUiLCB7CiAgICAgIGluZGV4RGF0YUpzb246IG51bGwsCiAgICAgIGluZGV4UGF0dGVybkpzb246IG51bGwsCiAgICAgIGluZGV4TmFtZTogJycsCiAgICAgIGltcG9ydFN0YWdlOiAnJwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiX3NldEluZGV4IiwgZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgdmFyIGluZGV4TmFtZSA9IF9yZWYuaW5kZXhOYW1lOwoKICAgICAgaWYgKGluZGV4TmFtZSAmJiAhX3RoaXMuc3RhdGUuaW5kZXhOYW1lKSB7CiAgICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgICAgaW5kZXhOYW1lOiBpbmRleE5hbWUKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiX2Zvcm1hdEluZGV4RGF0YVJlc3BvbnNlIiwgZnVuY3Rpb24gKF9yZWYyKSB7CiAgICAgIHZhciBpbmRleERhdGFSZXNwID0gX3JlZjIuaW5kZXhEYXRhUmVzcCwKICAgICAgICAgIGluZGV4RGF0YUpzb24gPSBfcmVmMi5pbmRleERhdGFKc29uOwoKICAgICAgaWYgKGluZGV4RGF0YVJlc3AgJiYgIWluZGV4RGF0YUpzb24pIHsKICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICBpbmRleERhdGFKc29uOiBKU09OLnN0cmluZ2lmeShpbmRleERhdGFSZXNwLCBudWxsLCAyKQogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfZm9ybWF0SW5kZXhQYXR0ZXJuUmVzcG9uc2UiLCBmdW5jdGlvbiAoX3JlZjMpIHsKICAgICAgdmFyIGluZGV4UGF0dGVyblJlc3AgPSBfcmVmMy5pbmRleFBhdHRlcm5SZXNwLAogICAgICAgICAgaW5kZXhQYXR0ZXJuSnNvbiA9IF9yZWYzLmluZGV4UGF0dGVybkpzb247CgogICAgICBpZiAoaW5kZXhQYXR0ZXJuUmVzcCAmJiAhaW5kZXhQYXR0ZXJuSnNvbikgewogICAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICAgIGluZGV4UGF0dGVybkpzb246IEpTT04uc3RyaW5naWZ5KGluZGV4UGF0dGVyblJlc3AsIG51bGwsIDIpCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhKc29uSW1wb3J0UHJvZ3Jlc3MsIFt7CiAgICBrZXk6ICJjb21wb25lbnREaWRVcGRhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkgewogICAgICB0aGlzLl9zZXRJbmRleCh0aGlzLnByb3BzKTsKCiAgICAgIHRoaXMuX2Zvcm1hdEluZGV4RGF0YVJlc3BvbnNlKF9vYmplY3RTcHJlYWQoe30sIHRoaXMuc3RhdGUsIHt9LCB0aGlzLnByb3BzKSk7CgogICAgICB0aGlzLl9mb3JtYXRJbmRleFBhdHRlcm5SZXNwb25zZShfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLnN0YXRlLCB7fSwgdGhpcy5wcm9wcykpOwoKICAgICAgaWYgKHByZXZTdGF0ZS5pbXBvcnRTdGFnZSAhPT0gdGhpcy5wcm9wcy5pbXBvcnRTdGFnZSkgewogICAgICAgIHRoaXMuc2V0U3RhdGUoewogICAgICAgICAgaW1wb3J0U3RhZ2U6IHRoaXMucHJvcHMuaW1wb3J0U3RhZ2UKICAgICAgICB9KTsKICAgICAgfQogICAgfSAvLyBSZXRhaW4gbGFzdCBpbmRleCBmb3IgVUkgcHVycG9zZXMKCiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBjb21wbGV0ZSA9IHRoaXMucHJvcHMuY29tcGxldGU7CiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsCiAgICAgICAgICBpbmRleFBhdHRlcm5Kc29uID0gX3RoaXMkc3RhdGUuaW5kZXhQYXR0ZXJuSnNvbiwKICAgICAgICAgIGluZGV4RGF0YUpzb24gPSBfdGhpcyRzdGF0ZS5pbmRleERhdGFKc29uLAogICAgICAgICAgaW5kZXhOYW1lID0gX3RoaXMkc3RhdGUuaW5kZXhOYW1lLAogICAgICAgICAgaW1wb3J0U3RhZ2UgPSBfdGhpcyRzdGF0ZS5pbXBvcnRTdGFnZTsKICAgICAgdmFyIGltcG9ydE1lc3NhZ2UgPSBjb21wbGV0ZSA/IGltcG9ydFN0YWdlIDogIiIuY29uY2F0KGltcG9ydFN0YWdlLCAiOiAiKS5jb25jYXQoaW5kZXhOYW1lKTsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCAhY29tcGxldGUgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUHJvZ3Jlc3MsIHsKICAgICAgICBzaXplOiAieHMiLAogICAgICAgIGNvbG9yOiAiYWNjZW50IiwKICAgICAgICBwb3NpdGlvbjogImFic29sdXRlIgogICAgICB9KSA6IG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICAgIHNpemU6ICJ4cyIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDMiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suZmlsZVVwbG9hZC5qc29uSW1wb3J0LmluZGV4aW5nU3RhdHVzIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkluZGV4aW5nIHN0YXR1cyIKICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIG51bGwsIGltcG9ydE1lc3NhZ2UgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIGltcG9ydE1lc3NhZ2UpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgIHNpemU6ICJtIgogICAgICB9KSwgY29tcGxldGUgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgaW5kZXhEYXRhSnNvbiA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgICBzaXplOiAieHhzIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoNCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5maWxlVXBsb2FkLmpzb25JbXBvcnQuaW5kZXhpbmdSZXNwb25zZSIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJJbmRleGluZyByZXNwb25zZSIKICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvZGVCbG9jaywgewogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJpbmRleFJlc3BDb2RlQmxvY2siLAogICAgICAgIHBhZGRpbmdTaXplOiAicyIsCiAgICAgICAgb3ZlcmZsb3dIZWlnaHQ6IDIwMAogICAgICB9LCBpbmRleERhdGFKc29uKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgIHNpemU6ICJtIgogICAgICB9KSkgOiBudWxsLCBpbmRleFBhdHRlcm5Kc29uID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICAgIHNpemU6ICJ4eHMiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImg0IiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLmZpbGVVcGxvYWQuanNvbkltcG9ydC5pbmRleFBhdHRlcm5SZXNwb25zZSIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJJbmRleCBwYXR0ZXJuIHJlc3BvbnNlIgogICAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ29kZUJsb2NrLCB7CiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogImluZGV4UGF0dGVyblJlc3BDb2RlQmxvY2siLAogICAgICAgIHBhZGRpbmdTaXplOiAicyIsCiAgICAgICAgb3ZlcmZsb3dIZWlnaHQ6IDIwMAogICAgICB9LCBpbmRleFBhdHRlcm5Kc29uKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgIHNpemU6ICJtIgogICAgICB9KSkgOiBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ2FsbE91dCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgbnVsbCwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmZpbGVVcGxvYWQuanNvbkltcG9ydC5pbmRleE1vZHNNc2cnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdGdXJ0aGVyIGluZGV4IG1vZGlmaWNhdGlvbnMgY2FuIGJlIG1hZGUgdXNpbmdcbicKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImEiLCB7CiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogImluZGV4TWFuYWdlbWVudE5ld0luZGV4TGluayIsCiAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICBocmVmOiAiIi5jb25jYXQoX2tpYmFuYV9zZXJ2aWNlcy5iYXNlUGF0aCwgIi9hcHAva2liYW5hIy9cbiAgICAgICAgICAgICAgICAgICAgICBtYW5hZ2VtZW50L2VsYXN0aWNzZWFyY2gvaW5kZXhfbWFuYWdlbWVudC9pbmRpY2VzL1xuICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci8iKS5jb25jYXQoaW5kZXhOYW1lKS5yZXBsYWNlKC9ccy9nLCAnJykKICAgICAgfSwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmZpbGVVcGxvYWQuanNvbkltcG9ydC5pbmRleE1nbXRMaW5rJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnSW5kZXggTWFuYWdlbWVudCcKICAgICAgfSkpLCAiLiIpKSkgOiBudWxsKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBKc29uSW1wb3J0UHJvZ3Jlc3M7Cn0oX3JlYWN0LkNvbXBvbmVudCk7CgpleHBvcnRzLkpzb25JbXBvcnRQcm9ncmVzcyA9IEpzb25JbXBvcnRQcm9ncmVzczs="},null]}