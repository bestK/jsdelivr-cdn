{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/dashboard/plugin.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/dashboard/plugin.js","mtime":1585205039424},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkRhc2hib2FyZFBsdWdpbiA9IHZvaWQgMDsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9wbHVnaW5zL2tpYmFuYV91dGlscy9wdWJsaWMiKTsKCnZhciBfZGFzaGJvYXJkX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4vbnBfcmVhZHkvZGFzaGJvYXJkX2NvbnN0YW50cyIpOwoKdmFyIF9wdWJsaWMyID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9ob21lL3B1YmxpYyIpOwoKdmFyIF9zYXZlZF9kYXNoYm9hcmRzID0gcmVxdWlyZSgiLi9zYXZlZF9kYXNoYm9hcmQvc2F2ZWRfZGFzaGJvYXJkcyIpOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBEYXNoYm9hcmRQbHVnaW4gPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBEYXNoYm9hcmRQbHVnaW4oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGFzaGJvYXJkUGx1Z2luKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInN0YXJ0RGVwZW5kZW5jaWVzIiwgbnVsbCk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRGFzaGJvYXJkUGx1Z2luLCBbewogICAga2V5OiAic2V0dXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwKGNvcmUsIF9yZWYpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBnZXRBbmd1bGFyRGVwZW5kZW5jaWVzID0gX3JlZi5fX0xFR0FDWS5nZXRBbmd1bGFyRGVwZW5kZW5jaWVzLAogICAgICAgICAgaG9tZSA9IF9yZWYuaG9tZSwKICAgICAgICAgIGtpYmFuYV9sZWdhY3kgPSBfcmVmLmtpYmFuYV9sZWdhY3k7CiAgICAgIHZhciBhcHAgPSB7CiAgICAgICAgaWQ6ICcnLAogICAgICAgIHRpdGxlOiAnRGFzaGJvYXJkcycsCiAgICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KF9yZWYyLCBwYXJhbXMpIHsKICAgICAgICAgIHZhciBjb250ZXh0Q29yZSwgX3RoaXMkc3RhcnREZXBlbmRlbmNpLCBzYXZlZE9iamVjdHNDbGllbnQsIGVtYmVkZGFibGVzLCBuYXZpZ2F0aW9uLCBzaGFyZSwgbnBEYXRhU3RhcnQsIGFuZ3VsYXJEZXBlbmRlbmNpZXMsIHNhdmVkRGFzaGJvYXJkcywgZGVwcywgX3JlZjMsIHJlbmRlckFwcDsKCiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIG1vdW50JChfY29udGV4dCkgewogICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgY29udGV4dENvcmUgPSBfcmVmMi5jb3JlOwoKICAgICAgICAgICAgICAgICAgaWYgKCEoX3RoaXMuc3RhcnREZXBlbmRlbmNpZXMgPT09IG51bGwpKSB7CiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN0YXJ0ZWQgeWV0Jyk7CgogICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICBfdGhpcyRzdGFydERlcGVuZGVuY2kgPSBfdGhpcy5zdGFydERlcGVuZGVuY2llcywgc2F2ZWRPYmplY3RzQ2xpZW50ID0gX3RoaXMkc3RhcnREZXBlbmRlbmNpLnNhdmVkT2JqZWN0c0NsaWVudCwgZW1iZWRkYWJsZXMgPSBfdGhpcyRzdGFydERlcGVuZGVuY2kuZW1iZWRkYWJsZXMsIG5hdmlnYXRpb24gPSBfdGhpcyRzdGFydERlcGVuZGVuY2kubmF2aWdhdGlvbiwgc2hhcmUgPSBfdGhpcyRzdGFydERlcGVuZGVuY2kuc2hhcmUsIG5wRGF0YVN0YXJ0ID0gX3RoaXMkc3RhcnREZXBlbmRlbmNpLm5wRGF0YVN0YXJ0OwogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChnZXRBbmd1bGFyRGVwZW5kZW5jaWVzKCkpOwoKICAgICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgICAgYW5ndWxhckRlcGVuZGVuY2llcyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICAgIHNhdmVkRGFzaGJvYXJkcyA9ICgwLCBfc2F2ZWRfZGFzaGJvYXJkcy5jcmVhdGVTYXZlZERhc2hib2FyZExvYWRlcikoewogICAgICAgICAgICAgICAgICAgIHNhdmVkT2JqZWN0c0NsaWVudDogc2F2ZWRPYmplY3RzQ2xpZW50LAogICAgICAgICAgICAgICAgICAgIGluZGV4UGF0dGVybnM6IG5wRGF0YVN0YXJ0LmluZGV4UGF0dGVybnMsCiAgICAgICAgICAgICAgICAgICAgY2hyb21lOiBjb250ZXh0Q29yZS5jaHJvbWUsCiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheXM6IGNvbnRleHRDb3JlLm92ZXJsYXlzCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICBkZXBzID0gX29iamVjdFNwcmVhZCh7CiAgICAgICAgICAgICAgICAgICAgY29yZTogY29udGV4dENvcmUKICAgICAgICAgICAgICAgICAgfSwgYW5ndWxhckRlcGVuZGVuY2llcywgewogICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb246IG5hdmlnYXRpb24sCiAgICAgICAgICAgICAgICAgICAgc2hhcmU6IHNoYXJlLAogICAgICAgICAgICAgICAgICAgIG5wRGF0YVN0YXJ0OiBucERhdGFTdGFydCwKICAgICAgICAgICAgICAgICAgICBzYXZlZE9iamVjdHNDbGllbnQ6IHNhdmVkT2JqZWN0c0NsaWVudCwKICAgICAgICAgICAgICAgICAgICBzYXZlZERhc2hib2FyZHM6IHNhdmVkRGFzaGJvYXJkcywKICAgICAgICAgICAgICAgICAgICBjaHJvbWU6IGNvbnRleHRDb3JlLmNocm9tZSwKICAgICAgICAgICAgICAgICAgICBhZGRCYXNlUGF0aDogY29udGV4dENvcmUuaHR0cC5iYXNlUGF0aC5wcmVwZW5kLAogICAgICAgICAgICAgICAgICAgIHVpU2V0dGluZ3M6IGNvbnRleHRDb3JlLnVpU2V0dGluZ3MsCiAgICAgICAgICAgICAgICAgICAgc2F2ZWRRdWVyeVNlcnZpY2U6IG5wRGF0YVN0YXJ0LnF1ZXJ5LnNhdmVkUXVlcmllcywKICAgICAgICAgICAgICAgICAgICBlbWJlZGRhYmxlczogZW1iZWRkYWJsZXMsCiAgICAgICAgICAgICAgICAgICAgZGFzaGJvYXJkQ2FwYWJpbGl0aWVzOiBjb250ZXh0Q29yZS5hcHBsaWNhdGlvbi5jYXBhYmlsaXRpZXMuZGFzaGJvYXJkLAogICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZTogbmV3IF9wdWJsaWMuU3RvcmFnZShsb2NhbFN0b3JhZ2UpCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoaW1wb3J0KCcuL25wX3JlYWR5L2FwcGxpY2F0aW9uJykpOwoKICAgICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICAgIF9yZWYzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgICAgcmVuZGVyQXBwID0gX3JlZjMucmVuZGVyQXBwOwogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCByZW5kZXJBcHAocGFyYW1zLmVsZW1lbnQsIHBhcmFtcy5hcHBCYXNlUGF0aCwgZGVwcykpOwoKICAgICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9OwogICAgICBraWJhbmFfbGVnYWN5LnJlZ2lzdGVyTGVnYWN5QXBwKF9vYmplY3RTcHJlYWQoe30sIGFwcCwgewogICAgICAgIGlkOiAnZGFzaGJvYXJkJwogICAgICB9KSk7CiAgICAgIGtpYmFuYV9sZWdhY3kucmVnaXN0ZXJMZWdhY3lBcHAoX29iamVjdFNwcmVhZCh7fSwgYXBwLCB7CiAgICAgICAgaWQ6ICdkYXNoYm9hcmRzJwogICAgICB9KSk7CiAgICAgIGhvbWUuZmVhdHVyZUNhdGFsb2d1ZS5yZWdpc3Rlcih7CiAgICAgICAgaWQ6ICdkYXNoYm9hcmQnLAogICAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLmRhc2hib2FyZC5mZWF0dXJlQ2F0YWxvZ3VlLmRhc2hib2FyZFRpdGxlJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdEYXNoYm9hcmQnCiAgICAgICAgfSksCiAgICAgICAgZGVzY3JpcHRpb246IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uZGFzaGJvYXJkLmZlYXR1cmVDYXRhbG9ndWUuZGFzaGJvYXJkRGVzY3JpcHRpb24nLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0Rpc3BsYXkgYW5kIHNoYXJlIGEgY29sbGVjdGlvbiBvZiB2aXN1YWxpemF0aW9ucyBhbmQgc2F2ZWQgc2VhcmNoZXMuJwogICAgICAgIH0pLAogICAgICAgIGljb246ICdkYXNoYm9hcmRBcHAnLAogICAgICAgIHBhdGg6ICIvYXBwL2tpYmFuYSMiLmNvbmNhdChfZGFzaGJvYXJkX2NvbnN0YW50cy5EYXNoYm9hcmRDb25zdGFudHMuTEFORElOR19QQUdFX1BBVEgpLAogICAgICAgIHNob3dPbkhvbWVQYWdlOiB0cnVlLAogICAgICAgIGNhdGVnb3J5OiBfcHVibGljMi5GZWF0dXJlQ2F0YWxvZ3VlQ2F0ZWdvcnkuREFUQQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdGFydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoX3JlZjQsIF9yZWY1KSB7CiAgICAgIHZhciBzYXZlZE9iamVjdHNDbGllbnQgPSBfcmVmNC5zYXZlZE9iamVjdHMuY2xpZW50OwogICAgICB2YXIgZGF0YVN0YXJ0ID0gX3JlZjUuZGF0YSwKICAgICAgICAgIGVtYmVkZGFibGVzID0gX3JlZjUuZW1iZWRkYWJsZXMsCiAgICAgICAgICBuYXZpZ2F0aW9uID0gX3JlZjUubmF2aWdhdGlvbiwKICAgICAgICAgIG5wRGF0YSA9IF9yZWY1Lm5wRGF0YSwKICAgICAgICAgIHNoYXJlID0gX3JlZjUuc2hhcmU7CiAgICAgIHRoaXMuc3RhcnREZXBlbmRlbmNpZXMgPSB7CiAgICAgICAgbnBEYXRhU3RhcnQ6IG5wRGF0YSwKICAgICAgICBzYXZlZE9iamVjdHNDbGllbnQ6IHNhdmVkT2JqZWN0c0NsaWVudCwKICAgICAgICBlbWJlZGRhYmxlczogZW1iZWRkYWJsZXMsCiAgICAgICAgbmF2aWdhdGlvbjogbmF2aWdhdGlvbiwKICAgICAgICBzaGFyZTogc2hhcmUKICAgICAgfTsKICAgIH0KICB9XSk7CgogIHJldHVybiBEYXNoYm9hcmRQbHVnaW47Cn0oKTsKCmV4cG9ydHMuRGFzaGJvYXJkUGx1Z2luID0gRGFzaGJvYXJkUGx1Z2luOw=="},null]}