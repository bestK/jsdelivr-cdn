{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/snapshot_restore/public/plugin.js","dependencies":[{"path":"x-pack/legacy/plugins/snapshot_restore/public/plugin.js","mtime":1585205048199},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlBsdWdpbiA9IHZvaWQgMDsKCnZhciBfcmVhY3REb20gPSByZXF1aXJlKCJyZWFjdC1kb20iKTsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vY29tbW9uL2NvbnN0YW50cyIpOwoKdmFyIF9hcHAgPSByZXF1aXJlKCIuL2FwcCIpOwoKdmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi9pbmRleC5odG1sIikpOwoKdmFyIF9uYXZpZ2F0aW9uID0gcmVxdWlyZSgiLi9hcHAvc2VydmljZXMvbmF2aWdhdGlvbiIpOwoKdmFyIF9kb2N1bWVudGF0aW9uID0gcmVxdWlyZSgiLi9hcHAvc2VydmljZXMvZG9jdW1lbnRhdGlvbiIpOwoKdmFyIF9odHRwID0gcmVxdWlyZSgiLi9hcHAvc2VydmljZXMvaHR0cCIpOwoKdmFyIF90ZXh0ID0gcmVxdWlyZSgiLi9hcHAvc2VydmljZXMvdGV4dCIpOwoKdmFyIF91aV9tZXRyaWMgPSByZXF1aXJlKCIuL2FwcC9zZXJ2aWNlcy91aV9tZXRyaWMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCnZhciBSRUFDVF9ST09UX0lEID0gJ3NuYXBzaG90UmVzdG9yZVJlYWN0Um9vdCc7Cgp2YXIgUGx1Z2luID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUGx1Z2luKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBsdWdpbik7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUGx1Z2luLCBbewogICAga2V5OiAic3RhcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0KGNvcmUsIHBsdWdpbnMpIHsKICAgICAgdmFyIGkxOG4gPSBjb3JlLmkxOG4sCiAgICAgICAgICByb3V0aW5nID0gY29yZS5yb3V0aW5nLAogICAgICAgICAgaHR0cCA9IGNvcmUuaHR0cCwKICAgICAgICAgIGNocm9tZSA9IGNvcmUuY2hyb21lLAogICAgICAgICAgbm90aWZpY2F0aW9uID0gY29yZS5ub3RpZmljYXRpb24sCiAgICAgICAgICBkb2N1bWVudGF0aW9uID0gY29yZS5kb2N1bWVudGF0aW9uLAogICAgICAgICAgZG9jVGl0bGUgPSBjb3JlLmRvY1RpdGxlOwogICAgICB2YXIgbWFuYWdlbWVudCA9IHBsdWdpbnMubWFuYWdlbWVudCwKICAgICAgICAgIHVpTWV0cmljID0gcGx1Z2lucy51aU1ldHJpYzsgLy8gUmVnaXN0ZXIgbWFuYWdlbWVudCBzZWN0aW9uCgogICAgICB2YXIgZXNTZWN0aW9uID0gbWFuYWdlbWVudC5zZWN0aW9ucy5nZXRTZWN0aW9uKCdlbGFzdGljc2VhcmNoJyk7CiAgICAgIGVzU2VjdGlvbi5yZWdpc3RlcihfY29uc3RhbnRzLlBMVUdJTi5JRCwgewogICAgICAgIHZpc2libGU6IHRydWUsCiAgICAgICAgZGlzcGxheTogaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnNuYXBzaG90UmVzdG9yZS5hcHBOYW1lJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdTbmFwc2hvdCBhbmQgUmVzdG9yZScKICAgICAgICB9KSwKICAgICAgICBvcmRlcjogNywKICAgICAgICB1cmw6ICIjIi5jb25jYXQoX2FwcC5DTElFTlRfQkFTRV9QQVRIKQogICAgICB9KTsgLy8gSW5pdGlhbGl6ZSBzZXJ2aWNlcwoKICAgICAgX3RleHQudGV4dFNlcnZpY2UuaW5pdChpMThuKTsKCiAgICAgIF9uYXZpZ2F0aW9uLmJyZWFkY3J1bWJTZXJ2aWNlLmluaXQoY2hyb21lLCBtYW5hZ2VtZW50LmNvbnN0YW50cy5CUkVBRENSVU1CKTsKCiAgICAgIF91aV9tZXRyaWMudWlNZXRyaWNTZXJ2aWNlLmluaXQodWlNZXRyaWMuY3JlYXRlVWlTdGF0c1JlcG9ydGVyKTsKCiAgICAgIF9kb2N1bWVudGF0aW9uLmRvY3VtZW50YXRpb25MaW5rc1NlcnZpY2UuaW5pdChkb2N1bWVudGF0aW9uLmVzRG9jQmFzZVBhdGgsIGRvY3VtZW50YXRpb24uZXNQbHVnaW5Eb2NCYXNlUGF0aCk7CgogICAgICBfbmF2aWdhdGlvbi5kb2NUaXRsZVNlcnZpY2UuaW5pdChkb2NUaXRsZS5jaGFuZ2UpOwoKICAgICAgdmFyIHVubW91bnRSZWFjdEFwcCA9IGZ1bmN0aW9uIHVubW91bnRSZWFjdEFwcCgpIHsKICAgICAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFJFQUNUX1JPT1RfSUQpOwoKICAgICAgICBpZiAoZWxlbSkgewogICAgICAgICAgKDAsIF9yZWFjdERvbS51bm1vdW50Q29tcG9uZW50QXROb2RlKShlbGVtKTsKICAgICAgICB9CiAgICAgIH07IC8vIFJlZ2lzdGVyIHJlYWN0IHJvb3QKCgogICAgICByb3V0aW5nLnJlZ2lzdGVyQW5ndWxhclJvdXRlKCIiLmNvbmNhdChfYXBwLkNMSUVOVF9CQVNFX1BBVEgsICIvOnNlY3Rpb24/LzpzdWJzZWN0aW9uPy86dmlldz8vOmlkPyIpLCB7CiAgICAgICAgdGVtcGxhdGU6IF9pbmRleC5kZWZhdWx0LAogICAgICAgIGNvbnRyb2xsZXJBczogJ3NuYXBzaG90UmVzdG9yZUNvbnRyb2xsZXInLAogICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uIGNvbnRyb2xsZXIoJHNjb3BlLCAkcm91dGUsICRodHRwLCAkcSkgewogICAgICAgICAgLy8gTk9URTogV2UgZGVwZW5kIHVwb24gQW5ndWxhcidzICRodHRwIHNlcnZpY2UgYmVjYXVzZSBpdCdzIGRlY29yYXRlZCB3aXRoIGludGVyY2VwdG9ycywKICAgICAgICAgIC8vIGUuZy4gdG8gY2hlY2sgbGljZW5zZSBzdGF0dXMgcGVyIHJlcXVlc3QuCiAgICAgICAgICBodHRwLnNldENsaWVudCgkaHR0cCk7CgogICAgICAgICAgX2h0dHAuaHR0cFNlcnZpY2UuaW5pdChodHRwLmdldENsaWVudCgpLCBjaHJvbWUpOyAvLyBBbmd1bGFyIExpZmVjeWNsZQoKCiAgICAgICAgICB2YXIgYXBwUm91dGUgPSAkcm91dGUuY3VycmVudDsKICAgICAgICAgIHZhciBzdG9wTGlzdGVuaW5nRm9yTG9jYXRpb25DaGFuZ2UgPSAkc2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgY3VycmVudFJvdXRlID0gJHJvdXRlLmN1cnJlbnQ7CiAgICAgICAgICAgIHZhciBpc05hdmlnYXRpb25JbkFwcCA9IGN1cnJlbnRSb3V0ZS4kJHJvdXRlLnRlbXBsYXRlID09PSBhcHBSb3V0ZS4kJHJvdXRlLnRlbXBsYXRlOyAvLyBXaGVuIHdlIG5hdmlnYXRlIHdpdGhpbiBTUiwgcHJldmVudCBBbmd1bGFyIGZyb20gcmUtbWF0Y2hpbmcgdGhlIHJvdXRlIGFuZCByZWJ1aWxkIHRoZSBhcHAKCiAgICAgICAgICAgIGlmIChpc05hdmlnYXRpb25JbkFwcCkgewogICAgICAgICAgICAgICRyb3V0ZS5jdXJyZW50ID0gYXBwUm91dGU7CiAgICAgICAgICAgIH0gZWxzZSB7Ly8gQW55IGNsZWFuIHVwIHdoZW4gdXNlciBsZWF2ZXMgU1IKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgaWYgKHN0b3BMaXN0ZW5pbmdGb3JMb2NhdGlvbkNoYW5nZSkgewogICAgICAgICAgICAgICAgc3RvcExpc3RlbmluZ0ZvckxvY2F0aW9uQ2hhbmdlKCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB1bm1vdW50UmVhY3RBcHAoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICAgICRzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB1bm1vdW50UmVhY3RBcHAoKTsKICAgICAgICAgICAgdmFyIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChSRUFDVF9ST09UX0lEKTsKCiAgICAgICAgICAgIGlmIChlbGVtKSB7CiAgICAgICAgICAgICAgKDAsIF9hcHAucmVuZGVyUmVhY3QpKGVsZW0sIHsKICAgICAgICAgICAgICAgIGkxOG46IGkxOG4sCiAgICAgICAgICAgICAgICBub3RpZmljYXRpb246IG5vdGlmaWNhdGlvbiwKICAgICAgICAgICAgICAgIGNocm9tZTogY2hyb21lCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgbWFuYWdlbWVudDogewogICAgICAgICAgICAgICAgICBzZWN0aW9uczogbWFuYWdlbWVudC5zZWN0aW9ucwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFBsdWdpbjsKfSgpOwoKZXhwb3J0cy5QbHVnaW4gPSBQbHVnaW47"},null]}