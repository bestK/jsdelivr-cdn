{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/graph/public/services/fetch_top_nodes.js","dependencies":[{"path":"x-pack/legacy/plugins/graph/public/services/fetch_top_nodes.js","mtime":1585205044245},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNyZWF0ZVNlcnZlclJlc3VsdE5vZGUgPSBjcmVhdGVTZXJ2ZXJSZXN1bHROb2RlOwpleHBvcnRzLmZldGNoVG9wTm9kZXMgPSBmZXRjaFRvcE5vZGVzOwoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQovKgogKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lCiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS4KICovCgoKdmFyIERFRkFVTFRfU0hBUkRfU0laRSA9IDUwMDA7CgpmdW5jdGlvbiBjcmVhdGVTYW1wbGVyU2VhcmNoQm9keShhZ2dzKSB7CiAgdmFyIHNoYXJkU2l6ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogREVGQVVMVF9TSEFSRF9TSVpFOwogIHJldHVybiB7CiAgICBzaXplOiAwLAogICAgYWdnczogewogICAgICBzYW1wbGU6IHsKICAgICAgICBzYW1wbGVyOiB7CiAgICAgICAgICBzaGFyZF9zaXplOiBzaGFyZFNpemUKICAgICAgICB9LAogICAgICAgIGFnZ3M6IGFnZ3MKICAgICAgfQogICAgfQogIH07Cn0KCmZ1bmN0aW9uIGNyZWF0ZVRvcFRlcm1zQWdnTmFtZShmaWVsZE5hbWUpIHsKICByZXR1cm4gInRvcF92YWx1ZXNfIi5jb25jYXQoZmllbGROYW1lKTsKfQoKZnVuY3Rpb24gY3JlYXRlVG9wVGVybXNTdWJBZ2coZmllbGQpIHsKICB2YXIgc2l6ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTA7CiAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgY3JlYXRlVG9wVGVybXNBZ2dOYW1lKGZpZWxkKSwgewogICAgdGVybXM6IHsKICAgICAgZmllbGQ6IGZpZWxkLAogICAgICBzaXplOiBzaXplCiAgICB9CiAgfSk7Cn0gLy8gVE9ETyB1c2UgZWxhc3RpY3NlYXJjaCB0eXBlcyBoZXJlCgoKZnVuY3Rpb24gZ2V0VG9wVGVybXNSZXN1bHQocmVzcG9uc2UsIGZpZWxkTmFtZSkgewogIGlmICghcmVzcG9uc2UuYWdncmVnYXRpb25zKSB7CiAgICByZXR1cm4gW107CiAgfQoKICByZXR1cm4gcmVzcG9uc2UuYWdncmVnYXRpb25zLnNhbXBsZVtjcmVhdGVUb3BUZXJtc0FnZ05hbWUoZmllbGROYW1lKV0uYnVja2V0cy5tYXAoZnVuY3Rpb24gKGJ1Y2tldCkgewogICAgcmV0dXJuIGJ1Y2tldC5rZXk7CiAgfSk7Cn0KCmZ1bmN0aW9uIGNyZWF0ZVNlcnZlclJlc3VsdE5vZGUoZmllbGROYW1lLCB0ZXJtLCBhbGxGaWVsZHMpIHsKICB2YXIgZmllbGQgPSBhbGxGaWVsZHMuZmluZChmdW5jdGlvbiAoX3JlZjIpIHsKICAgIHZhciBuYW1lID0gX3JlZjIubmFtZTsKICAgIHJldHVybiBuYW1lID09PSBmaWVsZE5hbWU7CiAgfSk7CgogIGlmICghZmllbGQpIHsKICAgIHRocm93IG5ldyBFcnJvcignSW52YXJpYW50IGVycm9yOiBmaWVsZCBub3QgZm91bmQnKTsKICB9CgogIHJldHVybiB7CiAgICBmaWVsZDogZmllbGROYW1lLAogICAgdGVybTogdGVybSwKICAgIGlkOiAnJywKICAgIGNvbG9yOiBmaWVsZC5jb2xvciwKICAgIGljb246IGZpZWxkLmljb24sCiAgICBkYXRhOiB7CiAgICAgIGZpZWxkOiBmaWVsZE5hbWUsCiAgICAgIHRlcm06IHRlcm0KICAgIH0sCiAgICBsYWJlbDogdGVybQogIH07Cn0KCmZ1bmN0aW9uIGZldGNoVG9wTm9kZXMocG9zdCwgaW5kZXgsIGZpZWxkcykgewogIHZhciBhZ2dzLCBib2R5LCByZXNwb25zZSwgbm9kZXM7CiAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBmZXRjaFRvcE5vZGVzJChfY29udGV4dCkgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIGFnZ3MgPSBmaWVsZHMubWFwKGZ1bmN0aW9uIChfcmVmMykgewogICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWU7CiAgICAgICAgICAgIHJldHVybiBuYW1lOwogICAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChmaWVsZE5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVRvcFRlcm1zU3ViQWdnKGZpZWxkTmFtZSk7CiAgICAgICAgICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGFsbEFnZ3MsIHN1YkFnZykgewogICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgYWxsQWdncywge30sIHN1YkFnZyk7CiAgICAgICAgICB9KTsKICAgICAgICAgIGJvZHkgPSBjcmVhdGVTYW1wbGVyU2VhcmNoQm9keShhZ2dzKTsKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChwb3N0KCcuLi9hcGkvZ3JhcGgvc2VhcmNoUHJveHknLCB7CiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICBpbmRleDogaW5kZXgsCiAgICAgICAgICAgICAgYm9keTogYm9keQogICAgICAgICAgICB9KQogICAgICAgICAgfSkpOwoKICAgICAgICBjYXNlIDQ6CiAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQucmVzcDsKICAgICAgICAgIG5vZGVzID0gW107CiAgICAgICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjQpIHsKICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmNC5uYW1lOwogICAgICAgICAgICB2YXIgdG9wVGVybXMgPSBnZXRUb3BUZXJtc1Jlc3VsdChyZXNwb25zZSwgbmFtZSk7CiAgICAgICAgICAgIHZhciBmaWVsZE5vZGVzID0gdG9wVGVybXMubWFwKGZ1bmN0aW9uICh0ZXJtKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVNlcnZlclJlc3VsdE5vZGUobmFtZSwgdGVybSwgZmllbGRzKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIG5vZGVzLnB1c2guYXBwbHkobm9kZXMsIF90b0NvbnN1bWFibGVBcnJheShmaWVsZE5vZGVzKSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIG5vZGVzKTsKCiAgICAgICAgY2FzZSA4OgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICB9CiAgICB9CiAgfSk7Cn0="},null]}