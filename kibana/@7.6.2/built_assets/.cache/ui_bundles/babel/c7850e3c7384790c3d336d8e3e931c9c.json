{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/visualizations/public/np_ready/public/components/visualization_chart.js","dependencies":[{"path":"src/legacy/core_plugins/visualizations/public/np_ready/public/components/visualization_chart.js","mtime":1585205040495},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuVmlzdWFsaXphdGlvbkNoYXJ0ID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgUnggPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyeGpzIikpOwoKdmFyIF9vcGVyYXRvcnMgPSByZXF1aXJlKCJyeGpzL29wZXJhdG9ycyIpOwoKdmFyIF91cGRhdGVfc3RhdHVzID0gcmVxdWlyZSgiLi4vbGVnYWN5L3VwZGF0ZV9zdGF0dXMiKTsKCnZhciBfcHVibGljID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9raWJhbmFfdXRpbHMvcHVibGljIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsKICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7CiAgICByZXR1cm4gY2FsbDsKICB9CgogIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOwp9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOwogIH07CiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsKfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7CiAgaWYgKHNlbGYgPT09IHZvaWQgMCkgewogICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsKICB9CgogIHJldHVybiBzZWxmOwp9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsKICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsKICB9CgogIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IHsKICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9CiAgfSk7CiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7Cn0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgICBvLl9fcHJvdG9fXyA9IHA7CiAgICByZXR1cm4gbzsKICB9OwoKICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIFZpc3VhbGl6YXRpb25DaGFydCA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHsKICBfaW5oZXJpdHMoVmlzdWFsaXphdGlvbkNoYXJ0LCBfUmVhY3QkQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gVmlzdWFsaXphdGlvbkNoYXJ0KHByb3BzKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpc3VhbGl6YXRpb25DaGFydCk7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVmlzdWFsaXphdGlvbkNoYXJ0KS5jYWxsKHRoaXMsIHByb3BzKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAicmVzaXplQ2hlY2tlciIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAidmlzdWFsaXphdGlvbiIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiY2hhcnREaXYiLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVSZWYoKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiY29udGFpbmVyRGl2IiwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlUmVmKCkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInJlbmRlclN1YmplY3QiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInJlbmRlclN1YnNjcmlwdGlvbiIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25VaVN0YXRlQ2hhbmdlZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc3RhcnRSZW5kZXJWaXN1YWxpemF0aW9uKCk7CiAgICB9KTsKCiAgICBfdGhpcy5yZW5kZXJTdWJqZWN0ID0gbmV3IFJ4LlN1YmplY3QoKTsKCiAgICB2YXIgcmVuZGVyJCA9IF90aGlzLnJlbmRlclN1YmplY3QuYXNPYnNlcnZhYmxlKCkucGlwZSgoMCwgX29wZXJhdG9ycy5zaGFyZSkoKSk7CgogICAgdmFyIHN1Y2Nlc3MkID0gcmVuZGVyJC5waXBlKCgwLCBfb3BlcmF0b3JzLmZpbHRlcikoZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgdmFyIHZpcyA9IF9yZWYudmlzLAogICAgICAgICAgdmlzRGF0YSA9IF9yZWYudmlzRGF0YSwKICAgICAgICAgIGNvbnRhaW5lciA9IF9yZWYuY29udGFpbmVyOwogICAgICByZXR1cm4gdmlzICYmIGNvbnRhaW5lciAmJiAoIXZpcy50eXBlLnJlcXVpcmVzU2VhcmNoIHx8IHZpc0RhdGEpOwogICAgfSksICgwLCBfb3BlcmF0b3JzLmRlYm91bmNlVGltZSkoMTAwKSwgKDAsIF9vcGVyYXRvcnMuc3dpdGNoTWFwKShmdW5jdGlvbiBfY2FsbGVlKF9yZWYyKSB7CiAgICAgIHZhciB2aXMsIHZpc0RhdGEsIHZpc1BhcmFtcywgY29udGFpbmVyLCBzdGF0dXM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgdmlzID0gX3JlZjIudmlzLCB2aXNEYXRhID0gX3JlZjIudmlzRGF0YSwgdmlzUGFyYW1zID0gX3JlZjIudmlzUGFyYW1zLCBjb250YWluZXIgPSBfcmVmMi5jb250YWluZXI7CgogICAgICAgICAgICAgIGlmIChfdGhpcy52aXN1YWxpemF0aW9uKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWaXN1YWxpemF0aW9uIGltcGxlbWVudGF0aW9uIHdhcyBub3QgaW5pdGlhbGl6ZWQgb24gZmlyc3QgcmVuZGVyLicpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHZpcy5zaXplID0gW2NvbnRhaW5lci5jbGllbnRXaWR0aCwgY29udGFpbmVyLmNsaWVudEhlaWdodF07CiAgICAgICAgICAgICAgc3RhdHVzID0gKDAsIF91cGRhdGVfc3RhdHVzLmdldFVwZGF0ZVN0YXR1cykodmlzLnR5cGUucmVxdWlyZXNVcGRhdGVTdGF0dXMsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfdGhpcy5wcm9wcyk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgX3RoaXMudmlzdWFsaXphdGlvbi5yZW5kZXIodmlzRGF0YSwgdmlzUGFyYW1zLCBzdGF0dXMpKTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9KSk7CiAgICB2YXIgcmVxdWVzdEVycm9yJCA9IHJlbmRlciQucGlwZSgoMCwgX29wZXJhdG9ycy5maWx0ZXIpKGZ1bmN0aW9uIChfcmVmMykgewogICAgICB2YXIgdmlzID0gX3JlZjMudmlzOwogICAgICByZXR1cm4gdmlzLnJlcXVlc3RFcnJvcjsKICAgIH0pKTsKICAgIF90aGlzLnJlbmRlclN1YnNjcmlwdGlvbiA9IFJ4Lm1lcmdlKHN1Y2Nlc3MkLCByZXF1ZXN0RXJyb3IkKS5zdWJzY3JpYmUoZnVuY3Rpb24gKCkgewogICAgICBpZiAoX3RoaXMucHJvcHMub25Jbml0KSB7CiAgICAgICAgX3RoaXMucHJvcHMub25Jbml0KCk7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFZpc3VhbGl6YXRpb25DaGFydCwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICAgIGNsYXNzTmFtZTogInZpc0NoYXJ0X19jb250YWluZXIga2JuLXJlc2V0Rm9jdXNTdGF0ZSIsCiAgICAgICAgdGFiSW5kZXg6IDAsCiAgICAgICAgcmVmOiB0aGlzLmNvbnRhaW5lckRpdgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgewogICAgICAgIGNsYXNzTmFtZTogImV1aVNjcmVlblJlYWRlck9ubHkiCiAgICAgIH0sIHRoaXMucHJvcHMudmlzLnR5cGUudGl0bGUsICIgdmlzdWFsaXphdGlvbiwgbm90IHlldCBhY2Nlc3NpYmxlIiksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICAiYXJpYS1oaWRkZW4iOiAhdGhpcy5wcm9wcy52aXMudHlwZS5pc0FjY2Vzc2libGUsCiAgICAgICAgY2xhc3NOYW1lOiAidmlzQ2hhcnQiLAogICAgICAgIHJlZjogdGhpcy5jaGFydERpdgogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY29tcG9uZW50RGlkTW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIGlmICghdGhpcy5jaGFydERpdi5jdXJyZW50IHx8ICF0aGlzLmNvbnRhaW5lckRpdi5jdXJyZW50KSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjaGFydERpdiBhbmQgY3VycmVudERpdiByZWZlcmVuY2Ugc2hvdWxkIGFsd2F5cyBiZSBwcmVzZW50LicpOwogICAgICB9CgogICAgICB2YXIgdmlzID0gdGhpcy5wcm9wcy52aXM7CiAgICAgIHZhciBWaXN1YWxpemF0aW9uID0gdmlzLnR5cGUudmlzdWFsaXphdGlvbjsKICAgICAgdGhpcy52aXN1YWxpemF0aW9uID0gbmV3IFZpc3VhbGl6YXRpb24odGhpcy5jaGFydERpdi5jdXJyZW50LCB2aXMpOyAvLyBXZSBrbm93IHRoYXQgY29udGFpbmVyRGl2LmN1cnJlbnQgd2lsbCBuZXZlciBiZSBudWxsLCBzaW5jZSB3ZSB3aWxsIGFsd2F5cwogICAgICAvLyBoYXZlIHJlbmRlcmVkIGFuZCB0aGUgZGl2IGlzIGFsd2F5cyByZW5kZXJlZCBpbnRvIHRoZSB0cmVlIChpLmUuIG5vdAogICAgICAvLyBpbnNpZGUgYW55IGNvbmRpdGlvbikuCgogICAgICB0aGlzLnJlc2l6ZUNoZWNrZXIgPSBuZXcgX3B1YmxpYy5SZXNpemVDaGVja2VyKHRoaXMuY29udGFpbmVyRGl2LmN1cnJlbnQpOwogICAgICB0aGlzLnJlc2l6ZUNoZWNrZXIub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX3RoaXMyLnN0YXJ0UmVuZGVyVmlzdWFsaXphdGlvbigpOwogICAgICB9KTsKCiAgICAgIGlmICh0aGlzLnByb3BzLmxpc3Rlbk9uQ2hhbmdlKSB7CiAgICAgICAgdGhpcy5wcm9wcy51aVN0YXRlLm9uKCdjaGFuZ2UnLCB0aGlzLm9uVWlTdGF0ZUNoYW5nZWQpOwogICAgICB9CgogICAgICB0aGlzLnN0YXJ0UmVuZGVyVmlzdWFsaXphdGlvbigpOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbXBvbmVudERpZFVwZGF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkgewogICAgICB0aGlzLnN0YXJ0UmVuZGVyVmlzdWFsaXphdGlvbigpOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbXBvbmVudFdpbGxVbm1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHsKICAgICAgaWYgKHRoaXMucmVuZGVyU3Vic2NyaXB0aW9uKSB7CiAgICAgICAgdGhpcy5yZW5kZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMucmVzaXplQ2hlY2tlcikgewogICAgICAgIHRoaXMucmVzaXplQ2hlY2tlci5kZXN0cm95KCk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLnZpc3VhbGl6YXRpb24pIHsKICAgICAgICB0aGlzLnZpc3VhbGl6YXRpb24uZGVzdHJveSgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic3RhcnRSZW5kZXJWaXN1YWxpemF0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydFJlbmRlclZpc3VhbGl6YXRpb24oKSB7CiAgICAgIGlmICh0aGlzLmNvbnRhaW5lckRpdi5jdXJyZW50ICYmIHRoaXMuY2hhcnREaXYuY3VycmVudCkgewogICAgICAgIHRoaXMucmVuZGVyU3ViamVjdC5uZXh0KHsKICAgICAgICAgIHZpczogdGhpcy5wcm9wcy52aXMsCiAgICAgICAgICB2aXNEYXRhOiB0aGlzLnByb3BzLnZpc0RhdGEsCiAgICAgICAgICB2aXNQYXJhbXM6IHRoaXMucHJvcHMudmlzUGFyYW1zLAogICAgICAgICAgY29udGFpbmVyOiB0aGlzLmNvbnRhaW5lckRpdi5jdXJyZW50CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9XSk7CgogIHJldHVybiBWaXN1YWxpemF0aW9uQ2hhcnQ7Cn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTsKCmV4cG9ydHMuVmlzdWFsaXphdGlvbkNoYXJ0ID0gVmlzdWFsaXphdGlvbkNoYXJ0Ow=="},null]}