{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/infra/public/utils/url_state.js","dependencies":[{"path":"x-pack/legacy/plugins/infra/public/utils/url_state.js","mtime":1585205044821},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMucmVwbGFjZVN0YXRlS2V5SW5RdWVyeVN0cmluZyA9IGV4cG9ydHMuZ2V0UGFyYW1Gcm9tUXVlcnlTdHJpbmcgPSBleHBvcnRzLmdldFF1ZXJ5U3RyaW5nRnJvbUxvY2F0aW9uID0gZXhwb3J0cy5kZWNvZGVSaXNvblVybFN0YXRlID0gZXhwb3J0cy5VcmxTdGF0ZUNvbnRhaW5lciA9IHZvaWQgMDsKCnZhciBfdGhyb3R0bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaC9mcC90aHJvdHRsZSIpKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9yZWFjdFJvdXRlckRvbSA9IHJlcXVpcmUoInJlYWN0LXJvdXRlci1kb20iKTsKCnZhciBfcmlzb25Ob2RlID0gcmVxdWlyZSgicmlzb24tbm9kZSIpOwoKdmFyIF9xdWVyeV9zdHJpbmcgPSByZXF1aXJlKCJ1aS91dGlscy9xdWVyeV9zdHJpbmciKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9leHRlbmRzKCkgewogIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7CiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOwoKICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7CiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHJldHVybiB0YXJnZXQ7CiAgfTsKCiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsKICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7CiAgICByZXR1cm4gY2FsbDsKICB9CgogIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOwp9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOwogIH07CiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsKfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7CiAgaWYgKHNlbGYgPT09IHZvaWQgMCkgewogICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsKICB9CgogIHJldHVybiBzZWxmOwp9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsKICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsKICB9CgogIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IHsKICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9CiAgfSk7CiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7Cn0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgICBvLl9fcHJvdG9fXyA9IHA7CiAgICByZXR1cm4gbzsKICB9OwoKICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIFVybFN0YXRlQ29udGFpbmVyTGlmZWN5Y2xlID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkgewogIF9pbmhlcml0cyhVcmxTdGF0ZUNvbnRhaW5lckxpZmVjeWNsZSwgX1JlYWN0JENvbXBvbmVudCk7CgogIGZ1bmN0aW9uIFVybFN0YXRlQ29udGFpbmVyTGlmZWN5Y2xlKCkgewogICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7CgogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVcmxTdGF0ZUNvbnRhaW5lckxpZmVjeWNsZSk7CgogICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07CiAgICB9CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihVcmxTdGF0ZUNvbnRhaW5lckxpZmVjeWNsZSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInJlcGxhY2VTdGF0ZUluTG9jYXRpb24iLCAoMCwgX3Rocm90dGxlLmRlZmF1bHQpKDEwMDAsIGZ1bmN0aW9uICh1cmxTdGF0ZSkgewogICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcywKICAgICAgICAgIGhpc3RvcnkgPSBfdGhpcyRwcm9wcy5oaXN0b3J5LAogICAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wcy5sb2NhdGlvbiwKICAgICAgICAgIHVybFN0YXRlS2V5ID0gX3RoaXMkcHJvcHMudXJsU3RhdGVLZXk7CiAgICAgIHZhciBuZXdMb2NhdGlvbiA9IHJlcGxhY2VRdWVyeVN0cmluZ0luTG9jYXRpb24obG9jYXRpb24sIHJlcGxhY2VTdGF0ZUtleUluUXVlcnlTdHJpbmcodXJsU3RhdGVLZXksIHVybFN0YXRlKShnZXRRdWVyeVN0cmluZ0Zyb21Mb2NhdGlvbihsb2NhdGlvbikpKTsKCiAgICAgIGlmIChuZXdMb2NhdGlvbiAhPT0gbG9jYXRpb24pIHsKICAgICAgICBoaXN0b3J5LnJlcGxhY2UobmV3TG9jYXRpb24pOwogICAgICB9CiAgICB9KSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiaGFuZGxlSW5pdGlhbGl6ZSIsIGZ1bmN0aW9uIChsb2NhdGlvbikgewogICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsCiAgICAgICAgICBvbkluaXRpYWxpemUgPSBfdGhpcyRwcm9wczIub25Jbml0aWFsaXplLAogICAgICAgICAgbWFwVG9VcmxTdGF0ZSA9IF90aGlzJHByb3BzMi5tYXBUb1VybFN0YXRlLAogICAgICAgICAgdXJsU3RhdGVLZXkgPSBfdGhpcyRwcm9wczIudXJsU3RhdGVLZXksCiAgICAgICAgICB1cmxTdGF0ZSA9IF90aGlzJHByb3BzMi51cmxTdGF0ZTsKCiAgICAgIGlmICghb25Jbml0aWFsaXplIHx8ICFtYXBUb1VybFN0YXRlKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgbmV3VXJsU3RhdGVTdHJpbmcgPSBnZXRQYXJhbUZyb21RdWVyeVN0cmluZyhnZXRRdWVyeVN0cmluZ0Zyb21Mb2NhdGlvbihsb2NhdGlvbiksIHVybFN0YXRlS2V5KTsKICAgICAgdmFyIG5ld1VybFN0YXRlID0gbWFwVG9VcmxTdGF0ZShkZWNvZGVSaXNvblVybFN0YXRlKG5ld1VybFN0YXRlU3RyaW5nKSk7IC8vIFdoZW4gdGhlIG5ld1VSTFN0YXRlIGlzIGVtcHR5IHdlIGNhbiBhc3N1bWUgdGhhdCB0aGUgc3RhdGUgd2lsbCBiZWNvbWluZwogICAgICAvLyBmcm9tIHRoZSB1cmxTdGF0ZSBpbml0aWFsbHkuIEJ5IHNldHRpbmcgcG9wdWxhdGVXaXRoSW50aWFsU3RhdGUgdG8gdHJ1ZQogICAgICAvLyB0aGlzIHdpbGwgbm93IHNlcmlhbGl6ZSB0aGUgaW5pdGlhbCB1cmxTdGF0ZSBpbnRvIHRoZSBVUkwgd2hlbiB0aGUgcGFnZSBpcwogICAgICAvLyBsb2FkZWQuCgogICAgICBpZiAoIW5ld1VybFN0YXRlICYmIF90aGlzLnByb3BzLnBvcHVsYXRlV2l0aEluaXRpYWxTdGF0ZSkgewogICAgICAgIF90aGlzLnJlcGxhY2VTdGF0ZUluTG9jYXRpb24odXJsU3RhdGUpOwoKICAgICAgICBvbkluaXRpYWxpemUodXJsU3RhdGUpOwogICAgICB9IGVsc2UgewogICAgICAgIG9uSW5pdGlhbGl6ZShuZXdVcmxTdGF0ZSk7CiAgICAgIH0KICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImhhbmRsZUxvY2F0aW9uQ2hhbmdlIiwgZnVuY3Rpb24gKHByZXZMb2NhdGlvbiwgbmV3TG9jYXRpb24pIHsKICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLAogICAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRwcm9wczMub25DaGFuZ2UsCiAgICAgICAgICBtYXBUb1VybFN0YXRlID0gX3RoaXMkcHJvcHMzLm1hcFRvVXJsU3RhdGUsCiAgICAgICAgICB1cmxTdGF0ZUtleSA9IF90aGlzJHByb3BzMy51cmxTdGF0ZUtleTsKCiAgICAgIGlmICghb25DaGFuZ2UgfHwgIW1hcFRvVXJsU3RhdGUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBwcmV2aW91c1VybFN0YXRlU3RyaW5nID0gZ2V0UGFyYW1Gcm9tUXVlcnlTdHJpbmcoZ2V0UXVlcnlTdHJpbmdGcm9tTG9jYXRpb24ocHJldkxvY2F0aW9uKSwgdXJsU3RhdGVLZXkpOwogICAgICB2YXIgbmV3VXJsU3RhdGVTdHJpbmcgPSBnZXRQYXJhbUZyb21RdWVyeVN0cmluZyhnZXRRdWVyeVN0cmluZ0Zyb21Mb2NhdGlvbihuZXdMb2NhdGlvbiksIHVybFN0YXRlS2V5KTsKCiAgICAgIGlmIChwcmV2aW91c1VybFN0YXRlU3RyaW5nICE9PSBuZXdVcmxTdGF0ZVN0cmluZykgewogICAgICAgIHZhciBfcHJldmlvdXNVcmxTdGF0ZSA9IG1hcFRvVXJsU3RhdGUoZGVjb2RlUmlzb25VcmxTdGF0ZShwcmV2aW91c1VybFN0YXRlU3RyaW5nKSk7CgogICAgICAgIHZhciBuZXdVcmxTdGF0ZSA9IG1hcFRvVXJsU3RhdGUoZGVjb2RlUmlzb25VcmxTdGF0ZShuZXdVcmxTdGF0ZVN0cmluZykpOwoKICAgICAgICBpZiAodHlwZW9mIG5ld1VybFN0YXRlICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgb25DaGFuZ2UobmV3VXJsU3RhdGUsIF9wcmV2aW91c1VybFN0YXRlKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhVcmxTdGF0ZUNvbnRhaW5lckxpZmVjeWNsZSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wb25lbnREaWRVcGRhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShfcmVmKSB7CiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLAogICAgICAgICAgcHJldlVybFN0YXRlID0gX3JlZi51cmxTdGF0ZTsKICAgICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsCiAgICAgICAgICBoaXN0b3J5ID0gX3RoaXMkcHJvcHM0Lmhpc3RvcnksCiAgICAgICAgICBsb2NhdGlvbiA9IF90aGlzJHByb3BzNC5sb2NhdGlvbiwKICAgICAgICAgIHVybFN0YXRlID0gX3RoaXMkcHJvcHM0LnVybFN0YXRlOwoKICAgICAgaWYgKHVybFN0YXRlICE9PSBwcmV2VXJsU3RhdGUpIHsKICAgICAgICB0aGlzLnJlcGxhY2VTdGF0ZUluTG9jYXRpb24odXJsU3RhdGUpOwogICAgICB9CgogICAgICBpZiAoaGlzdG9yeS5hY3Rpb24gPT09ICdQT1AnICYmIGxvY2F0aW9uICE9PSBwcmV2TG9jYXRpb24pIHsKICAgICAgICB0aGlzLmhhbmRsZUxvY2F0aW9uQ2hhbmdlKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiY29tcG9uZW50RGlkTW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkgewogICAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uOwogICAgICB0aGlzLmhhbmRsZUluaXRpYWxpemUobG9jYXRpb24pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFVybFN0YXRlQ29udGFpbmVyTGlmZWN5Y2xlOwp9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7Cgp2YXIgVXJsU3RhdGVDb250YWluZXIgPSBmdW5jdGlvbiBVcmxTdGF0ZUNvbnRhaW5lcihwcm9wcykgewogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlckRvbS5Sb3V0ZSwgbnVsbCwgZnVuY3Rpb24gKF9yZWYyKSB7CiAgICB2YXIgaGlzdG9yeSA9IF9yZWYyLmhpc3RvcnksCiAgICAgICAgbG9jYXRpb24gPSBfcmVmMi5sb2NhdGlvbjsKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFVybFN0YXRlQ29udGFpbmVyTGlmZWN5Y2xlLCBfZXh0ZW5kcyh7CiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksCiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbgogICAgfSwgcHJvcHMpKTsKICB9KTsKfTsKCmV4cG9ydHMuVXJsU3RhdGVDb250YWluZXIgPSBVcmxTdGF0ZUNvbnRhaW5lcjsKCnZhciBkZWNvZGVSaXNvblVybFN0YXRlID0gZnVuY3Rpb24gZGVjb2RlUmlzb25VcmxTdGF0ZSh2YWx1ZSkgewogIHRyeSB7CiAgICByZXR1cm4gdmFsdWUgPyAoMCwgX3Jpc29uTm9kZS5kZWNvZGUpKHZhbHVlKSA6IHVuZGVmaW5lZDsKICB9IGNhdGNoIChlcnJvcikgewogICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubWVzc2FnZS5zdGFydHNXaXRoKCdyaXNvbiBkZWNvZGVyIGVycm9yJykpIHsKICAgICAgcmV0dXJuIHt9OwogICAgfQoKICAgIHRocm93IGVycm9yOwogIH0KfTsKCmV4cG9ydHMuZGVjb2RlUmlzb25VcmxTdGF0ZSA9IGRlY29kZVJpc29uVXJsU3RhdGU7Cgp2YXIgZW5jb2RlUmlzb25VcmxTdGF0ZSA9IGZ1bmN0aW9uIGVuY29kZVJpc29uVXJsU3RhdGUoc3RhdGUpIHsKICByZXR1cm4gKDAsIF9yaXNvbk5vZGUuZW5jb2RlKShzdGF0ZSk7Cn07Cgp2YXIgZ2V0UXVlcnlTdHJpbmdGcm9tTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRRdWVyeVN0cmluZ0Zyb21Mb2NhdGlvbihsb2NhdGlvbikgewogIHJldHVybiBsb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpOwp9OwoKZXhwb3J0cy5nZXRRdWVyeVN0cmluZ0Zyb21Mb2NhdGlvbiA9IGdldFF1ZXJ5U3RyaW5nRnJvbUxvY2F0aW9uOwoKdmFyIGdldFBhcmFtRnJvbVF1ZXJ5U3RyaW5nID0gZnVuY3Rpb24gZ2V0UGFyYW1Gcm9tUXVlcnlTdHJpbmcocXVlcnlTdHJpbmcsIGtleSkgewogIHZhciBxdWVyeVBhcmFtID0gX3F1ZXJ5X3N0cmluZy5RdWVyeVN0cmluZy5kZWNvZGUocXVlcnlTdHJpbmcpW2tleV07CgogIHJldHVybiBBcnJheS5pc0FycmF5KHF1ZXJ5UGFyYW0pID8gcXVlcnlQYXJhbVswXSA6IHF1ZXJ5UGFyYW07Cn07CgpleHBvcnRzLmdldFBhcmFtRnJvbVF1ZXJ5U3RyaW5nID0gZ2V0UGFyYW1Gcm9tUXVlcnlTdHJpbmc7Cgp2YXIgcmVwbGFjZVN0YXRlS2V5SW5RdWVyeVN0cmluZyA9IGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZUtleUluUXVlcnlTdHJpbmcoc3RhdGVLZXksIHVybFN0YXRlKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChxdWVyeVN0cmluZykgewogICAgdmFyIHByZXZpb3VzUXVlcnlWYWx1ZXMgPSBfcXVlcnlfc3RyaW5nLlF1ZXJ5U3RyaW5nLmRlY29kZShxdWVyeVN0cmluZyk7CgogICAgdmFyIGVuY29kZWRVcmxTdGF0ZSA9IHR5cGVvZiB1cmxTdGF0ZSAhPT0gJ3VuZGVmaW5lZCcgPyBlbmNvZGVSaXNvblVybFN0YXRlKHVybFN0YXRlKSA6IHVuZGVmaW5lZDsKICAgIHJldHVybiBfcXVlcnlfc3RyaW5nLlF1ZXJ5U3RyaW5nLmVuY29kZShfb2JqZWN0U3ByZWFkKHt9LCBwcmV2aW91c1F1ZXJ5VmFsdWVzLCBfZGVmaW5lUHJvcGVydHkoe30sIHN0YXRlS2V5LCBlbmNvZGVkVXJsU3RhdGUpKSk7CiAgfTsKfTsKCmV4cG9ydHMucmVwbGFjZVN0YXRlS2V5SW5RdWVyeVN0cmluZyA9IHJlcGxhY2VTdGF0ZUtleUluUXVlcnlTdHJpbmc7Cgp2YXIgcmVwbGFjZVF1ZXJ5U3RyaW5nSW5Mb2NhdGlvbiA9IGZ1bmN0aW9uIHJlcGxhY2VRdWVyeVN0cmluZ0luTG9jYXRpb24obG9jYXRpb24sIHF1ZXJ5U3RyaW5nKSB7CiAgaWYgKHF1ZXJ5U3RyaW5nID09PSBnZXRRdWVyeVN0cmluZ0Zyb21Mb2NhdGlvbihsb2NhdGlvbikpIHsKICAgIHJldHVybiBsb2NhdGlvbjsKICB9IGVsc2UgewogICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGxvY2F0aW9uLCB7CiAgICAgIHNlYXJjaDogIj8iLmNvbmNhdChxdWVyeVN0cmluZykKICAgIH0pOwogIH0KfTs="},null]}