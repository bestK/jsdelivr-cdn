{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/snapshot_restore/public/app/components/repository_form/type_settings/fs_settings.js","dependencies":[{"path":"x-pack/legacy/plugins/snapshot_restore/public/app/components/repository_form/type_settings/fs_settings.js","mtime":1585205048211},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}