{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/searchprofiler/public/np_ready/application/containers/profile_query_editor.js","dependencies":[{"path":"x-pack/legacy/plugins/searchprofiler/public/np_ready/application/containers/profile_query_editor.js","mtime":1585205047080},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlByb2ZpbGVRdWVyeUVkaXRvciA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfZWRpdG9yID0gcmVxdWlyZSgiLi4vZWRpdG9yIik7Cgp2YXIgX2hvb2tzID0gcmVxdWlyZSgiLi4vaG9va3MiKTsKCnZhciBfYXBwX2NvbnRleHQgPSByZXF1aXJlKCIuLi9jb250ZXh0cy9hcHBfY29udGV4dCIpOwoKdmFyIF9wcm9maWxlcl9jb250ZXh0ID0gcmVxdWlyZSgiLi4vY29udGV4dHMvcHJvZmlsZXJfY29udGV4dCIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9Ci8qCiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUKICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLgogKi8KCgp2YXIgREVGQVVMVF9JTkRFWF9WQUxVRSA9ICdfYWxsJzsKdmFyIElOSVRJQUxfRURJVE9SX1ZBTFVFID0gIntcbiAgXCJxdWVyeVwiOntcbiAgICBcIm1hdGNoX2FsbFwiIDoge31cbiAgfVxufSI7Ci8qKgogKiBUaGlzIGNvbXBvbmVudCBzaG91bGQgb25seSBuZWVkIHRvIHJlbmRlciBvbmNlLgogKgogKiBEcml2ZXMgc3RhdGUgY2hhbmdlcyBmb3IgbWluZSB2aWEgcHJvZmlsZXIgYWN0aW9uIGNvbnRleHQuCiAqLwoKdmFyIFByb2ZpbGVRdWVyeUVkaXRvciA9ICgwLCBfcmVhY3QubWVtbykoZnVuY3Rpb24gKCkgewogIHZhciBlZGl0b3JSZWYgPSAoMCwgX3JlYWN0LnVzZVJlZikobnVsbCk7CiAgdmFyIGluZGV4SW5wdXRSZWYgPSAoMCwgX3JlYWN0LnVzZVJlZikobnVsbCk7CiAgdmFyIGRpc3BhdGNoID0gKDAsIF9wcm9maWxlcl9jb250ZXh0LnVzZVByb2ZpbGVyQWN0aW9uQ29udGV4dCkoKTsKCiAgdmFyIF91c2VBcHBDb250ZXh0ID0gKDAsIF9hcHBfY29udGV4dC51c2VBcHBDb250ZXh0KSgpLAogICAgICBsaWNlbnNlRW5hYmxlZCA9IF91c2VBcHBDb250ZXh0LmxpY2Vuc2VFbmFibGVkLAogICAgICBub3RpZmljYXRpb25zID0gX3VzZUFwcENvbnRleHQubm90aWZpY2F0aW9uczsKCiAgdmFyIHJlcXVlc3RQcm9maWxlID0gKDAsIF9ob29rcy51c2VSZXF1ZXN0UHJvZmlsZSkoKTsKCiAgdmFyIGhhbmRsZVByb2ZpbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZVByb2ZpbGVDbGljaygpIHsKICAgIHZhciBlZGl0b3IsIF9yZWYsIHJlc3VsdCwgZXJyb3I7CgogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBoYW5kbGVQcm9maWxlQ2xpY2skKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBkaXNwYXRjaCh7CiAgICAgICAgICAgICAgdHlwZTogJ3NldFByb2ZpbGluZycsCiAgICAgICAgICAgICAgdmFsdWU6IHRydWUKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxOwogICAgICAgICAgICBlZGl0b3IgPSBlZGl0b3JSZWYuY3VycmVudDsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAocmVxdWVzdFByb2ZpbGUoewogICAgICAgICAgICAgIHF1ZXJ5OiBlZGl0b3JSZWYuY3VycmVudC5nZXRWYWx1ZSgpLAogICAgICAgICAgICAgIGluZGV4OiBpbmRleElucHV0UmVmLmN1cnJlbnQudmFsdWUKICAgICAgICAgICAgfSkpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgX3JlZiA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIHJlc3VsdCA9IF9yZWYuZGF0YTsKICAgICAgICAgICAgZXJyb3IgPSBfcmVmLmVycm9yOwoKICAgICAgICAgICAgaWYgKCFlcnJvcikgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbm90aWZpY2F0aW9ucy5hZGREYW5nZXIoZXJyb3IpOwogICAgICAgICAgICBlZGl0b3IuZm9jdXMoKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgaWYgKCEocmVzdWx0ID09PSBudWxsKSkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgZGlzcGF0Y2goewogICAgICAgICAgICAgIHR5cGU6ICdzZXRDdXJyZW50UmVzcG9uc2UnLAogICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE1OwogICAgICAgICAgICBkaXNwYXRjaCh7CiAgICAgICAgICAgICAgdHlwZTogJ3NldFByb2ZpbGluZycsCiAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDE1KTsKCiAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIG51bGwsIG51bGwsIFtbMSwsIDE1LCAxOF1dKTsKICB9OwoKICB2YXIgb25FZGl0b3JSZWFkeSA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChlZGl0b3JJbnN0YW5jZSkgewogICAgcmV0dXJuIGVkaXRvclJlZi5jdXJyZW50ID0gZWRpdG9ySW5zdGFuY2U7CiAgfSwgW10pOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICByZXNwb25zaXZlOiBmYWxzZSwKICAgIGNsYXNzTmFtZTogInByZkRldlRvb2xfX3NlbnNlIiwKICAgIGd1dHRlclNpemU6ICJub25lIiwKICAgIGRpcmVjdGlvbjogImNvbHVtbiIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgIGdyb3c6IGZhbHNlCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgIGRpcmVjdGlvbjogInJvdyIsCiAgICBndXR0ZXJTaXplOiAicyIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnNlYXJjaFByb2ZpbGVyLmZvcm1JbmRleExhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0luZGV4JwogICAgfSkKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmllbGRUZXh0LCB7CiAgICBkaXNhYmxlZDogIWxpY2Vuc2VFbmFibGVkLAogICAgaW5wdXRSZWY6IGZ1bmN0aW9uIGlucHV0UmVmKHJlZikgewogICAgICBpZiAocmVmKSB7CiAgICAgICAgaW5kZXhJbnB1dFJlZi5jdXJyZW50ID0gcmVmOwogICAgICAgIHJlZi52YWx1ZSA9IERFRkFVTFRfSU5ERVhfVkFMVUU7CiAgICAgIH0KICAgIH0KICB9KSkpKSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgIGdyb3c6IDEwCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZWRpdG9yLkVkaXRvciwgewogICAgb25FZGl0b3JSZWFkeTogb25FZGl0b3JSZWFkeSwKICAgIGxpY2Vuc2VFbmFibGVkOiBsaWNlbnNlRW5hYmxlZCwKICAgIGluaXRpYWxWYWx1ZTogSU5JVElBTF9FRElUT1JfVkFMVUUKICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgZ3JvdzogZmFsc2UKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICBjbGFzc05hbWU6ICJwcmZEZXZUb29sX19wcm9maWxlQnV0dG9uQ29udGFpbmVyIiwKICAgIGd1dHRlclNpemU6ICJub25lIiwKICAgIGRpcmVjdGlvbjogInJvdyIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgIGdyb3c6IDUKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAicyIKICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgZ3JvdzogNQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgIGZpbGw6IHRydWUsCiAgICBkaXNhYmxlZDogIWxpY2Vuc2VFbmFibGVkLAogICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgcmV0dXJuIGhhbmRsZVByb2ZpbGVDbGljaygpOwogICAgfQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCBudWxsLCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suc2VhcmNoUHJvZmlsZXIuZm9ybVByb2ZpbGVCdXR0b25MYWJlbCcsIHsKICAgIGRlZmF1bHRNZXNzYWdlOiAnUHJvZmlsZScKICB9KSkpKSkpKTsKfSk7CmV4cG9ydHMuUHJvZmlsZVF1ZXJ5RWRpdG9yID0gUHJvZmlsZVF1ZXJ5RWRpdG9yOw=="},null]}