{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/telemetry/public/components/telemetry_form.js","dependencies":[{"path":"src/legacy/core_plugins/telemetry/public/components/telemetry_form.js","mtime":1585205040047},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlRlbGVtZXRyeUZvcm0gPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicHJvcC10eXBlcyIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uL2NvbW1vbi9jb25zdGFudHMiKTsKCnZhciBfb3B0X2luX2RldGFpbHNfY29tcG9uZW50ID0gcmVxdWlyZSgiLi9vcHRfaW5fZGV0YWlsc19jb21wb25lbnQiKTsKCnZhciBfZmllbGQgPSByZXF1aXJlKCIuLi8uLi8uLi9raWJhbmEvcHVibGljL21hbmFnZW1lbnQvc2VjdGlvbnMvc2V0dGluZ3MvY29tcG9uZW50cy9maWVsZC9maWVsZCIpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgU0VBUkNIX1RFUk1TID0gWyd0ZWxlbWV0cnknLCAndXNhZ2UnLCAnZGF0YScsICd1c2FnZSBkYXRhJ107Cgp2YXIgVGVsZW1ldHJ5Rm9ybSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9Db21wb25lbnQpIHsKICBfaW5oZXJpdHMoVGVsZW1ldHJ5Rm9ybSwgX0NvbXBvbmVudCk7CgogIGZ1bmN0aW9uIFRlbGVtZXRyeUZvcm0oKSB7CiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjsKCiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRlbGVtZXRyeUZvcm0pOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgfQoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoVGVsZW1ldHJ5Rm9ybSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInN0YXRlIiwgewogICAgICBwcm9jZXNzaW5nOiBmYWxzZSwKICAgICAgc2hvd0V4YW1wbGU6IGZhbHNlLAogICAgICBxdWVyeU1hdGNoZXM6IG51bGwKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm1heWJlR2V0QXBwbGllc1NldHRpbmdNZXNzYWdlIiwgZnVuY3Rpb24gKCkgewogICAgICBpZiAoIV90aGlzLnByb3BzLnNob3dBcHBsaWVzU2V0dGluZ01lc3NhZ2UpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDYWxsT3V0LCB7CiAgICAgICAgY29sb3I6ICJwcmltYXJ5IiwKICAgICAgICBpY29uVHlwZTogInNwYWNlc0FwcCIsCiAgICAgICAgdGl0bGU6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ0ZWxlbWV0cnkuY2FsbG91dC5hcHBsaWVzU2V0dGluZ1RpdGxlIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVGhpcyBzZXR0aW5nIGFwcGxpZXMgdG8ge2FsbE9mS2liYW5hVGV4dH0iLAogICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgIGFsbE9mS2liYW5hVGV4dDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3Ryb25nIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgICAgICBpZDogInRlbGVtZXRyeS5jYWxsb3V0LmFwcGxpZXNTZXR0aW5nVGl0bGUuYWxsT2ZLaWJhbmFUZXh0IiwKICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogImFsbCBvZiBLaWJhbmEuIgogICAgICAgICAgICB9KSkKICAgICAgICAgIH0KICAgICAgICB9KSkKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJyZW5kZXJEZXNjcmlwdGlvbiIsIGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInRlbGVtZXRyeS50ZWxlbWV0cnlDb25maWdBbmRMaW5rRGVzY3JpcHRpb24iLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRW5hYmxpbmcgZGF0YSB1c2FnZSBjb2xsZWN0aW9uIGhlbHBzIHVzIG1hbmFnZSBhbmQgaW1wcm92ZSBvdXIgcHJvZHVjdHMgYW5kIHNlcnZpY2VzLiBTZWUgb3VyIHtwcml2YWN5U3RhdGVtZW50TGlua30gZm9yIG1vcmUgZGV0YWlscy4iLAogICAgICAgIHZhbHVlczogewogICAgICAgICAgcHJpdmFjeVN0YXRlbWVudExpbms6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlMaW5rLCB7CiAgICAgICAgICAgIGhyZWY6IF9jb25zdGFudHMuUFJJVkFDWV9TVEFURU1FTlRfVVJMLAogICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgICBpZDogInRlbGVtZXRyeS5yZWFkT3VyVXNhZ2VEYXRhUHJpdmFjeVN0YXRlbWVudExpbmtUZXh0IiwKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJQcml2YWN5IFN0YXRlbWVudCIKICAgICAgICAgIH0pKQogICAgICAgIH0KICAgICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgICBvbkNsaWNrOiBfdGhpcy50b2dnbGVFeGFtcGxlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ0ZWxlbWV0cnkuc2VlRXhhbXBsZU9mV2hhdFdlQ29sbGVjdExpbmtUZXh0IiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlNlZSBhbiBleGFtcGxlIG9mIHdoYXQgd2UgY29sbGVjdCIKICAgICAgfSkpKSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJ0b2dnbGVPcHRJbiIsIGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBuZXdPcHRJblZhbHVlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIG5ld09wdEluVmFsdWUgPSAhX3RoaXMucHJvcHMudGVsZW1ldHJ5T3B0SW5Qcm92aWRlci5nZXRPcHRJbigpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICAgICAgICAgICAgZW5hYmxlZDogbmV3T3B0SW5WYWx1ZSwKICAgICAgICAgICAgICAgICAgcHJvY2Vzc2luZzogdHJ1ZQogICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy50ZWxlbWV0cnlPcHRJblByb3ZpZGVyLnNldE9wdEluKG5ld09wdEluVmFsdWUpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3Npbmc6IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZwogICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3Npbmc6IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAidG9nZ2xlRXhhbXBsZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIHNob3dFeGFtcGxlOiAhX3RoaXMuc3RhdGUuc2hvd0V4YW1wbGUKICAgICAgfSk7CiAgICB9KTsKCiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVGVsZW1ldHJ5Rm9ybSwgW3sKICAgIGtleTogIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgcXVlcnkgPSBuZXh0UHJvcHMucXVlcnk7CiAgICAgIHZhciBzZWFyY2hUZXJtID0gKHF1ZXJ5LnRleHQgfHwgJycpLnRvTG93ZXJDYXNlKCk7CiAgICAgIHZhciBzZWFyY2hUZXJtTWF0Y2hlcyA9IFNFQVJDSF9URVJNUy5zb21lKGZ1bmN0aW9uICh0ZXJtKSB7CiAgICAgICAgcmV0dXJuIHRlcm0uaW5kZXhPZihzZWFyY2hUZXJtKSA+PSAwOwogICAgICB9KTsKCiAgICAgIGlmIChzZWFyY2hUZXJtTWF0Y2hlcyAhPT0gdGhpcy5zdGF0ZS5xdWVyeU1hdGNoZXMpIHsKICAgICAgICB0aGlzLnNldFN0YXRlKHsKICAgICAgICAgIHF1ZXJ5TWF0Y2hlczogc2VhcmNoVGVybU1hdGNoZXMKICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczIucHJvcHMub25RdWVyeU1hdGNoQ2hhbmdlKHNlYXJjaFRlcm1NYXRjaGVzKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgdGVsZW1ldHJ5T3B0SW5Qcm92aWRlciA9IHRoaXMucHJvcHMudGVsZW1ldHJ5T3B0SW5Qcm92aWRlcjsKICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSwKICAgICAgICAgIHNob3dFeGFtcGxlID0gX3RoaXMkc3RhdGUuc2hvd0V4YW1wbGUsCiAgICAgICAgICBxdWVyeU1hdGNoZXMgPSBfdGhpcyRzdGF0ZS5xdWVyeU1hdGNoZXM7CgogICAgICBpZiAoIXRlbGVtZXRyeU9wdEluUHJvdmlkZXIuY2FuQ2hhbmdlT3B0SW5TdGF0dXMoKSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICBpZiAocXVlcnlNYXRjaGVzICE9PSBudWxsICYmICFxdWVyeU1hdGNoZXMpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBzaG93RXhhbXBsZSAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9vcHRfaW5fZGV0YWlsc19jb21wb25lbnQuT3B0SW5FeGFtcGxlRmx5b3V0LCB7CiAgICAgICAgZmV0Y2hUZWxlbWV0cnk6IGZ1bmN0aW9uIGZldGNoVGVsZW1ldHJ5KCkgewogICAgICAgICAgcmV0dXJuIHRlbGVtZXRyeU9wdEluUHJvdmlkZXIuZmV0Y2hFeGFtcGxlKCk7CiAgICAgICAgfSwKICAgICAgICBvbkNsb3NlOiB0aGlzLnRvZ2dsZUV4YW1wbGUKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYW5lbCwgewogICAgICAgIHBhZGRpbmdTaXplOiAibCIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgYWxpZ25JdGVtczogImJhc2VsaW5lIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMiIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ0ZWxlbWV0cnkudXNhZ2VEYXRhVGl0bGUiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVXNhZ2UgRGF0YSIKICAgICAgfSkpKSkpLCB0aGlzLm1heWJlR2V0QXBwbGllc1NldHRpbmdNZXNzYWdlKCksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAicyIKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2ZpZWxkLkZpZWxkLCB7CiAgICAgICAgc2V0dGluZzogewogICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLAogICAgICAgICAgdmFsdWU6IHRlbGVtZXRyeU9wdEluUHJvdmlkZXIuZ2V0T3B0SW4oKSB8fCBmYWxzZSwKICAgICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLnJlbmRlckRlc2NyaXB0aW9uKCksCiAgICAgICAgICBkZWZWYWw6IHRydWUsCiAgICAgICAgICBhcmlhTmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3RlbGVtZXRyeS5wcm92aWRlVXNhZ2VTdGF0aXN0aWNzTGFiZWwnLCB7CiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUHJvdmlkZSB1c2FnZSBzdGF0aXN0aWNzJwogICAgICAgICAgfSkKICAgICAgICB9LAogICAgICAgIHNhdmU6IHRoaXMudG9nZ2xlT3B0SW4sCiAgICAgICAgY2xlYXI6IHRoaXMudG9nZ2xlT3B0SW4sCiAgICAgICAgZW5hYmxlU2F2aW5nOiB0aGlzLnByb3BzLmVuYWJsZVNhdmluZwogICAgICB9KSkpKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBUZWxlbWV0cnlGb3JtOwp9KF9yZWFjdC5Db21wb25lbnQpOwoKZXhwb3J0cy5UZWxlbWV0cnlGb3JtID0gVGVsZW1ldHJ5Rm9ybTsKCl9kZWZpbmVQcm9wZXJ0eShUZWxlbWV0cnlGb3JtLCAicHJvcFR5cGVzIiwgewogIHRlbGVtZXRyeU9wdEluUHJvdmlkZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCwKICBxdWVyeTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwKICBvblF1ZXJ5TWF0Y2hDaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgc2hvd0FwcGxpZXNTZXR0aW5nTWVzc2FnZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCwKICBlbmFibGVTYXZpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQKfSk7"},null]}