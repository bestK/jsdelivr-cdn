{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/ml/public/application/datavisualizer/file_based/components/edit_flyout/overrides.js","dependencies":[{"path":"x-pack/legacy/plugins/ml/public/application/datavisualizer/file_based/components/edit_flyout/overrides.js","mtime":1585205045620},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk92ZXJyaWRlcyA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfbWV0YWRhdGEgPSByZXF1aXJlKCJ1aS9tZXRhZGF0YSIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfb3B0aW9ucyA9IHJlcXVpcmUoIi4vb3B0aW9ucyIpOwoKdmFyIF9vdmVycmlkZXNfdmFsaWRhdGlvbiA9IHJlcXVpcmUoIi4vb3ZlcnJpZGVzX3ZhbGlkYXRpb24iKTsKCnZhciBfb3B0aW9uX2xpc3RzID0gcmVxdWlyZSgiLi9vcHRpb25zL29wdGlvbl9saXN0cyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgZm9ybWF0T3B0aW9ucyA9ICgwLCBfb3B0aW9ucy5nZXRGb3JtYXRPcHRpb25zKSgpOwp2YXIgdGltZXN0YW1wRm9ybWF0T3B0aW9ucyA9ICgwLCBfb3B0aW9ucy5nZXRUaW1lc3RhbXBGb3JtYXRPcHRpb25zKSgpOwp2YXIgZGVsaW1pdGVyT3B0aW9ucyA9ICgwLCBfb3B0aW9ucy5nZXREZWxpbWl0ZXJPcHRpb25zKSgpOwp2YXIgcXVvdGVPcHRpb25zID0gKDAsIF9vcHRpb25zLmdldFF1b3RlT3B0aW9ucykoKTsgLy8gY29uc3QgY2hhcnNldE9wdGlvbnMgPSBnZXRDaGFyc2V0T3B0aW9ucygpOwoKdmFyIExJTkVTX1RPX1NBTVBMRV9WQUxVRV9NSU4gPSAzOwp2YXIgTElORVNfVE9fU0FNUExFX1ZBTFVFX01BWCA9IDEwMDAwMDA7Cgp2YXIgT3ZlcnJpZGVzID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0NvbXBvbmVudCkgewogIF9pbmhlcml0cyhPdmVycmlkZXMsIF9Db21wb25lbnQpOwoKICBmdW5jdGlvbiBPdmVycmlkZXMocHJvcHMpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT3ZlcnJpZGVzKTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihPdmVycmlkZXMpLmNhbGwodGhpcywgcHJvcHMpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJsaW5lc1RvU2FtcGxlRXJyb3JzIiwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1sLmZpbGVEYXRhdmlzdWFsaXplci5lZGl0Rmx5b3V0Lm92ZXJyaWRlcy5saW5lc1RvU2FtcGxlRXJyb3JNZXNzYWdlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIHttaW59IGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8ge21heH0nLAogICAgICB2YWx1ZXM6IHsKICAgICAgICBtaW46IExJTkVTX1RPX1NBTVBMRV9WQUxVRV9NSU4sCiAgICAgICAgbWF4OiBMSU5FU19UT19TQU1QTEVfVkFMVUVfTUFYCiAgICAgIH0KICAgIH0pKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJjdXN0b21UaW1lc3RhbXBGb3JtYXRFcnJvcnMiLCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWwuZmlsZURhdGF2aXN1YWxpemVyLmVkaXRGbHlvdXQub3ZlcnJpZGVzLmN1c3RvbVRpbWVzdGFtcEZvcm1hdEVycm9yTWVzc2FnZScsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJUaW1lc3RhbXAgZm9ybWF0IG11c3QgYmUgYSBjb21iaW5hdGlvbiBvZiB0aGVzZSBKYXZhIGRhdGUvdGltZSBmb3JtYXRzOlxuICAgICAgeXksIHl5eXksIE0sIE1NLCBNTU0sIE1NTU0sIGQsIGRkLCBFRUUsIEVFRUUsIEgsIEhILCBoLCBtbSwgc3MsIFMgdGhyb3VnaCBTU1NTU1NTU1MsIGEsIFhYLCBYWFgsIHp6eiIKICAgIH0pKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJhcHBseU92ZXJyaWRlcyIsIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIG92ZXJyaWRlcyA9IF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnN0YXRlLm92ZXJyaWRlcyk7CgogICAgICBvdmVycmlkZXMuZGVsaW1pdGVyID0gY29udmVydERlbGltaXRlckJhY2sob3ZlcnJpZGVzLmRlbGltaXRlciwgX3RoaXMuc3RhdGUuY3VzdG9tRGVsaW1pdGVyKTsKCiAgICAgIGlmIChvdmVycmlkZXMudGltZXN0YW1wRm9ybWF0ID09PSBfb3B0aW9uX2xpc3RzLkNVU1RPTV9EUk9QRE9XTl9PUFRJT04gJiYgX3RoaXMuc3RhdGUuY3VzdG9tVGltZXN0YW1wRm9ybWF0ICE9PSAnJykgewogICAgICAgIG92ZXJyaWRlcy50aW1lc3RhbXBGb3JtYXQgPSBfdGhpcy5zdGF0ZS5jdXN0b21UaW1lc3RhbXBGb3JtYXQ7CiAgICAgIH0KCiAgICAgIF90aGlzLnByb3BzLnNldE92ZXJyaWRlcyhvdmVycmlkZXMpOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25Gb3JtYXRDaGFuZ2UiLCBmdW5jdGlvbiAoX3JlZikgewogICAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAxKSwKICAgICAgICAgIG9wdCA9IF9yZWYyWzBdOwoKICAgICAgdmFyIGZvcm1hdCA9IG9wdCA/IG9wdC5sYWJlbCA6ICcnOwoKICAgICAgX3RoaXMuc2V0T3ZlcnJpZGUoewogICAgICAgIGZvcm1hdDogZm9ybWF0CiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25UaW1lc3RhbXBGb3JtYXRDaGFuZ2UiLCBmdW5jdGlvbiAoX3JlZjMpIHsKICAgICAgdmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjMsIDEpLAogICAgICAgICAgb3B0ID0gX3JlZjRbMF07CgogICAgICB2YXIgdGltZXN0YW1wRm9ybWF0ID0gb3B0ID8gb3B0LmxhYmVsIDogJyc7CgogICAgICBfdGhpcy5zZXRPdmVycmlkZSh7CiAgICAgICAgdGltZXN0YW1wRm9ybWF0OiB0aW1lc3RhbXBGb3JtYXQKICAgICAgfSk7CgogICAgICBpZiAob3B0ICE9PSBfb3B0aW9uX2xpc3RzLkNVU1RPTV9EUk9QRE9XTl9PUFRJT04pIHsKICAgICAgICBfdGhpcy5wcm9wcy5zZXRPdmVycmlkZXNWYWxpZCh0cnVlKTsKICAgICAgfQogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25DdXN0b21UaW1lc3RhbXBGb3JtYXRDaGFuZ2UiLCBmdW5jdGlvbiAoZSkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgY3VzdG9tVGltZXN0YW1wRm9ybWF0OiBlLnRhcmdldC52YWx1ZQogICAgICB9KTsgLy8gY2hlY2sgd2hldGhlciB0aGUgdmFsdWUgaXMgdmFsaWQgYW5kIHNldCB0aGF0IHRvIHN0YXRlLgoKCiAgICAgIHZhciBfaXNUaW1lc3RhbXBGb3JtYXRWYWwgPSAoMCwgX292ZXJyaWRlc192YWxpZGF0aW9uLmlzVGltZXN0YW1wRm9ybWF0VmFsaWQpKGUudGFyZ2V0LnZhbHVlKSwKICAgICAgICAgIGlzVmFsaWQgPSBfaXNUaW1lc3RhbXBGb3JtYXRWYWwuaXNWYWxpZCwKICAgICAgICAgIGVycm9yTWVzc2FnZSA9IF9pc1RpbWVzdGFtcEZvcm1hdFZhbC5lcnJvck1lc3NhZ2U7CgogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgdGltZXN0YW1wRm9ybWF0VmFsaWQ6IGlzVmFsaWQsCiAgICAgICAgdGltZXN0YW1wRm9ybWF0RXJyb3I6IGVycm9yTWVzc2FnZQogICAgICB9KTsKCiAgICAgIF90aGlzLnByb3BzLnNldE92ZXJyaWRlc1ZhbGlkKGlzVmFsaWQpOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25UaW1lc3RhbXBGaWVsZENoYW5nZSIsIGZ1bmN0aW9uIChfcmVmNSkgewogICAgICB2YXIgX3JlZjYgPSBfc2xpY2VkVG9BcnJheShfcmVmNSwgMSksCiAgICAgICAgICBvcHQgPSBfcmVmNlswXTsKCiAgICAgIHZhciB0aW1lc3RhbXBGaWVsZCA9IG9wdCA/IG9wdC5sYWJlbCA6ICcnOwoKICAgICAgX3RoaXMuc2V0T3ZlcnJpZGUoewogICAgICAgIHRpbWVzdGFtcEZpZWxkOiB0aW1lc3RhbXBGaWVsZAogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uRGVsaW1pdGVyQ2hhbmdlIiwgZnVuY3Rpb24gKF9yZWY3KSB7CiAgICAgIHZhciBfcmVmOCA9IF9zbGljZWRUb0FycmF5KF9yZWY3LCAxKSwKICAgICAgICAgIG9wdCA9IF9yZWY4WzBdOwoKICAgICAgdmFyIGRlbGltaXRlciA9IG9wdCA/IG9wdC5sYWJlbCA6ICcnOwoKICAgICAgX3RoaXMuc2V0T3ZlcnJpZGUoewogICAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25DdXN0b21EZWxpbWl0ZXJDaGFuZ2UiLCBmdW5jdGlvbiAoZSkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgY3VzdG9tRGVsaW1pdGVyOiBlLnRhcmdldC52YWx1ZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uUXVvdGVDaGFuZ2UiLCBmdW5jdGlvbiAoX3JlZjkpIHsKICAgICAgdmFyIF9yZWYxMCA9IF9zbGljZWRUb0FycmF5KF9yZWY5LCAxKSwKICAgICAgICAgIG9wdCA9IF9yZWYxMFswXTsKCiAgICAgIHZhciBxdW90ZSA9IG9wdCA/IG9wdC5sYWJlbCA6ICcnOwoKICAgICAgX3RoaXMuc2V0T3ZlcnJpZGUoewogICAgICAgIHF1b3RlOiBxdW90ZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uSGFzSGVhZGVyUm93Q2hhbmdlIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgX3RoaXMuc2V0T3ZlcnJpZGUoewogICAgICAgIGhhc0hlYWRlclJvdzogZS50YXJnZXQuY2hlY2tlZAogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uU2hvdWxkVHJpbUZpZWxkc0NoYW5nZSIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIF90aGlzLnNldE92ZXJyaWRlKHsKICAgICAgICBzaG91bGRUcmltRmllbGRzOiBlLnRhcmdldC5jaGVja2VkCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25DaGFyc2V0Q2hhbmdlIiwgZnVuY3Rpb24gKF9yZWYxMSkgewogICAgICB2YXIgX3JlZjEyID0gX3NsaWNlZFRvQXJyYXkoX3JlZjExLCAxKSwKICAgICAgICAgIG9wdCA9IF9yZWYxMlswXTsKCiAgICAgIHZhciBjaGFyc2V0ID0gb3B0ID8gb3B0LmxhYmVsIDogJyc7CgogICAgICBfdGhpcy5zZXRPdmVycmlkZSh7CiAgICAgICAgY2hhcnNldDogY2hhcnNldAogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uQ29sdW1uTmFtZUNoYW5nZSIsIGZ1bmN0aW9uIChlLCBpKSB7CiAgICAgIHZhciBjb2x1bW5OYW1lcyA9IF90aGlzLnN0YXRlLm92ZXJyaWRlcy5jb2x1bW5OYW1lczsKICAgICAgY29sdW1uTmFtZXNbaV0gPSBlLnRhcmdldC52YWx1ZTsKCiAgICAgIF90aGlzLnNldE92ZXJyaWRlKHsKICAgICAgICBjb2x1bW5OYW1lczogY29sdW1uTmFtZXMKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJncm9rUGF0dGVybkNoYW5nZSIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIF90aGlzLnNldE92ZXJyaWRlKHsKICAgICAgICBncm9rUGF0dGVybjogZS50YXJnZXQudmFsdWUKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbkxpbmVzVG9TYW1wbGVDaGFuZ2UiLCBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgbGluZXNUb1NhbXBsZSA9ICtlLnRhcmdldC52YWx1ZTsKCiAgICAgIF90aGlzLnNldE92ZXJyaWRlKHsKICAgICAgICBsaW5lc1RvU2FtcGxlOiBsaW5lc1RvU2FtcGxlCiAgICAgIH0pOyAvLyBjaGVjayB3aGV0aGVyIHRoZSB2YWx1ZSBpcyB2YWxpZCBhbmQgc2V0IHRoYXQgdG8gc3RhdGUuCgoKICAgICAgdmFyIGxpbmVzVG9TYW1wbGVWYWxpZCA9IGlzTGluZXNUb1NhbXBsZVZhbGlkKGxpbmVzVG9TYW1wbGUpOwoKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIGxpbmVzVG9TYW1wbGVWYWxpZDogbGluZXNUb1NhbXBsZVZhbGlkCiAgICAgIH0pOyAvLyBzZXQgdGhlIG92ZXJyaWRlcyB2YWxpZCBzZXR0aW5nIGluIHRoZSBwYXJlbnQgY29tcG9uZW50LAogICAgICAvLyB1c2VkIHRvIGRpc2FibGUgdGhlIEFwcGx5IGJ1dHRvbiBpZiBhbnkgb2YgdGhlIG92ZXJyaWRlcyBhcmUgaW52YWxpZAoKCiAgICAgIF90aGlzLnByb3BzLnNldE92ZXJyaWRlc1ZhbGlkKGxpbmVzVG9TYW1wbGVWYWxpZCk7CiAgICB9KTsKCiAgICBfdGhpcy5zdGF0ZSA9IHt9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKE92ZXJyaWRlcywgW3sKICAgIGtleTogImNvbXBvbmVudERpZE1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHsKICAgICAgdmFyIG9yaWdpbmFsVGltZXN0YW1wRm9ybWF0ID0gdGhpcy5wcm9wcyAmJiB0aGlzLnByb3BzLm9yaWdpbmFsU2V0dGluZ3MgJiYgdGhpcy5wcm9wcy5vcmlnaW5hbFNldHRpbmdzLnRpbWVzdGFtcEZvcm1hdDsKCiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5zZXRBcHBseU92ZXJyaWRlcyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHRoaXMucHJvcHMuc2V0QXBwbHlPdmVycmlkZXModGhpcy5hcHBseU92ZXJyaWRlcyk7CiAgICAgIH0KCiAgICAgIGlmIChvcmlnaW5hbFRpbWVzdGFtcEZvcm1hdCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdmFyIG9wdGlvbkV4aXN0cyA9IF9vcHRpb25fbGlzdHMuVElNRVNUQU1QX09QVElPTlMuc29tZShmdW5jdGlvbiAob3B0aW9uKSB7CiAgICAgICAgICByZXR1cm4gb3B0aW9uID09PSBvcmlnaW5hbFRpbWVzdGFtcEZvcm1hdDsKICAgICAgICB9KTsKCiAgICAgICAgaWYgKG9wdGlvbkV4aXN0cyA9PT0gZmFsc2UpIHsKICAgICAgICAgIC8vIEluY29taW5nIGZvcm1hdCBkb2VzIG5vdCBleGlzdCBpbiBkcm9wZG93bi4gRGlzcGxheSBjdXN0b20gaW5wdXQgd2l0aCBpbmNvbWluZyBmb3JtYXQgYXMgZGVmYXVsdCB2YWx1ZS4KICAgICAgICAgIHZhciBvdmVycmlkZXMgPSBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLnN0YXRlLm92ZXJyaWRlcyk7CgogICAgICAgICAgb3ZlcnJpZGVzLnRpbWVzdGFtcEZvcm1hdCA9IF9vcHRpb25fbGlzdHMuQ1VTVE9NX0RST1BET1dOX09QVElPTjsKICAgICAgICAgIHRoaXMuc2V0U3RhdGUoewogICAgICAgICAgICBjdXN0b21UaW1lc3RhbXBGb3JtYXQ6IG9yaWdpbmFsVGltZXN0YW1wRm9ybWF0LAogICAgICAgICAgICBvdmVycmlkZXM6IG92ZXJyaWRlcwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiY29tcG9uZW50V2lsbFVubW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkgewogICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMudW5zZXRBcHBseU92ZXJyaWRlcyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHRoaXMucHJvcHMudW5zZXRBcHBseU92ZXJyaWRlcygpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0T3ZlcnJpZGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldE92ZXJyaWRlKG8pIHsKICAgICAgdmFyIG92ZXJyaWRlcyA9IF9vYmplY3RTcHJlYWQoe30sIHRoaXMuc3RhdGUub3ZlcnJpZGVzLCB7fSwgbyk7CgogICAgICB0aGlzLnNldFN0YXRlKHsKICAgICAgICBvdmVycmlkZXM6IG92ZXJyaWRlcwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgZmllbGRzID0gdGhpcy5wcm9wcy5maWVsZHM7CiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsCiAgICAgICAgICBjdXN0b21EZWxpbWl0ZXIgPSBfdGhpcyRzdGF0ZS5jdXN0b21EZWxpbWl0ZXIsCiAgICAgICAgICBjdXN0b21UaW1lc3RhbXBGb3JtYXQgPSBfdGhpcyRzdGF0ZS5jdXN0b21UaW1lc3RhbXBGb3JtYXQsCiAgICAgICAgICBvcmlnaW5hbENvbHVtbk5hbWVzID0gX3RoaXMkc3RhdGUub3JpZ2luYWxDb2x1bW5OYW1lcywKICAgICAgICAgIGxpbmVzVG9TYW1wbGVWYWxpZCA9IF90aGlzJHN0YXRlLmxpbmVzVG9TYW1wbGVWYWxpZCwKICAgICAgICAgIHRpbWVzdGFtcEZvcm1hdEVycm9yID0gX3RoaXMkc3RhdGUudGltZXN0YW1wRm9ybWF0RXJyb3IsCiAgICAgICAgICB0aW1lc3RhbXBGb3JtYXRWYWxpZCA9IF90aGlzJHN0YXRlLnRpbWVzdGFtcEZvcm1hdFZhbGlkLAogICAgICAgICAgb3ZlcnJpZGVzID0gX3RoaXMkc3RhdGUub3ZlcnJpZGVzOwogICAgICB2YXIgdGltZXN0YW1wRm9ybWF0ID0gb3ZlcnJpZGVzLnRpbWVzdGFtcEZvcm1hdCwKICAgICAgICAgIHRpbWVzdGFtcEZpZWxkID0gb3ZlcnJpZGVzLnRpbWVzdGFtcEZpZWxkLAogICAgICAgICAgZm9ybWF0ID0gb3ZlcnJpZGVzLmZvcm1hdCwKICAgICAgICAgIGRlbGltaXRlciA9IG92ZXJyaWRlcy5kZWxpbWl0ZXIsCiAgICAgICAgICBxdW90ZSA9IG92ZXJyaWRlcy5xdW90ZSwKICAgICAgICAgIGhhc0hlYWRlclJvdyA9IG92ZXJyaWRlcy5oYXNIZWFkZXJSb3csCiAgICAgICAgICBzaG91bGRUcmltRmllbGRzID0gb3ZlcnJpZGVzLnNob3VsZFRyaW1GaWVsZHMsCiAgICAgICAgICBjb2x1bW5OYW1lcyA9IG92ZXJyaWRlcy5jb2x1bW5OYW1lcywKICAgICAgICAgIGdyb2tQYXR0ZXJuID0gb3ZlcnJpZGVzLmdyb2tQYXR0ZXJuLAogICAgICAgICAgbGluZXNUb1NhbXBsZSA9IG92ZXJyaWRlcy5saW5lc1RvU2FtcGxlOwogICAgICB2YXIgZmllbGRPcHRpb25zID0gZ2V0U29ydGVkRmllbGRzKGZpZWxkcyk7CiAgICAgIHZhciB0aW1lc3RhbXBGb3JtYXRFcnJvcnNMaXN0ID0gW3RoaXMuY3VzdG9tVGltZXN0YW1wRm9ybWF0RXJyb3JzLCB0aW1lc3RhbXBGb3JtYXRFcnJvcl07IC8vIG1ldGFkYXRhLmJyYW5jaCBjb3JyZXNwb25kcyB0byB0aGUgdmVyc2lvbiB1c2VkIGluIGRvY3VtZW50YXRpb24gbGlua3MuCgogICAgICB2YXIgZG9jc1VybCA9ICJodHRwczovL3d3dy5lbGFzdGljLmNvL2d1aWRlL2VuL2VsYXN0aWNzZWFyY2gvcmVmZXJlbmNlLyIuY29uY2F0KF9tZXRhZGF0YS5tZXRhZGF0YS5icmFuY2gsICIvc2VhcmNoLWFnZ3JlZ2F0aW9ucy1idWNrZXQtZGF0ZXJhbmdlLWFnZ3JlZ2F0aW9uLmh0bWwjZGF0ZS1mb3JtYXQtcGF0dGVybiIpOwoKICAgICAgdmFyIHRpbWVzdGFtcEZvcm1hdEhlbHAgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIHsKICAgICAgICBzaXplOiAieHMiCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgIGhyZWY6IGRvY3NVcmwsCiAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICB9LCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWwuZmlsZURhdGF2aXN1YWxpemVyLmVkaXRGbHlvdXQub3ZlcnJpZGVzLnRpbWVzdGFtcEZvcm1hdEhlbHBUZXh0JywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2VlIG1vcmUgb24gYWNjZXB0ZWQgZm9ybWF0cycKICAgICAgfSkpKTsKCiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm0sIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgIGVycm9yOiB0aGlzLmxpbmVzVG9TYW1wbGVFcnJvcnMsCiAgICAgICAgaXNJbnZhbGlkOiBsaW5lc1RvU2FtcGxlVmFsaWQgPT09IGZhbHNlLAogICAgICAgIGxhYmVsOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ4cGFjay5tbC5maWxlRGF0YXZpc3VhbGl6ZXIuZWRpdEZseW91dC5vdmVycmlkZXMubGluZXNUb1NhbXBsZUZvcm1Sb3dMYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIk51bWJlciBvZiBsaW5lcyB0byBzYW1wbGUiCiAgICAgICAgfSkKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZE51bWJlciwgewogICAgICAgIHZhbHVlOiBsaW5lc1RvU2FtcGxlLAogICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uTGluZXNUb1NhbXBsZUNoYW5nZSwKICAgICAgICBpc0ludmFsaWQ6IGxpbmVzVG9TYW1wbGVWYWxpZCA9PT0gZmFsc2UKICAgICAgfSkpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAieHBhY2subWwuZmlsZURhdGF2aXN1YWxpemVyLmVkaXRGbHlvdXQub3ZlcnJpZGVzLmRhdGFGb3JtYXRGb3JtUm93TGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJEYXRhIGZvcm1hdCIKICAgICAgICB9KQogICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbWJvQm94LCB7CiAgICAgICAgb3B0aW9uczogZm9ybWF0T3B0aW9ucywKICAgICAgICBzZWxlY3RlZE9wdGlvbnM6IHNlbGVjdGVkT3B0aW9uKGZvcm1hdCksCiAgICAgICAgb25DaGFuZ2U6IHRoaXMub25Gb3JtYXRDaGFuZ2UsCiAgICAgICAgc2luZ2xlU2VsZWN0aW9uOiB7CiAgICAgICAgICBhc1BsYWluVGV4dDogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgaXNDbGVhcmFibGU6IGZhbHNlCiAgICAgIH0pKSwgZm9ybWF0ID09PSAnZGVsaW1pdGVkJyAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgIGxhYmVsOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ4cGFjay5tbC5maWxlRGF0YXZpc3VhbGl6ZXIuZWRpdEZseW91dC5vdmVycmlkZXMuZGVsaW1pdGVyRm9ybVJvd0xhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRGVsaW1pdGVyIgogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ29tYm9Cb3gsIHsKICAgICAgICBvcHRpb25zOiBkZWxpbWl0ZXJPcHRpb25zLAogICAgICAgIHNlbGVjdGVkT3B0aW9uczogc2VsZWN0ZWRPcHRpb24oZGVsaW1pdGVyKSwKICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkRlbGltaXRlckNoYW5nZSwKICAgICAgICBzaW5nbGVTZWxlY3Rpb246IHsKICAgICAgICAgIGFzUGxhaW5UZXh0OiB0cnVlCiAgICAgICAgfSwKICAgICAgICBpc0NsZWFyYWJsZTogZmFsc2UKICAgICAgfSkpLCBkZWxpbWl0ZXIgPT09IF9vcHRpb25fbGlzdHMuQ1VTVE9NX0RST1BET1dOX09QVElPTiAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAieHBhY2subWwuZmlsZURhdGF2aXN1YWxpemVyLmVkaXRGbHlvdXQub3ZlcnJpZGVzLmN1c3RvbURlbGltaXRlckZvcm1Sb3dMYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkN1c3RvbSBkZWxpbWl0ZXIiCiAgICAgICAgfSkKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFRleHQsIHsKICAgICAgICB2YWx1ZTogY3VzdG9tRGVsaW1pdGVyLAogICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ3VzdG9tRGVsaW1pdGVyQ2hhbmdlCiAgICAgIH0pKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICAgICAgbGFiZWw6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogInhwYWNrLm1sLmZpbGVEYXRhdmlzdWFsaXplci5lZGl0Rmx5b3V0Lm92ZXJyaWRlcy5xdW90ZUNoYXJhY3RlckZvcm1Sb3dMYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlF1b3RlIGNoYXJhY3RlciIKICAgICAgICB9KQogICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbWJvQm94LCB7CiAgICAgICAgb3B0aW9uczogcXVvdGVPcHRpb25zLAogICAgICAgIHNlbGVjdGVkT3B0aW9uczogc2VsZWN0ZWRPcHRpb24ocXVvdGUpLAogICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uUXVvdGVDaGFuZ2UsCiAgICAgICAgc2luZ2xlU2VsZWN0aW9uOiB7CiAgICAgICAgICBhc1BsYWluVGV4dDogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgaXNDbGVhcmFibGU6IGZhbHNlCiAgICAgIH0pKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNoZWNrYm94LCB7CiAgICAgICAgaWQ6ICdoYXNIZWFkZXJSb3cnLAogICAgICAgIGxhYmVsOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ4cGFjay5tbC5maWxlRGF0YXZpc3VhbGl6ZXIuZWRpdEZseW91dC5vdmVycmlkZXMuaGFzSGVhZGVyUm93TGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJIYXMgaGVhZGVyIHJvdyIKICAgICAgICB9KSwKICAgICAgICBjaGVja2VkOiBoYXNIZWFkZXJSb3csCiAgICAgICAgb25DaGFuZ2U6IHRoaXMub25IYXNIZWFkZXJSb3dDaGFuZ2UKICAgICAgfSkpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ2hlY2tib3gsIHsKICAgICAgICBpZDogJ3Nob3VsZFRyaW1GaWVsZHMnLAogICAgICAgIGxhYmVsOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ4cGFjay5tbC5maWxlRGF0YXZpc3VhbGl6ZXIuZWRpdEZseW91dC5vdmVycmlkZXMudHJpbUZpZWxkc0xhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiU2hvdWxkIHRyaW0gZmllbGRzIgogICAgICAgIH0pLAogICAgICAgIGNoZWNrZWQ6IHNob3VsZFRyaW1GaWVsZHMsCiAgICAgICAgb25DaGFuZ2U6IHRoaXMub25TaG91bGRUcmltRmllbGRzQ2hhbmdlCiAgICAgIH0pKSksIGZvcm1hdCA9PT0gJ3NlbWlfc3RydWN0dXJlZF90ZXh0JyAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgIGxhYmVsOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ4cGFjay5tbC5maWxlRGF0YXZpc3VhbGl6ZXIuZWRpdEZseW91dC5vdmVycmlkZXMuZ3Jva1BhdHRlcm5Gb3JtUm93TGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJHcm9rIHBhdHRlcm4iCiAgICAgICAgfSkKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0QXJlYSwgewogICAgICAgIHBsYWNlaG9sZGVyOiBncm9rUGF0dGVybiwKICAgICAgICB2YWx1ZTogZ3Jva1BhdHRlcm4sCiAgICAgICAgb25DaGFuZ2U6IHRoaXMuZ3Jva1BhdHRlcm5DaGFuZ2UKICAgICAgfSkpKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICAgICAgaGVscFRleHQ6IHRpbWVzdGFtcEZvcm1hdEhlbHAsCiAgICAgICAgbGFiZWw6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogInhwYWNrLm1sLmZpbGVEYXRhdmlzdWFsaXplci5lZGl0Rmx5b3V0Lm92ZXJyaWRlcy50aW1lc3RhbXBGb3JtYXRGb3JtUm93TGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJUaW1lc3RhbXAgZm9ybWF0IgogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ29tYm9Cb3gsIHsKICAgICAgICBvcHRpb25zOiB0aW1lc3RhbXBGb3JtYXRPcHRpb25zLAogICAgICAgIHNlbGVjdGVkT3B0aW9uczogc2VsZWN0ZWRPcHRpb24odGltZXN0YW1wRm9ybWF0KSwKICAgICAgICBvbkNoYW5nZTogdGhpcy5vblRpbWVzdGFtcEZvcm1hdENoYW5nZSwKICAgICAgICBzaW5nbGVTZWxlY3Rpb246IHsKICAgICAgICAgIGFzUGxhaW5UZXh0OiB0cnVlCiAgICAgICAgfSwKICAgICAgICBpc0NsZWFyYWJsZTogZmFsc2UKICAgICAgfSkpLCB0aW1lc3RhbXBGb3JtYXQgPT09IF9vcHRpb25fbGlzdHMuQ1VTVE9NX0RST1BET1dOX09QVElPTiAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBlcnJvcjogdGltZXN0YW1wRm9ybWF0RXJyb3JzTGlzdCwKICAgICAgICBpc0ludmFsaWQ6IHRpbWVzdGFtcEZvcm1hdFZhbGlkID09PSBmYWxzZSwKICAgICAgICBsYWJlbDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAieHBhY2subWwuZmlsZURhdGF2aXN1YWxpemVyLmVkaXRGbHlvdXQub3ZlcnJpZGVzLmN1c3RvbVRpbWVzdGFtcEZvcm1hdEZvcm1Sb3dMYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkN1c3RvbSB0aW1lc3RhbXAgZm9ybWF0IgogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmllbGRUZXh0LCB7CiAgICAgICAgdmFsdWU6IGN1c3RvbVRpbWVzdGFtcEZvcm1hdCwKICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkN1c3RvbVRpbWVzdGFtcEZvcm1hdENoYW5nZSwKICAgICAgICBpc0ludmFsaWQ6IHRpbWVzdGFtcEZvcm1hdFZhbGlkID09PSBmYWxzZQogICAgICB9KSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgIGxhYmVsOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ4cGFjay5tbC5maWxlRGF0YXZpc3VhbGl6ZXIuZWRpdEZseW91dC5vdmVycmlkZXMudGltZUZpZWxkRm9ybVJvd0xhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVGltZSBmaWVsZCIKICAgICAgICB9KQogICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbWJvQm94LCB7CiAgICAgICAgb3B0aW9uczogZmllbGRPcHRpb25zLAogICAgICAgIHNlbGVjdGVkT3B0aW9uczogc2VsZWN0ZWRPcHRpb24odGltZXN0YW1wRmllbGQpLAogICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uVGltZXN0YW1wRmllbGRDaGFuZ2UsCiAgICAgICAgc2luZ2xlU2VsZWN0aW9uOiB7CiAgICAgICAgICBhc1BsYWluVGV4dDogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgaXNDbGVhcmFibGU6IGZhbHNlCiAgICAgIH0pKSwgZm9ybWF0ID09PSAnZGVsaW1pdGVkJyAmJiBvcmlnaW5hbENvbHVtbk5hbWVzLmxlbmd0aCA+IDAgJiYgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgbnVsbCksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgICBzaXplOiAicyIKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgzIiwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLm1sLmZpbGVEYXRhdmlzdWFsaXplci5lZGl0Rmx5b3V0Lm92ZXJyaWRlcy5lZGl0RmllbGROYW1lc1RpdGxlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkVkaXQgZmllbGQgbmFtZXMiCiAgICAgIH0pKSksIG9yaWdpbmFsQ29sdW1uTmFtZXMubWFwKGZ1bmN0aW9uIChmLCBpKSB7CiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgICAgbGFiZWw6IGYsCiAgICAgICAgICBrZXk6IGYKICAgICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZpZWxkVGV4dCwgewogICAgICAgICAgdmFsdWU6IGNvbHVtbk5hbWVzW2ldLAogICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5vbkNvbHVtbk5hbWVDaGFuZ2UoZSwgaSk7CiAgICAgICAgICB9CiAgICAgICAgfSkpOwogICAgICB9KSkpOwogICAgfQogIH1dLCBbewogICAga2V5OiAiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7CiAgICAgIHZhciBvcmlnaW5hbFNldHRpbmdzID0gcHJvcHMub3JpZ2luYWxTZXR0aW5nczsKICAgICAgdmFyIF9wcm9wcyRvdmVycmlkZXMgPSBwcm9wcy5vdmVycmlkZXMsCiAgICAgICAgICBjaGFyc2V0ID0gX3Byb3BzJG92ZXJyaWRlcy5jaGFyc2V0LAogICAgICAgICAgZm9ybWF0ID0gX3Byb3BzJG92ZXJyaWRlcy5mb3JtYXQsCiAgICAgICAgICBoYXNIZWFkZXJSb3cgPSBfcHJvcHMkb3ZlcnJpZGVzLmhhc0hlYWRlclJvdywKICAgICAgICAgIGNvbHVtbk5hbWVzID0gX3Byb3BzJG92ZXJyaWRlcy5jb2x1bW5OYW1lcywKICAgICAgICAgIGRlbGltaXRlciA9IF9wcm9wcyRvdmVycmlkZXMuZGVsaW1pdGVyLAogICAgICAgICAgcXVvdGUgPSBfcHJvcHMkb3ZlcnJpZGVzLnF1b3RlLAogICAgICAgICAgc2hvdWxkVHJpbUZpZWxkcyA9IF9wcm9wcyRvdmVycmlkZXMuc2hvdWxkVHJpbUZpZWxkcywKICAgICAgICAgIGdyb2tQYXR0ZXJuID0gX3Byb3BzJG92ZXJyaWRlcy5ncm9rUGF0dGVybiwKICAgICAgICAgIHRpbWVzdGFtcEZpZWxkID0gX3Byb3BzJG92ZXJyaWRlcy50aW1lc3RhbXBGaWVsZCwKICAgICAgICAgIHRpbWVzdGFtcEZvcm1hdCA9IF9wcm9wcyRvdmVycmlkZXMudGltZXN0YW1wRm9ybWF0LAogICAgICAgICAgbGluZXNUb1NhbXBsZSA9IF9wcm9wcyRvdmVycmlkZXMubGluZXNUb1NhbXBsZTsKCiAgICAgIHZhciBfY29udmVydERlbGltaXRlciA9IGNvbnZlcnREZWxpbWl0ZXIoZGVsaW1pdGVyID09PSB1bmRlZmluZWQgPyBvcmlnaW5hbFNldHRpbmdzLmRlbGltaXRlciA6IGRlbGltaXRlciksCiAgICAgICAgICBkID0gX2NvbnZlcnREZWxpbWl0ZXIuZGVsaW1pdGVyLAogICAgICAgICAgY3VzdG9tRCA9IF9jb252ZXJ0RGVsaW1pdGVyLmN1c3RvbURlbGltaXRlcjsKCiAgICAgIHZhciBfZ2V0Q29sdW1uTmFtZXMgPSBnZXRDb2x1bW5OYW1lcyhjb2x1bW5OYW1lcywgb3JpZ2luYWxTZXR0aW5ncyksCiAgICAgICAgICBuZXdDb2x1bW5OYW1lcyA9IF9nZXRDb2x1bW5OYW1lcy5uZXdDb2x1bW5OYW1lcywKICAgICAgICAgIG9yaWdpbmFsQ29sdW1uTmFtZXMgPSBfZ2V0Q29sdW1uTmFtZXMub3JpZ2luYWxDb2x1bW5OYW1lczsKCiAgICAgIHZhciBvdmVycmlkZXMgPSB7CiAgICAgICAgY2hhcnNldDogY2hhcnNldCA9PT0gdW5kZWZpbmVkID8gb3JpZ2luYWxTZXR0aW5ncy5jaGFyc2V0IDogY2hhcnNldCwKICAgICAgICBmb3JtYXQ6IGZvcm1hdCA9PT0gdW5kZWZpbmVkID8gb3JpZ2luYWxTZXR0aW5ncy5mb3JtYXQgOiBmb3JtYXQsCiAgICAgICAgaGFzSGVhZGVyUm93OiBoYXNIZWFkZXJSb3cgPT09IHVuZGVmaW5lZCA/IG9yaWdpbmFsU2V0dGluZ3MuaGFzSGVhZGVyUm93IDogaGFzSGVhZGVyUm93LAogICAgICAgIGNvbHVtbk5hbWVzOiBuZXdDb2x1bW5OYW1lcywKICAgICAgICBkZWxpbWl0ZXI6IGQsCiAgICAgICAgcXVvdGU6IHF1b3RlID09PSB1bmRlZmluZWQgPyBvcmlnaW5hbFNldHRpbmdzLnF1b3RlIDogcXVvdGUsCiAgICAgICAgc2hvdWxkVHJpbUZpZWxkczogc2hvdWxkVHJpbUZpZWxkcyA9PT0gdW5kZWZpbmVkID8gb3JpZ2luYWxTZXR0aW5ncy5zaG91bGRUcmltRmllbGRzIDogc2hvdWxkVHJpbUZpZWxkcywKICAgICAgICBncm9rUGF0dGVybjogZ3Jva1BhdHRlcm4gPT09IHVuZGVmaW5lZCA/IG9yaWdpbmFsU2V0dGluZ3MuZ3Jva1BhdHRlcm4gOiBncm9rUGF0dGVybiwKICAgICAgICB0aW1lc3RhbXBGb3JtYXQ6IHRpbWVzdGFtcEZvcm1hdCA9PT0gdW5kZWZpbmVkID8gb3JpZ2luYWxTZXR0aW5ncy50aW1lc3RhbXBGb3JtYXQgOiB0aW1lc3RhbXBGb3JtYXQsCiAgICAgICAgdGltZXN0YW1wRmllbGQ6IHRpbWVzdGFtcEZpZWxkID09PSB1bmRlZmluZWQgPyBvcmlnaW5hbFNldHRpbmdzLnRpbWVzdGFtcEZpZWxkIDogdGltZXN0YW1wRmllbGQsCiAgICAgICAgbGluZXNUb1NhbXBsZTogbGluZXNUb1NhbXBsZSA9PT0gdW5kZWZpbmVkID8gb3JpZ2luYWxTZXR0aW5ncy5saW5lc1RvU2FtcGxlIDogK2xpbmVzVG9TYW1wbGUKICAgICAgfTsKICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoewogICAgICAgIG9yaWdpbmFsQ29sdW1uTmFtZXM6IG9yaWdpbmFsQ29sdW1uTmFtZXMsCiAgICAgICAgY3VzdG9tRGVsaW1pdGVyOiBjdXN0b21EID09PSB1bmRlZmluZWQgPyAnJyA6IGN1c3RvbUQsCiAgICAgICAgY3VzdG9tVGltZXN0YW1wRm9ybWF0OiAnJywKICAgICAgICBsaW5lc1RvU2FtcGxlVmFsaWQ6IHRydWUsCiAgICAgICAgdGltZXN0YW1wRm9ybWF0VmFsaWQ6IHRydWUsCiAgICAgICAgdGltZXN0YW1wRm9ybWF0RXJyb3I6IG51bGwsCiAgICAgICAgb3ZlcnJpZGVzOiBvdmVycmlkZXMKICAgICAgfSwgc3RhdGUpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIE92ZXJyaWRlczsKfShfcmVhY3QyLkNvbXBvbmVudCk7CgpleHBvcnRzLk92ZXJyaWRlcyA9IE92ZXJyaWRlczsKCmZ1bmN0aW9uIHNlbGVjdGVkT3B0aW9uKG9wdCkgewogIHJldHVybiBbewogICAgbGFiZWw6IG9wdCB8fCAnJwogIH1dOwp9IC8vIHJldHVybiBhIGxpc3Qgb2Ygb2JqZWN0cyBjb21wYXRpYmxlIHdpdGggRXVpQ29tYm9Cb3gKLy8gYWxzbyBzb3J0IGFscGhhbnVtZXJpY2FsbHkKCgpmdW5jdGlvbiBnZXRTb3J0ZWRGaWVsZHMoZmllbGRzKSB7CiAgcmV0dXJuIGZpZWxkcy5tYXAoZnVuY3Rpb24gKGYpIHsKICAgIHJldHVybiB7CiAgICAgIGxhYmVsOiBmCiAgICB9OwogIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgIHJldHVybiBhLmxhYmVsLmxvY2FsZUNvbXBhcmUoYi5sYWJlbCwgdW5kZWZpbmVkLCB7CiAgICAgIG51bWVyaWM6IHRydWUKICAgIH0pOwogIH0pOwp9IC8vIFNvbWUgZGVsaW1pdGVyIGNoYXJhY3RlcnMgY2Fubm90IGJlIHVzZWQgYXMgaXRlbXMgaW4gc2VsZWN0IGxpc3QuCi8vIHNvIHNob3cgYSB0ZXh0dWFsIGRlc2NyaXB0aW9uIG9mIHRoZSBjaGFyYWN0ZXIgaW5zdGVhZC4KCgpmdW5jdGlvbiBjb252ZXJ0RGVsaW1pdGVyKGQpIHsKICBzd2l0Y2ggKGQpIHsKICAgIGNhc2UgJywnOgogICAgICByZXR1cm4gewogICAgICAgIGRlbGltaXRlcjogJ2NvbW1hJwogICAgICB9OwoKICAgIGNhc2UgJ1x0JzoKICAgICAgcmV0dXJuIHsKICAgICAgICBkZWxpbWl0ZXI6ICd0YWInCiAgICAgIH07CgogICAgY2FzZSAnOyc6CiAgICAgIHJldHVybiB7CiAgICAgICAgZGVsaW1pdGVyOiAnc2VtaWNvbG9uJwogICAgICB9OwoKICAgIGNhc2UgJ3wnOgogICAgICByZXR1cm4gewogICAgICAgIGRlbGltaXRlcjogJ3BpcGUnCiAgICAgIH07CgogICAgY2FzZSAnICc6CiAgICAgIHJldHVybiB7CiAgICAgICAgZGVsaW1pdGVyOiAnc3BhY2UnCiAgICAgIH07CgogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIHsKICAgICAgICBkZWxpbWl0ZXI6IF9vcHRpb25fbGlzdHMuQ1VTVE9NX0RST1BET1dOX09QVElPTiwKICAgICAgICBjdXN0b21EZWxpbWl0ZXI6IGQKICAgICAgfTsKICB9Cn0gLy8gQ29udmVydCB0aGUgZGVsaW1pdGVyIHRleHR1YWwgZGVzY3JpcHRpb25zIGJhY2sgdG8gdGhlaXIgcmVhbCBjaGFyYWN0ZXJzLgoKCmZ1bmN0aW9uIGNvbnZlcnREZWxpbWl0ZXJCYWNrKGRlbGltaXRlciwgY3VzdG9tRGVsaW1pdGVyKSB7CiAgc3dpdGNoIChkZWxpbWl0ZXIpIHsKICAgIGNhc2UgJ2NvbW1hJzoKICAgICAgcmV0dXJuICcsJzsKCiAgICBjYXNlICd0YWInOgogICAgICByZXR1cm4gJ1x0JzsKCiAgICBjYXNlICdzZW1pY29sb24nOgogICAgICByZXR1cm4gJzsnOwoKICAgIGNhc2UgJ3BpcGUnOgogICAgICByZXR1cm4gJ3wnOwoKICAgIGNhc2UgJ3NwYWNlJzoKICAgICAgcmV0dXJuICcgJzsKCiAgICBjYXNlIF9vcHRpb25fbGlzdHMuQ1VTVE9NX0RST1BET1dOX09QVElPTjoKICAgICAgcmV0dXJuIGN1c3RvbURlbGltaXRlcjsKCiAgICBkZWZhdWx0OgogICAgICByZXR1cm4gdW5kZWZpbmVkOwogIH0KfQoKZnVuY3Rpb24gZ2V0Q29sdW1uTmFtZXMoY29sdW1uTmFtZXMsIG9yaWdpbmFsU2V0dGluZ3MpIHsKICB2YXIgbmV3Q29sdW1uTmFtZXMgPSBjb2x1bW5OYW1lcyA9PT0gdW5kZWZpbmVkICYmIG9yaWdpbmFsU2V0dGluZ3MuY29sdW1uTmFtZXMgIT09IHVuZGVmaW5lZCA/IF90b0NvbnN1bWFibGVBcnJheShvcmlnaW5hbFNldHRpbmdzLmNvbHVtbk5hbWVzKSA6IGNvbHVtbk5hbWVzOwogIHZhciBvcmlnaW5hbENvbHVtbk5hbWVzID0gbmV3Q29sdW1uTmFtZXMgIT09IHVuZGVmaW5lZCA/IF90b0NvbnN1bWFibGVBcnJheShuZXdDb2x1bW5OYW1lcykgOiBbXTsKICByZXR1cm4gewogICAgbmV3Q29sdW1uTmFtZXM6IG5ld0NvbHVtbk5hbWVzLAogICAgb3JpZ2luYWxDb2x1bW5OYW1lczogb3JpZ2luYWxDb2x1bW5OYW1lcwogIH07Cn0KCmZ1bmN0aW9uIGlzTGluZXNUb1NhbXBsZVZhbGlkKGxpbmVzVG9TYW1wbGUpIHsKICByZXR1cm4gbGluZXNUb1NhbXBsZSA+IExJTkVTX1RPX1NBTVBMRV9WQUxVRV9NSU4gJiYgbGluZXNUb1NhbXBsZSA8PSBMSU5FU19UT19TQU1QTEVfVkFMVUVfTUFYOwp9"},null]}