{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/layers/styles/color_utils.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/layers/styles/color_utils.js","mtime":1585205045357},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmdldFJHQkNvbG9yUmFuZ2VTdHJpbmdzID0gZ2V0UkdCQ29sb3JSYW5nZVN0cmluZ3M7CmV4cG9ydHMuZ2V0SGV4Q29sb3JSYW5nZVN0cmluZ3MgPSBnZXRIZXhDb2xvclJhbmdlU3RyaW5nczsKZXhwb3J0cy5nZXRDb2xvclJhbXBDZW50ZXJDb2xvciA9IGdldENvbG9yUmFtcENlbnRlckNvbG9yOwpleHBvcnRzLmdldE9yZGluYWxDb2xvclJhbXBTdG9wcyA9IGdldE9yZGluYWxDb2xvclJhbXBTdG9wczsKZXhwb3J0cy5nZXRMaW5lYXJHcmFkaWVudCA9IGdldExpbmVhckdyYWRpZW50OwpleHBvcnRzLmdldENvbG9yUGFsZXR0ZSA9IGdldENvbG9yUGFsZXR0ZTsKZXhwb3J0cy5DT0xPUl9QQUxFVFRFUyA9IGV4cG9ydHMuQ09MT1JfUkFNUF9OQU1FUyA9IGV4cG9ydHMuQ09MT1JfR1JBRElFTlRTID0gZXhwb3J0cy5ERUZBVUxUX0xJTkVfQ09MT1JTID0gZXhwb3J0cy5ERUZBVUxUX0ZJTExfQ09MT1JTID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2NvbG9ybWFwcyA9IHJlcXVpcmUoInVpL3Zpc2xpYi9jb21wb25lbnRzL2NvbG9yL2NvbG9ybWFwcyIpOwoKdmFyIF9jb2xvcl91dGlsID0gcmVxdWlyZSgidWkvdmlzL21hcC9jb2xvcl91dGlsIik7Cgp2YXIgX2NvbG9yX2dyYWRpZW50ID0gcmVxdWlyZSgiLi9jb21wb25lbnRzL2NvbG9yX2dyYWRpZW50Iik7Cgp2YXIgX3NlcnZpY2VzID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpL2xpYi9zZXJ2aWNlcyIpOwoKdmFyIF90aW55Y29sb3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInRpbnljb2xvcjIiKSk7Cgp2YXIgX2Nocm9tYUpzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJjaHJvbWEtanMiKSk7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbW1vbi9jb25zdGFudHMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9Cgp2YXIgR1JBRElFTlRfSU5URVJWQUxTID0gODsKdmFyIERFRkFVTFRfRklMTF9DT0xPUlMgPSAoMCwgX3NlcnZpY2VzLmV1aVBhbGV0dGVDb2xvckJsaW5kKSgpOwpleHBvcnRzLkRFRkFVTFRfRklMTF9DT0xPUlMgPSBERUZBVUxUX0ZJTExfQ09MT1JTOwp2YXIgREVGQVVMVF9MSU5FX0NPTE9SUyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoREVGQVVMVF9GSUxMX0NPTE9SUy5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7CiAgcmV0dXJuICgwLCBfdGlueWNvbG9yLmRlZmF1bHQpKGNvbG9yKS5kYXJrZW4oKS50b0hleFN0cmluZygpOwp9KSksIFsvLyBFeHBsaWNpdGx5IGFkZCBibGFjayAmIHdoaXRlIGFzIGJvcmRlciBjb2xvciBvcHRpb25zCicjMDAwJywgJyNGRkYnXSk7CmV4cG9ydHMuREVGQVVMVF9MSU5FX0NPTE9SUyA9IERFRkFVTFRfTElORV9DT0xPUlM7CgpmdW5jdGlvbiBnZXRDb2xvclJhbXAoY29sb3JSYW1wTmFtZSkgewogIHZhciBjb2xvclJhbXAgPSBfY29sb3JtYXBzLnZpc2xpYkNvbG9yTWFwc1tjb2xvclJhbXBOYW1lXTsKCiAgaWYgKCFjb2xvclJhbXApIHsKICAgIHRocm93IG5ldyBFcnJvcigiIi5jb25jYXQoY29sb3JSYW1wTmFtZSwgIiBub3QgZm91bmQuIEV4cGVjdGVkIG9uZSBvZiBmb2xsb3dpbmcgdmFsdWVzOiAiKS5jb25jYXQoT2JqZWN0LmtleXMoX2NvbG9ybWFwcy52aXNsaWJDb2xvck1hcHMpKSk7CiAgfQoKICByZXR1cm4gY29sb3JSYW1wOwp9CgpmdW5jdGlvbiBnZXRSR0JDb2xvclJhbmdlU3RyaW5ncyhjb2xvclJhbXBOYW1lKSB7CiAgdmFyIG51bWJlckNvbG9ycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogR1JBRElFTlRfSU5URVJWQUxTOwogIHZhciBjb2xvclJhbXAgPSBnZXRDb2xvclJhbXAoY29sb3JSYW1wTmFtZSk7CiAgcmV0dXJuICgwLCBfY29sb3JfdXRpbC5nZXRMZWdlbmRDb2xvcnMpKGNvbG9yUmFtcC52YWx1ZSwgbnVtYmVyQ29sb3JzKTsKfQoKZnVuY3Rpb24gZ2V0SGV4Q29sb3JSYW5nZVN0cmluZ3MoY29sb3JSYW1wTmFtZSkgewogIHZhciBudW1iZXJDb2xvcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IEdSQURJRU5UX0lOVEVSVkFMUzsKICByZXR1cm4gZ2V0UkdCQ29sb3JSYW5nZVN0cmluZ3MoY29sb3JSYW1wTmFtZSwgbnVtYmVyQ29sb3JzKS5tYXAoZnVuY3Rpb24gKHJnYkNvbG9yKSB7CiAgICByZXR1cm4gKDAsIF9jaHJvbWFKcy5kZWZhdWx0KShyZ2JDb2xvcikuaGV4KCk7CiAgfSk7Cn0KCmZ1bmN0aW9uIGdldENvbG9yUmFtcENlbnRlckNvbG9yKGNvbG9yUmFtcE5hbWUpIHsKICBpZiAoIWNvbG9yUmFtcE5hbWUpIHsKICAgIHJldHVybiBudWxsOwogIH0KCiAgdmFyIGNvbG9yUmFtcCA9IGdldENvbG9yUmFtcChjb2xvclJhbXBOYW1lKTsKICB2YXIgY2VudGVySW5kZXggPSBNYXRoLmZsb29yKGNvbG9yUmFtcC52YWx1ZS5sZW5ndGggLyAyKTsKICByZXR1cm4gKDAsIF9jb2xvcl91dGlsLmdldENvbG9yKShjb2xvclJhbXAudmFsdWUsIGNlbnRlckluZGV4KTsKfSAvLyBSZXR1cm5zIGFuIGFycmF5IG9mIGNvbG9yIHN0b3BzCi8vIFsgc3RvcF9pbnB1dF8xOiBudW1iZXIsIHN0b3Bfb3V0cHV0XzE6IGNvbG9yLCBzdG9wX2lucHV0X246IG51bWJlciwgc3RvcF9vdXRwdXRfbjogY29sb3IgXQoKCmZ1bmN0aW9uIGdldE9yZGluYWxDb2xvclJhbXBTdG9wcyhjb2xvclJhbXBOYW1lKSB7CiAgdmFyIG51bWJlckNvbG9ycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogR1JBRElFTlRfSU5URVJWQUxTOwoKICBpZiAoIWNvbG9yUmFtcE5hbWUpIHsKICAgIHJldHVybiBudWxsOwogIH0KCiAgcmV0dXJuIGdldEhleENvbG9yUmFuZ2VTdHJpbmdzKGNvbG9yUmFtcE5hbWUsIG51bWJlckNvbG9ycykucmVkdWNlKGZ1bmN0aW9uIChhY2N1LCBzdG9wQ29sb3IsIGlkeCwgc3JjQXJyKSB7CiAgICB2YXIgc3RvcE51bWJlciA9IGlkeCAvIHNyY0Fyci5sZW5ndGg7IC8vIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEsIGluY3JlYXNpbmcgYXMgaW5kZXggaW5jcmVhc2VzCgogICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYWNjdSksIFtzdG9wTnVtYmVyLCBzdG9wQ29sb3JdKTsKICB9LCBbXSk7Cn0KCnZhciBDT0xPUl9HUkFESUVOVFMgPSBPYmplY3Qua2V5cyhfY29sb3JtYXBzLnZpc2xpYkNvbG9yTWFwcykubWFwKGZ1bmN0aW9uIChjb2xvclJhbXBOYW1lKSB7CiAgcmV0dXJuIHsKICAgIHZhbHVlOiBjb2xvclJhbXBOYW1lLAogICAgaW5wdXREaXNwbGF5OiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb2xvcl9ncmFkaWVudC5Db2xvckdyYWRpZW50LCB7CiAgICAgIGNvbG9yUmFtcE5hbWU6IGNvbG9yUmFtcE5hbWUKICAgIH0pCiAgfTsKfSk7CmV4cG9ydHMuQ09MT1JfR1JBRElFTlRTID0gQ09MT1JfR1JBRElFTlRTOwp2YXIgQ09MT1JfUkFNUF9OQU1FUyA9IE9iamVjdC5rZXlzKF9jb2xvcm1hcHMudmlzbGliQ29sb3JNYXBzKTsKZXhwb3J0cy5DT0xPUl9SQU1QX05BTUVTID0gQ09MT1JfUkFNUF9OQU1FUzsKCmZ1bmN0aW9uIGdldExpbmVhckdyYWRpZW50KGNvbG9yU3RyaW5ncykgewogIHZhciBpbnRlcnZhbHMgPSBjb2xvclN0cmluZ3MubGVuZ3RoOwogIHZhciBsaW5lYXJHcmFkaWVudCA9ICJsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICIuY29uY2F0KGNvbG9yU3RyaW5nc1swXSwgIiAwJSwiKTsKCiAgZm9yICh2YXIgaSA9IDE7IGkgPCBpbnRlcnZhbHMgLSAxOyBpKyspIHsKICAgIGxpbmVhckdyYWRpZW50ID0gIiIuY29uY2F0KGxpbmVhckdyYWRpZW50LCAiICIpLmNvbmNhdChjb2xvclN0cmluZ3NbaV0sICIgICAgICAgIikuY29uY2F0KE1hdGguZmxvb3IoMTAwICogaSAvIChpbnRlcnZhbHMgLSAxKSksICIlLCIpOwogIH0KCiAgcmV0dXJuICIiLmNvbmNhdChsaW5lYXJHcmFkaWVudCwgIiAiKS5jb25jYXQoY29sb3JTdHJpbmdzW2NvbG9yU3RyaW5ncy5sZW5ndGggLSAxXSwgIiAxMDAlKSIpOwp9Cgp2YXIgQ09MT1JfUEFMRVRURVNfQ09ORklHUyA9IFt7CiAgaWQ6ICdwYWxldHRlXzAnLAogIGNvbG9yczogREVGQVVMVF9GSUxMX0NPTE9SUy5zbGljZSgwLCBfY29uc3RhbnRzLkNPTE9SX1BBTEVUVEVfTUFYX1NJWkUpCn1dOwoKZnVuY3Rpb24gZ2V0Q29sb3JQYWxldHRlKHBhbGV0dGVJZCkgewogIHZhciBwYWxldHRlID0gQ09MT1JfUEFMRVRURVNfQ09ORklHUy5maW5kKGZ1bmN0aW9uIChwYWxldHRlKSB7CiAgICByZXR1cm4gcGFsZXR0ZS5pZCA9PT0gcGFsZXR0ZUlkOwogIH0pOwogIHJldHVybiBwYWxldHRlID8gcGFsZXR0ZS5jb2xvcnMgOiBudWxsOwp9Cgp2YXIgQ09MT1JfUEFMRVRURVMgPSBDT0xPUl9QQUxFVFRFU19DT05GSUdTLm1hcChmdW5jdGlvbiAocGFsZXR0ZSkgewogIHZhciBwYWxldHRlRGlzcGxheSA9IHBhbGV0dGUuY29sb3JzLm1hcChmdW5jdGlvbiAoY29sb3IpIHsKICAgIHZhciBzdHlsZSA9IHsKICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvciwKICAgICAgd2lkdGg6ICcxMCUnLAogICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJywKICAgICAgaGVpZ2h0OiAnMTAwJScsCiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snCiAgICB9OwogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgc3R5bGU6IHN0eWxlLAogICAgICBrZXk6IGNvbG9yCiAgICB9LCAiXHhBMCIpOwogIH0pOwogIHJldHVybiB7CiAgICB2YWx1ZTogcGFsZXR0ZS5pZCwKICAgIGlucHV0RGlzcGxheTogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICBjbGFzc05hbWU6ICdtYXBDb2xvckdyYWRpZW50JwogICAgfSwgcGFsZXR0ZURpc3BsYXkpCiAgfTsKfSk7CmV4cG9ydHMuQ09MT1JfUEFMRVRURVMgPSBDT0xPUl9QQUxFVFRFUzs="},null]}