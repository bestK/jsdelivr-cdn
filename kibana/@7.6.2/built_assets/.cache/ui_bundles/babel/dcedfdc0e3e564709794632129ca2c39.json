{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/vis/vis_types/vislib_vis_legend/vislib_vis_legend_item.js","dependencies":[{"path":"src/legacy/ui/public/vis/vis_types/vislib_vis_legend/vislib_vis_legend_item.js","mtime":1585205041315},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}