{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/lens/public/indexpattern_plugin/operations/definitions/metrics.js","dependencies":[{"path":"x-pack/legacy/plugins/lens/public/indexpattern_plugin/operations/definitions/metrics.js","mtime":1585205045033},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnN1bU9wZXJhdGlvbiA9IGV4cG9ydHMuYXZlcmFnZU9wZXJhdGlvbiA9IGV4cG9ydHMubWF4T3BlcmF0aW9uID0gZXhwb3J0cy5taW5PcGVyYXRpb24gPSB2b2lkIDA7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBidWlsZE1ldHJpY09wZXJhdGlvbihfcmVmKSB7CiAgdmFyIHR5cGUgPSBfcmVmLnR5cGUsCiAgICAgIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSwKICAgICAgb2ZOYW1lID0gX3JlZi5vZk5hbWUsCiAgICAgIHByaW9yaXR5ID0gX3JlZi5wcmlvcml0eTsKICByZXR1cm4gewogICAgdHlwZTogdHlwZSwKICAgIHByaW9yaXR5OiBwcmlvcml0eSwKICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSwKICAgIGdldFBvc3NpYmxlT3BlcmF0aW9uRm9yRmllbGQ6IGZ1bmN0aW9uIGdldFBvc3NpYmxlT3BlcmF0aW9uRm9yRmllbGQoX3JlZjIpIHsKICAgICAgdmFyIGFnZ3JlZ2F0aW9uUmVzdHJpY3Rpb25zID0gX3JlZjIuYWdncmVnYXRpb25SZXN0cmljdGlvbnMsCiAgICAgICAgICBhZ2dyZWdhdGFibGUgPSBfcmVmMi5hZ2dyZWdhdGFibGUsCiAgICAgICAgICBmaWVsZFR5cGUgPSBfcmVmMi50eXBlOwoKICAgICAgaWYgKGZpZWxkVHlwZSA9PT0gJ251bWJlcicgJiYgYWdncmVnYXRhYmxlICYmICghYWdncmVnYXRpb25SZXN0cmljdGlvbnMgfHwgYWdncmVnYXRpb25SZXN0cmljdGlvbnNbdHlwZV0pKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGRhdGFUeXBlOiAnbnVtYmVyJywKICAgICAgICAgIGlzQnVja2V0ZWQ6IGZhbHNlLAogICAgICAgICAgc2NhbGU6ICdyYXRpbycKICAgICAgICB9OwogICAgICB9CiAgICB9LAogICAgaXNUcmFuc2ZlcmFibGU6IGZ1bmN0aW9uIGlzVHJhbnNmZXJhYmxlKGNvbHVtbiwgbmV3SW5kZXhQYXR0ZXJuKSB7CiAgICAgIHZhciBuZXdGaWVsZCA9IG5ld0luZGV4UGF0dGVybi5maWVsZHMuZmluZChmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgICByZXR1cm4gZmllbGQubmFtZSA9PT0gY29sdW1uLnNvdXJjZUZpZWxkOwogICAgICB9KTsKICAgICAgcmV0dXJuIEJvb2xlYW4obmV3RmllbGQgJiYgbmV3RmllbGQudHlwZSA9PT0gJ251bWJlcicgJiYgbmV3RmllbGQuYWdncmVnYXRhYmxlICYmICghbmV3RmllbGQuYWdncmVnYXRpb25SZXN0cmljdGlvbnMgfHwgbmV3RmllbGQuYWdncmVnYXRpb25SZXN0cmljdGlvbnNbdHlwZV0pKTsKICAgIH0sCiAgICBidWlsZENvbHVtbjogZnVuY3Rpb24gYnVpbGRDb2x1bW4oX3JlZjMpIHsKICAgICAgdmFyIHN1Z2dlc3RlZFByaW9yaXR5ID0gX3JlZjMuc3VnZ2VzdGVkUHJpb3JpdHksCiAgICAgICAgICBmaWVsZCA9IF9yZWYzLmZpZWxkOwogICAgICByZXR1cm4gewogICAgICAgIGxhYmVsOiBvZk5hbWUoZmllbGQubmFtZSksCiAgICAgICAgZGF0YVR5cGU6ICdudW1iZXInLAogICAgICAgIG9wZXJhdGlvblR5cGU6IHR5cGUsCiAgICAgICAgc3VnZ2VzdGVkUHJpb3JpdHk6IHN1Z2dlc3RlZFByaW9yaXR5LAogICAgICAgIHNvdXJjZUZpZWxkOiBmaWVsZC5uYW1lLAogICAgICAgIGlzQnVja2V0ZWQ6IGZhbHNlLAogICAgICAgIHNjYWxlOiAncmF0aW8nCiAgICAgIH07CiAgICB9LAogICAgb25GaWVsZENoYW5nZTogZnVuY3Rpb24gb25GaWVsZENoYW5nZShvbGRDb2x1bW4sIGluZGV4UGF0dGVybiwgZmllbGQpIHsKICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIG9sZENvbHVtbiwgewogICAgICAgIGxhYmVsOiBvZk5hbWUoZmllbGQubmFtZSksCiAgICAgICAgc291cmNlRmllbGQ6IGZpZWxkLm5hbWUKICAgICAgfSk7CiAgICB9LAogICAgdG9Fc0FnZ3NDb25maWc6IGZ1bmN0aW9uIHRvRXNBZ2dzQ29uZmlnKGNvbHVtbiwgY29sdW1uSWQpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBpZDogY29sdW1uSWQsCiAgICAgICAgZW5hYmxlZDogdHJ1ZSwKICAgICAgICB0eXBlOiBjb2x1bW4ub3BlcmF0aW9uVHlwZSwKICAgICAgICBzY2hlbWE6ICdtZXRyaWMnLAogICAgICAgIHBhcmFtczogewogICAgICAgICAgZmllbGQ6IGNvbHVtbi5zb3VyY2VGaWVsZCwKICAgICAgICAgIG1pc3Npbmc6IDAKICAgICAgICB9CiAgICAgIH07CiAgICB9CiAgfTsKfQoKdmFyIG1pbk9wZXJhdGlvbiA9IGJ1aWxkTWV0cmljT3BlcmF0aW9uKHsKICB0eXBlOiAnbWluJywKICBkaXNwbGF5TmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLm1pbicsIHsKICAgIGRlZmF1bHRNZXNzYWdlOiAnTWluaW11bScKICB9KSwKICBvZk5hbWU6IGZ1bmN0aW9uIG9mTmFtZShuYW1lKSB7CiAgICByZXR1cm4gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLm1pbk9mJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ01pbmltdW0gb2Yge25hbWV9JywKICAgICAgdmFsdWVzOiB7CiAgICAgICAgbmFtZTogbmFtZQogICAgICB9CiAgICB9KTsKICB9Cn0pOwpleHBvcnRzLm1pbk9wZXJhdGlvbiA9IG1pbk9wZXJhdGlvbjsKdmFyIG1heE9wZXJhdGlvbiA9IGJ1aWxkTWV0cmljT3BlcmF0aW9uKHsKICB0eXBlOiAnbWF4JywKICBkaXNwbGF5TmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLm1heCcsIHsKICAgIGRlZmF1bHRNZXNzYWdlOiAnTWF4aW11bScKICB9KSwKICBvZk5hbWU6IGZ1bmN0aW9uIG9mTmFtZShuYW1lKSB7CiAgICByZXR1cm4gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLm1heE9mJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ01heGltdW0gb2Yge25hbWV9JywKICAgICAgdmFsdWVzOiB7CiAgICAgICAgbmFtZTogbmFtZQogICAgICB9CiAgICB9KTsKICB9Cn0pOwpleHBvcnRzLm1heE9wZXJhdGlvbiA9IG1heE9wZXJhdGlvbjsKdmFyIGF2ZXJhZ2VPcGVyYXRpb24gPSBidWlsZE1ldHJpY09wZXJhdGlvbih7CiAgdHlwZTogJ2F2ZycsCiAgcHJpb3JpdHk6IDIsCiAgZGlzcGxheU5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5hdmcnLCB7CiAgICBkZWZhdWx0TWVzc2FnZTogJ0F2ZXJhZ2UnCiAgfSksCiAgb2ZOYW1lOiBmdW5jdGlvbiBvZk5hbWUobmFtZSkgewogICAgcmV0dXJuIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5sZW5zLmluZGV4UGF0dGVybi5hdmdPZicsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdBdmVyYWdlIG9mIHtuYW1lfScsCiAgICAgIHZhbHVlczogewogICAgICAgIG5hbWU6IG5hbWUKICAgICAgfQogICAgfSk7CiAgfQp9KTsKZXhwb3J0cy5hdmVyYWdlT3BlcmF0aW9uID0gYXZlcmFnZU9wZXJhdGlvbjsKdmFyIHN1bU9wZXJhdGlvbiA9IGJ1aWxkTWV0cmljT3BlcmF0aW9uKHsKICB0eXBlOiAnc3VtJywKICBwcmlvcml0eTogMSwKICBkaXNwbGF5TmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLnN1bScsIHsKICAgIGRlZmF1bHRNZXNzYWdlOiAnU3VtJwogIH0pLAogIG9mTmFtZTogZnVuY3Rpb24gb2ZOYW1lKG5hbWUpIHsKICAgIHJldHVybiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subGVucy5pbmRleFBhdHRlcm4uc3VtT2YnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU3VtIG9mIHtuYW1lfScsCiAgICAgIHZhbHVlczogewogICAgICAgIG5hbWU6IG5hbWUKICAgICAgfQogICAgfSk7CiAgfQp9KTsKZXhwb3J0cy5zdW1PcGVyYXRpb24gPSBzdW1PcGVyYXRpb247"},null]}