{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/events_viewer/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/events_viewer/index.js","mtime":1585205047428},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlN0YXRlZnVsRXZlbnRzVmlld2VyID0gdm9pZCAwOwoKdmFyIF9mcCA9IHJlcXVpcmUoImxvZGFzaC9mcCIpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9yZWFjdFJlZHV4ID0gcmVxdWlyZSgicmVhY3QtcmVkdXgiKTsKCnZhciBfc3RvcmUgPSByZXF1aXJlKCIuLi8uLi9zdG9yZSIpOwoKdmFyIF9hY3Rpb25zID0gcmVxdWlyZSgiLi4vLi4vc3RvcmUvYWN0aW9ucyIpOwoKdmFyIF9raWJhbmEgPSByZXF1aXJlKCIuLi8uLi9saWIva2liYW5hIik7Cgp2YXIgX2V2ZW50c192aWV3ZXIgPSByZXF1aXJlKCIuL2V2ZW50c192aWV3ZXIiKTsKCnZhciBfZmV0Y2hfaW5kZXhfcGF0dGVybnMgPSByZXF1aXJlKCIuLi8uLi9jb250YWluZXJzL2RldGVjdGlvbl9lbmdpbmUvcnVsZXMvZmV0Y2hfaW5kZXhfcGF0dGVybnMiKTsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tbW9uL2NvbnN0YW50cyIpOwoKdmFyIF9pbnNwZWN0ID0gcmVxdWlyZSgiLi4vaW5zcGVjdCIpOwoKdmFyIGkxOG4gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCIuL3RyYW5zbGF0aW9ucyIpKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9Cgp2YXIgZGVmYXVsdFRpbWVsaW5lVHlwZUNvbnRleHQgPSB7CiAgbG9hZGluZ1RleHQ6IGkxOG4uTE9BRElOR19FVkVOVFMKfTsKCnZhciBTdGF0ZWZ1bEV2ZW50c1ZpZXdlckNvbXBvbmVudCA9IGZ1bmN0aW9uIFN0YXRlZnVsRXZlbnRzVmlld2VyQ29tcG9uZW50KF9yZWYpIHsKICB2YXIgY3JlYXRlVGltZWxpbmUgPSBfcmVmLmNyZWF0ZVRpbWVsaW5lLAogICAgICBjb2x1bW5zID0gX3JlZi5jb2x1bW5zLAogICAgICBkYXRhUHJvdmlkZXJzID0gX3JlZi5kYXRhUHJvdmlkZXJzLAogICAgICBkZWxldGVkRXZlbnRJZHMgPSBfcmVmLmRlbGV0ZWRFdmVudElkcywKICAgICAgZGVmYXVsdEluZGljZXMgPSBfcmVmLmRlZmF1bHRJbmRpY2VzLAogICAgICBkZWxldGVFdmVudFF1ZXJ5ID0gX3JlZi5kZWxldGVFdmVudFF1ZXJ5LAogICAgICBlbmQgPSBfcmVmLmVuZCwKICAgICAgZmlsdGVycyA9IF9yZWYuZmlsdGVycywKICAgICAgaGVhZGVyRmlsdGVyR3JvdXAgPSBfcmVmLmhlYWRlckZpbHRlckdyb3VwLAogICAgICBpZCA9IF9yZWYuaWQsCiAgICAgIGlzTGl2ZSA9IF9yZWYuaXNMaXZlLAogICAgICBpdGVtc1BlclBhZ2UgPSBfcmVmLml0ZW1zUGVyUGFnZSwKICAgICAgaXRlbXNQZXJQYWdlT3B0aW9ucyA9IF9yZWYuaXRlbXNQZXJQYWdlT3B0aW9ucywKICAgICAga3FsTW9kZSA9IF9yZWYua3FsTW9kZSwKICAgICAgcGFnZUZpbHRlcnMgPSBfcmVmLnBhZ2VGaWx0ZXJzLAogICAgICBxdWVyeSA9IF9yZWYucXVlcnksCiAgICAgIHJlbW92ZUNvbHVtbiA9IF9yZWYucmVtb3ZlQ29sdW1uLAogICAgICBzdGFydCA9IF9yZWYuc3RhcnQsCiAgICAgIHNob3dDaGVja2JveGVzID0gX3JlZi5zaG93Q2hlY2tib3hlcywKICAgICAgc2hvd1Jvd1JlbmRlcmVycyA9IF9yZWYuc2hvd1Jvd1JlbmRlcmVycywKICAgICAgc29ydCA9IF9yZWYuc29ydCwKICAgICAgX3JlZiR0aW1lbGluZVR5cGVDb250ID0gX3JlZi50aW1lbGluZVR5cGVDb250ZXh0LAogICAgICB0aW1lbGluZVR5cGVDb250ZXh0ID0gX3JlZiR0aW1lbGluZVR5cGVDb250ID09PSB2b2lkIDAgPyBkZWZhdWx0VGltZWxpbmVUeXBlQ29udGV4dCA6IF9yZWYkdGltZWxpbmVUeXBlQ29udCwKICAgICAgdXBkYXRlSXRlbXNQZXJQYWdlID0gX3JlZi51cGRhdGVJdGVtc1BlclBhZ2UsCiAgICAgIHVwc2VydENvbHVtbiA9IF9yZWYudXBzZXJ0Q29sdW1uLAogICAgICB1dGlsaXR5QmFyID0gX3JlZi51dGlsaXR5QmFyOwoKICB2YXIgX3VzZUZldGNoSW5kZXhQYXR0ZXJuID0gKDAsIF9mZXRjaF9pbmRleF9wYXR0ZXJucy51c2VGZXRjaEluZGV4UGF0dGVybnMpKGRlZmF1bHRJbmRpY2VzICE9PSBudWxsICYmIGRlZmF1bHRJbmRpY2VzICE9PSB2b2lkIDAgPyBkZWZhdWx0SW5kaWNlcyA6ICgwLCBfa2liYW5hLnVzZVVpU2V0dGluZykoX2NvbnN0YW50cy5ERUZBVUxUX0lOREVYX0tFWSkpLAogICAgICBfdXNlRmV0Y2hJbmRleFBhdHRlcm4yID0gX3NsaWNlZFRvQXJyYXkoX3VzZUZldGNoSW5kZXhQYXR0ZXJuLCAxKSwKICAgICAgX3VzZUZldGNoSW5kZXhQYXR0ZXJuMyA9IF91c2VGZXRjaEluZGV4UGF0dGVybjJbMF0sCiAgICAgIGJyb3dzZXJGaWVsZHMgPSBfdXNlRmV0Y2hJbmRleFBhdHRlcm4zLmJyb3dzZXJGaWVsZHMsCiAgICAgIGluZGV4UGF0dGVybnMgPSBfdXNlRmV0Y2hJbmRleFBhdHRlcm4zLmluZGV4UGF0dGVybnM7CgogICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7CiAgICBpZiAoY3JlYXRlVGltZWxpbmUgIT0gbnVsbCkgewogICAgICBjcmVhdGVUaW1lbGluZSh7CiAgICAgICAgaWQ6IGlkLAogICAgICAgIGNvbHVtbnM6IGNvbHVtbnMsCiAgICAgICAgc29ydDogc29ydCwKICAgICAgICBpdGVtc1BlclBhZ2U6IGl0ZW1zUGVyUGFnZSwKICAgICAgICBzaG93Q2hlY2tib3hlczogc2hvd0NoZWNrYm94ZXMsCiAgICAgICAgc2hvd1Jvd1JlbmRlcmVyczogc2hvd1Jvd1JlbmRlcmVycwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICBkZWxldGVFdmVudFF1ZXJ5KHsKICAgICAgICBpZDogaWQsCiAgICAgICAgaW5wdXRJZDogJ2dsb2JhbCcKICAgICAgfSk7CiAgICB9OwogIH0sIFtdKTsKICB2YXIgb25DaGFuZ2VJdGVtc1BlclBhZ2UgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoaXRlbXNDaGFuZ2VkUGVyUGFnZSkgewogICAgcmV0dXJuIHVwZGF0ZUl0ZW1zUGVyUGFnZSh7CiAgICAgIGlkOiBpZCwKICAgICAgaXRlbXNQZXJQYWdlOiBpdGVtc0NoYW5nZWRQZXJQYWdlCiAgICB9KTsKICB9LCBbaWQsIHVwZGF0ZUl0ZW1zUGVyUGFnZV0pOwogIHZhciB0b2dnbGVDb2x1bW4gPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoY29sdW1uKSB7CiAgICB2YXIgZXhpc3RzID0gY29sdW1ucy5maW5kSW5kZXgoZnVuY3Rpb24gKGMpIHsKICAgICAgcmV0dXJuIGMuaWQgPT09IGNvbHVtbi5pZDsKICAgIH0pICE9PSAtMTsKCiAgICBpZiAoIWV4aXN0cyAmJiB1cHNlcnRDb2x1bW4gIT0gbnVsbCkgewogICAgICB1cHNlcnRDb2x1bW4oewogICAgICAgIGNvbHVtbjogY29sdW1uLAogICAgICAgIGlkOiBpZCwKICAgICAgICBpbmRleDogMQogICAgICB9KTsKICAgIH0KCiAgICBpZiAoZXhpc3RzICYmIHJlbW92ZUNvbHVtbiAhPSBudWxsKSB7CiAgICAgIHJlbW92ZUNvbHVtbih7CiAgICAgICAgY29sdW1uSWQ6IGNvbHVtbi5pZCwKICAgICAgICBpZDogaWQKICAgICAgfSk7CiAgICB9CiAgfSwgW2NvbHVtbnMsIGlkLCB1cHNlcnRDb2x1bW4sIHJlbW92ZUNvbHVtbl0pOwogIHZhciBnbG9iYWxGaWx0ZXJzID0gKDAsIF9yZWFjdC51c2VNZW1vKShmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShmaWx0ZXJzKSwgX3RvQ29uc3VtYWJsZUFycmF5KHBhZ2VGaWx0ZXJzICE9PSBudWxsICYmIHBhZ2VGaWx0ZXJzICE9PSB2b2lkIDAgPyBwYWdlRmlsdGVycyA6IFtdKSk7CiAgfSwgW2ZpbHRlcnMsIHBhZ2VGaWx0ZXJzXSk7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2luc3BlY3QuSW5zcGVjdEJ1dHRvbkNvbnRhaW5lciwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXZlbnRzX3ZpZXdlci5FdmVudHNWaWV3ZXIsIHsKICAgIGJyb3dzZXJGaWVsZHM6IGJyb3dzZXJGaWVsZHMsCiAgICBjb2x1bW5zOiBjb2x1bW5zLAogICAgaWQ6IGlkLAogICAgZGF0YVByb3ZpZGVyczogZGF0YVByb3ZpZGVycywKICAgIGRlbGV0ZWRFdmVudElkczogZGVsZXRlZEV2ZW50SWRzLAogICAgZW5kOiBlbmQsCiAgICBmaWx0ZXJzOiBnbG9iYWxGaWx0ZXJzLAogICAgaGVhZGVyRmlsdGVyR3JvdXA6IGhlYWRlckZpbHRlckdyb3VwLAogICAgaW5kZXhQYXR0ZXJuOiBpbmRleFBhdHRlcm5zLAogICAgaXNMaXZlOiBpc0xpdmUsCiAgICBpdGVtc1BlclBhZ2U6IGl0ZW1zUGVyUGFnZSwKICAgIGl0ZW1zUGVyUGFnZU9wdGlvbnM6IGl0ZW1zUGVyUGFnZU9wdGlvbnMsCiAgICBrcWxNb2RlOiBrcWxNb2RlLAogICAgb25DaGFuZ2VJdGVtc1BlclBhZ2U6IG9uQ2hhbmdlSXRlbXNQZXJQYWdlLAogICAgcXVlcnk6IHF1ZXJ5LAogICAgc3RhcnQ6IHN0YXJ0LAogICAgc29ydDogc29ydCwKICAgIHRpbWVsaW5lVHlwZUNvbnRleHQ6IHRpbWVsaW5lVHlwZUNvbnRleHQsCiAgICB0b2dnbGVDb2x1bW46IHRvZ2dsZUNvbHVtbiwKICAgIHV0aWxpdHlCYXI6IHV0aWxpdHlCYXIKICB9KSk7Cn07Cgp2YXIgbWFrZU1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1ha2VNYXBTdGF0ZVRvUHJvcHMoKSB7CiAgdmFyIGdldElucHV0c1RpbWVsaW5lID0gX3N0b3JlLmlucHV0c1NlbGVjdG9ycy5nZXRUaW1lbGluZVNlbGVjdG9yKCk7CgogIHZhciBnZXRHbG9iYWxRdWVyeVNlbGVjdG9yID0gX3N0b3JlLmlucHV0c1NlbGVjdG9ycy5nbG9iYWxRdWVyeVNlbGVjdG9yKCk7CgogIHZhciBnZXRHbG9iYWxGaWx0ZXJzUXVlcnlTZWxlY3RvciA9IF9zdG9yZS5pbnB1dHNTZWxlY3RvcnMuZ2xvYmFsRmlsdGVyc1F1ZXJ5U2VsZWN0b3IoKTsKCiAgdmFyIGdldEV2ZW50cyA9IF9zdG9yZS50aW1lbGluZVNlbGVjdG9ycy5nZXRFdmVudHNCeUlkU2VsZWN0b3IoKTsKCiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgX3JlZjIpIHsKICAgIHZhciBfZ2V0RXZlbnRzOwoKICAgIHZhciBpZCA9IF9yZWYyLmlkLAogICAgICAgIGRlZmF1bHRNb2RlbCA9IF9yZWYyLmRlZmF1bHRNb2RlbDsKICAgIHZhciBpbnB1dCA9IGdldElucHV0c1RpbWVsaW5lKHN0YXRlKTsKICAgIHZhciBldmVudHMgPSAoX2dldEV2ZW50cyA9IGdldEV2ZW50cyhzdGF0ZSwgaWQpKSAhPT0gbnVsbCAmJiBfZ2V0RXZlbnRzICE9PSB2b2lkIDAgPyBfZ2V0RXZlbnRzIDogZGVmYXVsdE1vZGVsOwogICAgdmFyIGNvbHVtbnMgPSBldmVudHMuY29sdW1ucywKICAgICAgICBkYXRhUHJvdmlkZXJzID0gZXZlbnRzLmRhdGFQcm92aWRlcnMsCiAgICAgICAgZGVsZXRlZEV2ZW50SWRzID0gZXZlbnRzLmRlbGV0ZWRFdmVudElkcywKICAgICAgICBpdGVtc1BlclBhZ2UgPSBldmVudHMuaXRlbXNQZXJQYWdlLAogICAgICAgIGl0ZW1zUGVyUGFnZU9wdGlvbnMgPSBldmVudHMuaXRlbXNQZXJQYWdlT3B0aW9ucywKICAgICAgICBrcWxNb2RlID0gZXZlbnRzLmtxbE1vZGUsCiAgICAgICAgc29ydCA9IGV2ZW50cy5zb3J0LAogICAgICAgIHNob3dDaGVja2JveGVzID0gZXZlbnRzLnNob3dDaGVja2JveGVzLAogICAgICAgIHNob3dSb3dSZW5kZXJlcnMgPSBldmVudHMuc2hvd1Jvd1JlbmRlcmVyczsKICAgIHJldHVybiB7CiAgICAgIGNvbHVtbnM6IGNvbHVtbnMsCiAgICAgIGRhdGFQcm92aWRlcnM6IGRhdGFQcm92aWRlcnMsCiAgICAgIGRlbGV0ZWRFdmVudElkczogZGVsZXRlZEV2ZW50SWRzLAogICAgICBmaWx0ZXJzOiBnZXRHbG9iYWxGaWx0ZXJzUXVlcnlTZWxlY3RvcihzdGF0ZSksCiAgICAgIGlkOiBpZCwKICAgICAgaXNMaXZlOiBpbnB1dC5wb2xpY3kua2luZCA9PT0gJ2ludGVydmFsJywKICAgICAgaXRlbXNQZXJQYWdlOiBpdGVtc1BlclBhZ2UsCiAgICAgIGl0ZW1zUGVyUGFnZU9wdGlvbnM6IGl0ZW1zUGVyUGFnZU9wdGlvbnMsCiAgICAgIGtxbE1vZGU6IGtxbE1vZGUsCiAgICAgIHF1ZXJ5OiBnZXRHbG9iYWxRdWVyeVNlbGVjdG9yKHN0YXRlKSwKICAgICAgc29ydDogc29ydCwKICAgICAgc2hvd0NoZWNrYm94ZXM6IHNob3dDaGVja2JveGVzLAogICAgICBzaG93Um93UmVuZGVyZXJzOiBzaG93Um93UmVuZGVyZXJzCiAgICB9OwogIH07CgogIHJldHVybiBtYXBTdGF0ZVRvUHJvcHM7Cn07Cgp2YXIgU3RhdGVmdWxFdmVudHNWaWV3ZXIgPSAoMCwgX3JlYWN0UmVkdXguY29ubmVjdCkobWFrZU1hcFN0YXRlVG9Qcm9wcywgewogIGNyZWF0ZVRpbWVsaW5lOiBfYWN0aW9ucy50aW1lbGluZUFjdGlvbnMuY3JlYXRlVGltZWxpbmUsCiAgZGVsZXRlRXZlbnRRdWVyeTogX2FjdGlvbnMuaW5wdXRzQWN0aW9ucy5kZWxldGVPbmVRdWVyeSwKICB1cGRhdGVJdGVtc1BlclBhZ2U6IF9hY3Rpb25zLnRpbWVsaW5lQWN0aW9ucy51cGRhdGVJdGVtc1BlclBhZ2UsCiAgcmVtb3ZlQ29sdW1uOiBfYWN0aW9ucy50aW1lbGluZUFjdGlvbnMucmVtb3ZlQ29sdW1uLAogIHVwc2VydENvbHVtbjogX2FjdGlvbnMudGltZWxpbmVBY3Rpb25zLnVwc2VydENvbHVtbgp9KShfcmVhY3QuZGVmYXVsdC5tZW1vKFN0YXRlZnVsRXZlbnRzVmlld2VyQ29tcG9uZW50LCBmdW5jdGlvbiAocHJldlByb3BzLCBuZXh0UHJvcHMpIHsKICByZXR1cm4gcHJldlByb3BzLmlkID09PSBuZXh0UHJvcHMuaWQgJiYgKDAsIF9mcC5pc0VxdWFsKShwcmV2UHJvcHMuY29sdW1ucywgbmV4dFByb3BzLmNvbHVtbnMpICYmICgwLCBfZnAuaXNFcXVhbCkocHJldlByb3BzLmRhdGFQcm92aWRlcnMsIG5leHRQcm9wcy5kYXRhUHJvdmlkZXJzKSAmJiBwcmV2UHJvcHMuZGVsZXRlZEV2ZW50SWRzID09PSBuZXh0UHJvcHMuZGVsZXRlZEV2ZW50SWRzICYmIHByZXZQcm9wcy5lbmQgPT09IG5leHRQcm9wcy5lbmQgJiYgKDAsIF9mcC5pc0VxdWFsKShwcmV2UHJvcHMuZmlsdGVycywgbmV4dFByb3BzLmZpbHRlcnMpICYmIHByZXZQcm9wcy5pc0xpdmUgPT09IG5leHRQcm9wcy5pc0xpdmUgJiYgcHJldlByb3BzLml0ZW1zUGVyUGFnZSA9PT0gbmV4dFByb3BzLml0ZW1zUGVyUGFnZSAmJiAoMCwgX2ZwLmlzRXF1YWwpKHByZXZQcm9wcy5pdGVtc1BlclBhZ2VPcHRpb25zLCBuZXh0UHJvcHMuaXRlbXNQZXJQYWdlT3B0aW9ucykgJiYgcHJldlByb3BzLmtxbE1vZGUgPT09IG5leHRQcm9wcy5rcWxNb2RlICYmICgwLCBfZnAuaXNFcXVhbCkocHJldlByb3BzLnF1ZXJ5LCBuZXh0UHJvcHMucXVlcnkpICYmIHByZXZQcm9wcy5wYWdlQ291bnQgPT09IG5leHRQcm9wcy5wYWdlQ291bnQgJiYgKDAsIF9mcC5pc0VxdWFsKShwcmV2UHJvcHMuc29ydCwgbmV4dFByb3BzLnNvcnQpICYmIHByZXZQcm9wcy5zdGFydCA9PT0gbmV4dFByb3BzLnN0YXJ0ICYmICgwLCBfZnAuaXNFcXVhbCkocHJldlByb3BzLnBhZ2VGaWx0ZXJzLCBuZXh0UHJvcHMucGFnZUZpbHRlcnMpICYmIHByZXZQcm9wcy5zaG93Q2hlY2tib3hlcyA9PT0gbmV4dFByb3BzLnNob3dDaGVja2JveGVzICYmIHByZXZQcm9wcy5zaG93Um93UmVuZGVyZXJzID09PSBuZXh0UHJvcHMuc2hvd1Jvd1JlbmRlcmVycyAmJiBwcmV2UHJvcHMuc3RhcnQgPT09IG5leHRQcm9wcy5zdGFydCAmJiAoMCwgX2ZwLmlzRXF1YWwpKHByZXZQcm9wcy50aW1lbGluZVR5cGVDb250ZXh0LCBuZXh0UHJvcHMudGltZWxpbmVUeXBlQ29udGV4dCkgJiYgcHJldlByb3BzLnV0aWxpdHlCYXIgPT09IG5leHRQcm9wcy51dGlsaXR5QmFyOwp9KSk7CmV4cG9ydHMuU3RhdGVmdWxFdmVudHNWaWV3ZXIgPSBTdGF0ZWZ1bEV2ZW50c1ZpZXdlcjs="},null]}