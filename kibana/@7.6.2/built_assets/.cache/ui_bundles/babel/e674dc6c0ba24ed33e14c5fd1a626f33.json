{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/containers/detection_engine/signals/api.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/containers/detection_engine/signals/api.js","mtime":1585205047787},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNyZWF0ZVNpZ25hbEluZGV4ID0gZXhwb3J0cy5nZXRVc2VyUHJpdmlsZWdlID0gZXhwb3J0cy5nZXRTaWduYWxJbmRleCA9IGV4cG9ydHMudXBkYXRlU2lnbmFsU3RhdHVzID0gZXhwb3J0cy5mZXRjaFF1ZXJ5U2lnbmFscyA9IHZvaWQgMDsKCnZhciBfY2hyb21lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJ1aS9jaHJvbWUiKSk7Cgp2YXIgX2FwaSA9IHJlcXVpcmUoIi4uLy4uLy4uL2hvb2tzL2FwaS9hcGkiKTsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vY29tbW9uL2NvbnN0YW50cyIpOwoKdmFyIF90eXBlcyA9IHJlcXVpcmUoIi4vdHlwZXMiKTsKCnZhciBfYXBpMiA9IHJlcXVpcmUoIi4uLy4uLy4uL3V0aWxzL2FwaSIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KLyoqCiAqIEZldGNoIFNpZ25hbHMgYnkgcHJvdmlkaW5nIGEgcXVlcnkKICoKICogQHBhcmFtIHF1ZXJ5IFN0cmluZyB0byBtYXRjaCBhIGRzbAogKiBAcGFyYW0gc2lnbmFsIEFib3J0U2lnbmFsIGZvciBjYW5jZWxsaW5nIHJlcXVlc3QKICovCgoKdmFyIGZldGNoUXVlcnlTaWduYWxzID0gZnVuY3Rpb24gZmV0Y2hRdWVyeVNpZ25hbHMoX3JlZikgewogIHZhciBxdWVyeSwgc2lnbmFsLCByZXNwb25zZSwgc2lnbmFsczsKICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGZldGNoUXVlcnlTaWduYWxzJChfY29udGV4dCkgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIHF1ZXJ5ID0gX3JlZi5xdWVyeSwgc2lnbmFsID0gX3JlZi5zaWduYWw7CiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoZmV0Y2goIiIuY29uY2F0KF9jaHJvbWUuZGVmYXVsdC5nZXRCYXNlUGF0aCgpKS5jb25jYXQoX2NvbnN0YW50cy5ERVRFQ1RJT05fRU5HSU5FX1FVRVJZX1NJR05BTFNfVVJMKSwgewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsCiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICdrYm4teHNyZic6ICd0cnVlJwogICAgICAgICAgICB9LAogICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShxdWVyeSksCiAgICAgICAgICAgIHNpZ25hbDogc2lnbmFsCiAgICAgICAgICB9KSk7CgogICAgICAgIGNhc2UgMzoKICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCgoMCwgX2FwaS50aHJvd0lmTm90T2spKHJlc3BvbnNlKSk7CgogICAgICAgIGNhc2UgNjoKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChyZXNwb25zZS5qc29uKCkpOwoKICAgICAgICBjYXNlIDg6CiAgICAgICAgICBzaWduYWxzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHNpZ25hbHMpOwoKICAgICAgICBjYXNlIDEwOgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICB9CiAgICB9CiAgfSk7Cn07Ci8qKgogKiBVcGRhdGUgc2lnbmFsIHN0YXR1cyBieSBxdWVyeQogKgogKiBAcGFyYW0gcXVlcnkgb2Ygc2lnbmFscyB0byB1cGRhdGUKICogQHBhcmFtIHN0YXR1cyB0byB1cGRhdGUgdG8oJ29wZW4nIC8gJ2Nsb3NlZCcpCiAqIEBwYXJhbSBzaWduYWwgQWJvcnRTaWduYWwgZm9yIGNhbmNlbGxpbmcgcmVxdWVzdAogKi8KCgpleHBvcnRzLmZldGNoUXVlcnlTaWduYWxzID0gZmV0Y2hRdWVyeVNpZ25hbHM7Cgp2YXIgdXBkYXRlU2lnbmFsU3RhdHVzID0gZnVuY3Rpb24gdXBkYXRlU2lnbmFsU3RhdHVzKF9yZWYyKSB7CiAgdmFyIHF1ZXJ5LCBzdGF0dXMsIHNpZ25hbCwgcmVzcG9uc2U7CiAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiB1cGRhdGVTaWduYWxTdGF0dXMkKF9jb250ZXh0MikgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgcXVlcnkgPSBfcmVmMi5xdWVyeSwgc3RhdHVzID0gX3JlZjIuc3RhdHVzLCBzaWduYWwgPSBfcmVmMi5zaWduYWw7CiAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKGZldGNoKCIiLmNvbmNhdChfY2hyb21lLmRlZmF1bHQuZ2V0QmFzZVBhdGgoKSkuY29uY2F0KF9jb25zdGFudHMuREVURUNUSU9OX0VOR0lORV9TSUdOQUxTX1NUQVRVU19VUkwpLCB7CiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJywKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgJ2tibi14c3JmJzogJ3RydWUnCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KF9vYmplY3RTcHJlYWQoewogICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzCiAgICAgICAgICAgIH0sIHF1ZXJ5KSksCiAgICAgICAgICAgIHNpZ25hbDogc2lnbmFsCiAgICAgICAgICB9KSk7CgogICAgICAgIGNhc2UgMzoKICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKCgwLCBfYXBpLnRocm93SWZOb3RPaykocmVzcG9uc2UpKTsKCiAgICAgICAgY2FzZSA2OgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlLmpzb24oKSk7CgogICAgICAgIGNhc2UgNzoKICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgIH0KICAgIH0KICB9KTsKfTsKLyoqCiAqIEZldGNoIFNpZ25hbCBJbmRleAogKgogKiBAcGFyYW0gc2lnbmFsIEFib3J0U2lnbmFsIGZvciBjYW5jZWxsaW5nIHJlcXVlc3QKICovCgoKZXhwb3J0cy51cGRhdGVTaWduYWxTdGF0dXMgPSB1cGRhdGVTaWduYWxTdGF0dXM7Cgp2YXIgZ2V0U2lnbmFsSW5kZXggPSBmdW5jdGlvbiBnZXRTaWduYWxJbmRleChfcmVmMykgewogIHZhciBzaWduYWwsIHJlc3BvbnNlLCBzaWduYWxJbmRleCwgZXJyb3I7CiAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBnZXRTaWduYWxJbmRleCQoX2NvbnRleHQzKSB7CiAgICB3aGlsZSAoMSkgewogICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICBjYXNlIDA6CiAgICAgICAgICBzaWduYWwgPSBfcmVmMy5zaWduYWw7CiAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKGZldGNoKCIiLmNvbmNhdChfY2hyb21lLmRlZmF1bHQuZ2V0QmFzZVBhdGgoKSkuY29uY2F0KF9jb25zdGFudHMuREVURUNUSU9OX0VOR0lORV9JTkRFWF9VUkwpLCB7CiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLAogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAna2JuLXhzcmYnOiAndHJ1ZScKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2lnbmFsOiBzaWduYWwKICAgICAgICAgIH0pKTsKCiAgICAgICAgY2FzZSAzOgogICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDMuc2VudDsKCiAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7CiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gOTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CgogICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA3OwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChyZXNwb25zZS5qc29uKCkpOwoKICAgICAgICBjYXNlIDc6CiAgICAgICAgICBzaWduYWxJbmRleCA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHNpZ25hbEluZGV4KTsKCiAgICAgICAgY2FzZSA5OgogICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMTsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoKDAsIF9hcGkyLnBhcnNlSnNvbkZyb21Cb2R5KShyZXNwb25zZSkpOwoKICAgICAgICBjYXNlIDExOgogICAgICAgICAgZXJyb3IgPSBfY29udGV4dDMuc2VudDsKCiAgICAgICAgICBpZiAoIShlcnJvciAhPSBudWxsKSkgewogICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDE0OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICB0aHJvdyBuZXcgX3R5cGVzLlNpZ25hbEluZGV4RXJyb3IoZXJyb3IpOwoKICAgICAgICBjYXNlIDE0OgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIG51bGwpOwoKICAgICAgICBjYXNlIDE1OgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgfQogICAgfQogIH0pOwp9OwovKioKICogR2V0IFVzZXIgUHJpdmlsZWdlcwogKgogKiBAcGFyYW0gc2lnbmFsIEFib3J0U2lnbmFsIGZvciBjYW5jZWxsaW5nIHJlcXVlc3QKICovCgoKZXhwb3J0cy5nZXRTaWduYWxJbmRleCA9IGdldFNpZ25hbEluZGV4OwoKdmFyIGdldFVzZXJQcml2aWxlZ2UgPSBmdW5jdGlvbiBnZXRVc2VyUHJpdmlsZWdlKF9yZWY0KSB7CiAgdmFyIHNpZ25hbCwgcmVzcG9uc2U7CiAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBnZXRVc2VyUHJpdmlsZWdlJChfY29udGV4dDQpIHsKICAgIHdoaWxlICgxKSB7CiAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIHNpZ25hbCA9IF9yZWY0LnNpZ25hbDsKICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoZmV0Y2goIiIuY29uY2F0KF9jaHJvbWUuZGVmYXVsdC5nZXRCYXNlUGF0aCgpKS5jb25jYXQoX2NvbnN0YW50cy5ERVRFQ1RJT05fRU5HSU5FX1BSSVZJTEVHRVNfVVJMKSwgewogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJywKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgJ2tibi14c3JmJzogJ3RydWUnCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNpZ25hbDogc2lnbmFsCiAgICAgICAgICB9KSk7CgogICAgICAgIGNhc2UgMzoKICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDY7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKCgwLCBfYXBpLnRocm93SWZOb3RPaykocmVzcG9uc2UpKTsKCiAgICAgICAgY2FzZSA2OgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlLmpzb24oKSk7CgogICAgICAgIGNhc2UgNzoKICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgIH0KICAgIH0KICB9KTsKfTsKLyoqCiAqIENyZWF0ZSBTaWduYWwgSW5kZXggaWYgbmVlZGVkIGl0CiAqCiAqIEBwYXJhbSBzaWduYWwgQWJvcnRTaWduYWwgZm9yIGNhbmNlbGxpbmcgcmVxdWVzdAogKi8KCgpleHBvcnRzLmdldFVzZXJQcml2aWxlZ2UgPSBnZXRVc2VyUHJpdmlsZWdlOwoKdmFyIGNyZWF0ZVNpZ25hbEluZGV4ID0gZnVuY3Rpb24gY3JlYXRlU2lnbmFsSW5kZXgoX3JlZjUpIHsKICB2YXIgc2lnbmFsLCByZXNwb25zZSwgX3NpZ25hbEluZGV4LCBlcnJvcjsKCiAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBjcmVhdGVTaWduYWxJbmRleCQoX2NvbnRleHQ1KSB7CiAgICB3aGlsZSAoMSkgewogICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICBjYXNlIDA6CiAgICAgICAgICBzaWduYWwgPSBfcmVmNS5zaWduYWw7CiAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDM7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKGZldGNoKCIiLmNvbmNhdChfY2hyb21lLmRlZmF1bHQuZ2V0QmFzZVBhdGgoKSkuY29uY2F0KF9jb25zdGFudHMuREVURUNUSU9OX0VOR0lORV9JTkRFWF9VUkwpLCB7CiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJywKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgJ2tibi14c3JmJzogJ3RydWUnCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNpZ25hbDogc2lnbmFsCiAgICAgICAgICB9KSk7CgogICAgICAgIGNhc2UgMzoKICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ1LnNlbnQ7CgogICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgewogICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQoKICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNzsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAocmVzcG9uc2UuanNvbigpKTsKCiAgICAgICAgY2FzZSA3OgogICAgICAgICAgX3NpZ25hbEluZGV4ID0gX2NvbnRleHQ1LnNlbnQ7CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgX3NpZ25hbEluZGV4KTsKCiAgICAgICAgY2FzZSA5OgogICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAxMTsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoKDAsIF9hcGkyLnBhcnNlSnNvbkZyb21Cb2R5KShyZXNwb25zZSkpOwoKICAgICAgICBjYXNlIDExOgogICAgICAgICAgZXJyb3IgPSBfY29udGV4dDUuc2VudDsKCiAgICAgICAgICBpZiAoIShlcnJvciAhPSBudWxsKSkgewogICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDE0OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICB0aHJvdyBuZXcgX3R5cGVzLlBvc3RTaWduYWxFcnJvcihlcnJvcik7CgogICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgbnVsbCk7CgogICAgICAgIGNhc2UgMTU6CiAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICB9CiAgICB9CiAgfSk7Cn07CgpleHBvcnRzLmNyZWF0ZVNpZ25hbEluZGV4ID0gY3JlYXRlU2lnbmFsSW5kZXg7"},null]}