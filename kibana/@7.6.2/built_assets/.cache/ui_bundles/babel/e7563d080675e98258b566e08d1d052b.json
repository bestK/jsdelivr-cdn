{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/cross_cluster_replication/public/app/store/actions/auto_follow_pattern.js","dependencies":[{"path":"x-pack/legacy/plugins/cross_cluster_replication/public/app/store/actions/auto_follow_pattern.js","mtime":1585205044157},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmRlbGV0ZUF1dG9Gb2xsb3dQYXR0ZXJuID0gZXhwb3J0cy5zYXZlQXV0b0ZvbGxvd1BhdHRlcm4gPSBleHBvcnRzLmdldEF1dG9Gb2xsb3dQYXR0ZXJuID0gZXhwb3J0cy5sb2FkQXV0b0ZvbGxvd1BhdHRlcm5zID0gZXhwb3J0cy5zZWxlY3RFZGl0QXV0b0ZvbGxvd1BhdHRlcm4gPSBleHBvcnRzLnNlbGVjdERldGFpbEF1dG9Gb2xsb3dQYXR0ZXJuID0gdm9pZCAwOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX25vdGlmeSA9IHJlcXVpcmUoInVpL25vdGlmeSIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi9jb25zdGFudHMiKTsKCnZhciBfYXBpID0gcmVxdWlyZSgiLi4vLi4vc2VydmljZXMvYXBpIik7Cgp2YXIgX3JvdXRpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4uLy4uL3NlcnZpY2VzL3JvdXRpbmciKSk7Cgp2YXIgdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoIi4uL2FjdGlvbl90eXBlcyIpKTsKCnZhciBfYXBpMiA9IHJlcXVpcmUoIi4vYXBpIik7Cgp2YXIgX3NlbGVjdG9ycyA9IHJlcXVpcmUoIi4uL3NlbGVjdG9ycyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCnZhciBzY29wZSA9IF9jb25zdGFudHMuU0VDVElPTlMuQVVUT19GT0xMT1dfUEFUVEVSTjsKCnZhciBzZWxlY3REZXRhaWxBdXRvRm9sbG93UGF0dGVybiA9IGZ1bmN0aW9uIHNlbGVjdERldGFpbEF1dG9Gb2xsb3dQYXR0ZXJuKGlkKSB7CiAgcmV0dXJuIHsKICAgIHR5cGU6IHQuQVVUT19GT0xMT1dfUEFUVEVSTl9TRUxFQ1RfREVUQUlMLAogICAgcGF5bG9hZDogaWQKICB9Owp9OwoKZXhwb3J0cy5zZWxlY3REZXRhaWxBdXRvRm9sbG93UGF0dGVybiA9IHNlbGVjdERldGFpbEF1dG9Gb2xsb3dQYXR0ZXJuOwoKdmFyIHNlbGVjdEVkaXRBdXRvRm9sbG93UGF0dGVybiA9IGZ1bmN0aW9uIHNlbGVjdEVkaXRBdXRvRm9sbG93UGF0dGVybihpZCkgewogIHJldHVybiB7CiAgICB0eXBlOiB0LkFVVE9fRk9MTE9XX1BBVFRFUk5fU0VMRUNUX0VESVQsCiAgICBwYXlsb2FkOiBpZAogIH07Cn07CgpleHBvcnRzLnNlbGVjdEVkaXRBdXRvRm9sbG93UGF0dGVybiA9IHNlbGVjdEVkaXRBdXRvRm9sbG93UGF0dGVybjsKCnZhciBsb2FkQXV0b0ZvbGxvd1BhdHRlcm5zID0gZnVuY3Rpb24gbG9hZEF1dG9Gb2xsb3dQYXR0ZXJucygpIHsKICB2YXIgaXNVcGRhdGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7CiAgcmV0dXJuICgwLCBfYXBpMi5zZW5kQXBpUmVxdWVzdCkoewogICAgbGFiZWw6IHQuQVVUT19GT0xMT1dfUEFUVEVSTl9MT0FELAogICAgc2NvcGU6IHNjb3BlLAogICAgc3RhdHVzOiBpc1VwZGF0aW5nID8gX2NvbnN0YW50cy5BUElfU1RBVFVTLlVQREFUSU5HIDogX2NvbnN0YW50cy5BUElfU1RBVFVTLkxPQURJTkcsCiAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGhhbmRsZXIkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoKDAsIF9hcGkubG9hZEF1dG9Gb2xsb3dQYXR0ZXJucykoKSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQuc2VudCk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0pOwp9OwoKZXhwb3J0cy5sb2FkQXV0b0ZvbGxvd1BhdHRlcm5zID0gbG9hZEF1dG9Gb2xsb3dQYXR0ZXJuczsKCnZhciBnZXRBdXRvRm9sbG93UGF0dGVybiA9IGZ1bmN0aW9uIGdldEF1dG9Gb2xsb3dQYXR0ZXJuKGlkKSB7CiAgcmV0dXJuICgwLCBfYXBpMi5zZW5kQXBpUmVxdWVzdCkoewogICAgbGFiZWw6IHQuQVVUT19GT0xMT1dfUEFUVEVSTl9HRVQsCiAgICBzY29wZTogIiIuY29uY2F0KHNjb3BlLCAiLWdldCIpLAogICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcigpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBoYW5kbGVyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCgoMCwgX2FwaS5nZXRBdXRvRm9sbG93UGF0dGVybikoaWQpKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQyLnNlbnQpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSk7Cn07CgpleHBvcnRzLmdldEF1dG9Gb2xsb3dQYXR0ZXJuID0gZ2V0QXV0b0ZvbGxvd1BhdHRlcm47Cgp2YXIgc2F2ZUF1dG9Gb2xsb3dQYXR0ZXJuID0gZnVuY3Rpb24gc2F2ZUF1dG9Gb2xsb3dQYXR0ZXJuKGlkLCBhdXRvRm9sbG93UGF0dGVybikgewogIHZhciBpc1VwZGF0aW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTsKICByZXR1cm4gKDAsIF9hcGkyLnNlbmRBcGlSZXF1ZXN0KSh7CiAgICBsYWJlbDogaXNVcGRhdGluZyA/IHQuQVVUT19GT0xMT1dfUEFUVEVSTl9VUERBVEUgOiB0LkFVVE9fRk9MTE9XX1BBVFRFUk5fQ1JFQVRFLAogICAgc3RhdHVzOiBfY29uc3RhbnRzLkFQSV9TVEFUVVMuU0FWSU5HLAogICAgc2NvcGU6ICIiLmNvbmNhdChzY29wZSwgIi1zYXZlIiksCiAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIGhhbmRsZXIkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGlmICghaXNVcGRhdGluZykgewogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCgoMCwgX2FwaS51cGRhdGVBdXRvRm9sbG93UGF0dGVybikoaWQsIGF1dG9Gb2xsb3dQYXR0ZXJuKSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0My5zZW50KTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCgoMCwgX2FwaS5jcmVhdGVBdXRvRm9sbG93UGF0dGVybikoX29iamVjdFNwcmVhZCh7CiAgICAgICAgICAgICAgICBpZDogaWQKICAgICAgICAgICAgICB9LCBhdXRvRm9sbG93UGF0dGVybikpKTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQzLnNlbnQpOwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgb25TdWNjZXNzOiBmdW5jdGlvbiBvblN1Y2Nlc3MoKSB7CiAgICAgIHZhciBzdWNjZXNzTWVzc2FnZSA9IGlzVXBkYXRpbmcgPyBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXV0b0ZvbGxvd1BhdHRlcm4udXBkYXRlQWN0aW9uLnN1Y2Nlc3NOb3RpZmljYXRpb25UaXRsZScsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkF1dG8tZm9sbG93IHBhdHRlcm4gJ3tuYW1lfScgdXBkYXRlZCBzdWNjZXNzZnVsbHkiLAogICAgICAgIHZhbHVlczogewogICAgICAgICAgbmFtZTogaWQKICAgICAgICB9CiAgICAgIH0pIDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmNyb3NzQ2x1c3RlclJlcGxpY2F0aW9uLmF1dG9Gb2xsb3dQYXR0ZXJuLmFkZEFjdGlvbi5zdWNjZXNzTm90aWZpY2F0aW9uVGl0bGUnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJBZGRlZCBhdXRvLWZvbGxvdyBwYXR0ZXJuICd7bmFtZX0nIiwKICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgIG5hbWU6IGlkCiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIF9ub3RpZnkudG9hc3ROb3RpZmljYXRpb25zLmFkZFN1Y2Nlc3Moc3VjY2Vzc01lc3NhZ2UpOwoKICAgICAgX3JvdXRpbmcuZGVmYXVsdC5uYXZpZ2F0ZSgiL2F1dG9fZm9sbG93X3BhdHRlcm5zIiwgdW5kZWZpbmVkLCB7CiAgICAgICAgcGF0dGVybjogZW5jb2RlVVJJQ29tcG9uZW50KGlkKQogICAgICB9KTsKICAgIH0KICB9KTsKfTsKCmV4cG9ydHMuc2F2ZUF1dG9Gb2xsb3dQYXR0ZXJuID0gc2F2ZUF1dG9Gb2xsb3dQYXR0ZXJuOwoKdmFyIGRlbGV0ZUF1dG9Gb2xsb3dQYXR0ZXJuID0gZnVuY3Rpb24gZGVsZXRlQXV0b0ZvbGxvd1BhdHRlcm4oaWQpIHsKICByZXR1cm4gKDAsIF9hcGkyLnNlbmRBcGlSZXF1ZXN0KSh7CiAgICBsYWJlbDogdC5BVVRPX0ZPTExPV19QQVRURVJOX0RFTEVURSwKICAgIHNjb3BlOiAiIi5jb25jYXQoc2NvcGUsICItZGVsZXRlIiksCiAgICBzdGF0dXM6IF9jb25zdGFudHMuQVBJX1NUQVRVUy5ERUxFVElORywKICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gaGFuZGxlciQoX2NvbnRleHQ0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsICgwLCBfYXBpLmRlbGV0ZUF1dG9Gb2xsb3dQYXR0ZXJuKShpZCkpOwoKICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgb25TdWNjZXNzOiBmdW5jdGlvbiBvblN1Y2Nlc3MocmVzcG9uc2UsIGRpc3BhdGNoLCBnZXRTdGF0ZSkgewogICAgICAvKioKICAgICAgICogV2UgY2FuIGhhdmUgMSBvciBtb3JlIGF1dG8tZm9sbG93IHBhdHRlcm4gZGVsZXRlIG9wZXJhdGlvbgogICAgICAgKiB0aGF0IGNhbiBmYWlsIG9yIHN1Y2NlZWQuIFdlIHdpbGwgc2hvdyAxIHRvYXN0IG5vdGlmaWNhdGlvbiBmb3IgZWFjaC4KICAgICAgICovCiAgICAgIGlmIChyZXNwb25zZS5lcnJvcnMubGVuZ3RoKSB7CiAgICAgICAgdmFyIGhhc011bHRpcGxlRXJyb3JzID0gcmVzcG9uc2UuZXJyb3JzLmxlbmd0aCA+IDE7CiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGhhc011bHRpcGxlRXJyb3JzID8gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmNyb3NzQ2x1c3RlclJlcGxpY2F0aW9uLmF1dG9Gb2xsb3dQYXR0ZXJuLnJlbW92ZUFjdGlvbi5lcnJvck11bHRpcGxlTm90aWZpY2F0aW9uVGl0bGUnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkVycm9yIHJlbW92aW5nIHtjb3VudH0gYXV0by1mb2xsb3cgcGF0dGVybnMiLAogICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgIGNvdW50OiByZXNwb25zZS5lcnJvcnMubGVuZ3RoCiAgICAgICAgICB9CiAgICAgICAgfSkgOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXV0b0ZvbGxvd1BhdHRlcm4ucmVtb3ZlQWN0aW9uLmVycm9yU2luZ2xlTm90aWZpY2F0aW9uVGl0bGUnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkVycm9yIHJlbW92aW5nIHRoZSAne25hbWV9JyBhdXRvLWZvbGxvdyBwYXR0ZXJuIiwKICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICBuYW1lOiByZXNwb25zZS5lcnJvcnNbMF0uaWQKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgX25vdGlmeS50b2FzdE5vdGlmaWNhdGlvbnMuYWRkRGFuZ2VyKGVycm9yTWVzc2FnZSk7CiAgICAgIH0KCiAgICAgIGlmIChyZXNwb25zZS5pdGVtc0RlbGV0ZWQubGVuZ3RoKSB7CiAgICAgICAgdmFyIGhhc011bHRpcGxlRGVsZXRlID0gcmVzcG9uc2UuaXRlbXNEZWxldGVkLmxlbmd0aCA+IDE7CiAgICAgICAgdmFyIHN1Y2Nlc3NNZXNzYWdlID0gaGFzTXVsdGlwbGVEZWxldGUgPyBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXV0b0ZvbGxvd1BhdHRlcm4ucmVtb3ZlQWN0aW9uLnN1Y2Nlc3NNdWx0aXBsZU5vdGlmaWNhdGlvblRpdGxlJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJ7Y291bnR9IGF1dG8tZm9sbG93IHBhdHRlcm5zIHdlcmUgcmVtb3ZlZCIsCiAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgY291bnQ6IHJlc3BvbnNlLml0ZW1zRGVsZXRlZC5sZW5ndGgKICAgICAgICAgIH0KICAgICAgICB9KSA6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5hdXRvRm9sbG93UGF0dGVybi5yZW1vdmVBY3Rpb24uc3VjY2Vzc1NpbmdsZU5vdGlmaWNhdGlvblRpdGxlJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJBdXRvLWZvbGxvdyBwYXR0ZXJuICd7bmFtZX0nIHdhcyByZW1vdmVkIiwKICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICBuYW1lOiByZXNwb25zZS5pdGVtc0RlbGV0ZWRbMF0KICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgX25vdGlmeS50b2FzdE5vdGlmaWNhdGlvbnMuYWRkU3VjY2VzcyhzdWNjZXNzTWVzc2FnZSk7IC8vIElmIHdlJ3ZlIGp1c3QgZGVsZXRlZCBhIHBhdHRlcm4gd2Ugd2VyZSBsb29raW5nIGF0LCB3ZSBuZWVkIHRvIGNsb3NlIHRoZSBwYW5lbC4KCgogICAgICAgIHZhciBhdXRvRm9sbG93UGF0dGVybklkID0gKDAsIF9zZWxlY3RvcnMuZ2V0U2VsZWN0ZWRBdXRvRm9sbG93UGF0dGVybklkKSgnZGV0YWlsJykoZ2V0U3RhdGUoKSk7CgogICAgICAgIGlmIChyZXNwb25zZS5pdGVtc0RlbGV0ZWQuaW5jbHVkZXMoYXV0b0ZvbGxvd1BhdHRlcm5JZCkpIHsKICAgICAgICAgIGRpc3BhdGNoKHNlbGVjdERldGFpbEF1dG9Gb2xsb3dQYXR0ZXJuKG51bGwpKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9KTsKfTsKCmV4cG9ydHMuZGVsZXRlQXV0b0ZvbGxvd1BhdHRlcm4gPSBkZWxldGVBdXRvRm9sbG93UGF0dGVybjs="},null]}