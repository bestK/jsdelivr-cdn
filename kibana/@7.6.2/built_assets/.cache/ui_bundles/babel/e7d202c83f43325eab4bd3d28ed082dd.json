{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/layers/styles/vector/properties/dynamic_size_property.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/layers/styles/vector/properties/dynamic_size_property.js","mtime":1585205045385},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkR5bmFtaWNTaXplUHJvcGVydHkgPSB2b2lkIDA7Cgp2YXIgX2R5bmFtaWNfc3R5bGVfcHJvcGVydHkgPSByZXF1aXJlKCIuL2R5bmFtaWNfc3R5bGVfcHJvcGVydHkiKTsKCnZhciBfc3ltYm9sX3V0aWxzID0gcmVxdWlyZSgiLi4vc3ltYm9sX3V0aWxzIik7Cgp2YXIgX3ZlY3Rvcl9zdHlsZV9kZWZhdWx0cyA9IHJlcXVpcmUoIi4uL3ZlY3Rvcl9zdHlsZV9kZWZhdWx0cyIpOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfY2lyY2xlX2ljb24gPSByZXF1aXJlKCIuLi9jb21wb25lbnRzL2xlZ2VuZC9jaXJjbGVfaWNvbiIpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CgpmdW5jdGlvbiBnZXRMaW5lV2lkdGhJY29ucygpIHsKICB2YXIgZGVmYXVsdFN0eWxlID0gewogICAgc3Ryb2tlOiAnZ3JleScsCiAgICBmaWxsOiAnbm9uZScsCiAgICB3aWR0aDogJzEycHgnCiAgfTsKICByZXR1cm4gW19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NpcmNsZV9pY29uLkNpcmNsZUljb24sIHsKICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0U3R5bGUsIHsKICAgICAgc3Ryb2tlV2lkdGg6ICcxcHgnCiAgICB9KQogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jaXJjbGVfaWNvbi5DaXJjbGVJY29uLCB7CiAgICBzdHlsZTogX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdFN0eWxlLCB7CiAgICAgIHN0cm9rZVdpZHRoOiAnMnB4JwogICAgfSkKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2lyY2xlX2ljb24uQ2lyY2xlSWNvbiwgewogICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRTdHlsZSwgewogICAgICBzdHJva2VXaWR0aDogJzNweCcKICAgIH0pCiAgfSldOwp9CgpmdW5jdGlvbiBnZXRTeW1ib2xTaXplSWNvbnMoKSB7CiAgdmFyIGRlZmF1bHRTdHlsZSA9IHsKICAgIHN0cm9rZTogJ2dyZXknLAogICAgZmlsbDogJ2dyZXknCiAgfTsKICByZXR1cm4gW19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NpcmNsZV9pY29uLkNpcmNsZUljb24sIHsKICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0U3R5bGUsIHsKICAgICAgd2lkdGg6ICc0cHgnCiAgICB9KQogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jaXJjbGVfaWNvbi5DaXJjbGVJY29uLCB7CiAgICBzdHlsZTogX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdFN0eWxlLCB7CiAgICAgIHdpZHRoOiAnOHB4JwogICAgfSkKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2lyY2xlX2ljb24uQ2lyY2xlSWNvbiwgewogICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRTdHlsZSwgewogICAgICB3aWR0aDogJzEycHgnCiAgICB9KQogIH0pXTsKfQoKdmFyIER5bmFtaWNTaXplUHJvcGVydHkgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfRHluYW1pY1N0eWxlUHJvcGVydHkpIHsKICBfaW5oZXJpdHMoRHluYW1pY1NpemVQcm9wZXJ0eSwgX0R5bmFtaWNTdHlsZVByb3BlcnR5KTsKCiAgZnVuY3Rpb24gRHluYW1pY1NpemVQcm9wZXJ0eShvcHRpb25zLCBzdHlsZU5hbWUsIGZpZWxkLCBnZXRGaWVsZE1ldGEsIGdldEZpZWxkRm9ybWF0dGVyLCBpc1N5bWJvbGl6ZWRBc0ljb24pIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHluYW1pY1NpemVQcm9wZXJ0eSk7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRHluYW1pY1NpemVQcm9wZXJ0eSkuY2FsbCh0aGlzLCBvcHRpb25zLCBzdHlsZU5hbWUsIGZpZWxkLCBnZXRGaWVsZE1ldGEsIGdldEZpZWxkRm9ybWF0dGVyKSk7CiAgICBfdGhpcy5faXNTeW1ib2xpemVkQXNJY29uID0gaXNTeW1ib2xpemVkQXNJY29uOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKER5bmFtaWNTaXplUHJvcGVydHksIFt7CiAgICBrZXk6ICJzdXBwb3J0c0ZlYXR1cmVTdGF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3VwcG9ydHNGZWF0dXJlU3RhdGUoKSB7CiAgICAgIC8vIG1iIHN0eWxlICJpY29uLXNpemUiIGRvZXMgbm90IHN1cHBvcnQgZmVhdHVyZSBzdGF0ZQogICAgICBpZiAodGhpcy5nZXRTdHlsZU5hbWUoKSA9PT0gX3ZlY3Rvcl9zdHlsZV9kZWZhdWx0cy5WRUNUT1JfU1RZTEVTLklDT05fU0laRSAmJiB0aGlzLl9pc1N5bWJvbGl6ZWRBc0ljb24pIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gLy8gbWIgc3R5bGUgInRleHQtc2l6ZSIgZG9lcyBub3Qgc3VwcG9ydCBmZWF0dXJlIHN0YXRlCgoKICAgICAgaWYgKHRoaXMuZ2V0U3R5bGVOYW1lKCkgPT09IF92ZWN0b3Jfc3R5bGVfZGVmYXVsdHMuVkVDVE9SX1NUWUxFUy5MQUJFTF9TSVpFKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzeW5jSGFsb1dpZHRoV2l0aE1iIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzeW5jSGFsb1dpZHRoV2l0aE1iKG1iTGF5ZXJJZCwgbWJNYXApIHsKICAgICAgdmFyIGhhbG9XaWR0aCA9IHRoaXMuZ2V0TWJTaXplRXhwcmVzc2lvbigpOwogICAgICBtYk1hcC5zZXRQYWludFByb3BlcnR5KG1iTGF5ZXJJZCwgJ2ljb24taGFsby13aWR0aCcsIGhhbG9XaWR0aCk7CiAgICB9CiAgfSwgewogICAga2V5OiAic3luY0ljb25JbWFnZUFuZFNpemVXaXRoTWIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHN5bmNJY29uSW1hZ2VBbmRTaXplV2l0aE1iKHN5bWJvbExheWVySWQsIG1iTWFwLCBzeW1ib2xJZCkgewogICAgICBpZiAodGhpcy5faXNTaXplRHluYW1pY0NvbmZpZ0NvbXBsZXRlKHRoaXMuX29wdGlvbnMpKSB7CiAgICAgICAgdmFyIGljb25QaXhlbHMgPSB0aGlzLl9vcHRpb25zLm1heFNpemUgPj0gX3N5bWJvbF91dGlscy5IQUxGX0xBUkdFX01BS0lfSUNPTl9TSVpFID8gX3N5bWJvbF91dGlscy5MQVJHRV9NQUtJX0lDT05fU0laRSA6IF9zeW1ib2xfdXRpbHMuU01BTExfTUFLSV9JQ09OX1NJWkU7CiAgICAgICAgbWJNYXAuc2V0TGF5b3V0UHJvcGVydHkoc3ltYm9sTGF5ZXJJZCwgJ2ljb24taW1hZ2UnLCAiIi5jb25jYXQoc3ltYm9sSWQsICItIikuY29uY2F0KGljb25QaXhlbHMpKTsKICAgICAgICB2YXIgaGFsZkljb25QaXhlbHMgPSBpY29uUGl4ZWxzIC8gMjsKICAgICAgICB2YXIgdGFyZ2V0TmFtZSA9IHRoaXMuZ2V0Q29tcHV0ZWRGaWVsZE5hbWUoKTsgLy8gVXNpbmcgcHJvcGVydHkgc3RhdGUgaW5zdGVhZCBvZiBmZWF0dXJlLXN0YXRlIGJlY2F1c2UgbGF5b3V0IHByb3BlcnRpZXMgZG8gbm90IHN1cHBvcnQgZmVhdHVyZS1zdGF0ZQoKICAgICAgICBtYk1hcC5zZXRMYXlvdXRQcm9wZXJ0eShzeW1ib2xMYXllcklkLCAnaWNvbi1zaXplJywgWydpbnRlcnBvbGF0ZScsIFsnbGluZWFyJ10sIFsnY29hbGVzY2UnLCBbJ2dldCcsIHRhcmdldE5hbWVdLCAwXSwgMCwgdGhpcy5fb3B0aW9ucy5taW5TaXplIC8gaGFsZkljb25QaXhlbHMsIDEsIHRoaXMuX29wdGlvbnMubWF4U2l6ZSAvIGhhbGZJY29uUGl4ZWxzXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbWJNYXAuc2V0TGF5b3V0UHJvcGVydHkoc3ltYm9sTGF5ZXJJZCwgJ2ljb24taW1hZ2UnLCBudWxsKTsKICAgICAgICBtYk1hcC5zZXRMYXlvdXRQcm9wZXJ0eShzeW1ib2xMYXllcklkLCAnaWNvbi1zaXplJywgbnVsbCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzeW5jQ2lyY2xlU3Ryb2tlV2lkdGhXaXRoTWIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHN5bmNDaXJjbGVTdHJva2VXaWR0aFdpdGhNYihtYkxheWVySWQsIG1iTWFwKSB7CiAgICAgIHZhciBsaW5lV2lkdGggPSB0aGlzLmdldE1iU2l6ZUV4cHJlc3Npb24oKTsKICAgICAgbWJNYXAuc2V0UGFpbnRQcm9wZXJ0eShtYkxheWVySWQsICdjaXJjbGUtc3Ryb2tlLXdpZHRoJywgbGluZVdpZHRoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzeW5jQ2lyY2xlUmFkaXVzV2l0aE1iIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzeW5jQ2lyY2xlUmFkaXVzV2l0aE1iKG1iTGF5ZXJJZCwgbWJNYXApIHsKICAgICAgdmFyIGNpcmNsZVJhZGl1cyA9IHRoaXMuZ2V0TWJTaXplRXhwcmVzc2lvbigpOwogICAgICBtYk1hcC5zZXRQYWludFByb3BlcnR5KG1iTGF5ZXJJZCwgJ2NpcmNsZS1yYWRpdXMnLCBjaXJjbGVSYWRpdXMpOwogICAgfQogIH0sIHsKICAgIGtleTogInN5bmNMaW5lV2lkdGhXaXRoTWIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHN5bmNMaW5lV2lkdGhXaXRoTWIobWJMYXllcklkLCBtYk1hcCkgewogICAgICB2YXIgbGluZVdpZHRoID0gdGhpcy5nZXRNYlNpemVFeHByZXNzaW9uKCk7CiAgICAgIG1iTWFwLnNldFBhaW50UHJvcGVydHkobWJMYXllcklkLCAnbGluZS13aWR0aCcsIGxpbmVXaWR0aCk7CiAgICB9CiAgfSwgewogICAga2V5OiAic3luY0xhYmVsU2l6ZVdpdGhNYiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3luY0xhYmVsU2l6ZVdpdGhNYihtYkxheWVySWQsIG1iTWFwKSB7CiAgICAgIHZhciBsaW5lV2lkdGggPSB0aGlzLmdldE1iU2l6ZUV4cHJlc3Npb24oKTsKICAgICAgbWJNYXAuc2V0TGF5b3V0UHJvcGVydHkobWJMYXllcklkLCAndGV4dC1zaXplJywgbGluZVdpZHRoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRNYlNpemVFeHByZXNzaW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNYlNpemVFeHByZXNzaW9uKCkgewogICAgICBpZiAodGhpcy5faXNTaXplRHluYW1pY0NvbmZpZ0NvbXBsZXRlKHRoaXMuX29wdGlvbnMpKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1iRGF0YURyaXZlblNpemUoewogICAgICAgICAgdGFyZ2V0TmFtZTogdGhpcy5nZXRDb21wdXRlZEZpZWxkTmFtZSgpLAogICAgICAgICAgbWluU2l6ZTogdGhpcy5fb3B0aW9ucy5taW5TaXplLAogICAgICAgICAgbWF4U2l6ZTogdGhpcy5fb3B0aW9ucy5tYXhTaXplCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0sIHsKICAgIGtleTogIl9nZXRNYkRhdGFEcml2ZW5TaXplIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0TWJEYXRhRHJpdmVuU2l6ZShfcmVmKSB7CiAgICAgIHZhciB0YXJnZXROYW1lID0gX3JlZi50YXJnZXROYW1lLAogICAgICAgICAgbWluU2l6ZSA9IF9yZWYubWluU2l6ZSwKICAgICAgICAgIG1heFNpemUgPSBfcmVmLm1heFNpemU7CiAgICAgIHZhciBsb29rdXAgPSB0aGlzLnN1cHBvcnRzRmVhdHVyZVN0YXRlKCkgPyAnZmVhdHVyZS1zdGF0ZScgOiAnZ2V0JzsKICAgICAgcmV0dXJuIFsnaW50ZXJwb2xhdGUnLCBbJ2xpbmVhciddLCBbJ2NvYWxlc2NlJywgW2xvb2t1cCwgdGFyZ2V0TmFtZV0sIDBdLCAwLCBtaW5TaXplLCAxLCBtYXhTaXplXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfaXNTaXplRHluYW1pY0NvbmZpZ0NvbXBsZXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNTaXplRHluYW1pY0NvbmZpZ0NvbXBsZXRlKCkgewogICAgICByZXR1cm4gdGhpcy5fZmllbGQgJiYgdGhpcy5fZmllbGQuaXNWYWxpZCgpICYmIF9sb2Rhc2guZGVmYXVsdC5oYXModGhpcy5fb3B0aW9ucywgJ21pblNpemUnKSAmJiBfbG9kYXNoLmRlZmF1bHQuaGFzKHRoaXMuX29wdGlvbnMsICdtYXhTaXplJyk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyUmFuZ2VMZWdlbmRIZWFkZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclJhbmdlTGVnZW5kSGVhZGVyKCkgewogICAgICB2YXIgaWNvbnM7CgogICAgICBpZiAodGhpcy5nZXRTdHlsZU5hbWUoKSA9PT0gX3ZlY3Rvcl9zdHlsZV9kZWZhdWx0cy5WRUNUT1JfU1RZTEVTLkxJTkVfV0lEVEgpIHsKICAgICAgICBpY29ucyA9IGdldExpbmVXaWR0aEljb25zKCk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5nZXRTdHlsZU5hbWUoKSA9PT0gX3ZlY3Rvcl9zdHlsZV9kZWZhdWx0cy5WRUNUT1JfU1RZTEVTLklDT05fU0laRSkgewogICAgICAgIGljb25zID0gZ2V0U3ltYm9sU2l6ZUljb25zKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgZ3V0dGVyU2l6ZTogInhzIiwKICAgICAgICBqdXN0aWZ5Q29udGVudDogInNwYWNlQmV0d2VlbiIsCiAgICAgICAgYWxpZ25JdGVtczogImNlbnRlciIKICAgICAgfSwgaWNvbnMubWFwKGZ1bmN0aW9uIChpY29uLCBpbmRleCkgewogICAgICAgIHZhciBpc0xhc3QgPSBpbmRleCA9PT0gaWNvbnMubGVuZ3RoIC0gMTsKICAgICAgICB2YXIgc3BhY2VyOwoKICAgICAgICBpZiAoIWlzTGFzdCkgewogICAgICAgICAgc3BhY2VyID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSG9yaXpvbnRhbFJ1bGUsIHsKICAgICAgICAgICAgbWFyZ2luOiAieHMiCiAgICAgICAgICB9KSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIHsKICAgICAgICAgIGtleTogaW5kZXgKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICAgIGdyb3c6IGZhbHNlCiAgICAgICAgfSwgaWNvbiksIHNwYWNlcik7CiAgICAgIH0pKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBEeW5hbWljU2l6ZVByb3BlcnR5Owp9KF9keW5hbWljX3N0eWxlX3Byb3BlcnR5LkR5bmFtaWNTdHlsZVByb3BlcnR5KTsKCmV4cG9ydHMuRHluYW1pY1NpemVQcm9wZXJ0eSA9IER5bmFtaWNTaXplUHJvcGVydHk7"},null]}