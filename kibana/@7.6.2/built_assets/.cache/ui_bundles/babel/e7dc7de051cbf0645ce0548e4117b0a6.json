{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/cross_cluster_replication/public/app/app.js","dependencies":[{"path":"x-pack/legacy/plugins/cross_cluster_replication/public/app/app.js","mtime":1585205044097},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFwcCA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJwcm9wLXR5cGVzIikpOwoKdmFyIF9yZWFjdFJvdXRlckRvbSA9IHJlcXVpcmUoInJlYWN0LXJvdXRlci1kb20iKTsKCnZhciBfbm90aWZ5ID0gcmVxdWlyZSgidWkvbm90aWZ5Iik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX2NvbXBvbmVudHMgPSByZXF1aXJlKCIuL2NvbXBvbmVudHMiKTsKCnZhciBfcm91dGluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi9zZXJ2aWNlcy9yb3V0aW5nIikpOwoKdmFyIF9hcGkgPSByZXF1aXJlKCIuL3NlcnZpY2VzL2FwaSIpOwoKdmFyIF9zZWN0aW9ucyA9IHJlcXVpcmUoIi4vc2VjdGlvbnMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKdmFyIEFwcENvbXBvbmVudCA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9Db21wb25lbnQpIHsKICBfaW5oZXJpdHMoQXBwQ29tcG9uZW50LCBfQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gQXBwQ29tcG9uZW50KCkgewogICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7CgogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBcHBDb21wb25lbnQpOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgfQoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoQXBwQ29tcG9uZW50KSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7CgogICAgX3RoaXMucmVnaXN0ZXJSb3V0ZXIoKTsKCiAgICBfdGhpcy5zdGF0ZSA9IHsKICAgICAgaXNGZXRjaGluZ1Blcm1pc3Npb25zOiBmYWxzZSwKICAgICAgZmV0Y2hQZXJtaXNzaW9uRXJyb3I6IHVuZGVmaW5lZCwKICAgICAgaGFzUGVybWlzc2lvbjogZmFsc2UsCiAgICAgIG1pc3NpbmdDbHVzdGVyUHJpdmlsZWdlczogW10KICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQXBwQ29tcG9uZW50LCBbewogICAga2V5OiAiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHsKICAgICAgX3JvdXRpbmcuZGVmYXVsdC51c2VySGFzTGVmdEFwcCA9IGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbXBvbmVudERpZE1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHsKICAgICAgdGhpcy5jaGVja1Blcm1pc3Npb25zKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY29tcG9uZW50V2lsbFVubW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkgewogICAgICBfcm91dGluZy5kZWZhdWx0LnVzZXJIYXNMZWZ0QXBwID0gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjaGVja1Blcm1pc3Npb25zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja1Blcm1pc3Npb25zKCkgewogICAgICB2YXIgX3JlZiwgaGFzUGVybWlzc2lvbiwgbWlzc2luZ0NsdXN0ZXJQcml2aWxlZ2VzOwoKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBjaGVja1Blcm1pc3Npb25zJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsKICAgICAgICAgICAgICAgIGlzRmV0Y2hpbmdQZXJtaXNzaW9uczogdHJ1ZQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoKDAsIF9hcGkubG9hZFBlcm1pc3Npb25zKSgpKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBfcmVmID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBoYXNQZXJtaXNzaW9uID0gX3JlZi5oYXNQZXJtaXNzaW9uOwogICAgICAgICAgICAgIG1pc3NpbmdDbHVzdGVyUHJpdmlsZWdlcyA9IF9yZWYubWlzc2luZ0NsdXN0ZXJQcml2aWxlZ2VzOwogICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoewogICAgICAgICAgICAgICAgaXNGZXRjaGluZ1Blcm1pc3Npb25zOiBmYWxzZSwKICAgICAgICAgICAgICAgIGhhc1Blcm1pc3Npb246IGhhc1Blcm1pc3Npb24sCiAgICAgICAgICAgICAgICBtaXNzaW5nQ2x1c3RlclByaXZpbGVnZXM6IG1pc3NpbmdDbHVzdGVyUHJpdmlsZWdlcwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDEwOwogICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMSk7CgogICAgICAgICAgICAgIGlmICghKF9jb250ZXh0LnQwICYmIF9jb250ZXh0LnQwLmRhdGEpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHRoaXMuc2V0U3RhdGUoewogICAgICAgICAgICAgICAgaXNGZXRjaGluZ1Blcm1pc3Npb25zOiBmYWxzZSwKICAgICAgICAgICAgICAgIGZldGNoUGVybWlzc2lvbkVycm9yOiBfY29udGV4dC50MAogICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgLy8gVGhpcyBlcnJvciBpc24ndCBhbiBIVFRQIGVycm9yLCBzbyBsZXQgdGhlIGZhdGFsIGVycm9yIHNjcmVlbiB0ZWxsIHRoZSB1c2VyIHNvbWV0aGluZwogICAgICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgaGFwcGVuZWQuCiAgICAgICAgICAgICAgKDAsIF9ub3RpZnkuZmF0YWxFcnJvcikoX2NvbnRleHQudDAsIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5hcHAuY2hlY2tQZXJtaXNzaW9uc0ZhdGFsRXJyb3JUaXRsZScsIHsKICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ3Jvc3MtQ2x1c3RlciBSZXBsaWNhdGlvbiBhcHAnCiAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgbnVsbCwgdGhpcywgW1sxLCAxMF1dKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWdpc3RlclJvdXRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJSb3V0ZXIoKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsCiAgICAgICAgICBoaXN0b3J5ID0gX3RoaXMkcHJvcHMuaGlzdG9yeSwKICAgICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMubG9jYXRpb247CiAgICAgIF9yb3V0aW5nLmRlZmF1bHQucmVhY3RSb3V0ZXIgPSB7CiAgICAgICAgaGlzdG9yeTogaGlzdG9yeSwKICAgICAgICByb3V0ZTogewogICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uCiAgICAgICAgfQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLAogICAgICAgICAgaXNGZXRjaGluZ1Blcm1pc3Npb25zID0gX3RoaXMkc3RhdGUuaXNGZXRjaGluZ1Blcm1pc3Npb25zLAogICAgICAgICAgZmV0Y2hQZXJtaXNzaW9uRXJyb3IgPSBfdGhpcyRzdGF0ZS5mZXRjaFBlcm1pc3Npb25FcnJvciwKICAgICAgICAgIGhhc1Blcm1pc3Npb24gPSBfdGhpcyRzdGF0ZS5oYXNQZXJtaXNzaW9uLAogICAgICAgICAgbWlzc2luZ0NsdXN0ZXJQcml2aWxlZ2VzID0gX3RoaXMkc3RhdGUubWlzc2luZ0NsdXN0ZXJQcml2aWxlZ2VzOwoKICAgICAgaWYgKGlzRmV0Y2hpbmdQZXJtaXNzaW9ucykgewogICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUGFnZUNvbnRlbnQsIHsKICAgICAgICAgIGhvcml6b250YWxQb3NpdGlvbjogImNlbnRlciIKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgICBhbGlnbkl0ZW1zOiAiY2VudGVyIiwKICAgICAgICAgIGd1dHRlclNpemU6ICJtIgogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTG9hZGluZ1NwaW5uZXIsIHsKICAgICAgICAgIHNpemU6ICJsIgogICAgICAgIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgICAgIHNpemU6ICJzIgogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgyIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXBwLnBlcm1pc3Npb25DaGVja1RpdGxlIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQ2hlY2tpbmcgcGVybWlzc2lvbnNcdTIwMjYiCiAgICAgICAgfSkpKSkpKTsKICAgICAgfQoKICAgICAgaWYgKGZldGNoUGVybWlzc2lvbkVycm9yKSB7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnRzLlNlY3Rpb25FcnJvciwgewogICAgICAgICAgdGl0bGU6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXBwLnBlcm1pc3Npb25DaGVja0Vycm9yVGl0bGUiLAogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkVycm9yIGNoZWNraW5nIHBlcm1pc3Npb25zIgogICAgICAgICAgfSksCiAgICAgICAgICBlcnJvcjogZmV0Y2hQZXJtaXNzaW9uRXJyb3IKICAgICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgICAgc2l6ZTogIm0iCiAgICAgICAgfSkpOwogICAgICB9CgogICAgICBpZiAoIWhhc1Blcm1pc3Npb24pIHsKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhZ2VDb250ZW50LCB7CiAgICAgICAgICBob3Jpem9udGFsUG9zaXRpb246ICJjZW50ZXIiCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUVtcHR5UHJvbXB0LCB7CiAgICAgICAgICBpY29uVHlwZTogInNlY3VyaXR5QXBwIiwKICAgICAgICAgIGljb25Db2xvcjogbnVsbCwKICAgICAgICAgIHRpdGxlOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMiIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXBwLmRlbmllZFBlcm1pc3Npb25UaXRsZSIsCiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiWW91J3JlIG1pc3NpbmcgY2x1c3RlciBwcml2aWxlZ2VzIgogICAgICAgICAgfSkpLAogICAgICAgICAgYm9keTogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXBwLmRlbmllZFBlcm1pc3Npb25EZXNjcmlwdGlvbiIsCiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVG8gdXNlIENyb3NzLUNsdXN0ZXIgUmVwbGljYXRpb24sIHlvdSBtdXN0IGhhdmUge2NsdXN0ZXJQcml2aWxlZ2VzQ291bnQsIHBsdXJhbCwgb25lIHt0aGlzIGNsdXN0ZXIgcHJpdmlsZWdlfSBvdGhlciB7dGhlc2UgY2x1c3RlciBwcml2aWxlZ2VzfX06IHtjbHVzdGVyUHJpdmlsZWdlc30uIiwKICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgY2x1c3RlclByaXZpbGVnZXM6IG1pc3NpbmdDbHVzdGVyUHJpdmlsZWdlcy5qb2luKCcsICcpLAogICAgICAgICAgICAgIGNsdXN0ZXJQcml2aWxlZ2VzQ291bnQ6IG1pc3NpbmdDbHVzdGVyUHJpdmlsZWdlcy5sZW5ndGgKICAgICAgICAgICAgfQogICAgICAgICAgfSkpCiAgICAgICAgfSkpOwogICAgICB9CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSb3V0ZXJEb20uU3dpdGNoLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlckRvbS5SZWRpcmVjdCwgewogICAgICAgIGV4YWN0OiB0cnVlLAogICAgICAgIGZyb206ICIiLmNvbmNhdChfY29uc3RhbnRzLkJBU0VfUEFUSCksCiAgICAgICAgdG86ICIiLmNvbmNhdChfY29uc3RhbnRzLkJBU0VfUEFUSCwgIi9mb2xsb3dlcl9pbmRpY2VzIikKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyRG9tLlJvdXRlLCB7CiAgICAgICAgZXhhY3Q6IHRydWUsCiAgICAgICAgcGF0aDogIiIuY29uY2F0KF9jb25zdGFudHMuQkFTRV9QQVRILCAiL2F1dG9fZm9sbG93X3BhdHRlcm5zL2FkZCIpLAogICAgICAgIGNvbXBvbmVudDogX3NlY3Rpb25zLkF1dG9Gb2xsb3dQYXR0ZXJuQWRkCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlckRvbS5Sb3V0ZSwgewogICAgICAgIGV4YWN0OiB0cnVlLAogICAgICAgIHBhdGg6ICIiLmNvbmNhdChfY29uc3RhbnRzLkJBU0VfUEFUSCwgIi9hdXRvX2ZvbGxvd19wYXR0ZXJucy9lZGl0LzppZCIpLAogICAgICAgIGNvbXBvbmVudDogX3NlY3Rpb25zLkF1dG9Gb2xsb3dQYXR0ZXJuRWRpdAogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSb3V0ZXJEb20uUm91dGUsIHsKICAgICAgICBleGFjdDogdHJ1ZSwKICAgICAgICBwYXRoOiAiIi5jb25jYXQoX2NvbnN0YW50cy5CQVNFX1BBVEgsICIvZm9sbG93ZXJfaW5kaWNlcy9hZGQiKSwKICAgICAgICBjb21wb25lbnQ6IF9zZWN0aW9ucy5Gb2xsb3dlckluZGV4QWRkCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlckRvbS5Sb3V0ZSwgewogICAgICAgIGV4YWN0OiB0cnVlLAogICAgICAgIHBhdGg6ICIiLmNvbmNhdChfY29uc3RhbnRzLkJBU0VfUEFUSCwgIi9mb2xsb3dlcl9pbmRpY2VzL2VkaXQvOmlkIiksCiAgICAgICAgY29tcG9uZW50OiBfc2VjdGlvbnMuRm9sbG93ZXJJbmRleEVkaXQKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyRG9tLlJvdXRlLCB7CiAgICAgICAgZXhhY3Q6IHRydWUsCiAgICAgICAgcGF0aDogIiIuY29uY2F0KF9jb25zdGFudHMuQkFTRV9QQVRILCAiLzpzZWN0aW9uIiksCiAgICAgICAgY29tcG9uZW50OiBfc2VjdGlvbnMuQ3Jvc3NDbHVzdGVyUmVwbGljYXRpb25Ib21lCiAgICAgIH0pKSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQXBwQ29tcG9uZW50Owp9KF9yZWFjdC5Db21wb25lbnQpOwoKX2RlZmluZVByb3BlcnR5KEFwcENvbXBvbmVudCwgInByb3BUeXBlcyIsIHsKICBoaXN0b3J5OiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoewogICAgcHVzaDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICAgIGNyZWF0ZUhyZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQKICB9KS5pc1JlcXVpcmVkCn0pOwoKdmFyIEFwcCA9ICgwLCBfcmVhY3RSb3V0ZXJEb20ud2l0aFJvdXRlcikoQXBwQ29tcG9uZW50KTsKZXhwb3J0cy5BcHAgPSBBcHA7"},null]}