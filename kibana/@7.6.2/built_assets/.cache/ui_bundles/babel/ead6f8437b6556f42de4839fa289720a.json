{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/reporting/public/panel_actions/get_csv_panel_action.js","dependencies":[{"path":"x-pack/legacy/plugins/reporting/public/panel_actions/get_csv_panel_action.js","mtime":1585205046924},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9kYXRlbWF0aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiQGVsYXN0aWMvZGF0ZW1hdGgiKSk7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfbW9tZW50VGltZXpvbmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIm1vbWVudC10aW1lem9uZSIpKTsKCnZhciBfa2ZldGNoID0gcmVxdWlyZSgidWkva2ZldGNoIik7Cgp2YXIgX25vdGlmeSA9IHJlcXVpcmUoInVpL25vdGlmeSIpOwoKdmFyIF9jaHJvbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInVpL2Nocm9tZSIpKTsKCnZhciBfbmV3X3BsYXRmb3JtID0gcmVxdWlyZSgidWkvbmV3X3BsYXRmb3JtIik7Cgp2YXIgX3B1YmxpYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9wbHVnaW5zL3VpX2FjdGlvbnMvcHVibGljIik7Cgp2YXIgX3B1YmxpYzIgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGVnYWN5L2NvcmVfcGx1Z2lucy9lbWJlZGRhYmxlX2FwaS9wdWJsaWMvbnBfcmVhZHkvcHVibGljIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9sZWdhY3kvY29yZV9wbHVnaW5zL2tpYmFuYS9wdWJsaWMvZGlzY292ZXIvbnBfcmVhZHkvZW1iZWRkYWJsZS9jb25zdGFudHMiKTsKCnZhciBfY29uc3RhbnRzMiA9IHJlcXVpcmUoIi4uLy4uL2NvbW1vbi9jb25zdGFudHMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgQVBJX0JBU0VfVVJMID0gIiIuY29uY2F0KF9jb25zdGFudHMyLkFQSV9CQVNFX1VSTF9WMSwgIi9nZW5lcmF0ZS9pbW1lZGlhdGUvY3N2L3NhdmVkLW9iamVjdCIpOwp2YXIgQ1NWX1JFUE9SVElOR19BQ1RJT04gPSAnZG93bmxvYWRDc3ZSZXBvcnQnOwoKZnVuY3Rpb24gaXNTYXZlZFNlYXJjaEVtYmVkZGFibGUoZW1iZWRkYWJsZSkgewogIHJldHVybiBlbWJlZGRhYmxlLnR5cGUgPT09IF9jb25zdGFudHMuU0VBUkNIX0VNQkVEREFCTEVfVFlQRTsKfQoKdmFyIEdldENzdlJlcG9ydFBhbmVsQWN0aW9uID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gR2V0Q3N2UmVwb3J0UGFuZWxBY3Rpb24oKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHZXRDc3ZSZXBvcnRQYW5lbEFjdGlvbik7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJpc0Rvd25sb2FkaW5nIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInR5cGUiLCBDU1ZfUkVQT1JUSU5HX0FDVElPTik7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJpZCIsIENTVl9SRVBPUlRJTkdfQUNUSU9OKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImlzQ29tcGF0aWJsZSIsIGZ1bmN0aW9uIF9jYWxsZWUoY29udGV4dCkgewogICAgICB2YXIgZW5hYmxlUGFuZWxBY3Rpb25Eb3dubG9hZCwgZW1iZWRkYWJsZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBlbmFibGVQYW5lbEFjdGlvbkRvd25sb2FkID0gX2Nocm9tZS5kZWZhdWx0LmdldEluamVjdGVkKCdlbmFibGVQYW5lbEFjdGlvbkRvd25sb2FkJyk7CgogICAgICAgICAgICAgIGlmIChlbmFibGVQYW5lbEFjdGlvbkRvd25sb2FkKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgZmFsc2UpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGVtYmVkZGFibGUgPSBjb250ZXh0LmVtYmVkZGFibGU7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgZW1iZWRkYWJsZS5nZXRJbnB1dCgpLnZpZXdNb2RlICE9PSBfcHVibGljMi5WaWV3TW9kZS5FRElUICYmIGVtYmVkZGFibGUudHlwZSA9PT0gJ3NlYXJjaCcpOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiZXhlY3V0ZSIsIGZ1bmN0aW9uIF9jYWxsZWUyKGNvbnRleHQpIHsKICAgICAgdmFyIGVtYmVkZGFibGUsIF9lbWJlZGRhYmxlJGdldElucHV0LCBfZW1iZWRkYWJsZSRnZXRJbnB1dCQsIHRvLCBmcm9tLCBzZWFyY2hFbWJlZGRhYmxlLCBzZWFyY2hSZXF1ZXN0Qm9keSwgc3RhdGUsIGtpYmFuYVRpbWV6b25lLCBpZCwgZmlsZW5hbWUsIHRpbWV6b25lLCBmcm9tVGltZSwgdG9UaW1lLCBib2R5OwoKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgZW1iZWRkYWJsZSA9IGNvbnRleHQuZW1iZWRkYWJsZTsKCiAgICAgICAgICAgICAgaWYgKGlzU2F2ZWRTZWFyY2hFbWJlZGRhYmxlKGVtYmVkZGFibGUpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHRocm93IG5ldyBfcHVibGljLkluY29tcGF0aWJsZUFjdGlvbkVycm9yKCk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgaWYgKCFfdGhpcy5pc0Rvd25sb2FkaW5nKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBfZW1iZWRkYWJsZSRnZXRJbnB1dCA9IGVtYmVkZGFibGUuZ2V0SW5wdXQoKSwgX2VtYmVkZGFibGUkZ2V0SW5wdXQkID0gX2VtYmVkZGFibGUkZ2V0SW5wdXQudGltZVJhbmdlLCB0byA9IF9lbWJlZGRhYmxlJGdldElucHV0JC50bywgZnJvbSA9IF9lbWJlZGRhYmxlJGdldElucHV0JC5mcm9tOwogICAgICAgICAgICAgIHNlYXJjaEVtYmVkZGFibGUgPSBlbWJlZGRhYmxlOwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gOTsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKF90aGlzLmdldFNlYXJjaFJlcXVlc3RCb2R5KHsKICAgICAgICAgICAgICAgIHNlYXJjaEVtYmVkZGFibGU6IHNlYXJjaEVtYmVkZGFibGUKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgc2VhcmNoUmVxdWVzdEJvZHkgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICBzdGF0ZSA9IF8ucGljayhzZWFyY2hSZXF1ZXN0Qm9keSwgWydzb3J0JywgJ2RvY3ZhbHVlX2ZpZWxkcycsICdxdWVyeSddKTsKICAgICAgICAgICAgICBraWJhbmFUaW1lem9uZSA9IF9jaHJvbWUuZGVmYXVsdC5nZXRVaVNldHRpbmdzQ2xpZW50KCkuZ2V0KCdkYXRlRm9ybWF0OnR6Jyk7CiAgICAgICAgICAgICAgaWQgPSAic2VhcmNoOiIuY29uY2F0KGVtYmVkZGFibGUuZ2V0U2F2ZWRTZWFyY2goKS5pZCk7CiAgICAgICAgICAgICAgZmlsZW5hbWUgPSBlbWJlZGRhYmxlLmdldFRpdGxlKCk7CiAgICAgICAgICAgICAgdGltZXpvbmUgPSBraWJhbmFUaW1lem9uZSA9PT0gJ0Jyb3dzZXInID8gX21vbWVudFRpbWV6b25lLmRlZmF1bHQudHouZ3Vlc3MoKSA6IGtpYmFuYVRpbWV6b25lOwogICAgICAgICAgICAgIGZyb21UaW1lID0gX2RhdGVtYXRoLmRlZmF1bHQucGFyc2UoZnJvbSk7CiAgICAgICAgICAgICAgdG9UaW1lID0gX2RhdGVtYXRoLmRlZmF1bHQucGFyc2UodG8pOwoKICAgICAgICAgICAgICBpZiAoISghZnJvbVRpbWUgfHwgIXRvVGltZSkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBfdGhpcy5vbkdlbmVyYXRpb25GYWlsKG5ldyBFcnJvcigiSW52YWxpZCB0aW1lIHJhbmdlOiBGcm9tOiAiLmNvbmNhdChmcm9tVGltZSwgIiwgVG86ICIpLmNvbmNhdCh0b1RpbWUpKSkpOwoKICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgdGltZXJhbmdlOiB7CiAgICAgICAgICAgICAgICAgIG1pbjogZnJvbVRpbWUuZm9ybWF0KCksCiAgICAgICAgICAgICAgICAgIG1heDogdG9UaW1lLmZvcm1hdCgpLAogICAgICAgICAgICAgICAgICB0aW1lem9uZTogdGltZXpvbmUKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBfdGhpcy5pc0Rvd25sb2FkaW5nID0gdHJ1ZTsKCiAgICAgICAgICAgICAgX25vdGlmeS50b2FzdE5vdGlmaWNhdGlvbnMuYWRkU3VjY2Vzcyh7CiAgICAgICAgICAgICAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnJlcG9ydGluZy5kYXNoYm9hcmQuY3N2RG93bmxvYWRTdGFydGVkVGl0bGUnLCB7CiAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQ1NWIERvd25sb2FkIFN0YXJ0ZWQiCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIHRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5yZXBvcnRpbmcuZGFzaGJvYXJkLmNzdkRvd25sb2FkU3RhcnRlZE1lc3NhZ2UnLCB7CiAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiWW91ciBDU1Ygd2lsbCBkb3dubG9hZCBtb21lbnRhcmlseS4iCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICdkYXRhLXRlc3Qtc3Viaic6ICdjc3ZEb3dubG9hZFN0YXJ0ZWQnCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjQ7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCgoMCwgX2tmZXRjaC5rZmV0Y2gpKHsKICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICAgICAgcGF0aG5hbWU6ICIiLmNvbmNhdChBUElfQkFTRV9VUkwsICIvIikuY29uY2F0KGlkKSwKICAgICAgICAgICAgICAgIGJvZHk6IGJvZHkKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyYXdSZXNwb25zZSkgewogICAgICAgICAgICAgICAgX3RoaXMuaXNEb3dubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgdmFyIGRvd25sb2FkID0gIiIuY29uY2F0KGZpbGVuYW1lLCAiLmNzdiIpOwogICAgICAgICAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbcmF3UmVzcG9uc2VdLCB7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0L2NzdjtjaGFyc2V0PXV0Zi04OycKICAgICAgICAgICAgICAgIH0pOyAvLyBIYWNrIGZvciBJRTExIFN1cHBvcnQKCiAgICAgICAgICAgICAgICBpZiAod2luZG93Lm5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IoYmxvYiwgZG93bmxvYWQpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBhID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgICAgICAgIHZhciBkb3dubG9hZE9iamVjdCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpOwogICAgICAgICAgICAgICAgYS5ocmVmID0gZG93bmxvYWRPYmplY3Q7CiAgICAgICAgICAgICAgICBhLmRvd25sb2FkID0gZG93bmxvYWQ7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpOwogICAgICAgICAgICAgICAgYS5jbGljaygpOwogICAgICAgICAgICAgICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwoZG93bmxvYWRPYmplY3QpOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhKTsKICAgICAgICAgICAgICB9KS5jYXRjaChfdGhpcy5vbkdlbmVyYXRpb25GYWlsLmJpbmQoX3RoaXMpKSk7CgogICAgICAgICAgICBjYXNlIDI0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9KTsKCiAgICB0aGlzLmlzRG93bmxvYWRpbmcgPSBmYWxzZTsKICB9CgogIF9jcmVhdGVDbGFzcyhHZXRDc3ZSZXBvcnRQYW5lbEFjdGlvbiwgW3sKICAgIGtleTogImdldEljb25UeXBlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJY29uVHlwZSgpIHsKICAgICAgcmV0dXJuICdkb2N1bWVudCc7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0RGlzcGxheU5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKCkgewogICAgICByZXR1cm4gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnJlcG9ydGluZy5kYXNoYm9hcmQuZG93bmxvYWRDc3ZQYW5lbFRpdGxlJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRG93bmxvYWQgQ1NWJwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRTZWFyY2hSZXF1ZXN0Qm9keSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VhcmNoUmVxdWVzdEJvZHkoX3JlZikgewogICAgICB2YXIgc2VhcmNoRW1iZWRkYWJsZSwgYWRhcHRlcnM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gZ2V0U2VhcmNoUmVxdWVzdEJvZHkkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHNlYXJjaEVtYmVkZGFibGUgPSBfcmVmLnNlYXJjaEVtYmVkZGFibGU7CiAgICAgICAgICAgICAgYWRhcHRlcnMgPSBzZWFyY2hFbWJlZGRhYmxlLmdldEluc3BlY3RvckFkYXB0ZXJzKCk7CgogICAgICAgICAgICAgIGlmIChhZGFwdGVycykgewogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwge30pOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGlmICghKGFkYXB0ZXJzLnJlcXVlc3RzLnJlcXVlc3RzLmxlbmd0aCA9PT0gMCkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHt9KTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgc2VhcmNoRW1iZWRkYWJsZS5nZXRTYXZlZFNlYXJjaCgpLnNlYXJjaFNvdXJjZS5nZXRTZWFyY2hSZXF1ZXN0Qm9keSgpKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIm9uR2VuZXJhdGlvbkZhaWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uR2VuZXJhdGlvbkZhaWwoZXJyb3IpIHsKICAgICAgdGhpcy5pc0Rvd25sb2FkaW5nID0gZmFsc2U7CgogICAgICBfbm90aWZ5LnRvYXN0Tm90aWZpY2F0aW9ucy5hZGREYW5nZXIoewogICAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2sucmVwb3J0aW5nLmRhc2hib2FyZC5mYWlsZWRDc3ZEb3dubG9hZFRpdGxlJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJDU1YgZG93bmxvYWQgZmFpbGVkIgogICAgICAgIH0pLAogICAgICAgIHRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5yZXBvcnRpbmcuZGFzaGJvYXJkLmZhaWxlZENzdkRvd25sb2FkTWVzc2FnZScsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiV2UgY291bGRuJ3QgZ2VuZXJhdGUgeW91ciBDU1YgYXQgdGhpcyB0aW1lLiIKICAgICAgICB9KSwKICAgICAgICAnZGF0YS10ZXN0LXN1YmonOiAnZG93bmxvYWRDc3ZGYWlsJwogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBHZXRDc3ZSZXBvcnRQYW5lbEFjdGlvbjsKfSgpOwoKdmFyIGFjdGlvbiA9IG5ldyBHZXRDc3ZSZXBvcnRQYW5lbEFjdGlvbigpOwoKX25ld19wbGF0Zm9ybS5ucFNldHVwLnBsdWdpbnMudWlBY3Rpb25zLnJlZ2lzdGVyQWN0aW9uKGFjdGlvbik7CgpfbmV3X3BsYXRmb3JtLm5wU2V0dXAucGx1Z2lucy51aUFjdGlvbnMuYXR0YWNoQWN0aW9uKF9wdWJsaWMyLkNPTlRFWFRfTUVOVV9UUklHR0VSLCBhY3Rpb24uaWQpOw=="},null]}