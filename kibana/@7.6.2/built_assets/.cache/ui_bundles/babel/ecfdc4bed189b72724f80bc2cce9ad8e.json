{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/vis_type_timeseries/public/editor_controller.js","dependencies":[{"path":"src/legacy/core_plugins/vis_type_timeseries/public/editor_controller.js","mtime":1585205040323},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkVkaXRvckNvbnRyb2xsZXIgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcmVhY3REb20gPSByZXF1aXJlKCJyZWFjdC1kb20iKTsKCnZhciBfZmV0Y2hfZmllbGRzID0gcmVxdWlyZSgiLi9saWIvZmV0Y2hfZmllbGRzIik7Cgp2YXIgX3NlcnZpY2VzID0gcmVxdWlyZSgiLi9zZXJ2aWNlcyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKdmFyIEVkaXRvckNvbnRyb2xsZXIgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBFZGl0b3JDb250cm9sbGVyKGVsLCBzYXZlZE9iaikgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRWRpdG9yQ29udHJvbGxlcik7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJmZXRjaERlZmF1bHRJbmRleFBhdHRlcm4iLCBmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgaW5kZXhQYXR0ZXJuOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoKDAsIF9zZXJ2aWNlcy5nZXRTYXZlZE9iamVjdHNDbGllbnQpKCkuY2xpZW50LmdldCgnaW5kZXgtcGF0dGVybicsICgwLCBfc2VydmljZXMuZ2V0VUlTZXR0aW5ncykoKS5nZXQoJ2RlZmF1bHRJbmRleCcpKSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJuID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBpbmRleFBhdHRlcm4uYXR0cmlidXRlcyk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJmZXRjaERlZmF1bHRQYXJhbXMiLCBmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIF9yZWYsIHRpdGxlLCB0aW1lRmllbGROYW1lOwoKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoX3RoaXMuZmV0Y2hEZWZhdWx0SW5kZXhQYXR0ZXJuKCkpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIF9yZWYgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICB0aXRsZSA9IF9yZWYudGl0bGU7CiAgICAgICAgICAgICAgdGltZUZpZWxkTmFtZSA9IF9yZWYudGltZUZpZWxkTmFtZTsKICAgICAgICAgICAgICBfdGhpcy5zdGF0ZS52aXMucGFyYW1zLmRlZmF1bHRfaW5kZXhfcGF0dGVybiA9IHRpdGxlOwogICAgICAgICAgICAgIF90aGlzLnN0YXRlLnZpcy5wYXJhbXMuZGVmYXVsdF90aW1lZmllbGQgPSB0aW1lRmllbGROYW1lOwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gOTsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKCgwLCBfZmV0Y2hfZmllbGRzLmZldGNoSW5kZXhQYXR0ZXJuRmllbGRzKShfdGhpcy5zdGF0ZS52aXMpKTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBfdGhpcy5zdGF0ZS52aXMuZmllbGRzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgX3RoaXMuc3RhdGUuaXNMb2FkZWQgPSB0cnVlOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJnZXRDb21wb25lbnQiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfdGhpcy5zdGF0ZS52aXMudHlwZS5lZGl0b3JDb25maWcuY29tcG9uZW50OwogICAgfSk7CgogICAgdGhpcy5lbCA9IGVsOwogICAgdGhpcy5zdGF0ZSA9IHsKICAgICAgc2F2ZWRPYmo6IHNhdmVkT2JqLAogICAgICB2aXM6IHNhdmVkT2JqLnZpcywKICAgICAgaXNMb2FkZWQ6IGZhbHNlCiAgICB9OwogIH0KCiAgX2NyZWF0ZUNsYXNzKEVkaXRvckNvbnRyb2xsZXIsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcihwYXJhbXMpIHsKICAgICAgdmFyIENvbXBvbmVudCwgSTE4bkNvbnRleHQ7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gcmVuZGVyJChfY29udGV4dDMpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBDb21wb25lbnQgPSB0aGlzLmdldENvbXBvbmVudCgpOwogICAgICAgICAgICAgIEkxOG5Db250ZXh0ID0gKDAsIF9zZXJ2aWNlcy5nZXRJMThuKSgpLkNvbnRleHQ7CiAgICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gIXRoaXMuc3RhdGUuaXNMb2FkZWQ7CgogICAgICAgICAgICAgIGlmICghX2NvbnRleHQzLnQwKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDY7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNjsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHRoaXMuZmV0Y2hEZWZhdWx0UGFyYW1zKCkpOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICgwLCBfcmVhY3REb20ucmVuZGVyKShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEkxOG5Db250ZXh0LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgewogICAgICAgICAgICAgICAgY29uZmlnOiAoMCwgX3NlcnZpY2VzLmdldFVJU2V0dGluZ3MpKCksCiAgICAgICAgICAgICAgICB2aXM6IHRoaXMuc3RhdGUudmlzLAogICAgICAgICAgICAgICAgdmlzRmllbGRzOiB0aGlzLnN0YXRlLnZpcy5maWVsZHMsCiAgICAgICAgICAgICAgICB2aXNQYXJhbXM6IHRoaXMuc3RhdGUudmlzLnBhcmFtcywKICAgICAgICAgICAgICAgIHNhdmVkT2JqOiB0aGlzLnN0YXRlLnNhdmVkT2JqLAogICAgICAgICAgICAgICAgdGltZVJhbmdlOiBwYXJhbXMudGltZVJhbmdlLAogICAgICAgICAgICAgICAgcmVuZGVyQ29tcGxldGU6IGZ1bmN0aW9uIHJlbmRlckNvbXBsZXRlKCkge30sCiAgICAgICAgICAgICAgICBpc0VkaXRvck1vZGU6IHRydWUsCiAgICAgICAgICAgICAgICBhcHBTdGF0ZTogcGFyYW1zLmFwcFN0YXRlCiAgICAgICAgICAgICAgfSkpLCB0aGlzLmVsKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIHRoaXMpOwogICAgfQogIH0sIHsKICAgIGtleTogImRlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgICgwLCBfcmVhY3REb20udW5tb3VudENvbXBvbmVudEF0Tm9kZSkodGhpcy5lbCk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRWRpdG9yQ29udHJvbGxlcjsKfSgpOwoKZXhwb3J0cy5FZGl0b3JDb250cm9sbGVyID0gRWRpdG9yQ29udHJvbGxlcjs="},null]}