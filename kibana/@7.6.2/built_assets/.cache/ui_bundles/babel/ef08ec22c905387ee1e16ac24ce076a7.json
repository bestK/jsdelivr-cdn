{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/beats_management/public/lib/adapters/rest_api/axios_rest_api_adapter.js","dependencies":[{"path":"x-pack/legacy/plugins/beats_management/public/lib/adapters/rest_api/axios_rest_api_adapter.js","mtime":1585205043206},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkF4aW9zUmVzdEFQSUFkYXB0ZXIgPSB2b2lkIDA7Cgp2YXIgX2F4aW9zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJheGlvcyIpKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCnZhciBnbG9iYWxBUEk7Cgp2YXIgQXhpb3NSZXN0QVBJQWRhcHRlciA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEF4aW9zUmVzdEFQSUFkYXB0ZXIoeHNyZlRva2VuLCBiYXNlUGF0aCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEF4aW9zUmVzdEFQSUFkYXB0ZXIpOwoKICAgIHRoaXMueHNyZlRva2VuID0geHNyZlRva2VuOwogICAgdGhpcy5iYXNlUGF0aCA9IGJhc2VQYXRoOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEF4aW9zUmVzdEFQSUFkYXB0ZXIsIFt7CiAgICBrZXk6ICJnZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldCh1cmwsIHF1ZXJ5KSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gZ2V0JChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHRoaXMuUkVTVC5nZXQodXJsLCBxdWVyeSA/IHsKICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnkKICAgICAgICAgICAgICB9IDoge30pLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXNwLmRhdGE7CiAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0LnNlbnQpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBudWxsLCB0aGlzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwb3N0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0KHVybCwgYm9keSkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIHBvc3QkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHRoaXMuUkVTVC5wb3N0KHVybCwgYm9keSkudGhlbihmdW5jdGlvbiAocmVzcCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3AuZGF0YTsKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0Mi5zZW50KTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIHRoaXMpOwogICAgfQogIH0sIHsKICAgIGtleTogImRlbGV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZSh1cmwpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBfZGVsZXRlJChfY29udGV4dDMpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh0aGlzLlJFU1QuZGVsZXRlKHVybCkudGhlbihmdW5jdGlvbiAocmVzcCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3AuZGF0YTsKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0My5zZW50KTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIG51bGwsIHRoaXMpOwogICAgfQogIH0sIHsKICAgIGtleTogInB1dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHV0KHVybCwgYm9keSkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIHB1dCQoX2NvbnRleHQ0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAodGhpcy5SRVNULnB1dCh1cmwsIGJvZHkpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXNwLmRhdGE7CiAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDQuc2VudCk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBudWxsLCB0aGlzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJSRVNUIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICBpZiAoZ2xvYmFsQVBJKSB7CiAgICAgICAgcmV0dXJuIGdsb2JhbEFQSTsKICAgICAgfQoKICAgICAgZ2xvYmFsQVBJID0gX2F4aW9zLmRlZmF1bHQuY3JlYXRlKHsKICAgICAgICBiYXNlVVJMOiB0aGlzLmJhc2VQYXRoLAogICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZSwKICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJywKICAgICAgICB0aW1lb3V0OiAzMDAwMCwKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLAogICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICdrYm4tdmVyc2lvbic6IHRoaXMueHNyZlRva2VuLAogICAgICAgICAgJ2tibi14c3JmJzogdGhpcy54c3JmVG9rZW4KICAgICAgICB9CiAgICAgIH0pOyAvLyBBZGQgYSByZXF1ZXN0IGludGVyY2VwdG9yCgogICAgICBnbG9iYWxBUEkuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKGZ1bmN0aW9uIChjb25maWcpIHsKICAgICAgICAvLyBEbyBzb21ldGhpbmcgYmVmb3JlIHJlcXVlc3QgaXMgc2VudAogICAgICAgIHJldHVybiBjb25maWc7CiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIC8vIERvIHNvbWV0aGluZyB3aXRoIHJlcXVlc3QgZXJyb3IKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwogICAgICB9KTsgLy8gQWRkIGEgcmVzcG9uc2UgaW50ZXJjZXB0b3IKCiAgICAgIGdsb2JhbEFQSS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIC8vIERvIHNvbWV0aGluZyB3aXRoIHJlc3BvbnNlIGRhdGEKICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIC8vIERvIHNvbWV0aGluZyB3aXRoIHJlc3BvbnNlIGVycm9yCiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBnbG9iYWxBUEk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQXhpb3NSZXN0QVBJQWRhcHRlcjsKfSgpOwoKZXhwb3J0cy5BeGlvc1Jlc3RBUElBZGFwdGVyID0gQXhpb3NSZXN0QVBJQWRhcHRlcjs="},null]}