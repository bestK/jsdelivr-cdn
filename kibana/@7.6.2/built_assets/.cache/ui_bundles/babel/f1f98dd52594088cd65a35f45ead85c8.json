{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/spaces/public/management/legacy_page_routes.js","dependencies":[{"path":"x-pack/legacy/plugins/spaces/public/management/legacy_page_routes.js","mtime":1585205048311},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF90ZW1wbGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicGx1Z2lucy9zcGFjZXMvbWFuYWdlbWVudC90ZW1wbGF0ZS5odG1sIikpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgicmVhY3QtZG9tIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJ1aS9pMThuIik7Cgp2YXIgX3JvdXRlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgidWkvcm91dGVzIikpOwoKdmFyIF9icmVhZGNydW1icyA9IHJlcXVpcmUoInVpL21hbmFnZW1lbnQvYnJlYWRjcnVtYnMiKTsKCnZhciBfbmV3X3BsYXRmb3JtID0gcmVxdWlyZSgidWkvbmV3X3BsYXRmb3JtIik7Cgp2YXIgX2VkaXRfc3BhY2UgPSByZXF1aXJlKCIuL2VkaXRfc3BhY2UiKTsKCnZhciBfc3BhY2VzX2dyaWQgPSByZXF1aXJlKCIuL3NwYWNlc19ncmlkIik7Cgp2YXIgX2xlZ2FjeSA9IHJlcXVpcmUoIi4uL2xlZ2FjeSIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9Cgp2YXIgcmVhY3RSb290Tm9kZUlkID0gJ21hbmFnZVNwYWNlc1JlYWN0Um9vdCc7CgpmdW5jdGlvbiBnZXRMaXN0QnJlYWRjcnVtYnMoKSB7CiAgcmV0dXJuIFtfYnJlYWRjcnVtYnMuTUFOQUdFTUVOVF9CUkVBRENSVU1CLCB7CiAgICB0ZXh0OiAnU3BhY2VzJywKICAgIGhyZWY6ICcjL21hbmFnZW1lbnQvc3BhY2VzL2xpc3QnCiAgfV07Cn0KCmZ1bmN0aW9uIGdldENyZWF0ZUJyZWFkY3J1bWJzKCkgewogIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGdldExpc3RCcmVhZGNydW1icygpKSwgW3sKICAgIHRleHQ6ICdDcmVhdGUnCiAgfV0pOwp9CgpmdW5jdGlvbiBnZXRFZGl0QnJlYWRjcnVtYnMoc3BhY2UpIHsKICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShnZXRMaXN0QnJlYWRjcnVtYnMoKSksIFt7CiAgICB0ZXh0OiBzcGFjZSA/IHNwYWNlLm5hbWUgOiAnLi4uJwogIH1dKTsKfQoKX3JvdXRlcy5kZWZhdWx0LndoZW4oJy9tYW5hZ2VtZW50L3NwYWNlcy9saXN0JywgewogIHRlbXBsYXRlOiBfdGVtcGxhdGUuZGVmYXVsdCwKICBrN0JyZWFkY3J1bWJzOiBnZXRMaXN0QnJlYWRjcnVtYnMsCiAgcmVxdWlyZVVJQ2FwYWJpbGl0eTogJ21hbmFnZW1lbnQua2liYW5hLnNwYWNlcycsCiAgY29udHJvbGxlcjogZnVuY3Rpb24gY29udHJvbGxlcigkc2NvcGUpIHsKICAgICRzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24gKCkgewogICAgICB2YXIgZG9tTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHJlYWN0Um9vdE5vZGVJZCk7CiAgICAgIHZhciBzcGFjZXNNYW5hZ2VyID0gX2xlZ2FjeS5zdGFydC5zcGFjZXNNYW5hZ2VyOwogICAgICAoMCwgX3JlYWN0RG9tLnJlbmRlcikoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaTE4bi5JMThuQ29udGV4dCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc3BhY2VzX2dyaWQuU3BhY2VzR3JpZFBhZ2UsIHsKICAgICAgICBzcGFjZXNNYW5hZ2VyOiBzcGFjZXNNYW5hZ2VyLAogICAgICAgIGNhcGFiaWxpdGllczogX25ld19wbGF0Zm9ybS5ucFN0YXJ0LmNvcmUuYXBwbGljYXRpb24uY2FwYWJpbGl0aWVzCiAgICAgIH0pKSwgZG9tTm9kZSk7IC8vIHVubW91bnQgcmVhY3Qgb24gY29udHJvbGxlciBkZXN0cm95CgogICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoZG9tTm9kZSkgewogICAgICAgICAgKDAsIF9yZWFjdERvbS51bm1vdW50Q29tcG9uZW50QXROb2RlKShkb21Ob2RlKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CiAgfQp9KTsKCl9yb3V0ZXMuZGVmYXVsdC53aGVuKCcvbWFuYWdlbWVudC9zcGFjZXMvY3JlYXRlJywgewogIHRlbXBsYXRlOiBfdGVtcGxhdGUuZGVmYXVsdCwKICBrN0JyZWFkY3J1bWJzOiBnZXRDcmVhdGVCcmVhZGNydW1icywKICByZXF1aXJlVUlDYXBhYmlsaXR5OiAnbWFuYWdlbWVudC5raWJhbmEuc3BhY2VzJywKICBjb250cm9sbGVyOiBmdW5jdGlvbiBjb250cm9sbGVyKCRzY29wZSkgewogICAgJHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBkb21Ob2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocmVhY3RSb290Tm9kZUlkKTsKICAgICAgdmFyIHNwYWNlc01hbmFnZXIgPSBfbGVnYWN5LnN0YXJ0LnNwYWNlc01hbmFnZXI7CiAgICAgICgwLCBfcmVhY3REb20ucmVuZGVyKShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9pMThuLkkxOG5Db250ZXh0LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9lZGl0X3NwYWNlLk1hbmFnZVNwYWNlUGFnZSwgewogICAgICAgIHNwYWNlc01hbmFnZXI6IHNwYWNlc01hbmFnZXIsCiAgICAgICAgY2FwYWJpbGl0aWVzOiBfbmV3X3BsYXRmb3JtLm5wU3RhcnQuY29yZS5hcHBsaWNhdGlvbi5jYXBhYmlsaXRpZXMKICAgICAgfSkpLCBkb21Ob2RlKTsgLy8gdW5tb3VudCByZWFjdCBvbiBjb250cm9sbGVyIGRlc3Ryb3kKCiAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkgewogICAgICAgIGlmIChkb21Ob2RlKSB7CiAgICAgICAgICAoMCwgX3JlYWN0RG9tLnVubW91bnRDb21wb25lbnRBdE5vZGUpKGRvbU5vZGUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9KTsKICB9Cn0pOwoKX3JvdXRlcy5kZWZhdWx0LndoZW4oJy9tYW5hZ2VtZW50L3NwYWNlcy9lZGl0JywgewogIHJlZGlyZWN0VG86ICcvbWFuYWdlbWVudC9zcGFjZXMvbGlzdCcKfSk7Cgpfcm91dGVzLmRlZmF1bHQud2hlbignL21hbmFnZW1lbnQvc3BhY2VzL2VkaXQvOnNwYWNlSWQnLCB7CiAgdGVtcGxhdGU6IF90ZW1wbGF0ZS5kZWZhdWx0LAogIGs3QnJlYWRjcnVtYnM6IGZ1bmN0aW9uIGs3QnJlYWRjcnVtYnMoKSB7CiAgICByZXR1cm4gZ2V0RWRpdEJyZWFkY3J1bWJzKCk7CiAgfSwKICByZXF1aXJlVUlDYXBhYmlsaXR5OiAnbWFuYWdlbWVudC5raWJhbmEuc3BhY2VzJywKICBjb250cm9sbGVyOiBmdW5jdGlvbiBjb250cm9sbGVyKCRzY29wZSwgJHJvdXRlKSB7CiAgICAkc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBkb21Ob2RlLCBzcGFjZUlkLCBfcmVmLCBzcGFjZXNNYW5hZ2VyOwoKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hc3luYyhmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBkb21Ob2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocmVhY3RSb290Tm9kZUlkKTsKICAgICAgICAgICAgICBzcGFjZUlkID0gJHJvdXRlLmN1cnJlbnQucGFyYW1zLnNwYWNlSWQ7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChfbGVnYWN5LnN0YXJ0KTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBfcmVmID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBzcGFjZXNNYW5hZ2VyID0gX3JlZi5zcGFjZXNNYW5hZ2VyOwogICAgICAgICAgICAgICgwLCBfcmVhY3REb20ucmVuZGVyKShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9pMThuLkkxOG5Db250ZXh0LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9lZGl0X3NwYWNlLk1hbmFnZVNwYWNlUGFnZSwgewogICAgICAgICAgICAgICAgc3BhY2VJZDogc3BhY2VJZCwKICAgICAgICAgICAgICAgIHNwYWNlc01hbmFnZXI6IHNwYWNlc01hbmFnZXIsCiAgICAgICAgICAgICAgICBvbkxvYWRTcGFjZTogZnVuY3Rpb24gb25Mb2FkU3BhY2Uoc3BhY2UpIHsKICAgICAgICAgICAgICAgICAgX25ld19wbGF0Zm9ybS5ucFN0YXJ0LmNvcmUuY2hyb21lLnNldEJyZWFkY3J1bWJzKGdldEVkaXRCcmVhZGNydW1icyhzcGFjZSkpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGNhcGFiaWxpdGllczogX25ld19wbGF0Zm9ybS5ucFN0YXJ0LmNvcmUuYXBwbGljYXRpb24uY2FwYWJpbGl0aWVzCiAgICAgICAgICAgICAgfSkpLCBkb21Ob2RlKTsgLy8gdW5tb3VudCByZWFjdCBvbiBjb250cm9sbGVyIGRlc3Ryb3kKCiAgICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAoZG9tTm9kZSkgewogICAgICAgICAgICAgICAgICAoMCwgX3JlYWN0RG9tLnVubW91bnRDb21wb25lbnRBdE5vZGUpKGRvbU5vZGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogIH0KfSk7"},null]}