{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/data/public/ui/filter_bar/filter_editor/index.js","dependencies":[{"path":"src/plugins/data/public/ui/filter_bar/filter_editor/index.js","mtime":1585205041595},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuRmlsdGVyRWRpdG9yID0gdm9pZCAwOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9yZWFjdCA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9sb2Rhc2ggPSByZXF1aXJlKCJsb2Rhc2giKTsKCnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2dlbmVyaWNfY29tYm9fYm94ID0gcmVxdWlyZSgiLi9nZW5lcmljX2NvbWJvX2JveCIpOwoKdmFyIF9maWx0ZXJfZWRpdG9yX3V0aWxzID0gcmVxdWlyZSgiLi9saWIvZmlsdGVyX2VkaXRvcl91dGlscyIpOwoKdmFyIF9waHJhc2VfdmFsdWVfaW5wdXQgPSByZXF1aXJlKCIuL3BocmFzZV92YWx1ZV9pbnB1dCIpOwoKdmFyIF9waHJhc2VzX3ZhbHVlc19pbnB1dCA9IHJlcXVpcmUoIi4vcGhyYXNlc192YWx1ZXNfaW5wdXQiKTsKCnZhciBfcmFuZ2VfdmFsdWVfaW5wdXQgPSByZXF1aXJlKCIuL3JhbmdlX3ZhbHVlX2lucHV0Iik7Cgp2YXIgXyA9IHJlcXVpcmUoIi4uLy4uLy4uIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsKICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7CiAgICByZXR1cm4gY2FsbDsKICB9CgogIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOwp9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOwogIH07CiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsKfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7CiAgaWYgKHNlbGYgPT09IHZvaWQgMCkgewogICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsKICB9CgogIHJldHVybiBzZWxmOwp9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsKICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsKICB9CgogIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IHsKICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9CiAgfSk7CiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7Cn0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgICBvLl9fcHJvdG9fXyA9IHA7CiAgICByZXR1cm4gbzsKICB9OwoKICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIEZpbHRlckVkaXRvclVJID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0NvbXBvbmVudCkgewogIF9pbmhlcml0cyhGaWx0ZXJFZGl0b3JVSSwgX0NvbXBvbmVudCk7CgogIGZ1bmN0aW9uIEZpbHRlckVkaXRvclVJKHByb3BzKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbHRlckVkaXRvclVJKTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihGaWx0ZXJFZGl0b3JVSSkuY2FsbCh0aGlzLCBwcm9wcykpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInRvZ2dsZUN1c3RvbUVkaXRvciIsIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGlzQ3VzdG9tRWRpdG9yT3BlbiA9ICFfdGhpcy5zdGF0ZS5pc0N1c3RvbUVkaXRvck9wZW47CgogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgaXNDdXN0b21FZGl0b3JPcGVuOiBpc0N1c3RvbUVkaXRvck9wZW4KICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbkluZGV4UGF0dGVybkNoYW5nZSIsIGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDEpLAogICAgICAgICAgc2VsZWN0ZWRJbmRleFBhdHRlcm4gPSBfcmVmMlswXTsKCiAgICAgIHZhciBzZWxlY3RlZEZpZWxkID0gdW5kZWZpbmVkOwogICAgICB2YXIgc2VsZWN0ZWRPcGVyYXRvciA9IHVuZGVmaW5lZDsKICAgICAgdmFyIHBhcmFtcyA9IHVuZGVmaW5lZDsKCiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBzZWxlY3RlZEluZGV4UGF0dGVybjogc2VsZWN0ZWRJbmRleFBhdHRlcm4sCiAgICAgICAgc2VsZWN0ZWRGaWVsZDogc2VsZWN0ZWRGaWVsZCwKICAgICAgICBzZWxlY3RlZE9wZXJhdG9yOiBzZWxlY3RlZE9wZXJhdG9yLAogICAgICAgIHBhcmFtczogcGFyYW1zCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25GaWVsZENoYW5nZSIsIGZ1bmN0aW9uIChfcmVmMykgewogICAgICB2YXIgX3JlZjQgPSBfc2xpY2VkVG9BcnJheShfcmVmMywgMSksCiAgICAgICAgICBzZWxlY3RlZEZpZWxkID0gX3JlZjRbMF07CgogICAgICB2YXIgc2VsZWN0ZWRPcGVyYXRvciA9IHVuZGVmaW5lZDsKICAgICAgdmFyIHBhcmFtcyA9IHVuZGVmaW5lZDsKCiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBzZWxlY3RlZEZpZWxkOiBzZWxlY3RlZEZpZWxkLAogICAgICAgIHNlbGVjdGVkT3BlcmF0b3I6IHNlbGVjdGVkT3BlcmF0b3IsCiAgICAgICAgcGFyYW1zOiBwYXJhbXMKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbk9wZXJhdG9yQ2hhbmdlIiwgZnVuY3Rpb24gKF9yZWY1KSB7CiAgICAgIHZhciBfcmVmNiA9IF9zbGljZWRUb0FycmF5KF9yZWY1LCAxKSwKICAgICAgICAgIHNlbGVjdGVkT3BlcmF0b3IgPSBfcmVmNlswXTsgLy8gT25seSByZXNldCBwYXJhbXMgd2hlbiB0aGUgb3BlcmF0b3IgdHlwZSBjaGFuZ2VzCgoKICAgICAgdmFyIHBhcmFtcyA9ICgwLCBfbG9kYXNoLmdldCkoX3RoaXMuc3RhdGUuc2VsZWN0ZWRPcGVyYXRvciwgJ3R5cGUnKSA9PT0gKDAsIF9sb2Rhc2guZ2V0KShzZWxlY3RlZE9wZXJhdG9yLCAndHlwZScpID8gX3RoaXMuc3RhdGUucGFyYW1zIDogdW5kZWZpbmVkOwoKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIHNlbGVjdGVkT3BlcmF0b3I6IHNlbGVjdGVkT3BlcmF0b3IsCiAgICAgICAgcGFyYW1zOiBwYXJhbXMKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbkN1c3RvbUxhYmVsU3dpdGNoQ2hhbmdlIiwgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIHZhciB1c2VDdXN0b21MYWJlbCA9IGV2ZW50LnRhcmdldC5jaGVja2VkOwogICAgICB2YXIgY3VzdG9tTGFiZWwgPSBldmVudC50YXJnZXQuY2hlY2tlZCA/ICcnIDogbnVsbDsKCiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICB1c2VDdXN0b21MYWJlbDogdXNlQ3VzdG9tTGFiZWwsCiAgICAgICAgY3VzdG9tTGFiZWw6IGN1c3RvbUxhYmVsCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25DdXN0b21MYWJlbENoYW5nZSIsIGZ1bmN0aW9uIChldmVudCkgewogICAgICB2YXIgY3VzdG9tTGFiZWwgPSBldmVudC50YXJnZXQudmFsdWU7CgogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgY3VzdG9tTGFiZWw6IGN1c3RvbUxhYmVsCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25QYXJhbXNDaGFuZ2UiLCBmdW5jdGlvbiAocGFyYW1zKSB7CiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBwYXJhbXM6IHBhcmFtcwogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uUXVlcnlEc2xDaGFuZ2UiLCBmdW5jdGlvbiAocXVlcnlEc2wpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIHF1ZXJ5RHNsOiBxdWVyeURzbAogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uU3VibWl0IiwgZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3RoaXMkc3RhdGUgPSBfdGhpcy5zdGF0ZSwKICAgICAgICAgIGluZGV4UGF0dGVybiA9IF90aGlzJHN0YXRlLnNlbGVjdGVkSW5kZXhQYXR0ZXJuLAogICAgICAgICAgZmllbGQgPSBfdGhpcyRzdGF0ZS5zZWxlY3RlZEZpZWxkLAogICAgICAgICAgb3BlcmF0b3IgPSBfdGhpcyRzdGF0ZS5zZWxlY3RlZE9wZXJhdG9yLAogICAgICAgICAgcGFyYW1zID0gX3RoaXMkc3RhdGUucGFyYW1zLAogICAgICAgICAgdXNlQ3VzdG9tTGFiZWwgPSBfdGhpcyRzdGF0ZS51c2VDdXN0b21MYWJlbCwKICAgICAgICAgIGN1c3RvbUxhYmVsID0gX3RoaXMkc3RhdGUuY3VzdG9tTGFiZWwsCiAgICAgICAgICBpc0N1c3RvbUVkaXRvck9wZW4gPSBfdGhpcyRzdGF0ZS5pc0N1c3RvbUVkaXRvck9wZW4sCiAgICAgICAgICBxdWVyeURzbCA9IF90aGlzJHN0YXRlLnF1ZXJ5RHNsOwogICAgICB2YXIgJHN0YXRlID0gX3RoaXMucHJvcHMuZmlsdGVyLiRzdGF0ZTsKCiAgICAgIGlmICghJHN0YXRlIHx8ICEkc3RhdGUuc3RvcmUpIHsKICAgICAgICByZXR1cm47IC8vIHR5cGVzY3JpcHQgdmFsaWRhdGlvbgogICAgICB9CgogICAgICB2YXIgYWxpYXMgPSB1c2VDdXN0b21MYWJlbCA/IGN1c3RvbUxhYmVsIDogbnVsbDsKCiAgICAgIGlmIChpc0N1c3RvbUVkaXRvck9wZW4pIHsKICAgICAgICB2YXIgX3RoaXMkcHJvcHMkZmlsdGVyJG1lID0gX3RoaXMucHJvcHMuZmlsdGVyLm1ldGEsCiAgICAgICAgICAgIGluZGV4ID0gX3RoaXMkcHJvcHMkZmlsdGVyJG1lLmluZGV4LAogICAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzJGZpbHRlciRtZS5kaXNhYmxlZCwKICAgICAgICAgICAgbmVnYXRlID0gX3RoaXMkcHJvcHMkZmlsdGVyJG1lLm5lZ2F0ZTsKICAgICAgICB2YXIgbmV3SW5kZXggPSBpbmRleCB8fCBfdGhpcy5wcm9wcy5pbmRleFBhdHRlcm5zWzBdLmlkOwogICAgICAgIHZhciBib2R5ID0gSlNPTi5wYXJzZShxdWVyeURzbCk7CgogICAgICAgIHZhciBfZmlsdGVyID0gXy5lc0ZpbHRlcnMuYnVpbGRDdXN0b21GaWx0ZXIobmV3SW5kZXgsIGJvZHksIGRpc2FibGVkLCBuZWdhdGUsIGFsaWFzLCAkc3RhdGUuc3RvcmUpOwoKICAgICAgICBfdGhpcy5wcm9wcy5vblN1Ym1pdChfZmlsdGVyKTsKICAgICAgfSBlbHNlIGlmIChpbmRleFBhdHRlcm4gJiYgZmllbGQgJiYgb3BlcmF0b3IpIHsKICAgICAgICB2YXIgX2ZpbHRlcjIgPSBfLmVzRmlsdGVycy5idWlsZEZpbHRlcihpbmRleFBhdHRlcm4sIGZpZWxkLCBvcGVyYXRvci50eXBlLCBvcGVyYXRvci5uZWdhdGUsIF90aGlzLnByb3BzLmZpbHRlci5tZXRhLmRpc2FibGVkLCBwYXJhbXMsIGFsaWFzLCAkc3RhdGUuc3RvcmUpOwoKICAgICAgICBfdGhpcy5wcm9wcy5vblN1Ym1pdChfZmlsdGVyMik7CiAgICAgIH0KICAgIH0pOwoKICAgIF90aGlzLnN0YXRlID0gewogICAgICBzZWxlY3RlZEluZGV4UGF0dGVybjogX3RoaXMuZ2V0SW5kZXhQYXR0ZXJuRnJvbUZpbHRlcigpLAogICAgICBzZWxlY3RlZEZpZWxkOiBfdGhpcy5nZXRGaWVsZEZyb21GaWx0ZXIoKSwKICAgICAgc2VsZWN0ZWRPcGVyYXRvcjogX3RoaXMuZ2V0U2VsZWN0ZWRPcGVyYXRvcigpLAogICAgICBwYXJhbXM6IF8uZXNGaWx0ZXJzLmdldEZpbHRlclBhcmFtcyhwcm9wcy5maWx0ZXIpLAogICAgICB1c2VDdXN0b21MYWJlbDogcHJvcHMuZmlsdGVyLm1ldGEuYWxpYXMgIT09IG51bGwsCiAgICAgIGN1c3RvbUxhYmVsOiBwcm9wcy5maWx0ZXIubWV0YS5hbGlhcywKICAgICAgcXVlcnlEc2w6IEpTT04uc3RyaW5naWZ5KF8uZXNGaWx0ZXJzLmNsZWFuRmlsdGVyKHByb3BzLmZpbHRlciksIG51bGwsIDIpLAogICAgICBpc0N1c3RvbUVkaXRvck9wZW46IF90aGlzLmlzVW5rbm93bkZpbHRlclR5cGUoKQogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhGaWx0ZXJFZGl0b3JVSSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUG9wb3ZlclRpdGxlLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICAgIGFsaWduSXRlbXM6ICJiYXNlbGluZSIsCiAgICAgICAgcmVzcG9uc2l2ZTogZmFsc2UKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogImRhdGEuZmlsdGVyLmZpbHRlckVkaXRvci5lZGl0RmlsdGVyUG9wdXBUaXRsZSIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJFZGl0IGZpbHRlciIKICAgICAgfSkpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25FbXB0eSwgewogICAgICAgIHNpemU6ICJ4cyIsCiAgICAgICAgb25DbGljazogdGhpcy50b2dnbGVDdXN0b21FZGl0b3IKICAgICAgfSwgdGhpcy5zdGF0ZS5pc0N1c3RvbUVkaXRvck9wZW4gPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAiZGF0YS5maWx0ZXIuZmlsdGVyRWRpdG9yLmVkaXRGaWx0ZXJWYWx1ZXNCdXR0b25MYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJFZGl0IGZpbHRlciB2YWx1ZXMiCiAgICAgIH0pIDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogImRhdGEuZmlsdGVyLmZpbHRlckVkaXRvci5lZGl0UXVlcnlEc2xCdXR0b25MYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJFZGl0IGFzIFF1ZXJ5IERTTCIKICAgICAgfSkpKSkpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICAgIGNsYXNzTmFtZTogImdsb2JhbEZpbHRlckl0ZW1fX2VkaXRvckZvcm0iCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybSwgbnVsbCwgdGhpcy5yZW5kZXJJbmRleFBhdHRlcm5JbnB1dCgpLCB0aGlzLnN0YXRlLmlzQ3VzdG9tRWRpdG9yT3BlbiA/IHRoaXMucmVuZGVyQ3VzdG9tRWRpdG9yKCkgOiB0aGlzLnJlbmRlclJlZ3VsYXJFZGl0b3IoKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibSIKICAgICAgfSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3dpdGNoLCB7CiAgICAgICAgaWQ6ICJmaWx0ZXJFZGl0b3JDdXN0b21MYWJlbFN3aXRjaCIsCiAgICAgICAgbGFiZWw6IHRoaXMucHJvcHMuaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICAgIGlkOiAnZGF0YS5maWx0ZXIuZmlsdGVyRWRpdG9yLmNyZWF0ZUN1c3RvbUxhYmVsU3dpdGNoTGFiZWwnLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDcmVhdGUgY3VzdG9tIGxhYmVsPycKICAgICAgICB9KSwKICAgICAgICBjaGVja2VkOiB0aGlzLnN0YXRlLnVzZUN1c3RvbUxhYmVsLAogICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ3VzdG9tTGFiZWxTd2l0Y2hDaGFuZ2UKICAgICAgfSksIHRoaXMuc3RhdGUudXNlQ3VzdG9tTGFiZWwgJiYgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgICAgc2l6ZTogIm0iCiAgICAgIH0pLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogdGhpcy5wcm9wcy5pbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgICAgaWQ6ICdkYXRhLmZpbHRlci5maWx0ZXJFZGl0b3IuY3JlYXRlQ3VzdG9tTGFiZWxJbnB1dExhYmVsJywKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ3VzdG9tIGxhYmVsJwogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmllbGRUZXh0LCB7CiAgICAgICAgdmFsdWU6ICIiLmNvbmNhdCh0aGlzLnN0YXRlLmN1c3RvbUxhYmVsKSwKICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkN1c3RvbUxhYmVsQ2hhbmdlCiAgICAgIH0pKSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgICAgc2l6ZTogIm0iCiAgICAgIH0pLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICAgIGRpcmVjdGlvbjogInJvd1JldmVyc2UiLAogICAgICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiLAogICAgICAgIHJlc3BvbnNpdmU6IGZhbHNlCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbiwgewogICAgICAgIGZpbGw6IHRydWUsCiAgICAgICAgb25DbGljazogdGhpcy5vblN1Ym1pdCwKICAgICAgICBpc0Rpc2FibGVkOiAhdGhpcy5pc0ZpbHRlclZhbGlkKCksCiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInNhdmVGaWx0ZXIiCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJkYXRhLmZpbHRlci5maWx0ZXJFZGl0b3Iuc2F2ZUJ1dHRvbkxhYmVsIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlNhdmUiCiAgICAgIH0pKSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkVtcHR5LCB7CiAgICAgICAgZmx1c2g6ICJyaWdodCIsCiAgICAgICAgb25DbGljazogdGhpcy5wcm9wcy5vbkNhbmNlbCwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiY2FuY2VsU2F2ZUZpbHRlciIKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogImRhdGEuZmlsdGVyLmZpbHRlckVkaXRvci5jYW5jZWxCdXR0b25MYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJDYW5jZWwiCiAgICAgIH0pKSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwpKSkpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXJJbmRleFBhdHRlcm5JbnB1dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVySW5kZXhQYXR0ZXJuSW5wdXQoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMucHJvcHMuaW5kZXhQYXR0ZXJucy5sZW5ndGggPD0gMSAmJiB0aGlzLnByb3BzLmluZGV4UGF0dGVybnMuZmluZChmdW5jdGlvbiAoaW5kZXhQYXR0ZXJuKSB7CiAgICAgICAgcmV0dXJuIGluZGV4UGF0dGVybiA9PT0gX3RoaXMyLnN0YXRlLnNlbGVjdGVkSW5kZXhQYXR0ZXJuOwogICAgICB9KSkgewogICAgICAgIHJldHVybiAnJzsKICAgICAgfQoKICAgICAgdmFyIHNlbGVjdGVkSW5kZXhQYXR0ZXJuID0gdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4UGF0dGVybjsKICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogdGhpcy5wcm9wcy5pbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgICAgaWQ6ICdkYXRhLmZpbHRlci5maWx0ZXJFZGl0b3IuaW5kZXhQYXR0ZXJuU2VsZWN0TGFiZWwnLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdJbmRleCBQYXR0ZXJuJwogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEluZGV4UGF0dGVybkNvbWJvQm94LCB7CiAgICAgICAgcGxhY2Vob2xkZXI6IHRoaXMucHJvcHMuaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICAgIGlkOiAnZGF0YS5maWx0ZXIuZmlsdGVyQmFyLmluZGV4UGF0dGVyblNlbGVjdFBsYWNlaG9sZGVyJywKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2VsZWN0IGFuIGluZGV4IHBhdHRlcm4nCiAgICAgICAgfSksCiAgICAgICAgb3B0aW9uczogdGhpcy5wcm9wcy5pbmRleFBhdHRlcm5zLAogICAgICAgIHNlbGVjdGVkT3B0aW9uczogc2VsZWN0ZWRJbmRleFBhdHRlcm4gPyBbc2VsZWN0ZWRJbmRleFBhdHRlcm5dIDogW10sCiAgICAgICAgZ2V0TGFiZWw6IGZ1bmN0aW9uIGdldExhYmVsKGluZGV4UGF0dGVybikgewogICAgICAgICAgcmV0dXJuIGluZGV4UGF0dGVybi50aXRsZTsKICAgICAgICB9LAogICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uSW5kZXhQYXR0ZXJuQ2hhbmdlLAogICAgICAgIHNpbmdsZVNlbGVjdGlvbjogewogICAgICAgICAgYXNQbGFpblRleHQ6IHRydWUKICAgICAgICB9LAogICAgICAgIGlzQ2xlYXJhYmxlOiBmYWxzZSwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiZmlsdGVySW5kZXhQYXR0ZXJuc1NlbGVjdCIKICAgICAgfSkpKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyUmVndWxhckVkaXRvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyUmVndWxhckVkaXRvcigpIHsKICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICAgIHJlc3BvbnNpdmU6IGZhbHNlLAogICAgICAgIGd1dHRlclNpemU6ICJzIgogICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogMgogICAgICB9LCB0aGlzLnJlbmRlckZpZWxkSW5wdXQoKSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZSwKICAgICAgICBzdHlsZTogewogICAgICAgICAgZmxleEJhc2lzOiAxNjAKICAgICAgICB9CiAgICAgIH0sIHRoaXMucmVuZGVyT3BlcmF0b3JJbnB1dCgpKSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgICAgc2l6ZTogInMiCiAgICAgIH0pLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJmaWx0ZXJQYXJhbXMiCiAgICAgIH0sIHRoaXMucmVuZGVyUGFyYW1zRWRpdG9yKCkpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXJGaWVsZElucHV0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJGaWVsZElucHV0KCkgewogICAgICB2YXIgX3RoaXMkc3RhdGUyID0gdGhpcy5zdGF0ZSwKICAgICAgICAgIHNlbGVjdGVkSW5kZXhQYXR0ZXJuID0gX3RoaXMkc3RhdGUyLnNlbGVjdGVkSW5kZXhQYXR0ZXJuLAogICAgICAgICAgc2VsZWN0ZWRGaWVsZCA9IF90aGlzJHN0YXRlMi5zZWxlY3RlZEZpZWxkOwogICAgICB2YXIgZmllbGRzID0gc2VsZWN0ZWRJbmRleFBhdHRlcm4gPyAoMCwgX2ZpbHRlcl9lZGl0b3JfdXRpbHMuZ2V0RmlsdGVyYWJsZUZpZWxkcykoc2VsZWN0ZWRJbmRleFBhdHRlcm4pIDogW107CiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogdGhpcy5wcm9wcy5pbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgICAgaWQ6ICdkYXRhLmZpbHRlci5maWx0ZXJFZGl0b3IuZmllbGRTZWxlY3RMYWJlbCcsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0ZpZWxkJwogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEZpZWxkQ29tYm9Cb3gsIHsKICAgICAgICBpZDogImZpZWxkSW5wdXQiLAogICAgICAgIGlzRGlzYWJsZWQ6ICFzZWxlY3RlZEluZGV4UGF0dGVybiwKICAgICAgICBwbGFjZWhvbGRlcjogdGhpcy5wcm9wcy5pbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgICAgaWQ6ICdkYXRhLmZpbHRlci5maWx0ZXJFZGl0b3IuZmllbGRTZWxlY3RQbGFjZWhvbGRlcicsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1NlbGVjdCBhIGZpZWxkIGZpcnN0JwogICAgICAgIH0pLAogICAgICAgIG9wdGlvbnM6IGZpZWxkcywKICAgICAgICBzZWxlY3RlZE9wdGlvbnM6IHNlbGVjdGVkRmllbGQgPyBbc2VsZWN0ZWRGaWVsZF0gOiBbXSwKICAgICAgICBnZXRMYWJlbDogZnVuY3Rpb24gZ2V0TGFiZWwoZmllbGQpIHsKICAgICAgICAgIHJldHVybiBmaWVsZC5uYW1lOwogICAgICAgIH0sCiAgICAgICAgb25DaGFuZ2U6IHRoaXMub25GaWVsZENoYW5nZSwKICAgICAgICBzaW5nbGVTZWxlY3Rpb246IHsKICAgICAgICAgIGFzUGxhaW5UZXh0OiB0cnVlCiAgICAgICAgfSwKICAgICAgICBpc0NsZWFyYWJsZTogZmFsc2UsCiAgICAgICAgY2xhc3NOYW1lOiAiZ2xvYmFsRmlsdGVyRWRpdG9yX19maWVsZElucHV0IiwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiZmlsdGVyRmllbGRTdWdnZXN0aW9uTGlzdCIKICAgICAgfSkpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlck9wZXJhdG9ySW5wdXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlck9wZXJhdG9ySW5wdXQoKSB7CiAgICAgIHZhciBfdGhpcyRzdGF0ZTMgPSB0aGlzLnN0YXRlLAogICAgICAgICAgc2VsZWN0ZWRGaWVsZCA9IF90aGlzJHN0YXRlMy5zZWxlY3RlZEZpZWxkLAogICAgICAgICAgc2VsZWN0ZWRPcGVyYXRvciA9IF90aGlzJHN0YXRlMy5zZWxlY3RlZE9wZXJhdG9yOwogICAgICB2YXIgb3BlcmF0b3JzID0gc2VsZWN0ZWRGaWVsZCA/ICgwLCBfZmlsdGVyX2VkaXRvcl91dGlscy5nZXRPcGVyYXRvck9wdGlvbnMpKHNlbGVjdGVkRmllbGQpIDogW107CiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogdGhpcy5wcm9wcy5pbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgICAgaWQ6ICdkYXRhLmZpbHRlci5maWx0ZXJFZGl0b3Iub3BlcmF0b3JTZWxlY3RMYWJlbCcsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ09wZXJhdG9yJwogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE9wZXJhdG9yQ29tYm9Cb3gsIHsKICAgICAgICBpc0Rpc2FibGVkOiAhc2VsZWN0ZWRGaWVsZCwKICAgICAgICBwbGFjZWhvbGRlcjogc2VsZWN0ZWRGaWVsZCA/IHRoaXMucHJvcHMuaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICAgIGlkOiAnZGF0YS5maWx0ZXIuZmlsdGVyRWRpdG9yLm9wZXJhdG9yU2VsZWN0UGxhY2Vob2xkZXJTZWxlY3QnLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdTZWxlY3QnCiAgICAgICAgfSkgOiB0aGlzLnByb3BzLmludGwuZm9ybWF0TWVzc2FnZSh7CiAgICAgICAgICBpZDogJ2RhdGEuZmlsdGVyLmZpbHRlckVkaXRvci5vcGVyYXRvclNlbGVjdFBsYWNlaG9sZGVyV2FpdGluZycsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1dhaXRpbmcnCiAgICAgICAgfSksCiAgICAgICAgb3B0aW9uczogb3BlcmF0b3JzLAogICAgICAgIHNlbGVjdGVkT3B0aW9uczogc2VsZWN0ZWRPcGVyYXRvciA/IFtzZWxlY3RlZE9wZXJhdG9yXSA6IFtdLAogICAgICAgIGdldExhYmVsOiBmdW5jdGlvbiBnZXRMYWJlbChfcmVmNykgewogICAgICAgICAgdmFyIG1lc3NhZ2UgPSBfcmVmNy5tZXNzYWdlOwogICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7CiAgICAgICAgfSwKICAgICAgICBvbkNoYW5nZTogdGhpcy5vbk9wZXJhdG9yQ2hhbmdlLAogICAgICAgIHNpbmdsZVNlbGVjdGlvbjogewogICAgICAgICAgYXNQbGFpblRleHQ6IHRydWUKICAgICAgICB9LAogICAgICAgIGlzQ2xlYXJhYmxlOiBmYWxzZSwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiZmlsdGVyT3BlcmF0b3JMaXN0IgogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyQ3VzdG9tRWRpdG9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJDdXN0b21FZGl0b3IoKSB7CiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2RhdGEuZmlsdGVyLmZpbHRlckVkaXRvci5xdWVyeURzbExhYmVsJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdFbGFzdGljc2VhcmNoIFF1ZXJ5IERTTCcKICAgICAgICB9KQogICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvZGVFZGl0b3IsIHsKICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5xdWVyeURzbCwKICAgICAgICBvbkNoYW5nZTogdGhpcy5vblF1ZXJ5RHNsQ2hhbmdlLAogICAgICAgIG1vZGU6ICJqc29uIiwKICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgIGhlaWdodDogIjI1MHB4IgogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyUGFyYW1zRWRpdG9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJQYXJhbXNFZGl0b3IoKSB7CiAgICAgIHZhciBpbmRleFBhdHRlcm4gPSB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXhQYXR0ZXJuOwoKICAgICAgaWYgKCFpbmRleFBhdHRlcm4gfHwgIXRoaXMuc3RhdGUuc2VsZWN0ZWRPcGVyYXRvcikgewogICAgICAgIHJldHVybiAnJzsKICAgICAgfQoKICAgICAgc3dpdGNoICh0aGlzLnN0YXRlLnNlbGVjdGVkT3BlcmF0b3IudHlwZSkgewogICAgICAgIGNhc2UgJ2V4aXN0cyc6CiAgICAgICAgICByZXR1cm4gJyc7CgogICAgICAgIGNhc2UgJ3BocmFzZSc6CiAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3BocmFzZV92YWx1ZV9pbnB1dC5QaHJhc2VWYWx1ZUlucHV0LCB7CiAgICAgICAgICAgIGluZGV4UGF0dGVybjogaW5kZXhQYXR0ZXJuLAogICAgICAgICAgICBmaWVsZDogdGhpcy5zdGF0ZS5zZWxlY3RlZEZpZWxkLAogICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5wYXJhbXMsCiAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uUGFyYW1zQ2hhbmdlLAogICAgICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAicGhyYXNlVmFsdWVJbnB1dCIKICAgICAgICAgIH0pOwoKICAgICAgICBjYXNlICdwaHJhc2VzJzoKICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcGhyYXNlc192YWx1ZXNfaW5wdXQuUGhyYXNlc1ZhbHVlc0lucHV0LCB7CiAgICAgICAgICAgIGluZGV4UGF0dGVybjogaW5kZXhQYXR0ZXJuLAogICAgICAgICAgICBmaWVsZDogdGhpcy5zdGF0ZS5zZWxlY3RlZEZpZWxkLAogICAgICAgICAgICB2YWx1ZXM6IHRoaXMuc3RhdGUucGFyYW1zLAogICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5vblBhcmFtc0NoYW5nZQogICAgICAgICAgfSk7CgogICAgICAgIGNhc2UgJ3JhbmdlJzoKICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmFuZ2VfdmFsdWVfaW5wdXQuUmFuZ2VWYWx1ZUlucHV0LCB7CiAgICAgICAgICAgIGZpZWxkOiB0aGlzLnN0YXRlLnNlbGVjdGVkRmllbGQsCiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnBhcmFtcywKICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMub25QYXJhbXNDaGFuZ2UKICAgICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNVbmtub3duRmlsdGVyVHlwZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNVbmtub3duRmlsdGVyVHlwZSgpIHsKICAgICAgdmFyIHR5cGUgPSB0aGlzLnByb3BzLmZpbHRlci5tZXRhLnR5cGU7CiAgICAgIHJldHVybiAhIXR5cGUgJiYgIVsncGhyYXNlJywgJ3BocmFzZXMnLCAncmFuZ2UnLCAnZXhpc3RzJ10uaW5jbHVkZXModHlwZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0SW5kZXhQYXR0ZXJuRnJvbUZpbHRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5kZXhQYXR0ZXJuRnJvbUZpbHRlcigpIHsKICAgICAgcmV0dXJuIF8uZXNGaWx0ZXJzLmdldEluZGV4UGF0dGVybkZyb21GaWx0ZXIodGhpcy5wcm9wcy5maWx0ZXIsIHRoaXMucHJvcHMuaW5kZXhQYXR0ZXJucyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0RmllbGRGcm9tRmlsdGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaWVsZEZyb21GaWx0ZXIoKSB7CiAgICAgIHZhciBpbmRleFBhdHRlcm4gPSB0aGlzLmdldEluZGV4UGF0dGVybkZyb21GaWx0ZXIoKTsKICAgICAgcmV0dXJuIGluZGV4UGF0dGVybiAmJiAoMCwgX2ZpbHRlcl9lZGl0b3JfdXRpbHMuZ2V0RmllbGRGcm9tRmlsdGVyKSh0aGlzLnByb3BzLmZpbHRlciwgaW5kZXhQYXR0ZXJuKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRTZWxlY3RlZE9wZXJhdG9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWxlY3RlZE9wZXJhdG9yKCkgewogICAgICByZXR1cm4gKDAsIF9maWx0ZXJfZWRpdG9yX3V0aWxzLmdldE9wZXJhdG9yRnJvbUZpbHRlcikodGhpcy5wcm9wcy5maWx0ZXIpOwogICAgfQogIH0sIHsKICAgIGtleTogImlzRmlsdGVyVmFsaWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzRmlsdGVyVmFsaWQoKSB7CiAgICAgIHZhciBfdGhpcyRzdGF0ZTQgPSB0aGlzLnN0YXRlLAogICAgICAgICAgaXNDdXN0b21FZGl0b3JPcGVuID0gX3RoaXMkc3RhdGU0LmlzQ3VzdG9tRWRpdG9yT3BlbiwKICAgICAgICAgIHF1ZXJ5RHNsID0gX3RoaXMkc3RhdGU0LnF1ZXJ5RHNsLAogICAgICAgICAgaW5kZXhQYXR0ZXJuID0gX3RoaXMkc3RhdGU0LnNlbGVjdGVkSW5kZXhQYXR0ZXJuLAogICAgICAgICAgZmllbGQgPSBfdGhpcyRzdGF0ZTQuc2VsZWN0ZWRGaWVsZCwKICAgICAgICAgIG9wZXJhdG9yID0gX3RoaXMkc3RhdGU0LnNlbGVjdGVkT3BlcmF0b3IsCiAgICAgICAgICBwYXJhbXMgPSBfdGhpcyRzdGF0ZTQucGFyYW1zOwoKICAgICAgaWYgKGlzQ3VzdG9tRWRpdG9yT3BlbikgewogICAgICAgIHRyeSB7CiAgICAgICAgICByZXR1cm4gQm9vbGVhbihKU09OLnBhcnNlKHF1ZXJ5RHNsKSk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuICgwLCBfZmlsdGVyX2VkaXRvcl91dGlscy5pc0ZpbHRlclZhbGlkKShpbmRleFBhdHRlcm4sIGZpZWxkLCBvcGVyYXRvciwgcGFyYW1zKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBGaWx0ZXJFZGl0b3JVSTsKfShfcmVhY3QyLkNvbXBvbmVudCk7CgpmdW5jdGlvbiBJbmRleFBhdHRlcm5Db21ib0JveChwcm9wcykgewogIHJldHVybiAoMCwgX2dlbmVyaWNfY29tYm9fYm94LkdlbmVyaWNDb21ib0JveCkocHJvcHMpOwp9CgpmdW5jdGlvbiBGaWVsZENvbWJvQm94KHByb3BzKSB7CiAgcmV0dXJuICgwLCBfZ2VuZXJpY19jb21ib19ib3guR2VuZXJpY0NvbWJvQm94KShwcm9wcyk7Cn0KCmZ1bmN0aW9uIE9wZXJhdG9yQ29tYm9Cb3gocHJvcHMpIHsKICByZXR1cm4gKDAsIF9nZW5lcmljX2NvbWJvX2JveC5HZW5lcmljQ29tYm9Cb3gpKHByb3BzKTsKfQoKdmFyIEZpbHRlckVkaXRvciA9ICgwLCBfcmVhY3QuaW5qZWN0STE4bikoRmlsdGVyRWRpdG9yVUkpOwpleHBvcnRzLkZpbHRlckVkaXRvciA9IEZpbHRlckVkaXRvcjs="},null]}