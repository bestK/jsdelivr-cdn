{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/connected_components/layer_panel/join_editor/resources/join_expression.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/connected_components/layer_panel/join_editor/resources/join_expression.js","mtime":1585205045253},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkpvaW5FeHByZXNzaW9uID0gdm9pZCAwOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJwcm9wLXR5cGVzIikpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9zaW5nbGVfZmllbGRfc2VsZWN0ID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vY29tcG9uZW50cy9zaW5nbGVfZmllbGRfc2VsZWN0Iik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9pbmRleF9wYXR0ZXJuX3V0aWwgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9pbmRleF9wYXR0ZXJuX3V0aWwiKTsKCnZhciBfa2liYW5hX3NlcnZpY2VzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4va2liYW5hX3NlcnZpY2VzIik7Cgp2YXIgX25ld19wbGF0Zm9ybSA9IHJlcXVpcmUoInVpL25ld19wbGF0Zm9ybSIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvcGx1Z2lucy9kYXRhL3B1YmxpYyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgSW5kZXhQYXR0ZXJuU2VsZWN0ID0gX25ld19wbGF0Zm9ybS5ucFN0YXJ0LnBsdWdpbnMuZGF0YS51aS5JbmRleFBhdHRlcm5TZWxlY3Q7Cgp2YXIgSm9pbkV4cHJlc3Npb24gPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKEpvaW5FeHByZXNzaW9uLCBfQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gSm9pbkV4cHJlc3Npb24oKSB7CiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjsKCiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEpvaW5FeHByZXNzaW9uKTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKEpvaW5FeHByZXNzaW9uKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic3RhdGUiLCB7CiAgICAgIGlzUG9wb3Zlck9wZW46IGZhbHNlCiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfdG9nZ2xlUG9wb3ZlciIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBpc1BvcG92ZXJPcGVuOiAhcHJldlN0YXRlLmlzUG9wb3Zlck9wZW4KICAgICAgICB9OwogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIl9jbG9zZVBvcG92ZXIiLCBmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBpc1BvcG92ZXJPcGVuOiBmYWxzZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIl9vblJpZ2h0U291cmNlQ2hhbmdlIiwgZnVuY3Rpb24gX2NhbGxlZShpbmRleFBhdHRlcm5JZCkgewogICAgICB2YXIgaW5kZXhQYXR0ZXJuOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoX2tpYmFuYV9zZXJ2aWNlcy5pbmRleFBhdHRlcm5TZXJ2aWNlLmdldChpbmRleFBhdHRlcm5JZCkpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGluZGV4UGF0dGVybiA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uUmlnaHRTb3VyY2VDaGFuZ2UoewogICAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJuSWQ6IGluZGV4UGF0dGVybklkLAogICAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJuVGl0bGU6IGluZGV4UGF0dGVybi50aXRsZQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNzsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwoKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBudWxsLCBudWxsLCBbWzAsIDddXSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfb25MZWZ0RmllbGRDaGFuZ2UiLCBmdW5jdGlvbiAoc2VsZWN0ZWRGaWVsZHMpIHsKICAgICAgX3RoaXMucHJvcHMub25MZWZ0RmllbGRDaGFuZ2UoX2xvZGFzaC5kZWZhdWx0LmdldChzZWxlY3RlZEZpZWxkcywgJ1swXS52YWx1ZS5uYW1lJywgbnVsbCkpOwogICAgfSk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEpvaW5FeHByZXNzaW9uLCBbewogICAga2V5OiAiX3JlbmRlckxlZnRGaWVsZFNlbGVjdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbmRlckxlZnRGaWVsZFNlbGVjdCgpIHsKICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcywKICAgICAgICAgIGxlZnRWYWx1ZSA9IF90aGlzJHByb3BzLmxlZnRWYWx1ZSwKICAgICAgICAgIGxlZnRGaWVsZHMgPSBfdGhpcyRwcm9wcy5sZWZ0RmllbGRzOwoKICAgICAgaWYgKCFsZWZ0RmllbGRzKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHZhciBvcHRpb25zID0gbGVmdEZpZWxkcy5tYXAoZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHZhbHVlOiBmaWVsZCwKICAgICAgICAgIGxhYmVsOiBmaWVsZC5sYWJlbAogICAgICAgIH07CiAgICAgIH0pOwogICAgICB2YXIgbGVmdEZpZWxkT3B0aW9uOwoKICAgICAgaWYgKGxlZnRWYWx1ZSkgewogICAgICAgIGxlZnRGaWVsZE9wdGlvbiA9IG9wdGlvbnMuZmluZChmdW5jdGlvbiAob3B0aW9uKSB7CiAgICAgICAgICB2YXIgZmllbGQgPSBvcHRpb24udmFsdWU7CiAgICAgICAgICByZXR1cm4gZmllbGQubmFtZSA9PT0gbGVmdFZhbHVlOwogICAgICAgIH0pOwogICAgICB9CgogICAgICB2YXIgc2VsZWN0ZWRPcHRpb25zID0gbGVmdEZpZWxkT3B0aW9uID8gW2xlZnRGaWVsZE9wdGlvbl0gOiBbXTsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICAgICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLmxheWVyUGFuZWwuam9pbkV4cHJlc3Npb24ubGVmdEZpZWxkTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0xlZnQgZmllbGQnCiAgICAgICAgfSksCiAgICAgICAgaGVscFRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLmxheWVyUGFuZWwuam9pbkV4cHJlc3Npb24ubGVmdFNvdXJjZUxhYmVsSGVscFRleHQnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0xlZnQgc291cmNlIGZpZWxkIHRoYXQgY29udGFpbnMgdGhlIHNoYXJlZCBrZXkuJwogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDb21ib0JveCwgewogICAgICAgIHBsYWNlaG9sZGVyOiBnZXRTZWxlY3RGaWVsZFBsYWNlaG9sZGVyKCksCiAgICAgICAgc2luZ2xlU2VsZWN0aW9uOiB0cnVlLAogICAgICAgIGlzQ2xlYXJhYmxlOiBmYWxzZSwKICAgICAgICBvcHRpb25zOiBvcHRpb25zLAogICAgICAgIHNlbGVjdGVkT3B0aW9uczogc2VsZWN0ZWRPcHRpb25zLAogICAgICAgIG9uQ2hhbmdlOiB0aGlzLl9vbkxlZnRGaWVsZENoYW5nZQogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3JlbmRlclJpZ2h0U291cmNlU2VsZWN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuZGVyUmlnaHRTb3VyY2VTZWxlY3QoKSB7CiAgICAgIGlmICghdGhpcy5wcm9wcy5sZWZ0VmFsdWUpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICAgICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLmxheWVyUGFuZWwuam9pbkV4cHJlc3Npb24ucmlnaHRTb3VyY2VMYWJlbCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUmlnaHQgc291cmNlJwogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSW5kZXhQYXR0ZXJuU2VsZWN0LCB7CiAgICAgICAgcGxhY2Vob2xkZXI6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLmxheWVyUGFuZWwuam9pbkV4cHJlc3Npb24uc2VsZWN0SW5kZXhQYXR0ZXJuUGxhY2Vob2xkZXInLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1NlbGVjdCBpbmRleCBwYXR0ZXJuJwogICAgICAgIH0pLAogICAgICAgIGluZGV4UGF0dGVybklkOiB0aGlzLnByb3BzLnJpZ2h0U291cmNlSW5kZXhQYXR0ZXJuSWQsCiAgICAgICAgb25DaGFuZ2U6IHRoaXMuX29uUmlnaHRTb3VyY2VDaGFuZ2UsCiAgICAgICAgaXNDbGVhcmFibGU6IGZhbHNlCiAgICAgIH0pKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfcmVuZGVyUmlnaHRGaWVsZFNlbGVjdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbmRlclJpZ2h0RmllbGRTZWxlY3QoKSB7CiAgICAgIGlmICghdGhpcy5wcm9wcy5yaWdodEZpZWxkcyB8fCAhdGhpcy5wcm9wcy5sZWZ0VmFsdWUpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgdmFyIGZpbHRlclN0cmluZ09yTnVtYmVyRmllbGRzID0gZnVuY3Rpb24gZmlsdGVyU3RyaW5nT3JOdW1iZXJGaWVsZHMoZmllbGQpIHsKICAgICAgICByZXR1cm4gZmllbGQudHlwZSA9PT0gJ3N0cmluZycgJiYgISgwLCBfcHVibGljLmlzTmVzdGVkRmllbGQpKGZpZWxkKSB8fCBmaWVsZC50eXBlID09PSAnbnVtYmVyJzsKICAgICAgfTsKCiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5sYXllclBhbmVsLmpvaW5FeHByZXNzaW9uLnJpZ2h0RmllbGRMYWJlbCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUmlnaHQgZmllbGQnCiAgICAgICAgfSksCiAgICAgICAgaGVscFRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLmxheWVyUGFuZWwuam9pbkV4cHJlc3Npb24ucmlnaHRTb3VyY2VMYWJlbEhlbHBUZXh0JywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdSaWdodCBzb3VyY2UgZmllbGQgdGhhdCBjb250YWlucyB0aGUgc2hhcmVkIGtleS4nCiAgICAgICAgfSkKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc2luZ2xlX2ZpZWxkX3NlbGVjdC5TaW5nbGVGaWVsZFNlbGVjdCwgewogICAgICAgIHBsYWNlaG9sZGVyOiBnZXRTZWxlY3RGaWVsZFBsYWNlaG9sZGVyKCksCiAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMucmlnaHRWYWx1ZSwKICAgICAgICBvbkNoYW5nZTogdGhpcy5wcm9wcy5vblJpZ2h0RmllbGRDaGFuZ2UsCiAgICAgICAgZmlsdGVyRmllbGQ6IGZpbHRlclN0cmluZ09yTnVtYmVyRmllbGRzLAogICAgICAgIGZpZWxkczogKDAsIF9pbmRleF9wYXR0ZXJuX3V0aWwuZ2V0VGVybXNGaWVsZHMpKHRoaXMucHJvcHMucmlnaHRGaWVsZHMpLAogICAgICAgIGlzQ2xlYXJhYmxlOiBmYWxzZQogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2dldEV4cHJlc3Npb25WYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEV4cHJlc3Npb25WYWx1ZSgpIHsKICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsCiAgICAgICAgICBsZWZ0U291cmNlTmFtZSA9IF90aGlzJHByb3BzMi5sZWZ0U291cmNlTmFtZSwKICAgICAgICAgIGxlZnRWYWx1ZSA9IF90aGlzJHByb3BzMi5sZWZ0VmFsdWUsCiAgICAgICAgICByaWdodFNvdXJjZU5hbWUgPSBfdGhpcyRwcm9wczIucmlnaHRTb3VyY2VOYW1lLAogICAgICAgICAgcmlnaHRWYWx1ZSA9IF90aGlzJHByb3BzMi5yaWdodFZhbHVlOwoKICAgICAgaWYgKGxlZnRTb3VyY2VOYW1lICYmIGxlZnRWYWx1ZSAmJiByaWdodFNvdXJjZU5hbWUgJiYgcmlnaHRWYWx1ZSkgewogICAgICAgIHJldHVybiAiIi5jb25jYXQobGVmdFNvdXJjZU5hbWUsICI6IikuY29uY2F0KGxlZnRWYWx1ZSwgIiB3aXRoICIpLmNvbmNhdChyaWdodFNvdXJjZU5hbWUsICI6IikuY29uY2F0KHJpZ2h0VmFsdWUpOwogICAgICB9CgogICAgICByZXR1cm4gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMubGF5ZXJQYW5lbC5qb2luRXhwcmVzc2lvbi5zZWxlY3RQbGFjZWhvbGRlcicsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJy0tIHNlbGVjdCAtLScKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBsZWZ0U291cmNlTmFtZSA9IHRoaXMucHJvcHMubGVmdFNvdXJjZU5hbWU7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUG9wb3ZlciwgewogICAgICAgIGlkOiAiam9pblBvcG92ZXIiLAogICAgICAgIGlzT3BlbjogdGhpcy5zdGF0ZS5pc1BvcG92ZXJPcGVuLAogICAgICAgIGNsb3NlUG9wb3ZlcjogdGhpcy5fY2xvc2VQb3BvdmVyLAogICAgICAgIG93bkZvY3VzOiB0cnVlLAogICAgICAgIGluaXRpYWxGb2N1czogImJvZHkiCiAgICAgICAgLyogYXZvaWQgaW5pdGlhbEZvY3VzIG9uIENvbWJvYm94ICovCiAgICAgICAgLAogICAgICAgIHdpdGhUaXRsZTogdHJ1ZSwKICAgICAgICBhbmNob3JQb3NpdGlvbjogImxlZnRDZW50ZXIiLAogICAgICAgIGJ1dHRvbjogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUV4cHJlc3Npb24sIHsKICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuX3RvZ2dsZVBvcG92ZXIsCiAgICAgICAgICBkZXNjcmlwdGlvbjogIkpvaW4iLAogICAgICAgICAgdXBwZXJjYXNlOiBmYWxzZSwKICAgICAgICAgIHZhbHVlOiB0aGlzLl9nZXRFeHByZXNzaW9uVmFsdWUoKQogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICBzdHlsZTogewogICAgICAgICAgd2lkdGg6IDMwMAogICAgICAgIH0KICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBvcG92ZXJUaXRsZSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLm1hcHMubGF5ZXJQYW5lbC5qb2luRXhwcmVzc2lvbi5qb2luUG9wb3ZlclRpdGxlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkpvaW4iCiAgICAgIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1IZWxwVGV4dCwgewogICAgICAgIGNsYXNzTmFtZTogIm1hcEpvaW5FeHByZXNzaW9uSGVscFRleHQiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5tYXBzLmxheWVyUGFuZWwuam9pbkV4cHJlc3Npb24uaGVscFRleHQiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQ29uZmlndXJlIHRoZSBzaGFyZWQga2V5LiIKICAgICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5sYXllclBhbmVsLmpvaW5FeHByZXNzaW9uLmxlZnRTb3VyY2VMYWJlbCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTGVmdCBzb3VyY2UnCiAgICAgICAgfSkKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbWJvQm94LCB7CiAgICAgICAgc2VsZWN0ZWRPcHRpb25zOiBbewogICAgICAgICAgdmFsdWU6IGxlZnRTb3VyY2VOYW1lLAogICAgICAgICAgbGFiZWw6IGxlZnRTb3VyY2VOYW1lCiAgICAgICAgfV0sCiAgICAgICAgaXNEaXNhYmxlZDogdHJ1ZQogICAgICB9KSksIHRoaXMuX3JlbmRlckxlZnRGaWVsZFNlbGVjdCgpLCB0aGlzLl9yZW5kZXJSaWdodFNvdXJjZVNlbGVjdCgpLCB0aGlzLl9yZW5kZXJSaWdodEZpZWxkU2VsZWN0KCkpKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBKb2luRXhwcmVzc2lvbjsKfShfcmVhY3QuQ29tcG9uZW50KTsKCmV4cG9ydHMuSm9pbkV4cHJlc3Npb24gPSBKb2luRXhwcmVzc2lvbjsKSm9pbkV4cHJlc3Npb24ucHJvcFR5cGVzID0gewogIC8vIExlZnQgc291cmNlIHByb3BzIChzdGF0aWMgLSBjYW4gbm90IGNoYW5nZSkKICBsZWZ0U291cmNlTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywKICAvLyBMZWZ0IGZpZWxkIHByb3BzCiAgbGVmdFZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLAogIGxlZnRGaWVsZHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7CiAgICBsYWJlbDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLAogICAgbmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkCiAgfSkpLAogIG9uTGVmdEZpZWxkQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLAogIC8vIFJpZ2h0IHNvdXJjZSBwcm9wcwogIHJpZ2h0U291cmNlSW5kZXhQYXR0ZXJuSWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsCiAgcmlnaHRTb3VyY2VOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLAogIG9uUmlnaHRTb3VyY2VDaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgLy8gUmlnaHQgZmllbGQgcHJvcHMKICByaWdodFZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLAogIHJpZ2h0RmllbGRzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXksCiAgb25SaWdodEZpZWxkQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkCn07CgpmdW5jdGlvbiBnZXRTZWxlY3RGaWVsZFBsYWNlaG9sZGVyKCkgewogIHJldHVybiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5sYXllclBhbmVsLmpvaW5FeHByZXNzaW9uLnNlbGVjdEZpZWxkUGxhY2Vob2xkZXInLCB7CiAgICBkZWZhdWx0TWVzc2FnZTogJ1NlbGVjdCBmaWVsZCcKICB9KTsKfQ=="},null]}