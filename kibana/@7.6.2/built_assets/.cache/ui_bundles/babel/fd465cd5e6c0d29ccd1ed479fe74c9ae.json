{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/visualizations/public/np_ready/public/legacy/update_status.js","dependencies":[{"path":"src/legacy/core_plugins/visualizations/public/np_ready/public/legacy/update_status.js","mtime":1585205040499},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmdldFVwZGF0ZVN0YXR1cyA9IGdldFVwZGF0ZVN0YXR1czsKZXhwb3J0cy5TdGF0dXMgPSB2b2lkIDA7Cgp2YXIgX2NhbGN1bGF0ZV9vYmplY3RfaGFzaCA9IHJlcXVpcmUoIi4vY2FsY3VsYXRlX29iamVjdF9oYXNoIik7Ci8qCiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvcgogKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aAogKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodAogKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyCiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOyB5b3UgbWF5CiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLAogKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbgogKiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkKICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlCiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMKICogdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwoKCnZhciBTdGF0dXM7Ci8qKgogKiBDaGVja3Mgd2hldGhlciB0aGUgaGFzaCBvZiBhIHNwZWNpZmljIGtleSBpbiB0aGUgZ2l2ZW4gb2xkU3RhdHVzIGhhcyBjaGFuZ2VkCiAqIGNvbXBhcmVkIHRvIHRoZSBuZXcgdmFsdWVIYXNoIHBhc3NlZC4KICovCgpleHBvcnRzLlN0YXR1cyA9IFN0YXR1czsKCihmdW5jdGlvbiAoU3RhdHVzKSB7CiAgU3RhdHVzWyJBR0dTIl0gPSAiYWdncyI7CiAgU3RhdHVzWyJEQVRBIl0gPSAiZGF0YSI7CiAgU3RhdHVzWyJQQVJBTVMiXSA9ICJwYXJhbXMiOwogIFN0YXR1c1siUkVTSVpFIl0gPSAicmVzaXplIjsKICBTdGF0dXNbIlRJTUUiXSA9ICJ0aW1lIjsKICBTdGF0dXNbIlVJX1NUQVRFIl0gPSAidWlTdGF0ZSI7Cn0pKFN0YXR1cyB8fCAoZXhwb3J0cy5TdGF0dXMgPSBTdGF0dXMgPSB7fSkpOwoKZnVuY3Rpb24gaGFzSGFzaENoYW5nZWQodmFsdWVIYXNoLCBvbGRTdGF0dXMsIG5hbWUpIHsKICB2YXIgb2xkSGFzaCA9IG9sZFN0YXR1c1tuYW1lXTsKICByZXR1cm4gb2xkSGFzaCAhPT0gdmFsdWVIYXNoOwp9CgpmdW5jdGlvbiBoYXNTaXplQ2hhbmdlZChzaXplLCBvbGRTaXplKSB7CiAgaWYgKCFvbGRTaXplKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIHJldHVybiBvbGRTaXplLndpZHRoICE9PSBzaXplLndpZHRoIHx8IG9sZFNpemUuaGVpZ2h0ICE9PSBzaXplLmhlaWdodDsKfQoKZnVuY3Rpb24gZ2V0VXBkYXRlU3RhdHVzKCkgewogIHZhciByZXF1aXJlc1VwZGF0ZVN0YXR1cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107CiAgdmFyIG9iaiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkOwogIHZhciBwYXJhbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkOwogIHZhciBzdGF0dXMgPSB7fTsgLy8gSWYgdGhlIHZpcyB0eXBlIGRvZXNuJ3QgbmVlZCB1cGRhdGUgc3RhdHVzLCBza2lwIGFsbCBjYWxjdWxhdGlvbnMKCiAgaWYgKHJlcXVpcmVzVXBkYXRlU3RhdHVzLmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuIHN0YXR1czsKICB9CgogIGlmICghb2JqLl9vbGRTdGF0dXMpIHsKICAgIG9iai5fb2xkU3RhdHVzID0ge307CiAgfQoKICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7CiAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7CiAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gcmVxdWlyZXNVcGRhdGVTdGF0dXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7CiAgICAgIHZhciByZXF1aXJlZFN0YXR1cyA9IF9zdGVwLnZhbHVlOwogICAgICB2YXIgaGFzaCA9IHZvaWQgMDsgLy8gQ2FsY3VsYXRlIGFsbCByZXF1aXJlZCBzdGF0dXMgdXBkYXRlcyBmb3IgdGhpcyB2aXN1YWxpemF0aW9uCgogICAgICBzd2l0Y2ggKHJlcXVpcmVkU3RhdHVzKSB7CiAgICAgICAgY2FzZSBTdGF0dXMuQUdHUzoKICAgICAgICAgIGhhc2ggPSAoMCwgX2NhbGN1bGF0ZV9vYmplY3RfaGFzaC5jYWxjdWxhdGVPYmplY3RIYXNoKShwYXJhbS52aXMuYWdncyk7CiAgICAgICAgICBzdGF0dXMuYWdncyA9IGhhc0hhc2hDaGFuZ2VkKGhhc2gsIG9iai5fb2xkU3RhdHVzLCAnYWdncycpOwogICAgICAgICAgb2JqLl9vbGRTdGF0dXMuYWdncyA9IGhhc2g7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBTdGF0dXMuREFUQToKICAgICAgICAgIGhhc2ggPSAoMCwgX2NhbGN1bGF0ZV9vYmplY3RfaGFzaC5jYWxjdWxhdGVPYmplY3RIYXNoKShwYXJhbS52aXNEYXRhKTsKICAgICAgICAgIHN0YXR1cy5kYXRhID0gaGFzSGFzaENoYW5nZWQoaGFzaCwgb2JqLl9vbGRTdGF0dXMsICdkYXRhJyk7CiAgICAgICAgICBvYmouX29sZFN0YXR1cy5kYXRhID0gaGFzaDsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIFN0YXR1cy5QQVJBTVM6CiAgICAgICAgICBoYXNoID0gKDAsIF9jYWxjdWxhdGVfb2JqZWN0X2hhc2guY2FsY3VsYXRlT2JqZWN0SGFzaCkocGFyYW0udmlzLnBhcmFtcyk7CiAgICAgICAgICBzdGF0dXMucGFyYW1zID0gaGFzSGFzaENoYW5nZWQoaGFzaCwgb2JqLl9vbGRTdGF0dXMsICdwYXJhbScpOwogICAgICAgICAgb2JqLl9vbGRTdGF0dXMucGFyYW0gPSBoYXNoOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgU3RhdHVzLlJFU0laRToKICAgICAgICAgIHZhciB3aWR0aCA9IHBhcmFtLnZpcy5zaXplID8gcGFyYW0udmlzLnNpemVbMF0gOiAwOwogICAgICAgICAgdmFyIGhlaWdodCA9IHBhcmFtLnZpcy5zaXplID8gcGFyYW0udmlzLnNpemVbMV0gOiAwOwogICAgICAgICAgdmFyIHNpemUgPSB7CiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCwKICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQKICAgICAgICAgIH07CiAgICAgICAgICBzdGF0dXMucmVzaXplID0gaGFzU2l6ZUNoYW5nZWQoc2l6ZSwgb2JqLl9vbGRTdGF0dXMucmVzaXplKTsKICAgICAgICAgIG9iai5fb2xkU3RhdHVzLnJlc2l6ZSA9IHNpemU7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBTdGF0dXMuVElNRToKICAgICAgICAgIHZhciB0aW1lUmFuZ2UgPSBwYXJhbS52aXMuZmlsdGVycyAmJiBwYXJhbS52aXMuZmlsdGVycy50aW1lUmFuZ2U7CiAgICAgICAgICBoYXNoID0gKDAsIF9jYWxjdWxhdGVfb2JqZWN0X2hhc2guY2FsY3VsYXRlT2JqZWN0SGFzaCkodGltZVJhbmdlKTsKICAgICAgICAgIHN0YXR1cy50aW1lID0gaGFzSGFzaENoYW5nZWQoaGFzaCwgb2JqLl9vbGRTdGF0dXMsICd0aW1lJyk7CiAgICAgICAgICBvYmouX29sZFN0YXR1cy50aW1lID0gaGFzaDsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIFN0YXR1cy5VSV9TVEFURToKICAgICAgICAgIGhhc2ggPSAoMCwgX2NhbGN1bGF0ZV9vYmplY3RfaGFzaC5jYWxjdWxhdGVPYmplY3RIYXNoKShwYXJhbS51aVN0YXRlKTsKICAgICAgICAgIHN0YXR1cy51aVN0YXRlID0gaGFzSGFzaENoYW5nZWQoaGFzaCwgb2JqLl9vbGRTdGF0dXMsICd1aVN0YXRlJyk7CiAgICAgICAgICBvYmouX29sZFN0YXR1cy51aVN0YXRlID0gaGFzaDsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7CiAgICBfaXRlcmF0b3JFcnJvciA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTsKICAgICAgfQogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7CiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBzdGF0dXM7Cn0="},null]}