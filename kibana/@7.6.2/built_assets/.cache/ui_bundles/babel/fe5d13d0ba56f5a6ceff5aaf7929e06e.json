{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/layers/sources/es_search_source/create_source_editor.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/layers/sources/es_search_source/create_source_editor.js","mtime":1585205045333},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1585205104179},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1585205115915},{"path":"node_modules/babel-loader/lib/index.js","mtime":1585205080825}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkNyZWF0ZVNvdXJjZUVkaXRvciA9IHZvaWQgMDsKCnZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJsb2Rhc2giKSk7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicHJvcC10eXBlcyIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX3NpbmdsZV9maWVsZF9zZWxlY3QgPSByZXF1aXJlKCIuLi8uLi8uLi9jb21wb25lbnRzL3NpbmdsZV9maWVsZF9zZWxlY3QiKTsKCnZhciBfa2liYW5hX3NlcnZpY2VzID0gcmVxdWlyZSgiLi4vLi4vLi4va2liYW5hX3NlcnZpY2VzIik7Cgp2YXIgX25vX2luZGV4X3BhdHRlcm5fY2FsbG91dCA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbXBvbmVudHMvbm9faW5kZXhfcGF0dGVybl9jYWxsb3V0Iik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX2tmZXRjaCA9IHJlcXVpcmUoInVpL2tmZXRjaCIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX2NvbnN0YW50czIgPSByZXF1aXJlKCIuL2NvbnN0YW50cyIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvcGx1Z2lucy9kYXRhL3B1YmxpYyIpOwoKdmFyIF9uZXdfcGxhdGZvcm0gPSByZXF1aXJlKCJ1aS9uZXdfcGxhdGZvcm0iKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgSW5kZXhQYXR0ZXJuU2VsZWN0ID0gX25ld19wbGF0Zm9ybS5ucFN0YXJ0LnBsdWdpbnMuZGF0YS51aS5JbmRleFBhdHRlcm5TZWxlY3Q7CgpmdW5jdGlvbiBmaWx0ZXJHZW9GaWVsZChmaWVsZCkgewogIHJldHVybiBbX2NvbnN0YW50cy5FU19HRU9fRklFTERfVFlQRS5HRU9fUE9JTlQsIF9jb25zdGFudHMuRVNfR0VPX0ZJRUxEX1RZUEUuR0VPX1NIQVBFXS5pbmNsdWRlcyhmaWVsZC50eXBlKTsKfQoKdmFyIFJFU0VUX0lOREVYX1BBVFRFUk5fU1RBVEUgPSB7CiAgaW5kZXhQYXR0ZXJuOiB1bmRlZmluZWQsCiAgZ2VvRmllbGQ6IHVuZGVmaW5lZCwKICBmaWx0ZXJCeU1hcEJvdW5kczogX2NvbnN0YW50czIuREVGQVVMVF9GSUxURVJfQllfTUFQX0JPVU5EUywKICBzaG93RmlsdGVyQnlCb3VuZHNTd2l0Y2g6IGZhbHNlCn07Cgp2YXIgQ3JlYXRlU291cmNlRWRpdG9yID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0NvbXBvbmVudCkgewogIF9pbmhlcml0cyhDcmVhdGVTb3VyY2VFZGl0b3IsIF9Db21wb25lbnQpOwoKICBmdW5jdGlvbiBDcmVhdGVTb3VyY2VFZGl0b3IoKSB7CiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjsKCiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENyZWF0ZVNvdXJjZUVkaXRvcik7CgogICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07CiAgICB9CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihDcmVhdGVTb3VyY2VFZGl0b3IpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzdGF0ZSIsIF9vYmplY3RTcHJlYWQoewogICAgICBpc0xvYWRpbmdJbmRleFBhdHRlcm46IGZhbHNlLAogICAgICBub0dlb0luZGV4UGF0dGVybnNFeGlzdDogZmFsc2UKICAgIH0sIFJFU0VUX0lOREVYX1BBVFRFUk5fU1RBVEUpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbkluZGV4UGF0dGVyblNlbGVjdCIsIGZ1bmN0aW9uIChpbmRleFBhdHRlcm5JZCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgaW5kZXhQYXR0ZXJuSWQ6IGluZGV4UGF0dGVybklkCiAgICAgIH0sIF90aGlzLmxvYWRJbmRleFBhdHRlcm4oaW5kZXhQYXR0ZXJuSWQpKTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImxvYWRJbmRleFBhdHRlcm4iLCBmdW5jdGlvbiAoaW5kZXhQYXR0ZXJuSWQpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoX29iamVjdFNwcmVhZCh7CiAgICAgICAgaXNMb2FkaW5nSW5kZXhQYXR0ZXJuOiB0cnVlCiAgICAgIH0sIFJFU0VUX0lOREVYX1BBVFRFUk5fU1RBVEUpLCBfdGhpcy5kZWJvdW5jZWRMb2FkLmJpbmQobnVsbCwgaW5kZXhQYXR0ZXJuSWQpKTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImxvYWRJbmRleERvY0NvdW50IiwgZnVuY3Rpb24gX2NhbGxlZShpbmRleFBhdHRlcm5UaXRsZSkgewogICAgICB2YXIgX3JlZiwgY291bnQ7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoKDAsIF9rZmV0Y2gua2ZldGNoKSh7CiAgICAgICAgICAgICAgICBwYXRobmFtZTogIi4uLyIuY29uY2F0KF9jb25zdGFudHMuR0lTX0FQSV9QQVRILCAiL2luZGV4Q291bnQiKSwKICAgICAgICAgICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleFBhdHRlcm5UaXRsZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBfcmVmID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBjb3VudCA9IF9yZWYuY291bnQ7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgY291bnQpOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImRlYm91bmNlZExvYWQiLCBfbG9kYXNoLmRlZmF1bHQuZGVib3VuY2UoZnVuY3Rpb24gX2NhbGxlZTIoaW5kZXhQYXR0ZXJuSWQpIHsKICAgICAgdmFyIGluZGV4UGF0dGVybiwgaW5kZXhIYXNTbWFsbERvY0NvdW50LCBpbmRleERvY0NvdW50LCBnZW9GaWVsZHM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGlmICghKCFpbmRleFBhdHRlcm5JZCB8fCBpbmRleFBhdHRlcm5JZC5sZW5ndGggPT09IDApKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDI7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoX2tpYmFuYV9zZXJ2aWNlcy5pbmRleFBhdHRlcm5TZXJ2aWNlLmdldChpbmRleFBhdHRlcm5JZCkpOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGluZGV4UGF0dGVybiA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA4OwogICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIGluZGV4SGFzU21hbGxEb2NDb3VudCA9IGZhbHNlOwogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTI7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNTsKICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKF90aGlzLmxvYWRJbmRleERvY0NvdW50KGluZGV4UGF0dGVybi50aXRsZSkpOwoKICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICBpbmRleERvY0NvdW50ID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgaW5kZXhIYXNTbWFsbERvY0NvdW50ID0gaW5kZXhEb2NDb3VudCA8PSBfY29uc3RhbnRzLkRFRkFVTFRfTUFYX1JFU1VMVF9XSU5ET1c7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyMTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxOTsKICAgICAgICAgICAgICBfY29udGV4dDIudDEgPSBfY29udGV4dDJbImNhdGNoIl0oMTIpOwoKICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyMzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgICBpZiAoIShpbmRleFBhdHRlcm4uaWQgIT09IGluZGV4UGF0dGVybklkKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyNTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgY2FzZSAyNToKICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICAgICAgICBpc0xvYWRpbmdJbmRleFBhdHRlcm46IGZhbHNlLAogICAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJuOiBpbmRleFBhdHRlcm4sCiAgICAgICAgICAgICAgICBmaWx0ZXJCeU1hcEJvdW5kczogIWluZGV4SGFzU21hbGxEb2NDb3VudCwKICAgICAgICAgICAgICAgIC8vIFR1cm4gb2ZmIGZpbHRlckJ5TWFwQm91bmRzIHdoZW4gaW5kZXggY29udGFpbnMgYSBsaW1pdGVkIG51bWJlciBvZiBkb2N1bWVudHMKICAgICAgICAgICAgICAgIHNob3dGaWx0ZXJCeUJvdW5kc1N3aXRjaDogaW5kZXhIYXNTbWFsbERvY0NvdW50CiAgICAgICAgICAgICAgfSk7IC8vbWFrZSBkZWZhdWx0IHNlbGVjdGlvbgoKCiAgICAgICAgICAgICAgZ2VvRmllbGRzID0gaW5kZXhQYXR0ZXJuLmZpZWxkcy5maWx0ZXIoZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gISgwLCBfcHVibGljLmlzTmVzdGVkRmllbGQpKGZpZWxkKTsKICAgICAgICAgICAgICB9KS5maWx0ZXIoZmlsdGVyR2VvRmllbGQpOwoKICAgICAgICAgICAgICBpZiAoZ2VvRmllbGRzWzBdKSB7CiAgICAgICAgICAgICAgICBfdGhpcy5vbkdlb0ZpZWxkU2VsZWN0KGdlb0ZpZWxkc1swXS5uYW1lKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICBjYXNlIDI4OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgbnVsbCwgbnVsbCwgW1syLCA4XSwgWzEyLCAxOV1dKTsKICAgIH0sIDMwMCkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uR2VvRmllbGRTZWxlY3QiLCBmdW5jdGlvbiAoZ2VvRmllbGQpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIGdlb0ZpZWxkOiBnZW9GaWVsZAogICAgICB9LCBfdGhpcy5wcmV2aWV3TGF5ZXIpOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25GaWx0ZXJCeU1hcEJvdW5kc0NoYW5nZSIsIGZ1bmN0aW9uIChldmVudCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgZmlsdGVyQnlNYXBCb3VuZHM6IGV2ZW50LnRhcmdldC5jaGVja2VkCiAgICAgIH0sIF90aGlzLnByZXZpZXdMYXllcik7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJwcmV2aWV3TGF5ZXIiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IF90aGlzLnN0YXRlLAogICAgICAgICAgaW5kZXhQYXR0ZXJuSWQgPSBfdGhpcyRzdGF0ZS5pbmRleFBhdHRlcm5JZCwKICAgICAgICAgIGdlb0ZpZWxkID0gX3RoaXMkc3RhdGUuZ2VvRmllbGQsCiAgICAgICAgICBmaWx0ZXJCeU1hcEJvdW5kcyA9IF90aGlzJHN0YXRlLmZpbHRlckJ5TWFwQm91bmRzOwogICAgICB2YXIgc291cmNlQ29uZmlnID0gaW5kZXhQYXR0ZXJuSWQgJiYgZ2VvRmllbGQgPyB7CiAgICAgICAgaW5kZXhQYXR0ZXJuSWQ6IGluZGV4UGF0dGVybklkLAogICAgICAgIGdlb0ZpZWxkOiBnZW9GaWVsZCwKICAgICAgICBmaWx0ZXJCeU1hcEJvdW5kczogZmlsdGVyQnlNYXBCb3VuZHMKICAgICAgfSA6IG51bGw7CgogICAgICBfdGhpcy5wcm9wcy5vblNvdXJjZUNvbmZpZ0NoYW5nZShzb3VyY2VDb25maWcpOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiX29uTm9JbmRleFBhdHRlcm5zIiwgZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgbm9HZW9JbmRleFBhdHRlcm5zRXhpc3Q6IHRydWUKICAgICAgfSk7CiAgICB9KTsKCiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ3JlYXRlU291cmNlRWRpdG9yLCBbewogICAga2V5OiAiY29tcG9uZW50V2lsbFVubW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkgewogICAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wb25lbnREaWRNb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7CiAgICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7CiAgICAgIHRoaXMubG9hZEluZGV4UGF0dGVybih0aGlzLnN0YXRlLmluZGV4UGF0dGVybklkKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfcmVuZGVyR2VvU2VsZWN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuZGVyR2VvU2VsZWN0KCkgewogICAgICBpZiAoIXRoaXMuc3RhdGUuaW5kZXhQYXR0ZXJuKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMuc291cmNlLmVzU2VhcmNoLmdlb2ZpZWxkTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0dlb3NwYXRpYWwgZmllbGQnCiAgICAgICAgfSkKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc2luZ2xlX2ZpZWxkX3NlbGVjdC5TaW5nbGVGaWVsZFNlbGVjdCwgewogICAgICAgIHBsYWNlaG9sZGVyOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5zb3VyY2UuZXNTZWFyY2guc2VsZWN0TGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1NlbGVjdCBnZW8gZmllbGQnCiAgICAgICAgfSksCiAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuZ2VvRmllbGQsCiAgICAgICAgb25DaGFuZ2U6IHRoaXMub25HZW9GaWVsZFNlbGVjdCwKICAgICAgICBmaWx0ZXJGaWVsZDogZmlsdGVyR2VvRmllbGQsCiAgICAgICAgZmllbGRzOiB0aGlzLnN0YXRlLmluZGV4UGF0dGVybiA/IHRoaXMuc3RhdGUuaW5kZXhQYXR0ZXJuLmZpZWxkcy5maWx0ZXIoZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgICAgICByZXR1cm4gISgwLCBfcHVibGljLmlzTmVzdGVkRmllbGQpKGZpZWxkKTsKICAgICAgICB9KSA6IHVuZGVmaW5lZAogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3JlbmRlckZpbHRlckJ5TWFwQm91bmRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuZGVyRmlsdGVyQnlNYXBCb3VuZHMoKSB7CiAgICAgIGlmICghdGhpcy5zdGF0ZS5zaG93RmlsdGVyQnlCb3VuZHNTd2l0Y2gpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ2FsbE91dCwgewogICAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5zb3VyY2UuZXNTZWFyY2guZGlzYWJsZUZpbHRlckJ5TWFwQm91bmRzVGl0bGUnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkR5bmFtaWMgZGF0YSBmaWx0ZXIgZGlzYWJsZWQiCiAgICAgICAgfSkKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5tYXBzLnNvdXJjZS5lc1NlYXJjaC5kaXNhYmxlRmlsdGVyQnlNYXBCb3VuZHNFeHBsYWluTXNnIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkluZGV4ICd7aW5kZXhQYXR0ZXJuVGl0bGV9JyBoYXMgYSBzbWFsbCBudW1iZXIgb2YgZG9jdW1lbnRzIGFuZCBkb2VzIG5vdCByZXF1aXJlIGR5bmFtaWMgZmlsdGVyaW5nLiIsCiAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICBpbmRleFBhdHRlcm5UaXRsZTogdGhpcy5zdGF0ZS5pbmRleFBhdHRlcm4gPyB0aGlzLnN0YXRlLmluZGV4UGF0dGVybi50aXRsZSA6IHRoaXMuc3RhdGUuaW5kZXhQYXR0ZXJuSWQKICAgICAgICB9CiAgICAgIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5tYXBzLnNvdXJjZS5lc1NlYXJjaC5kaXNhYmxlRmlsdGVyQnlNYXBCb3VuZHNUdXJuT25Nc2ciLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVHVybiBvbiBkeW5hbWljIGZpbHRlcmluZyBpZiB5b3UgZXhwZWN0IHRoZSBudW1iZXIgb2YgZG9jdW1lbnRzIHRvIGluY3JlYXNlLiIKICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgIHNpemU6ICJzIgogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTd2l0Y2gsIHsKICAgICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMuc291cmNlLmVzU2VhcmNoLmV4dGVudEZpbHRlckxhYmVsJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJEeW5hbWljYWxseSBmaWx0ZXIgZm9yIGRhdGEgaW4gdGhlIHZpc2libGUgbWFwIGFyZWEiCiAgICAgICAgfSksCiAgICAgICAgY2hlY2tlZDogdGhpcy5zdGF0ZS5maWx0ZXJCeU1hcEJvdW5kcywKICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkZpbHRlckJ5TWFwQm91bmRzQ2hhbmdlCiAgICAgIH0pKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3JlbmRlck5vSW5kZXhQYXR0ZXJuV2FybmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbmRlck5vSW5kZXhQYXR0ZXJuV2FybmluZygpIHsKICAgICAgaWYgKCF0aGlzLnN0YXRlLm5vR2VvSW5kZXhQYXR0ZXJuc0V4aXN0KSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfbm9faW5kZXhfcGF0dGVybl9jYWxsb3V0Lk5vSW5kZXhQYXR0ZXJuQ2FsbG91dCwgbnVsbCksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAicyIKICAgICAgfSkpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIHRoaXMuX3JlbmRlck5vSW5kZXhQYXR0ZXJuV2FybmluZygpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5zb3VyY2UuZXNTZWFyY2guaW5kZXhQYXR0ZXJuTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0luZGV4IHBhdHRlcm4nCiAgICAgICAgfSkKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChJbmRleFBhdHRlcm5TZWxlY3QsIHsKICAgICAgICBpc0Rpc2FibGVkOiB0aGlzLnN0YXRlLm5vR2VvSW5kZXhQYXR0ZXJuc0V4aXN0LAogICAgICAgIGluZGV4UGF0dGVybklkOiB0aGlzLnN0YXRlLmluZGV4UGF0dGVybklkLAogICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uSW5kZXhQYXR0ZXJuU2VsZWN0LAogICAgICAgIHBsYWNlaG9sZGVyOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5zb3VyY2UuZXNTZWFyY2guc2VsZWN0SW5kZXhQYXR0ZXJuUGxhY2Vob2xkZXInLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1NlbGVjdCBpbmRleCBwYXR0ZXJuJwogICAgICAgIH0pLAogICAgICAgIGZpZWxkVHlwZXM6IFtfY29uc3RhbnRzLkVTX0dFT19GSUVMRF9UWVBFLkdFT19QT0lOVCwgX2NvbnN0YW50cy5FU19HRU9fRklFTERfVFlQRS5HRU9fU0hBUEVdLAogICAgICAgIG9uTm9JbmRleFBhdHRlcm5zOiB0aGlzLl9vbk5vSW5kZXhQYXR0ZXJucwogICAgICB9KSksIHRoaXMuX3JlbmRlckdlb1NlbGVjdCgpLCB0aGlzLl9yZW5kZXJGaWx0ZXJCeU1hcEJvdW5kcygpKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBDcmVhdGVTb3VyY2VFZGl0b3I7Cn0oX3JlYWN0LkNvbXBvbmVudCk7CgpleHBvcnRzLkNyZWF0ZVNvdXJjZUVkaXRvciA9IENyZWF0ZVNvdXJjZUVkaXRvcjsKCl9kZWZpbmVQcm9wZXJ0eShDcmVhdGVTb3VyY2VFZGl0b3IsICJwcm9wVHlwZXMiLCB7CiAgb25Tb3VyY2VDb25maWdDaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQKfSk7"},null]}